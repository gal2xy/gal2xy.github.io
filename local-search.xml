<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>NDK开发学习笔记</title>
    <link href="/2023/12/26/NDK%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/12/26/NDK%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一、NDK项目新增内容"><a href="#一、NDK项目新增内容" class="headerlink" title="一、NDK项目新增内容"></a>一、NDK项目新增内容</h1><p>使用Android Studio直接创建一个默认的NDK项目，会发现新增了如下部分：</p><ol><li><p>多了加载本地库的代码和本地库中方法的声明代码。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312251151211.png"></p></li><li><p>在项目的main目录下多了cpp目录，包含CMakeLists.txt配置文件以及native-lib.cpp代码实现文件。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312251155667.png"></p></li><li><p>buid.gradle配置文件中多了native层的编译配置。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312251157782.png"></p></li></ol><h1 id="二、NDK模板代码分析"><a href="#二、NDK模板代码分析" class="headerlink" title="二、NDK模板代码分析"></a>二、NDK模板代码分析</h1><p>借助上面这个模板项目来理解基本的NDK开发：</p><ol><li><p>so库加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>System.loadLibrary(<span class="hljs-string">&quot;nativetest&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>它的加载时机有两种，</p><ul><li><strong>1、在类静态初始化中：</strong> 如果只在一个类或者很少类中使用到该 so 库，则最常见的方式是在类的静态初始化块中调用。</li><li><strong>2、在 Application 初始化时调用：</strong> 如果有很多类需要使用到该 so 库，则可以考虑在 Application 初始化等场景中提前加载。</li></ul></li><li><p>Java层native方法声明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> String <span class="hljs-title function_">stringFromJNI</span><span class="hljs-params">()</span>;<br></code></pre></td></tr></table></figure></li><li><p>native方法的实现与静态注册</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function">JNIEXPORT jstring JNICALL <span class="hljs-title">Java_com_example_nativetest_MainActivity_stringFromJNI</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        JNIEnv* env,</span></span><br><span class="hljs-params"><span class="hljs-function">        jobject <span class="hljs-comment">/* this */</span>)</span> </span>&#123;<br>    std::string hello = <span class="hljs-string">&quot;Hello from C++&quot;</span>;<br>    <span class="hljs-keyword">return</span> env-&gt;<span class="hljs-built_in">NewStringUTF</span>(hello.<span class="hljs-built_in">c_str</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>函数名采用以字符串 “Java” 为前缀，用 “_” 下划线将全限定类名以及方法名连接起来，这个就是JNI函数静态注册约定的函数命名规则。</p><p><code>extern &quot;C&quot;</code>表示编译器使用C语言的方式进行编译或者链接。</p><p>宏定义<code>JNIEXPORT</code>表示将该函数导出，可供外部使用。宏定义<code>JNICALL</code>表示该函数是一个JNI函数，它们的定义如下（Linux平台下）：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312251219966.png"></p><p><code>jstring</code>是函数的返回类型。</p><p><code>jobject</code> 类型是 JNI 层对于 Java 层应用类型对象的表示。每一个从 Java 调用的 native 方法，在 JNI 函数中都会传递一个当前对象的引用。区分 2 种情况：</p><ul><li><strong>静态Native方法：</strong> 第二个参数为 <code>jclass</code> 类型，指向 native 方法所在类的 Class 对象。</li><li><strong>实例Native方法：</strong> 第二个参数为 <code>jobject</code> 类型，指向调用 native 方法的对象。</li></ul><p>参数 env 是Native层中Java环境的代表，通过 JNIEnv* 指针就可以在 Native 层中访问 Java 层的代码并进行操作，比如调用 Java 的方法、操作 Java 的变量和对象等。</p></li></ol><h1 id="三、数据类型转换"><a href="#三、数据类型转换" class="headerlink" title="三、数据类型转换"></a>三、数据类型转换</h1><h2 id="3-1-数据类型映射"><a href="#3-1-数据类型映射" class="headerlink" title="3.1 数据类型映射"></a>3.1 数据类型映射</h2><p>Java的数据类型与JNI中的数据类型映射见<a href="https://gal2xy.github.io/2023/12/10/JNI%E5%8E%9F%E7%90%86/#%E5%9B%9B%E3%80%81%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E7%9A%84%E8%BD%AC%E6%8D%A2">JNI原理 - gla2xy’s blog (gal2xy.github.io)</a>。由于Java层数据类型和C&#x2F;C++层的数据类型不尽相同，因此在使用时，需要做相应的转换：</p><ul><li><strong>基础数据类型：</strong> 会直接转换为 C&#x2F;C++ 的基础数据类型，例如 int 类型映射为 jint 类型。由于 jint 是 C&#x2F;C++ 类型，所以可以直接当作普通 C&#x2F;C++ 变量使用，而不需要依赖 JNIEnv 环境对象。</li><li><strong>引用数据类型：</strong> 对象只会转换为一个 C&#x2F;C++ 指针，例如 Object 类型映射为 jobject 类型。由于指针指向 Java 虚拟机内部的数据结构，所以不可能直接在 C&#x2F;C++ 代码中操作对象，而是需要依赖 JNIEnv 环境对象。另外，为了避免对象在使用时突然被回收，在本地方法返回前，虚拟机会固定（pin）对象，阻止其 GC。</li></ul><p>转换的方法见JNI源码：<a href="http://aospxref.com/android-8.0.0_r36/xref/libnativehelper/include/nativehelper/jni.h">jni.h (aospxref.com)</a>。</p><h2 id="3-2-字符串"><a href="#3-2-字符串" class="headerlink" title="3.2 字符串"></a>3.2 字符串</h2><p>字符串的转换由于编码的原因分为两套：一套是用于Unicode编码，另一套是用于UTF-8编码，具体函数如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//Unicode编码</span><br><span class="hljs-function">jstring <span class="hljs-title">NewString</span><span class="hljs-params">(<span class="hljs-type">const</span> jchar* unicodeChars, jsize len)</span><span class="hljs-comment">//将native层的字符数组转成Unicode编码的java字符串对象，以&#x27;$&#x27;结尾</span></span><br><span class="hljs-function">jsize <span class="hljs-title">GetStringLength</span><span class="hljs-params">(jstring string)</span><span class="hljs-comment">//返回Unicode编码的字符串的长度，由于结尾符不是&#x27;\0&#x27;，所以不可通过strlen函数获取</span></span><br><span class="hljs-function"><span class="hljs-type">const</span> jchar* <span class="hljs-title">GetStringChars</span><span class="hljs-params">(jstring string, jboolean* isCopy)</span><span class="hljs-comment">//将Java字符串对象转成字native层的字符串数组</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ReleaseStringChars</span><span class="hljs-params">(jstring string, <span class="hljs-type">const</span> jchar* chars)</span><span class="hljs-comment">//释放native层的字符串数组(第二个参数)</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetStringRegion</span><span class="hljs-params">(jstring str, jsize start, jsize len, jchar* buf)</span><span class="hljs-comment">//复制str的指定部分到buf中</span></span><br><span class="hljs-function"><span class="hljs-comment">//UTF-8编码</span></span><br><span class="hljs-function">jstring <span class="hljs-title">NewStringUTF</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* bytes)</span><span class="hljs-comment">//将native层的字符数组转成UTF-8编码的java字符串对象，以&#x27;\0&#x27;结尾</span></span><br><span class="hljs-function">jsize <span class="hljs-title">GetStringUTFLength</span><span class="hljs-params">(jstring string)</span><span class="hljs-comment">//返回UTF-8编码的字符串的长度，这里也可以通过strlen函数获取</span></span><br><span class="hljs-function"><span class="hljs-type">const</span> <span class="hljs-type">char</span>* <span class="hljs-title">GetStringUTFChars</span><span class="hljs-params">(jstring string, jboolean* isCopy)</span><span class="hljs-comment">//将Java字符串对象转成字native层的字符串数组</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ReleaseStringUTFChars</span><span class="hljs-params">(jstring string, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* utf)</span><span class="hljs-comment">//释放native层的字符串数组(第二个参数)</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">GetStringUTFRegion</span><span class="hljs-params">(jstring str, jsize start, jsize len, <span class="hljs-type">char</span>* buf)</span><span class="hljs-comment">//复制str指定部分到buf中</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-comment">//通用</span></span><br><span class="hljs-function"><span class="hljs-type">const</span> jchar* <span class="hljs-title">GetStringCritical</span><span class="hljs-params">(jstring string, jboolean* isCopy)</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ReleaseStringCritical</span><span class="hljs-params">(jstring string, <span class="hljs-type">const</span> jchar* carray)</span></span><br></code></pre></td></tr></table></figure><h2 id="3-3-数组"><a href="#3-3-数组" class="headerlink" title="3.3 数组"></a>3.3 数组</h2><p>Native层中有如下数组：<code>ObjectArray、BooleanArray、ByteArray、CharArray、ShortArray、IntArray、LongArray、FloatArray、DoubleArray</code>。每种类型的数组都有一套相似的对应函数来操作数组，函数主要如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp">&lt;Type&gt;、&lt;type&gt;代指基本类型<br><span class="hljs-comment">//通用</span><br><span class="hljs-function">jsize <span class="hljs-title">GetArrayLength</span><span class="hljs-params">(jarray array)</span><span class="hljs-comment">//返回数组中的元素个数</span></span><br><span class="hljs-function">    </span><br><span class="hljs-function"><span class="hljs-comment">//引用类型数组</span></span><br><span class="hljs-function">    <span class="hljs-comment">//创建引用类型的数组，length指定数组大小，elementClass指定元素的引用类型，initialElement指定元素的初始值，一般为null</span></span><br><span class="hljs-function">jobjectArray <span class="hljs-title">NewObjectArray</span><span class="hljs-params">(jsize length, jclass elementClass, jobject initialElement)</span></span><br><span class="hljs-function">    <span class="hljs-comment">//获取array数组中指定下标index的元素的值</span></span><br><span class="hljs-function">jobject <span class="hljs-title">GetObjectArrayElement</span><span class="hljs-params">(jobjectArray array, jsize index)</span></span><br><span class="hljs-function">    <span class="hljs-comment">//设置array数组中指定下标index的元素的值</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">SetObjectArrayElement</span><span class="hljs-params">(jobjectArray array, jsize index, jobject value)</span></span><br><span class="hljs-function">    </span><br><span class="hljs-function"><span class="hljs-comment">//基本类型数组</span></span><br><span class="hljs-function">    <span class="hljs-comment">//创建Type类型的数组，length指定数组大小</span></span><br><span class="hljs-function">j&lt;type&gt;Array New&lt;Type&gt;<span class="hljs-title">Array</span><span class="hljs-params">(jsize length)</span></span><br><span class="hljs-function">    <span class="hljs-comment">//将Java层的数组转成native层的数组</span></span><br><span class="hljs-function">j&lt;type&gt;* Get&lt;Type&gt;<span class="hljs-title">ArrayElements</span><span class="hljs-params">(j&lt;type&gt;Array array, j&lt;Type&gt;* isCopy)</span></span><br><span class="hljs-function">    <span class="hljs-comment">/*</span></span><br><span class="hljs-comment"><span class="hljs-function">    释放array数组，elems由Get&lt;Type&gt;ArrayElements函数获取的，mode指定操作模式：</span></span><br><span class="hljs-comment"><span class="hljs-function">    0更新数组并释放elems 缓冲区</span></span><br><span class="hljs-comment"><span class="hljs-function">    JNI_COMMIT更新但不释放elems 缓冲区</span></span><br><span class="hljs-comment"><span class="hljs-function">    JNI_ABORT不作更新但释放elems缓冲区</span></span><br><span class="hljs-comment"><span class="hljs-function">    */</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> Release&lt;Type&gt;<span class="hljs-title">ArrayElements</span><span class="hljs-params">(j&lt;type&gt;Array array, j&lt;type&gt;* elems,jint mode)</span></span><br><span class="hljs-function">    <span class="hljs-comment">//复制array数组中指定范围内的元素到buf数组中</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> Get&lt;Type&gt;<span class="hljs-title">ArrayRegion</span><span class="hljs-params">(j&lt;type&gt;Array array, jsize start, jsize len, j&lt;type&gt;* buf)</span></span><br><span class="hljs-function">    <span class="hljs-comment">//将buf数组中的元素赋值到array数组中指定范围内</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> Set&lt;Type&gt;<span class="hljs-title">ArrayRegion</span><span class="hljs-params">(j&lt;type&gt;Array array, jsize start, jsize len, <span class="hljs-type">const</span> j&lt;type&gt;* buf)</span></span><br></code></pre></td></tr></table></figure><p>示例代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//java层</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> extends AppCompatActivity &#123;<br>    <span class="hljs-type">static</span> &#123;<br>        System.<span class="hljs-built_in">loadLibrary</span>(<span class="hljs-string">&quot;nativetest&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">int</span>[] a = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-type">void</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> </span>&#123;<br>        ...<br>        <span class="hljs-type">int</span>[] bArray = <span class="hljs-built_in">getIntArray</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; bArray.length ; i++) &#123;<br>            Log.<span class="hljs-built_in">d</span>(<span class="hljs-string">&quot;gal2xy&quot;</span>, <span class="hljs-string">&quot;bArray[&quot;</span> + i + <span class="hljs-string">&quot;]: &quot;</span> + bArray[i]);<br>        &#125;    <br>    &#125;<br><span class="hljs-keyword">public</span> native <span class="hljs-type">int</span>[] <span class="hljs-built_in">getIntArray</span>();<br>&#125;<br><span class="hljs-comment">//native层</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function">JNIEXPORT jintArray JNICALL</span><br><span class="hljs-function"><span class="hljs-title">Java_com_example_nativetest_MainActivity_getIntArray</span><span class="hljs-params">(JNIEnv *env, jobject thiz)</span> </span>&#123;<br>    <span class="hljs-comment">//获取MainActivity的int数组 a</span><br>    jclass clz = env-&gt;<span class="hljs-built_in">GetObjectClass</span>(thiz);<br>    jfieldID aFieldID = env-&gt;<span class="hljs-built_in">GetStaticFieldID</span>(clz,<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;[I&quot;</span>);<br>    jintArray aArray = <span class="hljs-built_in">static_cast</span>&lt;jintArray&gt;(env-&gt;<span class="hljs-built_in">GetStaticObjectField</span>(clz, aFieldID));<br>    <span class="hljs-comment">//获取数组长度</span><br>    <span class="hljs-type">int</span> aAarryLen = env-&gt;<span class="hljs-built_in">GetArrayLength</span>(aArray);<br>    <span class="hljs-built_in">LOGD</span>(<span class="hljs-string">&quot;Array Length: %d&quot;</span>, aAarryLen);<br>    <span class="hljs-comment">//转成native使用的int数组</span><br>    jint* intArray = <span class="hljs-literal">nullptr</span>;<br>    intArray = env-&gt;<span class="hljs-built_in">GetIntArrayElements</span>(aArray, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-comment">//遍历数组</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; aAarryLen; ++i) &#123;<br>        <span class="hljs-built_in">LOGD</span>(<span class="hljs-string">&quot;Array[%d] = %d&quot;</span>, i, intArray[i]);<br>        intArray[i] *= <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-comment">//更新java层的数组并释放native层的对应的数组</span><br>    env-&gt;<span class="hljs-built_in">ReleaseIntArrayElements</span>(aArray, intArray,<span class="hljs-number">0</span>);<br>    <span class="hljs-comment">//返回给Java层输出</span><br>    <span class="hljs-keyword">return</span> aArray;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312261727597.png"></p><h1 id="四、JNI层访问Java层"><a href="#四、JNI层访问Java层" class="headerlink" title="四、JNI层访问Java层"></a>四、JNI层访问Java层</h1><h2 id="4-1-访问类"><a href="#4-1-访问类" class="headerlink" title="4.1 访问类"></a>4.1 访问类</h2><ul><li><code>FindClass(classname)</code>：获取<code>classname</code>对应的类，<code>classname</code>中的<code>.</code>需要用<code>/</code>替换。</li><li><code>GetSuperclass(clz)</code>：获取<code>clazz</code>的父类。</li><li><code>GetObjectClass(clzObj)</code>：获取类实例<code>clzObj</code>的类。</li><li><code>IsInstanceOf(clzObj, clz)</code>：判断类实例<code>clzObj</code>对象是否是<code>clz</code>类类型。</li><li><code>NewObject(clz, methodID, args...)</code>：调用构造方法创建实例对象。</li><li><code>AllocObject(clz)</code>：创建实例对象（仅仅为类对象分配内存空间而已），不初始成员变量，也不调用构造方法。</li></ul><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//获取类</span><br>jclass clz = env-&gt;<span class="hljs-built_in">FindClass</span>(<span class="hljs-string">&quot;com/example/nativetest/Demo&quot;</span>);<br><span class="hljs-comment">//获取构造方法</span><br>jmethodID initmethodID = env-&gt;<span class="hljs-built_in">GetMethodID</span>(clz,<span class="hljs-string">&quot;&lt;init&gt;&quot;</span>, <span class="hljs-string">&quot;()V&quot;</span>);<br><span class="hljs-comment">//创建实例对象</span><br>jobject DemoObj = env-&gt;<span class="hljs-built_in">NewObject</span>(clz, initmethodID);<br></code></pre></td></tr></table></figure><h2 id="4-2-访问方法（包括构造方法）"><a href="#4-2-访问方法（包括构造方法）" class="headerlink" title="4.2 访问方法（包括构造方法）"></a>4.2 访问方法（包括构造方法）</h2><h3 id="4-2-1-静态方法"><a href="#4-2-1-静态方法" class="headerlink" title="4.2.1 静态方法"></a>4.2.1 静态方法</h3><ul><li><code>GetStaticMethodId(clz, methodname, sig)</code>：获取静态方法ID。</li><li><code>CallStatic&lt;Type&gt;Method(clz, methodID, args...)</code>：调用静态方法，类型<code>&lt;Type&gt;</code>取决于方法的返回值类型，如<code>Object、Boolean、Byte、Char、Double、Float、Int、Short、Long、Void</code>。</li></ul><p>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">extern <span class="hljs-string">&quot;C&quot;</span> JNIEXPORT <span class="hljs-keyword">void</span> JNICALL<br><span class="hljs-title function_">Java_com_example_nativetest_MainActivity_accessField</span><span class="hljs-params">(JNIEnv *env, jobject thiz)</span> &#123;<br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> implement accessField()</span><br>    LOGD(<span class="hljs-string">&quot;come into native method: accessField&quot;</span>);<br>    <span class="hljs-comment">//获取类</span><br>    <span class="hljs-type">jclass</span> <span class="hljs-variable">clz</span> <span class="hljs-operator">=</span> env-&gt;FindClass(<span class="hljs-string">&quot;com/example/nativetest/Demo&quot;</span>);<br>    <span class="hljs-comment">//获取方法</span><br>    <span class="hljs-type">jmethodID</span> <span class="hljs-variable">mulmethodID</span> <span class="hljs-operator">=</span> env-&gt;GetStaticMethodID(clz,<span class="hljs-string">&quot;mul&quot;</span>, <span class="hljs-string">&quot;(II)I&quot;</span>);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> env-&gt;CallStaticIntMethod(clz, mulmethodID,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>    LOGD(<span class="hljs-string">&quot;result = %d&quot;</span>, result);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-2-实例方法"><a href="#4-2-2-实例方法" class="headerlink" title="4.2.2 实例方法"></a>4.2.2 实例方法</h3><p>需要先通过<code>NewObject</code>方法创建实例对象才能调用。</p><ul><li><code>GetMethodID(clz, methodname, sig)</code>：获取实例方法ID。</li><li><code>Call&lt;Type&gt;Method(clzObj, methodID, args...)</code>：调用实例方法。</li><li><code>CallNonvirtual&lt;Type&gt;Method(clzObj,clz,methodID,args...)</code>：调用父类<code>clz</code>的方法（如果不想用自身的重载方法）。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function">JNIEXPORT <span class="hljs-type">void</span> JNICALL</span><br><span class="hljs-function"><span class="hljs-title">Java_com_example_nativetest_MainActivity_accessField</span><span class="hljs-params">(JNIEnv *env, jobject thiz)</span> </span>&#123;<br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> implement accessField()</span><br>    <span class="hljs-built_in">LOGD</span>(<span class="hljs-string">&quot;come into native method: accessField&quot;</span>);<br>    <span class="hljs-comment">//获取类</span><br>    jclass clz = env-&gt;<span class="hljs-built_in">FindClass</span>(<span class="hljs-string">&quot;com/example/nativetest/Demo&quot;</span>);<br>    <span class="hljs-comment">//获取构造方法</span><br>    jmethodID initmethodID = env-&gt;<span class="hljs-built_in">GetMethodID</span>(clz,<span class="hljs-string">&quot;&lt;init&gt;&quot;</span>, <span class="hljs-string">&quot;()V&quot;</span>);<br>    <span class="hljs-comment">//实例化对象</span><br>    jobject DemoObj = env-&gt;<span class="hljs-built_in">NewObject</span>(clz, initmethodID);<br>    <span class="hljs-comment">//获取要调用的方法ID</span><br>    jmethodID addmethodId = env-&gt;<span class="hljs-built_in">GetMethodID</span>(clz,<span class="hljs-string">&quot;add&quot;</span>, <span class="hljs-string">&quot;(II)I&quot;</span>);<br>    <span class="hljs-type">int</span> result = env-&gt;<span class="hljs-built_in">CallIntMethod</span>(DemoObj,addmethodId,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-built_in">LOGD</span>(<span class="hljs-string">&quot;result = %d&quot;</span>, result);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    //获取父类</span><br><span class="hljs-comment">    jclass origindemoclz = env-&gt;FindClass(&quot;com/example/nativetest/OriginDemo&quot;);</span><br><span class="hljs-comment">    jmethodID addmethodID = env-&gt;GetMethodID(origindemoclz,&quot;add&quot;, &quot;(II)I&quot;);//实际上是减法</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    int result = env-&gt;CallNonvirtualIntMethod(DemoObj,origindemoclz,addmethodID,1,2);</span><br><span class="hljs-comment">    LOGD(&quot;result = %d&quot;, result);//结果为-1</span><br><span class="hljs-comment">    */</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2-3-CallMethod、CallMethodA、CallMethodV的区别"><a href="#4-2-3-CallMethod、CallMethodA、CallMethodV的区别" class="headerlink" title="4.2.3 CallMethod、CallMethodA、CallMethodV的区别"></a>4.2.3 CallMethod、CallMethodA、CallMethodV的区别</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//以CallVoidMethod为例</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CallVoidMethod</span><span class="hljs-params">(jobject obj, jmethodID methodID, ...)</span></span>&#123;<br>    va_list args;<br>    <span class="hljs-built_in">va_start</span>(args, methodID);<br>    functions-&gt;<span class="hljs-built_in">CallVoidMethodV</span>(<span class="hljs-keyword">this</span>, obj, methodID, args);<br>    <span class="hljs-built_in">va_end</span>(args);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CallVoidMethodV</span><span class="hljs-params">(jobject obj, jmethodID methodID, va_list args)</span></span>&#123; <br>    functions-&gt;<span class="hljs-built_in">CallVoidMethodV</span>(<span class="hljs-keyword">this</span>, obj, methodID, args); <br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">CallVoidMethodA</span><span class="hljs-params">(jobject obj, jmethodID methodID, <span class="hljs-type">const</span> jvalue* args)</span></span>&#123; <br>    functions-&gt;<span class="hljs-built_in">CallVoidMethodA</span>(<span class="hljs-keyword">this</span>, obj, methodID, args); <br>&#125;<br></code></pre></td></tr></table></figure><p><code>Call&lt;Type&gt;Method</code>方法中调用了<code>Call&lt;Type&gt;MethodV</code>方法，并且在此之前将<code>methodID</code>后面的参数封装成<code>va_list</code>类型的数组（数组的长度可变）。</p><p><code>Call&lt;Type&gt;MethodV</code>方法接收<code>va_list</code>类型的数组。</p><p><code>Call&lt;Type&gt;MethodA</code>方法接收<code>jvalue</code>类型的指针，<code>jvalue</code>联合体如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">union</span> <span class="hljs-title class_">jvalue</span> &#123;<br>    jboolean    z;<br>    jbyte       b;<br>    jchar       c;<br>    jshort      s;<br>    jint        i;<br>    jlong       j;<br>    jfloat      f;<br>    jdouble     d;<br>    jobject     l;<br>&#125; jvalue;<br></code></pre></td></tr></table></figure><h2 id="4-3-访问Java字段"><a href="#4-3-访问Java字段" class="headerlink" title="4.3 访问Java字段"></a>4.3 访问Java字段</h2><h3 id="4-3-1-静态字段"><a href="#4-3-1-静态字段" class="headerlink" title="4.3.1 静态字段"></a>4.3.1 静态字段</h3><ol><li><code>GetStaticFieldID(clz,FieldName,sig)</code>：获取静态字段ID。</li><li><code>GetStatic&lt;Type&gt;Field(clz,FieldID)</code>：获取静态字段，类型<code>&lt;Type&gt;</code>取决于字段的类型，如<code>Object、Boolean、Byte、Char、Double、Float、Int、Short、Long</code>。</li><li><code>SetStatic&lt;Type&gt;Field(clz,FieldID,value)</code>：设置静态字段值。</li></ol><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function">JNIEXPORT <span class="hljs-type">void</span> JNICALL</span><br><span class="hljs-function"><span class="hljs-title">Java_com_example_nativetest_MainActivity_accessField</span><span class="hljs-params">(JNIEnv* env, jobject  thiz)</span> </span>&#123;<br><br><span class="hljs-comment">//1、通过对象对应的类</span><br>    jclass clz = env-&gt;<span class="hljs-built_in">GetObjectClass</span>(thiz);<br>    <span class="hljs-comment">//2、通过类获取静态字段ID</span><br>    jfieldID  staticstringFieldID = env-&gt;<span class="hljs-built_in">GetStaticFieldID</span>(clz,<span class="hljs-string">&quot;staticstring&quot;</span>, <span class="hljs-string">&quot;Ljava/lang/String;&quot;</span>);<br>    <br>    <span class="hljs-comment">//set</span><br>    <span class="hljs-comment">//jstring newString = env-&gt;NewStringUTF(&quot;newString alter by Native&quot;);</span><br>    <span class="hljs-comment">//env-&gt;SetStaticObjectField(clz, staticstringFieldID, newString);</span><br>    <br>    <span class="hljs-comment">//3、获取字段的值</span><br>    jstring staticstring = <span class="hljs-built_in">static_cast</span>&lt;jstring&gt;(env-&gt;<span class="hljs-built_in">GetStaticObjectField</span>(clz,staticstringFieldID));<br>    <span class="hljs-comment">//GetStringChars方法获取的字符串以$结尾，不能以%s格式化输出</span><br>    <span class="hljs-comment">//4、转成可供Native层直接使用的类型</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* staticchars = env-&gt;<span class="hljs-built_in">GetStringUTFChars</span>(staticstring, <span class="hljs-literal">nullptr</span>);<br>    <span class="hljs-built_in">LOGD</span>(<span class="hljs-string">&quot;static String from Java: %s&quot;</span>, staticchars);<br>    <span class="hljs-comment">//5、释放资源</span><br>    env-&gt;<span class="hljs-built_in">ReleaseStringChars</span>(staticstring, <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> jchar *&gt;(staticchars));<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3-2-实例字段"><a href="#4-3-2-实例字段" class="headerlink" title="4.3.2 实例字段"></a>4.3.2 实例字段</h3><p>需要先通过<code>NewObject</code>方法创建实例对象才能调用。</p><ol><li><code>GetFieldID(clz,FieldName,sig)</code>：获取实例字段ID。</li><li><code>Get&lt;Type&gt;Field(clzObj,FieldID)</code>：获取实例字段，类型<code>&lt;Type&gt;</code>取决于字段的类型，如<code>Object、Boolean、Byte、Char、Double、Float、Int、Short、Long</code>。</li><li><code>Set&lt;Type&gt;Field(clzObj,FieldID,value)</code>：设置实例字段值。</li></ol><p>示例：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function">JNIEXPORT <span class="hljs-type">void</span> JNICALL</span><br><span class="hljs-function"><span class="hljs-title">Java_com_example_nativetest_MainActivity_accessField</span><span class="hljs-params">(JNIEnv *env, jobject thiz)</span> </span>&#123;<br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> implement accessField()</span><br>    <span class="hljs-built_in">LOGD</span>(<span class="hljs-string">&quot;come into native method: accessField&quot;</span>);<br>    <span class="hljs-comment">//获取类</span><br>    jclass clz = env-&gt;<span class="hljs-built_in">FindClass</span>(<span class="hljs-string">&quot;com/example/nativetest/Demo&quot;</span>);<br>    <span class="hljs-comment">//获取构造方法</span><br>    jmethodID initmethodID = env-&gt;<span class="hljs-built_in">GetMethodID</span>(clz,<span class="hljs-string">&quot;&lt;init&gt;&quot;</span>, <span class="hljs-string">&quot;()V&quot;</span>);<br>    <span class="hljs-comment">//实例化对象</span><br>    jobject DemoObj = env-&gt;<span class="hljs-built_in">NewObject</span>(clz, initmethodID);<br>    <span class="hljs-comment">//获取字段ID</span><br>    jfieldID aFieldID = env-&gt;<span class="hljs-built_in">GetFieldID</span>(clz, <span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;I&quot;</span>);<br>    <span class="hljs-comment">//获取值</span><br>    <span class="hljs-type">int</span> avalue = env-&gt;<span class="hljs-built_in">GetIntField</span>(DemoObj,aFieldID);<br>    <span class="hljs-built_in">LOGD</span>(<span class="hljs-string">&quot;value = %d&quot;</span>, avalue);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-4-缓存ID"><a href="#4-4-缓存ID" class="headerlink" title="4.4 缓存ID"></a>4.4 缓存ID</h2><p>访问 Java 层字段或方法时，需要先利用字段名 &#x2F; 方法名和描述符进行检索，获得 jfieldID &#x2F; jmethodID。这个检索过程比较耗时，优化方法是将字段 ID 和方法 ID 缓存起来，减少重复检索。</p><blockquote><p><strong>提示：</strong> 从不同线程中获取同一个字段或方法 的 ID 是相同的，缓存 ID 不会有多线程问题。</p></blockquote><p>缓存字段ID和方法ID的方法主要有 2 种：</p><ul><li><strong>1、使用时缓存：</strong> 使用时缓存是指在首次访问字段或方法时，将字段 ID 或方法 ID 存储在静态变量中。这样将来再次调用本地方法时，就不需要重复检索 ID 了。例如：</li><li><strong>2、类初始化时缓存：</strong> 静态初始化时缓存是指在 Java 类初始化的时候，提前缓存字段 ID 和方法 ID。可以选择在 <code>JNI_OnLoad</code> 方法中缓存，也可以在加载 so 库后调用一个 native 方法进行缓存。</li></ul><p>两种缓存 ID 方式的主要区别在于缓存发生的时机和时效性：</p><ul><li><strong>1、时机不同：</strong> 使用时缓存是延迟按需缓存，只有在首次访问 Java 时才会获取 ID 并缓存，而类初始化时缓存是提前缓存；</li><li><strong>2、时效性不同：</strong> 使用时缓存的 ID 在类卸载后失效，在类卸载后不能使用，而类加载时缓存在每次加载 so 动态库时会重新更新缓存，因此缓存的 ID 是保持有效的。</li></ul><h1 id="五、对象引用管理"><a href="#五、对象引用管理" class="headerlink" title="五、对象引用管理"></a>五、对象引用管理</h1><h2 id="5-1-引用类型"><a href="#5-1-引用类型" class="headerlink" title="5.1 引用类型"></a>5.1 引用类型</h2><p>JNI中存在三种引用：局部引用、全局引用、弱全局引用。</p><h3 id="5-1-1-局部引用"><a href="#5-1-1-局部引用" class="headerlink" title="5.1.1 局部引用"></a>5.1.1 局部引用</h3><p>JNIEnv提供的函数所返回的引用基本上都是本地引用，它具有以下特点：</p><ul><li>当Native函数返回时，这个本地引用就会被自动释放。</li><li>只在创建它的线程中有效，不能够跨线程使用。</li><li>局部引用是JVM负责的引用类型，受JVM管理。</li></ul><p><strong>局部引用可以通过<code>NewLocalRef</code>函数创建，通过<code>DeleteLocalRef</code>函数来释放。</strong></p><h3 id="5-1-2-全局引用"><a href="#5-1-2-全局引用" class="headerlink" title="5.1.2 全局引用"></a>5.1.2 全局引用</h3><p>全局引用与本地引用相反，它具有以下特点：</p><ul><li>在native函数返回时不会被自动释放，因此全局引用需要手动释放，并且不会被GC回收。</li><li>全局引用是可以跨线程使用的。</li><li>全局引用不受到JVM管理。</li></ul><p><strong>全局引用通过<code>JNIEnv</code>的<code>NewGlobalRef</code>函数创建，通过<code>JNIEnv</code>的<code>DeleteGlobalRef</code>函数释放。</strong></p><p>示例代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">jclass clazz = env-&gt;<span class="hljs-built_in">GetObjectClass</span>(classname);<br>jcalss mClass = (jcalss)env-&gt;<span class="hljs-built_in">NewGlobalRef</span>(clazz);<br>...<br>env-&gt;<span class="hljs-built_in">DeleteGlobalRef</span>(mClass)<br></code></pre></td></tr></table></figure><h3 id="5-1-3-弱全局引用"><a href="#5-1-3-弱全局引用" class="headerlink" title="5.1.3 弱全局引用"></a>5.1.3 弱全局引用</h3><p>弱全局引用是一种特殊的全局引用，它和全局引用的特点相似，<strong>但是弱全局引用是可以被GC回收的</strong>。弱全局引用被GC回收之后会指向NULL，因此在调用前需要判断它是否被回收了（通过<code>JNIEnv</code>的<code>IsSameObject</code>函数来判断）。</p><p><strong>弱全局引用通过<code>JNIEnv</code>的<code>NewWeakGlobalRef</code>函数来创建弱全局引用，通过<code>JNIEnv</code>的<code>DeleteWeakGlobalRef</code>函数释放。</strong></p><p>示例代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">jclass clazz = env-&gt;<span class="hljs-built_in">GetObjectClass</span>(classname);<br>jcalss mClass = (jcalss)env-&gt;<span class="hljs-built_in">NewWeakGlobalRef</span>(clazz);<br>env-&gt;<span class="hljs-built_in">DeleteWeakGlobalRef</span>(mClass)<br><span class="hljs-comment">//使用时</span><br><span class="hljs-keyword">if</span>(env-&gt;<span class="hljs-built_in">IsSameObject</span>(mClass,<span class="hljs-literal">NULL</span>))&#123;<br><span class="hljs-comment">//不能使用</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">//可以使用</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-2-比较引用是否指向相同对象"><a href="#5-2-比较引用是否指向相同对象" class="headerlink" title="5.2 比较引用是否指向相同对象"></a>5.2 比较引用是否指向相同对象</h2><p>使用 <code>IsSameObject</code> 判断两个引用是否指向相同对象，示例代码同上。</p><p>另外，当引用与 <code>NULL</code> 比较时含义略有不同：</p><ul><li><strong>局部引用和全局引用与 NULL 比较：</strong> 用于判断引用是否指向 NULL 对象；</li><li><strong>弱全局引用与 NULL 比较：</strong> 用于判断引用指向的对象是否被回收。</li></ul><h1 id="六、异常处理"><a href="#六、异常处理" class="headerlink" title="六、异常处理"></a>六、异常处理</h1><h2 id="6-1-JNI异常处理机制"><a href="#6-1-JNI异常处理机制" class="headerlink" title="6.1 JNI异常处理机制"></a>6.1 JNI异常处理机制</h2><p>JNI 中的异常机制与 Java 和 C&#x2F;C++ 的处理机制都不同：</p><ul><li><strong>Java 和 C&#x2F;C++：</strong> 程序使用关键字 <code>throw</code> 抛出异常，虚拟机会中断当前执行流程，转而去寻找匹配的catch块，或者继续向外层抛出寻找匹catch块。</li><li><strong>JNI</strong>： 程序使用 JNI 函数 <code>ThrowNew</code> 抛出异常，<strong>发生异常时程序不会中断当前执行流程</strong>，而是返回到Java层后，虚拟机才会抛出这个异常。</li></ul><h2 id="6-2-检测异常的方法"><a href="#6-2-检测异常的方法" class="headerlink" title="6.2 检测异常的方法"></a>6.2 检测异常的方法</h2><p>JNI检测异常的方法有两种：</p><ul><li>通过函数返回值错误码，大部分 JNI 函数和库函数都会有特定的返回值来标示错误，例如 -1、NULL 等。在程序流程中可以多检查函数返回值来判断异常。</li><li>通过 JNI 函数 <code>ExceptionOccurred</code> 或 <code>ExceptionCheck</code> 检查当前是否有异常发生。</li></ul><h2 id="6-3-异常发生时的处理方法"><a href="#6-3-异常发生时的处理方法" class="headerlink" title="6.3 异常发生时的处理方法"></a>6.3 异常发生时的处理方法</h2><p>在 JNI 层出现异常时，有两种处理选择：</p><ul><li>直接 <code>return</code> 当前方法，让 Java 层去处理这个异常（类似Java中向方法外层抛出异常）。</li><li>通过 JNI 函数 <code>ExceptionClear</code> 清除这个异常，再执行异常处理程序。</li></ul><h2 id="6-4-JNI的异常处理函数"><a href="#6-4-JNI的异常处理函数" class="headerlink" title="6.4 JNI的异常处理函数"></a>6.4 JNI的异常处理函数</h2><p>JNI 提供了以下与异常处理相关的函数：</p><ul><li><code>Throw(jthrowable obj)</code>：向Java层抛出<code>java.lang.Throwable</code>异常对象，该异常对象可以通过<code>ExceptionOccurred()</code>获取。</li><li><code>ThrowNew(jclass clazz, const char* message)</code>：利用<code>message</code>构造异常对象并向Java层抛出异常。</li><li><code>ExceptionDescribe()</code>：打印异常描述信息。</li><li><code>ExceptionOccurred()</code>：检查当前环境是否发生异常，如果存在异常则返回该异常对象。</li><li><code>ExceptionCheck()</code>：检查当前环境是否发生异常。</li><li><code>ExceptionClear()</code>：清除当前环境的异常。</li><li><code>FatalError(const char* msg)</code>：抛出致命错误并且不希望虚拟机进行修复。</li></ul><p>示例代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function">JNIEXPORT <span class="hljs-type">void</span> JNICALL <span class="hljs-title">Java_com_example_nativetest_MainActivity_accessField</span><span class="hljs-params">(JNIEnv *env, jobject thiz)</span> </span>&#123;<br>    jclass  DemoClass = env-&gt;<span class="hljs-built_in">FindClass</span>(<span class="hljs-string">&quot;com/example/nativetest/Demo&quot;</span>);<br>    jfieldID aFieldID = env-&gt;<span class="hljs-built_in">GetStaticFieldID</span>(DemoClass,<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;I&quot;</span>);<span class="hljs-comment">//a不是静态字段</span><br>    <span class="hljs-keyword">if</span> (env-&gt;<span class="hljs-built_in">ExceptionCheck</span>())&#123;<br>        <span class="hljs-comment">//打印异常信息</span><br>        env-&gt;<span class="hljs-built_in">ExceptionDescribe</span>();<br>        <span class="hljs-comment">//清除异常信息</span><br>        env-&gt;<span class="hljs-built_in">ExceptionClear</span>();<br>        <span class="hljs-comment">//进行异常处理</span><br>        <span class="hljs-built_in">LOGD</span>(<span class="hljs-string">&quot;异常处理完毕&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>没有异常处理的话，程序直接崩溃；加了异常处理之后，程序能正常运行，且打印出了信息。</p><h1 id="七、多线程"><a href="#七、多线程" class="headerlink" title="七、多线程"></a>七、多线程</h1><h2 id="7-1-不能跨线程的引用"><a href="#7-1-不能跨线程的引用" class="headerlink" title="7.1 不能跨线程的引用"></a>7.1 不能跨线程的引用</h2><p>在JNI中，有两类引用是无法跨线程调用的：</p><ul><li><p><strong>JNIEnv</strong></p><p>JNI只在创建它的线程中有效，不能跨线程传递，不同线程的JNIEnv是彼此独立的。</p><p>如需获取JNIEnv，可通过JavaVM的<code>AttachCurrentThread</code>方法将当前线程依附到JavaVM上，获取属于当前线程的JNIEnv指针，事后需调用<code>DetachCurrentThread</code>方法解除依附。</p><p>如果当前线程已经依附到JavaVM上，可直接使用<code>GetEnv</code>方法。</p></li><li><p><strong>局部引用</strong></p><p>局部引用只在创建的线程和方法中有效，不能跨线程使用。可以将局部引用升级为全局引用后跨线程使用。</p></li></ul><h2 id="7-2-线程创建"><a href="#7-2-线程创建" class="headerlink" title="7.2 线程创建"></a>7.2 线程创建</h2><p>线程创建的方法有两种</p><ul><li><p>通过Java API创建：反射调用Java的Thread类创建。</p></li><li><p>通过C&#x2F;C++ API创建：使用<code>pthread_create()</code>或<code>std::thread</code>创建线程。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">pthread_create</span><span class="hljs-params">(<span class="hljs-type">pthread_t</span>* __pthread_ptr, <span class="hljs-type">pthread_attr_t</span> <span class="hljs-type">const</span>* __attr, <span class="hljs-type">void</span>* (*__start_routine)(<span class="hljs-type">void</span>*), <span class="hljs-type">void</span>*)</span></span>;<br></code></pre></td></tr></table></figure><p>第一个是指向pthread的指针，也是线程id，第二个是线程属性，第三个是线程执行的函数，第四个是函数参数。</p></li></ul><p>示例代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myThread</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>&#123;<br>    <span class="hljs-built_in">LOGD</span>(<span class="hljs-string">&quot;come into Thread, a = %d&quot;</span>, a);<br>&#125;<br><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span><br><span class="hljs-function">JNIEXPORT <span class="hljs-type">void</span> JNICALL</span><br><span class="hljs-function"><span class="hljs-title">Java_com_example_nativetest_MainActivity_accessField</span><span class="hljs-params">(JNIEnv *env, jobject thiz)</span> </span>&#123;<br>    jclass  DemoClass = env-&gt;<span class="hljs-built_in">FindClass</span>(<span class="hljs-string">&quot;com/example/nativetest/Demo&quot;</span>);<br>    <span class="hljs-type">pthread_t</span> pthread;<br>    <span class="hljs-built_in">pthread_create</span>(&amp;pthread, <span class="hljs-literal">nullptr</span>, <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">void</span> *(*)(<span class="hljs-type">void</span> *)&gt;(myThread),<br>                   <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">void</span> *&gt;(<span class="hljs-number">5</span>));<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    可以调用pthread_join(pthread_t, returnresultpointer)让主线程进入阻塞，</span><br><span class="hljs-comment">    等待子线程执行完后才能继续往下执行</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-built_in">LOGD</span>(<span class="hljs-string">&quot;complete&quot;</span>);<span class="hljs-comment">//回到主线程后，不管子线程有没有执行完，会继续往下走</span><br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>涉及到多参数传递，就需要使用结构体来封装参数，将结构体指针传给线程。</strong></p><h2 id="7-3-监视器同步"><a href="#7-3-监视器同步" class="headerlink" title="7.3 监视器同步"></a>7.3 监视器同步</h2><p>在JNI中，也存在多个线程访问同一资源的情况，所以也需要互斥锁来保证并发安全。在Java层中，我们通过使用<code>synchronized</code> 关键字来实现互斥，在JNI层中，提供了如下函数实现互斥：</p><ul><li><code>MonitorEnter(jobject obj)</code>：进入同步块。如果另一个线程已经进入该 jobject 的监视器，则当前线程会阻塞。</li><li><code>MonitorExit(jobject obj)</code>：退出同步块。如果当前线程未进入该 jobject 的监视器，则会抛出 <code>IllegalMonitorStateException</code> 异常。</li></ul><h2 id="7-4-等待与唤醒"><a href="#7-4-等待与唤醒" class="headerlink" title="7.4 等待与唤醒"></a>7.4 等待与唤醒</h2><p>JNI 没有像Java一样提供 wait&#x2F;notify 相关功能的函数，所以需要反射 Java 方法的方式来实现。</p><h1 id="八、JNI-OnLoad"><a href="#八、JNI-OnLoad" class="headerlink" title="八、JNI_OnLoad"></a>八、JNI_OnLoad</h1><p>当Java层通过<code>System.loadLibrary</code>方法加载so库时，首先会自动调用<code>JNI_OnLoad</code>函数，且系统会帮我们实现<code>JNI_OnLoad</code>函数。如果我们需要重实现<code>JNI_OnLoad</code>函数，则函数的返回值必须时JNI版本 <code>JNI_VERSION_1_6</code>。</p><p>在<code>JNI_OnLoad</code>函数中，我们可以动态注册native方法。</p><p>示例代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">JNIEXPORT jint JNICALL <span class="hljs-title">JNI_OnLoad</span><span class="hljs-params">(JavaVM* vm, <span class="hljs-type">void</span>* reserved)</span></span>&#123;<br>    JNIEnv* env = <span class="hljs-literal">nullptr</span>;<br>    jint result = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">if</span> (vm-&gt;<span class="hljs-built_in">GetEnv</span>((<span class="hljs-type">void</span>**)&amp;env,JNI_VERSION_1_6) != JNI_OK)&#123;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    JNINativeMethod jmethods[] = &#123;<br>            &#123;<span class="hljs-string">&quot;DynamicRegistration&quot;</span>, <span class="hljs-string">&quot;()V&quot;</span>, (<span class="hljs-type">void</span> *)(DynamicRegistrationNative)&#125;<span class="hljs-comment">//DynamicRegistrationNative为native方法</span><br>    &#125;;<br>    <span class="hljs-comment">//获取动态注册的函数所在的类</span><br>    jclass  clz = env-&gt;<span class="hljs-built_in">FindClass</span>(<span class="hljs-string">&quot;com/example/nativetest/MainActivity&quot;</span>);<br>    env-&gt;<span class="hljs-built_in">RegisterNatives</span>(clz,jmethods,<span class="hljs-built_in">sizeof</span>(jmethods)/<span class="hljs-built_in">sizeof</span>(JNINativeMethod));<br><br>    result = JNI_VERSION_1_6;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="九、日志输出"><a href="#九、日志输出" class="headerlink" title="九、日志输出"></a>九、日志输出</h1><ol><li>导入<code>&lt;android/log.h&gt;</code>库。</li><li>定义宏TAG。</li><li>利用宏定义来定义LOGD或LOGI或LOGE函数。</li></ol><p>示例代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;jni.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;android/log.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOGD(...) __android_log_print(ANDROID_LOG_DEBUG,TAG ,__VA_ARGS__)</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOGI(...) __android_log_print(ANDROID_LOG_INFO , TAG, __VA_ARGS__);</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOGE(...) __android_log_print(ANDROID_LOG_ERROR, TAG, __VA_ARGS__);</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> TAG <span class="hljs-string">&quot;gal2xy&quot;</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function">JNIEXPORT <span class="hljs-type">void</span> JNICALL</span><br><span class="hljs-function"><span class="hljs-title">Java_com_example_nativetest_MainActivity_accessField</span><span class="hljs-params">(JNIEnv *env, jobject thiz)</span> </span>&#123;<br>    <span class="hljs-built_in">LOGD</span>(<span class="hljs-string">&quot;come into native method: accessField&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="十、Native方法注册"><a href="#十、Native方法注册" class="headerlink" title="十、Native方法注册"></a>十、Native方法注册</h1><p>Native方法的注册可分为两种：静态注册和动态注册。它们的原理分析详见<a href="https://gal2xy.github.io/2023/12/10/JNI%E5%8E%9F%E7%90%86/#%E4%B8%89%E3%80%81Native%E6%B3%A8%E5%86%8C%E6%96%B9%E6%B3%95">JNI原理#三、Native注册方法</a>，这里只讲如何使用。</p><h2 id="10-1-静态注册"><a href="#10-1-静态注册" class="headerlink" title="10.1 静态注册"></a>10.1 静态注册</h2><p>静态注册采用的是基于「约定」的命名规则，由于C&#x2F;C++无法实现重载函数，所以根据有无重载分为两种规则：</p><ul><li><strong>短名称规则</strong> ：<code>Java_[类的全限定名 (带下划线)]_[方法名]</code> ，其中类的全限定名中的 <code>.</code> 改为 <code>_</code> ；</li><li><strong>长名称规则</strong> ：在短名称的基础上后追加两个下划线（<code>__</code>）和参数描述符，以区分函数重载。</li></ul><p>静态注册的函数需要暴露到符号表，也就是需要添加宏定义<code>JNIEXPORT</code>。</p><h2 id="10-2-动态注册"><a href="#10-2-动态注册" class="headerlink" title="10.2 动态注册"></a>10.2 动态注册</h2><p>动态注册需要使用 <code>RegisterNatives</code> 函数，因为是动态注册，所以函数并不需要暴露到符号表。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">jint <span class="hljs-title">RegisterNatives</span><span class="hljs-params">(jclass clazz, <span class="hljs-type">const</span> JNINativeMethod* methods, jint nMethods)</span></span><br><span class="hljs-function">jint <span class="hljs-title">UnregisterNatives</span><span class="hljs-params">(jclass clazz)</span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> </span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* name;      <span class="hljs-comment">// Java方法名</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* signature; <span class="hljs-comment">// 方法签名</span><br>    <span class="hljs-type">void</span>*       fnPtr;     <span class="hljs-comment">// 函数指针</span><br>&#125; JNINativeMethod;<br></code></pre></td></tr></table></figure><p>示例代码如下：</p><p>在Java层的MainActivity中，声明了一个native方法：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">DynamicRegistration</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>并且调用了该方法。然后native层的实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//所要动态加载的函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DynamicRegistrationNative</span><span class="hljs-params">(JNIEnv *env, jobject thiz)</span> </span>&#123;<br>    <span class="hljs-built_in">LOGD</span>(<span class="hljs-string">&quot;call DynamicRegistration method&quot;</span>);<br>&#125;<br><span class="hljs-comment">//使用JNINativeMethod结构体记录要动态注册的函数</span><br>JNINativeMethod jmethods[] = &#123;<br>        &#123;<span class="hljs-string">&quot;DynamicRegistration&quot;</span>, <span class="hljs-string">&quot;()V&quot;</span>, (<span class="hljs-type">void</span> *)(DynamicRegistrationNative)&#125;<br>&#125;;<br><span class="hljs-comment">//在JNI_OnLoad函数中实现动态注册</span><br><span class="hljs-function">JNIEXPORT jint JNICALL <span class="hljs-title">JNI_OnLoad</span><span class="hljs-params">(JavaVM* vm, <span class="hljs-type">void</span>* reserved)</span></span>&#123;<br>    JNIEnv* env = <span class="hljs-literal">nullptr</span>;<br>    jint result = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">if</span> (vm-&gt;<span class="hljs-built_in">GetEnv</span>((<span class="hljs-type">void</span>**)&amp;env,JNI_VERSION_1_6) != JNI_OK)&#123;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-comment">//获取动态注册的函数所在的类</span><br>    jclass  clz = env-&gt;<span class="hljs-built_in">FindClass</span>(<span class="hljs-string">&quot;com/example/nativetest/MainActivity&quot;</span>);<br>    env-&gt;<span class="hljs-built_in">RegisterNatives</span>(clz,jmethods,<span class="hljs-built_in">sizeof</span>(jmethods)/<span class="hljs-built_in">sizeof</span>(JNINativeMethod));<br><br>    result = JNI_VERSION_1_6;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-3-注册时机"><a href="#10-3-注册时机" class="headerlink" title="10.3 注册时机"></a>10.3 注册时机</h2><table><thead><tr><th align="left">注册时机</th><th align="left">注册方式</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">第一次调用native 方法时</td><td align="left">静态注册</td><td align="left">虚拟机会在 JNI 函数库中搜索该函数指针并记录下来，后续调用不需要重复搜索。</td></tr><tr><td align="left">加载 so 库时</td><td align="left">动态注册</td><td align="left">加载 so 库时会自动回调 JNI_OnLoad 函数，在其中调用 RegisterNatives 注册。</td></tr><tr><td align="left">提前注册</td><td align="left">动态注册</td><td align="left">在加载 so 库后，调用该 native 方法前，通过<u>静态注册的 native 函数</u>触发 RegisterNatives 注册。例如在 App 启动时，很多系统源码会提前做一次注册。</td></tr></tbody></table><h1 id="十一、JavaVM"><a href="#十一、JavaVM" class="headerlink" title="十一、JavaVM"></a>十一、JavaVM</h1><h2 id="11-1-JavaVM是什么"><a href="#11-1-JavaVM是什么" class="headerlink" title="11.1 JavaVM是什么"></a>11.1 JavaVM是什么</h2><p><code>JavaVM</code>是 <code>Java </code>虚拟机在 <code>JNI </code>层的代表，在一个虚拟机进程中只有一个 <code>JVM</code>，因此该进程的所有线程都可以使用这个 <code>JVM</code>。<code>JavaVM</code>的定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">_JavaVM</span>;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(__cplusplus)</span><br><span class="hljs-comment">//C++的宏定义</span><br><span class="hljs-keyword">typedef</span> _JavaVM JavaVM;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-comment">//C的宏定义</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">JNIInvokeInterface</span>* JavaVM;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * JNI invocation interface.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">JNIInvokeInterface</span> &#123;<br>    <span class="hljs-type">void</span>*       reserved0;<br>    <span class="hljs-type">void</span>*       reserved1;<br>    <span class="hljs-type">void</span>*       reserved2;<br><br>    <span class="hljs-built_in">jint</span>        (*DestroyJavaVM)(JavaVM*);<br>    <span class="hljs-built_in">jint</span>        (*AttachCurrentThread)(JavaVM*, JNIEnv**, <span class="hljs-type">void</span>*);<br>    <span class="hljs-built_in">jint</span>        (*DetachCurrentThread)(JavaVM*);<br>    <span class="hljs-built_in">jint</span>        (*GetEnv)(JavaVM*, <span class="hljs-type">void</span>**, jint);<br>    <span class="hljs-built_in">jint</span>        (*AttachCurrentThreadAsDaemon)(JavaVM*, JNIEnv**, <span class="hljs-type">void</span>*);<br>&#125;;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * C++ version.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">_JavaVM</span> &#123;<br>    <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">JNIInvokeInterface</span>* functions;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(__cplusplus)</span><br>    <span class="hljs-function">jint <span class="hljs-title">DestroyJavaVM</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123; <span class="hljs-keyword">return</span> functions-&gt;<span class="hljs-built_in">DestroyJavaVM</span>(<span class="hljs-keyword">this</span>); &#125;<br>    <span class="hljs-function">jint <span class="hljs-title">AttachCurrentThread</span><span class="hljs-params">(JNIEnv** p_env, <span class="hljs-type">void</span>* thr_args)</span></span><br><span class="hljs-function">    </span>&#123; <span class="hljs-keyword">return</span> functions-&gt;<span class="hljs-built_in">AttachCurrentThread</span>(<span class="hljs-keyword">this</span>, p_env, thr_args); &#125;<br>    <span class="hljs-function">jint <span class="hljs-title">DetachCurrentThread</span><span class="hljs-params">()</span></span><br><span class="hljs-function">    </span>&#123; <span class="hljs-keyword">return</span> functions-&gt;<span class="hljs-built_in">DetachCurrentThread</span>(<span class="hljs-keyword">this</span>); &#125;<br>    <span class="hljs-function">jint <span class="hljs-title">GetEnv</span><span class="hljs-params">(<span class="hljs-type">void</span>** env, jint version)</span></span><br><span class="hljs-function">    </span>&#123; <span class="hljs-keyword">return</span> functions-&gt;<span class="hljs-built_in">GetEnv</span>(<span class="hljs-keyword">this</span>, env, version); &#125;<br>    <span class="hljs-function">jint <span class="hljs-title">AttachCurrentThreadAsDaemon</span><span class="hljs-params">(JNIEnv** p_env, <span class="hljs-type">void</span>* thr_args)</span></span><br><span class="hljs-function">    </span>&#123; <span class="hljs-keyword">return</span> functions-&gt;<span class="hljs-built_in">AttachCurrentThreadAsDaemon</span>(<span class="hljs-keyword">this</span>, p_env, thr_args); &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span> <span class="hljs-comment">/*__cplusplus*/</span></span><br>&#125;;<br></code></pre></td></tr></table></figure><p><code>_JavaVM</code>其实是对<code>JNIInvokeInterface</code>的一个封装结构体，里面的方法最终还是调用<code>JNIInvokeInterface</code>的方法实现。</p><p>在以上方法中，我们通常使用<code>GetEnv()</code>方法或者<code>AttachCurrentThread()</code>方法（子线程中）来获取<code>JNIEnv</code>。</p><p>由于<code>JavaVm</code>在C和C++中的宏定义不同（C中是结构体指针，C++中是结构体），因此使用时是有区别的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">JavaVM* vm;<br>JNIEnv* env = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-comment">//C++</span><br>vm-&gt;<span class="hljs-built_in">GetEnv</span>((<span class="hljs-type">void</span>**)&amp;env,JNI_VERSION_1_6);<br><span class="hljs-comment">//C</span><br>(*vm)-&gt;<span class="hljs-built_in">GetEnv</span>((<span class="hljs-type">void</span>**)&amp;env,JNI_VERSION_1_6);<br></code></pre></td></tr></table></figure><h2 id="11-2-JavaVM的获取"><a href="#11-2-JavaVM的获取" class="headerlink" title="11.2 JavaVM的获取"></a>11.2 JavaVM的获取</h2><p>通过<code>JNIEnv</code>的<code>GetJavaVM(JavaVM** vm)</code>方法来获取<code>JavaVM</code>。</p><h1 id="十二、JNIEnv"><a href="#十二、JNIEnv" class="headerlink" title="十二、JNIEnv"></a>十二、JNIEnv</h1><h2 id="12-1-JNIEnv是什么"><a href="#12-1-JNIEnv是什么" class="headerlink" title="12.1 JNIEnv是什么"></a>12.1 JNIEnv是什么</h2><p><code>JNIEnv</code> 是 Native 层中 Java 环境的代表，通过 <code>JNIEnv*</code> 指针就可以在 Native 层中访问 Java 层的代码并进行操作，比如调用 Java 的方法、操作 Java 的变量和对象等。但是它只在创建它的线程中有效，不能跨线程传递， 因此不同线程的 JNIEnv 是彼此独立的。</p><p><code>JNIEnv</code> 的定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">_JNIEnv</span>;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(__cplusplus)</span><br><span class="hljs-keyword">typedef</span> _JNIEnv JNIEnv;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">JNINativeInterface</span>* JNIEnv;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">_JNIEnv</span> &#123;<br>    <span class="hljs-comment">/* do not rename this; it does not seem to be entirely opaque */</span><br>    <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">JNINativeInterface</span>* functions;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(__cplusplus)</span><br>    <span class="hljs-function">jint <span class="hljs-title">GetVersion</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-keyword">return</span> functions-&gt;<span class="hljs-built_in">GetVersion</span>(<span class="hljs-keyword">this</span>); &#125;<br><br>    <span class="hljs-function">jclass <span class="hljs-title">DefineClass</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *name, jobject loader, <span class="hljs-type">const</span> jbyte* buf, jsize bufLen)</span></span><br><span class="hljs-function">    </span>&#123; <span class="hljs-keyword">return</span> functions-&gt;<span class="hljs-built_in">DefineClass</span>(<span class="hljs-keyword">this</span>, name, loader, buf, bufLen); &#125;<br>...<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">JNINativeInterface</span> &#123;<br>    <span class="hljs-type">void</span>*       reserved0;<br>    <span class="hljs-type">void</span>*       reserved1;<br>    <span class="hljs-type">void</span>*       reserved2;<br>    <span class="hljs-type">void</span>*       reserved3;<br>    <span class="hljs-built_in">jint</span>        (*GetVersion)(JNIEnv *);<br>    <span class="hljs-built_in">jclass</span>      (*DefineClass)(JNIEnv*, <span class="hljs-type">const</span> <span class="hljs-type">char</span>*, jobject, <span class="hljs-type">const</span> jbyte*, jsize);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>同样的<code>_JNIEnv</code>其实是对<code>JNINativeInterface</code>的一个封装结构体，里面的方法最终还是调用<code>JNINativeInterface</code>的方法实现。</p><p>由于JNIEnv在C和C++中的宏定义不同（C中是结构体指针，C++中是结构体），因此使用时是有区别的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">JNIEnv* env;<br><span class="hljs-comment">//C++</span><br>env-&gt;<span class="hljs-built_in">FindClass</span>(<span class="hljs-string">&quot;java/lang/String&quot;</span>);<br><span class="hljs-comment">//C</span><br>(*env)-&gt;<span class="hljs-built_in">FindClass</span>(env, <span class="hljs-string">&quot;java/lang/String&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="12-2-JNIEnv的获取"><a href="#12-2-JNIEnv的获取" class="headerlink" title="12.2 JNIEnv的获取"></a>12.2 JNIEnv的获取</h2><p>通过<code>JavaVM</code>的<code>GetEnv()</code>方法或者<code>AttachCurrentThread()</code>方法（子线程中）来获取<code>JNIEnv</code>。</p><h1 id="十三、SO文件生成的相关事项"><a href="#十三、SO文件生成的相关事项" class="headerlink" title="十三、SO文件生成的相关事项"></a>十三、SO文件生成的相关事项</h1><h2 id="13-1-Native层创建CPP文件"><a href="#13-1-Native层创建CPP文件" class="headerlink" title="13.1 Native层创建CPP文件"></a>13.1 Native层创建CPP文件</h2><p>在<code>main/cpp</code>目录下创建的新cpp文件，需要在<code>CMakeLists.txt</code>中的<code>add_library</code>中声明，具体如下：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312261957688.png"></p><h2 id="13-2-多个cpp编译成多个so库-x2F-一个so库"><a href="#13-2-多个cpp编译成多个so库-x2F-一个so库" class="headerlink" title="13.2 多个cpp编译成多个so库&#x2F;一个so库"></a>13.2 多个cpp编译成多个so库&#x2F;一个so库</h2><p>默认情况（只有一个<code>add_library</code>标签）是无论多少cpp文件，只编译成一个so库。</p><p>想要编译成多个so库，可以通过额外添加<code>add_library</code>标签，在其中指定so库的名字和所涉及到的cpp文件。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312262013223.png"></p><h2 id="13-3-自定义so文件名"><a href="#13-3-自定义so文件名" class="headerlink" title="13.3 自定义so文件名"></a>13.3 自定义so文件名</h2><p>在<code>add_library</code>标签中直接写明，见上图所示。</p><h2 id="13-4-添加第三方库或者系统库"><a href="#13-4-添加第三方库或者系统库" class="headerlink" title="13.4 添加第三方库或者系统库"></a>13.4 添加第三方库或者系统库</h2><p>如果想要添加第三方库或者系统库，则需按如下步骤进行：</p><ol><li><p>将so库复制到<code>src/main/jniLibs/$&#123;架构名称&#125;</code>目录下，如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312262124191.png"></p></li><li><p>如果需要相关的<code>.h</code>头文件，复制到cpp目录下或则新建目录。</p></li><li><p>在<code>CMakeLists.txt</code>中声明，如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312262134297.png"></p></li></ol><p>生成的apk的so库如下所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312262134616.png"></p><p>明显将第三方库链接进来了。</p><h2 id="13-5-生成指定架构的so库"><a href="#13-5-生成指定架构的so库" class="headerlink" title="13.5 生成指定架构的so库"></a>13.5 生成指定架构的so库</h2><p>如果想要生成指定应用二进制接口（ABI）的so库，可以在<code>buid.gradle.kts</code>文件中声明：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312251147863.png"></p><h2 id="13-6-Native层调用so库"><a href="#13-6-Native层调用so库" class="headerlink" title="13.6 Native层调用so库"></a>13.6 Native层调用so库</h2><p>一种方法是通过<code>dlopen</code>函数打开so库，通过<code>dlsym</code>函数获取指定函数的句柄来使用，以上方法需要导入<code>dlfcn.h</code>才能使用。</p><p>示例代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//定义函数名导出符号</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OpenMemory <span class="hljs-string">&quot;_ZN3art7DexFile10OpenMemoryEPKhjRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEjPNS_6MemMapEPKNS_10OatDexFileEPS9_&quot;</span></span><br><span class="hljs-comment">/*定义函数指针*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> *(*org_artDexFileOpenMemory)(<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> *base,<br>                                            <span class="hljs-type">size_t</span> size,<br>                                            <span class="hljs-type">const</span> std::string &amp;location,<br>                                            <span class="hljs-type">uint32_t</span> location_checksum,<br>                                            <span class="hljs-type">void</span> *mem_map,<br>                                            std::string *error_msg);<br><span class="hljs-comment">//打开libart库</span><br><span class="hljs-type">void</span>* artHandle = (<span class="hljs-type">void</span>*)<span class="hljs-built_in">dlopen</span>(<span class="hljs-string">&quot;libart.so&quot;</span>, RTLD_LAZY);<br><span class="hljs-comment">//获取OpenMemory函数指针</span><br><span class="hljs-keyword">auto</span> func = (org_artDexFileOpenMemory) <span class="hljs-built_in">dlsym</span>(artHandle, OpenMemory);<br></code></pre></td></tr></table></figure><p>另一种方法就是 13.4 所述，导入后库后可直接使用。</p><hr><p>参考：<br><a href="https://juejin.cn/post/7125338583959306248">NDK 系列（5）：JNI 从入门到实践，万字爆肝详解！ - 掘金 (juejin.cn)</a></p><p><a href="https://juejin.cn/post/7125021894562349092/#heading-2">NDK 系列（6）：说一下注册 JNI 函数的方式和时机 - 掘金 (juejin.cn)</a></p><p><a href="https://whitebird0.github.io/post/NDK%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html">Android开发学习笔记——NDK开发 | Whitebird’s Home (whitebird0.github.io)</a></p><p><a href="https://blog.csdn.net/tkwxty/article/details/103609014">JNI&#x2F;NDK入门指南之JNI字符串处理</a></p><p><a href="https://blog.csdn.net/tkwxty/article/details/103665532">JNI&#x2F;NDK入门指南之JNI访问数组</a></p><p><a href="https://juejin.cn/post/7066453944758861837">Android jni调用第三方so库和.h文件 - 掘金 (juejin.cn)</a></p><p><a href="https://blog.csdn.net/gxhea/article/details/115616602">CMakeList编译报错ninja: error: missing and no known rule to make it解决方法-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NDK</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Frida入门练习(二) - KGB Message</title>
    <link href="/2023/12/21/Frida%E5%85%A5%E9%97%A8%E7%BB%83%E4%B9%A0(%E4%BA%8C)%20-%20KGB%20Messager/"/>
    <url>/2023/12/21/Frida%E5%85%A5%E9%97%A8%E7%BB%83%E4%B9%A0(%E4%BA%8C)%20-%20KGB%20Messager/</url>
    
    <content type="html"><![CDATA[<p>题目附件：<a href="https://github.com/tlamb96/kgb_messenger">tlamb96&#x2F;kgb_messenger: An Android CTF practice challenge (github.com)</a></p><hr><h1 id="MainActivity"><a href="#MainActivity" class="headerlink" title="MainActivity"></a>MainActivity</h1><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312211528403.png"></p><p>这里我们需要跟踪一下R.string.User，直接点击，可以知道对应的资源id为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">User</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x7f0d0000</span>;<br></code></pre></td></tr></table></figure><p>根据这个资源id在<code>resources.arsc</code>中可以搜索到对应的string标签名称为”User”：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;public type<span class="hljs-operator">=</span><span class="hljs-string">&quot;string&quot;</span> name<span class="hljs-operator">=</span><span class="hljs-string">&quot;User&quot;</span> id<span class="hljs-operator">=</span><span class="hljs-string">&quot;0x7f0d0000&quot;</span> /&gt;<br></code></pre></td></tr></table></figure><p>根据标签名称直接搜索资源文件（xml文件）：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312211532907.png"></p><p>解码Base64就得到了第一个flag：FLAG{57ERL1NG_4RCH3R}。</p><p>要想进入下一关，我们就需要hook系统方法<code>System.getProperty()</code>、<code>System.getenv()</code>，使其直接返回正确的字符串，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">MainActivity</span>(<span class="hljs-params"></span>)&#123;<br><br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<br>        <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">var</span> <span class="hljs-title class_">SystemClass</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;java.lang.System&quot;</span>);<br>            <span class="hljs-title class_">SystemClass</span>.<span class="hljs-property">getProperty</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&quot;java.lang.String&quot;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">key</span>)&#123;<br>                <span class="hljs-keyword">var</span> tmp = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getProperty</span>(key);<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Russia&quot;</span>;<br>            &#125;<br>            <span class="hljs-title class_">SystemClass</span>.<span class="hljs-property">getenv</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&quot;java.lang.String&quot;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">name</span>)&#123;<br>                <span class="hljs-keyword">var</span> tmp = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">getenv</span>(name);<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;RkxBR3s1N0VSTDFOR180UkNIM1J9Cg==&quot;</span>;<br>            &#125;<br>        &#125;<br>    )<br><br>&#125;<br><br><span class="hljs-title function_">setImmediate</span>(<span class="hljs-title class_">MainActivity</span>)<br></code></pre></td></tr></table></figure><h1 id="LoginActivity"><a href="#LoginActivity" class="headerlink" title="LoginActivity"></a>LoginActivity</h1><p>是一个登录界面，所对应的代码逻辑如下：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312211542220.png"></p><p>如果我们只是简单的进入下一关，当然可以直接hook <code>j()</code>方法，使其直接返回true。但是我们还需要得到flag，flag的生成需要依靠账号和密码（详细见<code>i()</code>方法）。</p><p>其中 <code>j()、i()</code>如下：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312211543965.png"></p><p>所以说我们不应hook <code>j()</code>方法使其返回true，而是要逆md5码获取密码明文，推荐网站<a href="https://md5hashing.net/hash/md5">md5 hash decoder and calculator (md5hashing.net)</a>。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312211609534.png"></p><p>得到密码明文为：guest。</p><p>为了更为方便点，我们还可以hook <code>Toast.makeText()</code>方法，在控制台输出flag，毕竟toast弹窗显示时间比较短而且还不能复制。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">LoginActivity</span>(<span class="hljs-params"></span>)&#123;<br><br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<br>        <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">var</span> <span class="hljs-title class_">ToastClass</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;android.widget.Toast&quot;</span>);<br>            <span class="hljs-title class_">ToastClass</span>.<span class="hljs-property">makeText</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&quot;android.content.Context&quot;</span>, <span class="hljs-string">&quot;java.lang.CharSequence&quot;</span>, <span class="hljs-string">&quot;int&quot;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">context, text, duration</span>)&#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;flag = &quot;</span> + text);<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">makeText</span>(context,text,duration);<br>            &#125;<br>        &#125;<br>    )<br><br>&#125;<br><br><span class="hljs-title function_">setImmediate</span>(<span class="hljs-title class_">LoginActivity</span>)<br></code></pre></td></tr></table></figure><p>得到第二个flag：FLAG{G00G13_PR0}</p><h1 id="MessengerActivity"><a href="#MessengerActivity" class="headerlink" title="MessengerActivity"></a>MessengerActivity</h1><p>是一个聊天界面。发送消息的代码逻辑如下：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312212001850.png"></p><p>来看<code>a()</code>和<code>b()</code>这两个方法：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312212007984.png"></p><p>就是两个简单的加密方法，要说有点挑战的也就是移位异或了，不过这个拿个例子在草稿上推演一遍就知道怎么做了。</p><p>解密脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">p = <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;V@]EAASB\u0012WZF\u0012e,a$7(&amp;am2(3.\u0003&quot;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(p) // <span class="hljs-number">2</span>):<br>    c = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(p[-<span class="hljs-number">1</span>-i]) ^ <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;A&#x27;</span>))<br>    p[-<span class="hljs-number">1</span> - i] = <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(p[i]) ^ <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;2&#x27;</span>))<br>    p[i] = c<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(_ <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> p))<br><br><br>r = <span class="hljs-built_in">list</span>(<span class="hljs-string">&quot;\u0000dslp&#125;oQ\u0000 dks$|M\u0000h +AYQg\u0000P*!M$gQ\u0000&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(r) // <span class="hljs-number">2</span>):<br>    r[i], r[-<span class="hljs-number">1</span>-i] = r[-<span class="hljs-number">1</span>-i], r[i]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(r)):<br>    shiftBit = i % <span class="hljs-number">8</span><br>    <span class="hljs-keyword">if</span> shiftBit == <span class="hljs-number">0</span>:<span class="hljs-comment"># &gt;&gt; 0 的还原不了</span><br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-comment"># 重复循环就可以得到原来的</span><br>    <span class="hljs-keyword">while</span> shiftBit &lt; <span class="hljs-number">8</span>:<br>        r[i] = <span class="hljs-built_in">chr</span>((<span class="hljs-built_in">ord</span>(r[i]) &gt;&gt; shiftBit) ^ <span class="hljs-built_in">ord</span>(r[i]))<br>        shiftBit *= <span class="hljs-number">2</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(_ <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> r))<br></code></pre></td></tr></table></figure><p>得到的明文如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312212010335.png"></p><p>由于存在移位为0bit的情况，这种情况最后是相同明文进行异或得到0，是无法还原出来的，所以需要我们自己手动还原。</p><p>最终flag如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312211733197.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>Hook</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Frida</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Frida入门练习(一) - 七层关卡</title>
    <link href="/2023/12/20/Frida%E5%85%A5%E9%97%A8%E7%BB%83%E4%B9%A0(%E4%B8%80)%20-%20%E4%B8%83%E5%B1%82%E5%85%B3%E5%8D%A1/"/>
    <url>/2023/12/20/Frida%E5%85%A5%E9%97%A8%E7%BB%83%E4%B9%A0(%E4%B8%80)%20-%20%E4%B8%83%E5%B1%82%E5%85%B3%E5%8D%A1/</url>
    
    <content type="html"><![CDATA[<p>附件：见[<a href="https://bbs.kanxue.com/thread-278023.htm">原创]frida基础 闯关训练 七层关卡-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p><hr><h1 id="LoginActivity"><a href="#LoginActivity" class="headerlink" title="LoginActivity"></a>LoginActivity</h1><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312201203055.png"></p><p><code>onClick()</code>方法中判断了输入不能为空，且要满足<code>LoginActivity.a(obj, obj).equals(obj2)</code>才行，方法如下：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312201136231.png"></p><p>很简单，也就是密码是账号的HmacSha256加密，加密使用的密钥是账号本身。</p><p>这里我们使用frida来操作，编写js脚本来hook<code>a()</code>方法，打印我们需要的返回值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">login</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<br>        <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">var</span> clazz = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.androiddemo.Activity.LoginActivity&quot;</span>);<br>            clazz.<span class="hljs-property">a</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&quot;java.lang.String&quot;</span>, <span class="hljs-string">&quot;java.lang.String&quot;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">str, str2</span>)&#123;<br>                <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">a</span>(str, str2);<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;HmacSHA256: &quot;</span> + result);<br>                <span class="hljs-keyword">return</span> <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;java.lang.String&quot;</span>).$new(result);<br>            &#125;<br><br>        &#125;<br>    )<br>&#125;<br><br><span class="hljs-title function_">setImmediate</span>(login)<br></code></pre></td></tr></table></figure><p>输出结果如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">HmacSHA256</span>: <span class="hljs-number">4</span>e4feaea959d426155a480dc07ef92f4754ee93edbe56d993d74f131497e66fb<br></code></pre></td></tr></table></figure><p>我们可以通过<code>adb shell input text &quot;xxx&quot;</code>将这段值输入到获得焦点的EditText控件中。</p><h1 id="FridaActivity1"><a href="#FridaActivity1" class="headerlink" title="FridaActivity1"></a>FridaActivity1</h1><p>整个UI界面就一个按钮可以触发，对应代码如下：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312201210395.png"></p><p>由于我们无法输入，所以得hook<code>a()</code>方法，使其直接返回后面这串字符。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">FridaActivity1</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<br>        <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">var</span> clazz = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.androiddemo.Activity.FridaActivity1&quot;</span>);<br>            clazz.<span class="hljs-property">a</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">bArr</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;java.lang.String&quot;</span>).$new(<span class="hljs-string">&quot;R4jSLLLLLLLLLLOrLE7/5B+Z6fsl65yj6BgC6YWz66gO6g2t65Pk6a+P65NK44NNROl0wNOLLLL=&quot;</span>);<br>            &#125;<br>        &#125;<br>    )<br>&#125;<br><br><span class="hljs-title function_">setImmediate</span>(<span class="hljs-title class_">FridaActivity1</span>)<br></code></pre></td></tr></table></figure><h1 id="FridaActivity2"><a href="#FridaActivity2" class="headerlink" title="FridaActivity2"></a>FridaActivity2</h1><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312201232407.png"></p><p><code>CheckSuccess()</code>为父类方法，是个空的，可以不用管它。分析可知，我们需要hook FridaActivity2实例，篡改这两个变量的值就行了（直接改或者调用set方法改）.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">FridaActivity2</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<br>        <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">var</span> clazz = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.androiddemo.Activity.FridaActivity2&quot;</span>);<br>            <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">choose</span>(<span class="hljs-string">&quot;com.example.androiddemo.Activity.FridaActivity2&quot;</span>,&#123;<br>                <span class="hljs-attr">onMatch</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>)&#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;found instance: FridaActivity2&quot;</span>);<br>                    obj.<span class="hljs-property">static_bool_var</span>.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span>;<span class="hljs-comment">//注意是boolean基本类型，而不是Boolean类，所以Java.use(&quot;java.lang.Boolean&quot;).$new()会报错</span><br>                    obj.<span class="hljs-property">bool_var</span>.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;static_bool_var = &quot;</span> + obj.<span class="hljs-property">static_bool_var</span> + <span class="hljs-string">&quot;; bool_var = &quot;</span> + obj.<span class="hljs-property">bool_var</span>);<br>                &#125;,<br>                <span class="hljs-attr">onComplete</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;finish&quot;</span>)<br>                &#125;<br>            &#125;)<br>        &#125;<br>    )<br>&#125;<br><br><span class="hljs-title function_">setImmediate</span>(<span class="hljs-title class_">FridaActivity2</span>)<br></code></pre></td></tr></table></figure><h1 id="FridaActivity3"><a href="#FridaActivity3" class="headerlink" title="FridaActivity3"></a>FridaActivity3</h1><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312201950351.png"></p><p>整个操作跟FridaActivity2的一样，不过需要注意的是：<strong>如果字段名与方法名一样，则需要给字段名前加下划线”_”，否则获取到的是方法</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">FridaActivity3</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<br>        <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">choose</span>(<span class="hljs-string">&quot;com.example.androiddemo.Activity.FridaActivity3&quot;</span>,&#123;<br>                <span class="hljs-attr">onMatch</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">obj</span>)&#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;found instance: FridaActivity3&quot;</span>);<br>                    obj.<span class="hljs-property">static_bool_var</span>.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span>;<br>                    obj.<span class="hljs-property">bool_var</span>.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-comment">//属性名和方法名相同，引用属性名需要前置&quot;_&quot;</span><br>                    obj.<span class="hljs-property">_same_name_bool_var</span>.<span class="hljs-property">value</span> = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;static_bool_var = &quot;</span> + obj.<span class="hljs-property">static_bool_var</span>.<span class="hljs-property">value</span> + <span class="hljs-string">&quot;; bool_var = &quot;</span> + obj.<span class="hljs-property">bool_var</span>.<span class="hljs-property">value</span> + <span class="hljs-string">&quot;; obj.same_name_bool_var = &quot;</span> + obj.<span class="hljs-property">_same_name_bool_var</span>.<span class="hljs-property">value</span>);<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-title function_">same_name_bool_var</span>());<br>                &#125;,<br>                <span class="hljs-attr">onComplete</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;finish&quot;</span>);<br>                    <br>                &#125;<br>            &#125;)<br>        &#125;<br>    )<br>&#125;<br><br><span class="hljs-title function_">setImmediate</span>(<span class="hljs-title class_">FridaActivity3</span>)<br></code></pre></td></tr></table></figure><h1 id="FridaActivity4"><a href="#FridaActivity4" class="headerlink" title="FridaActivity4"></a>FridaActivity4</h1><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312201950668.png"></p><p>这个很简单，只要将这些方法全部hook一遍，修改返回值为true就行了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">FridaActivity4</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<br>        <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">var</span> clazz = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.androiddemo.Activity.FridaActivity4$InnerClasses&quot;</span>);<br>            clazz.<span class="hljs-property">check1</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;;<br>            clazz.<span class="hljs-property">check2</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;;<br>            clazz.<span class="hljs-property">check3</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;;<br>            clazz.<span class="hljs-property">check4</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;;<br>            clazz.<span class="hljs-property">check5</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;;<br>            clazz.<span class="hljs-property">check6</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;;<br><br>        &#125;<br>    )<br>&#125;<br><br><span class="hljs-title function_">setImmediate</span>(<span class="hljs-title class_">FridaActivity4</span>)<br></code></pre></td></tr></table></figure><h1 id="FridaActivity5"><a href="#FridaActivity5" class="headerlink" title="FridaActivity5"></a>FridaActivity5</h1><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312201954075.png"></p><p>仔细分析整个代码的话，不难知道，程序通过<code>loaddex()</code>方法创建DexClassLoader来动态加载dex文件，不过它将DexClassLoader强转为CheckInterface接口类，里面的<code>check()</code>方法由其子类DynamicCheck实现，也就是说，当调用<code>getDynamicDexCheck().check()</code>是，执行的是子类DynamicCheck的<code>check()</code>方法。所以，我们需要hook该方法，使其返回true。</p><p>但是，由于当前的类加载器是加载AndoridDemo.apk的，而<code>check()</code>方法在加载DynamicPlugin.dex的类加载器中，所以需要遍历类加载器寻找。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">FridaActivity5</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<br>        <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-comment">/*由于当前js使用的类加载器是加载AndoridDemo.apk的，</span><br><span class="hljs-comment">            所以需要加载DynamicPlugin.dex的类加载器，</span><br><span class="hljs-comment">            之后才能implementate DynamicCheck的check方法*/</span><br>            <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">enumerateClassLoaders</span>(&#123;<br>                <span class="hljs-attr">onMatch</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">loader</span>)&#123;<br>                    <span class="hljs-comment">//console.log(loader);</span><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        <span class="hljs-keyword">if</span>(loader.<span class="hljs-title function_">loadClass</span>(<span class="hljs-string">&quot;com.example.androiddemo.Dynamic.DynamicCheck&quot;</span>))&#123;<br>                            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;success&quot;</span>);<br>                            <span class="hljs-title class_">Java</span>.<span class="hljs-property">classFactory</span>.<span class="hljs-property">loader</span> = loader;<br>                            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(loader);<br>                            <span class="hljs-keyword">var</span> clazz = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.androiddemo.Dynamic.DynamicCheck&quot;</span>);<br>                            clazz.<span class="hljs-property">check</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125; <span class="hljs-keyword">catch</span> (error) &#123;<br>                        <br>                    &#125;<br>                    <br>                &#125;,<br>                <span class="hljs-attr">onComplete</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;classloader change&quot;</span>);<br>                &#125;<br>            &#125;)<br>        &#125;<br>    )<br>&#125;<br><br><span class="hljs-title function_">setImmediate</span>(<span class="hljs-title class_">FridaActivity5</span>)<br></code></pre></td></tr></table></figure><h1 id="FridaActivity6"><a href="#FridaActivity6" class="headerlink" title="FridaActivity6"></a>FridaActivity6</h1><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312201955594.png"></p><p>跟FridaActivity4一样，hook这些方法修改返回值就可以了（不需要像FridaActivity5一样，因为这些方法又不是动态加载来的）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">FridaActivity6</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<br>        <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">var</span> <span class="hljs-title class_">Frida6Class0</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.androiddemo.Activity.Frida6.Frida6Class0&quot;</span>);    <br>            <span class="hljs-title class_">Frida6Class0</span>.<span class="hljs-property">check</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">var</span> <span class="hljs-title class_">Frida6Class1</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.androiddemo.Activity.Frida6.Frida6Class1&quot;</span>);    <br>            <span class="hljs-title class_">Frida6Class1</span>.<span class="hljs-property">check</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">var</span> <span class="hljs-title class_">Frida6Class2</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.androiddemo.Activity.Frida6.Frida6Class2&quot;</span>);    <br>            <span class="hljs-title class_">Frida6Class2</span>.<span class="hljs-property">check</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125;<br>    )<br>&#125;<br><br><span class="hljs-title function_">setImmediate</span>(<span class="hljs-title class_">FridaActivity6</span>)<br></code></pre></td></tr></table></figure><p>然后到了第七关FridaActivity7，看源码可以知道整个练习就结束了。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>Hook</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Frida</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Frida的集成工具:Objection的使用</title>
    <link href="/2023/12/19/Frida%E7%9A%84%E9%9B%86%E6%88%90%E5%B7%A5%E5%85%B7-Objection%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/12/19/Frida%E7%9A%84%E9%9B%86%E6%88%90%E5%B7%A5%E5%85%B7-Objection%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="指令选项"><a href="#指令选项" class="headerlink" title="指令选项"></a>指令选项</h1><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">objection <span class="hljs-comment">--help</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312191537985.png"></p><h1 id="Objection连接"><a href="#Objection连接" class="headerlink" title="Objection连接"></a>Objection连接</h1><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">objection -g <span class="hljs-variable">&lt;packagename&gt;</span> explore<br>objection -N -h <span class="hljs-variable">&lt;phone&#x27;s ip&gt;</span> -p <span class="hljs-variable">&lt;port&gt;</span> -g <span class="hljs-variable">&lt;packagename&gt;</span> explore <span class="hljs-comment"># 指定ip与端口连接</span><br></code></pre></td></tr></table></figure><p>连接成功后是如下画面：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312191552118.png"></p><p>按空格可以获取命令提示以及对应的解释，如上图所示。</p><h1 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h1><h2 id="内存篇"><a href="#内存篇" class="headerlink" title="内存篇"></a>内存篇</h2><p><strong>查看内存中加载的所有库</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">memory list modules (--json  &lt;localfilepath&gt;) <span class="hljs-regexp">//</span>后者参数是将运行结果导出成json文件<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312191556968.png"></p><p><strong>查看指定库的导出函数</strong></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">memory list exports &lt;<span class="hljs-keyword">module</span><span class="hljs-built_in"> name</span>&gt; (--json  <span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">localfilepath</span>&gt;</span>)</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312191605738.png"></p><p><strong>内存dump</strong></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pf">memory dump <span class="hljs-literal">all</span> <span class="hljs-variable">&lt;localfilepath&gt;</span><br>memory dump from_base <span class="hljs-variable">&lt;base_address&gt;</span> <span class="hljs-variable">&lt;size_to_dump&gt;</span> <span class="hljs-variable">&lt;localfilepath&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312191632654.png"></p><p><strong>内存搜索</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">memory</span> <span class="hljs-keyword">search</span> <span class="hljs-string">&quot;&lt;pattern eg: 41 41 41 ?? 41&gt;&quot;</span> --offsets-only     <span class="hljs-comment">//只获取字符串的偏移量</span><br><span class="hljs-keyword">memory</span> <span class="hljs-keyword">search</span> <span class="hljs-string">&quot;&lt;pattern eg: 41 41 41 ?? 41&gt;&quot;</span> --string<br></code></pre></td></tr></table></figure><p>选项<code>--string</code>的例子如下：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312191614233.png"></p><p>选项<code>--offsets-only</code>的例子如下（需要将字符串转十六进制）：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312191618455.png"></p><p><strong>内存写</strong></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">memory <span class="hljs-built_in">write</span> <span class="hljs-string">&quot;&lt;address&gt;&quot;</span> <span class="hljs-string">&quot;&lt;pattern eg: 41 41 41 41&gt;&quot;</span> (<span class="hljs-comment">--string)</span><br></code></pre></td></tr></table></figure><p><strong>内存堆搜索实例</strong></p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">android heap <span class="hljs-keyword">search</span> instances &lt;<span class="hljs-keyword">class</span>&gt; (eg: com.example.<span class="hljs-keyword">test</span>)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312191653397.png"></p><p><strong>调用实例的方法</strong></p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs smali">android heap<span class="hljs-built_in"> execute </span>&lt;Hashcode&gt; &lt;methodname&gt;<br></code></pre></td></tr></table></figure><p>然而有参方法执行报错，无参方法可以成功执行。</p><p>有参方法可以通过编写js代码来执行，指令如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">android heap evaluate <span class="hljs-tag">&lt;<span class="hljs-name">Hashcode</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">methodname</span>&gt;</span><br></code></pre></td></tr></table></figure><p>接着就会进入到js代码编写环节，编写完后，Esc接着Enter，就会执行脚本。示例如下：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312192008039.png"></p><h2 id="hook篇"><a href="#hook篇" class="headerlink" title="hook篇"></a>hook篇</h2><p><strong>列出所有已加载的activities、class_loaders、classes、receivers、services。</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">android hooking list activities<span class="hljs-regexp">/class_loaders/</span>classes<span class="hljs-regexp">/receivers/</span>services<br>android hooking list class_methods &lt;classname&gt;<br></code></pre></td></tr></table></figure><p>例子：列举<code>android.openg.Matrix</code>类的方法，结果如下：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312191709561.png"></p><p><strong>搜索类</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">android hooking <span class="hljs-keyword">search</span> classes &lt;<span class="hljs-type">name</span>&gt; //<span class="hljs-type">name</span>可以全类名，也可以是部分关键字<br></code></pre></td></tr></table></figure><p><strong>搜索方法</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">android hooking <span class="hljs-keyword">search</span> methods &lt;<span class="hljs-type">name</span>&gt; (optional: &lt;package-<span class="hljs-keyword">filter</span>&gt;) //<span class="hljs-type">name</span>可以全类名，也可以是部分关键字<br></code></pre></td></tr></table></figure><p>例如，搜索<code>com.example.testfrida</code>包中的<code>MainActivity</code>方法：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312191719627.png"></p><p><strong>hook类的所有方法(不包括构造方法)</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">android hooking watch <span class="hljs-keyword">class</span> &lt;classname&gt; (--<span class="hljs-keyword">dump</span>-args)(--<span class="hljs-keyword">dump</span>-backtrace)(--<span class="hljs-keyword">dump</span>-<span class="hljs-keyword">return</span>)<br></code></pre></td></tr></table></figure><ul><li><code>--dump-args</code>：hook方法的参数并打印</li><li><code>--dump-backtrace</code>：hook方法的调用栈并打印</li><li><code>--dump-return</code>：hook方法的返回值并打印</li></ul><p><strong>hook类的指定方法(包括重载方法)</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle">android hooking watch class_method &lt;classname.method&gt; (--<span class="hljs-keyword">dump</span>-args)(--<span class="hljs-keyword">dump</span>-backtrace)(--<span class="hljs-keyword">dump</span>-<span class="hljs-keyword">return</span>)<br><span class="hljs-comment">//如果是构造方法，则method的值即为$init</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312191928701.png"></p><p><strong>hook 单个重载方法(需指定参数类型)</strong></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">android hooking watch class_method &lt;classname.method&gt; <span class="hljs-string">&quot;paramterTypes&quot;</span> (--<span class="hljs-keyword">dump</span>-args)(--<span class="hljs-keyword">dump</span>-backtrace)(--<span class="hljs-keyword">dump</span>-<span class="hljs-keyword">return</span>)<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312191931639.png"></p><p><strong>查看hook列表</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">jobs</span> list<br></code></pre></td></tr></table></figure><p><strong>取消hook</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">jobs</span> <span class="hljs-built_in">kill</span> &lt;Job ID&gt;<br></code></pre></td></tr></table></figure><p><strong>附加hook</strong></p><p>在某些app hook时， 需要在启动时hook，为了避免错过hook时机，采用附加模式，在objection 启动时就注入app。（也可以不这么做，而是先hook后启动程序）</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">objection -g <span class="hljs-symbol">&lt;packageName&gt;</span> explore --startup-<span class="hljs-keyword">command</span> &lt;<span class="hljs-string">&quot;xxx&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>设置方法返回值（仅限Boolean类型）</strong></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lasso">android hooking <span class="hljs-built_in">set</span> <span class="hljs-keyword">return_value</span> <span class="hljs-string">&quot;&lt;fully qualified class method&gt;&quot;</span> <span class="hljs-string">&quot;&lt;optional overload&gt;&quot;</span> (eg: <span class="hljs-string">&quot;com.example.test.doLogin&quot;</span>) &lt;<span class="hljs-literal">true</span>/<span class="hljs-literal">false</span>&gt;<br></code></pre></td></tr></table></figure><p><strong>为指定类中的各个方法生成hook代码：</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">android hooking <span class="hljs-keyword">generate</span> simple &lt;classname&gt;<br></code></pre></td></tr></table></figure><p>不过生成的只是大致框架，没有详细的内部方法实现，这些还得靠自己写。</p><p><strong>为指定类生成hook代码：</strong></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">android hooking <span class="hljs-keyword">generate</span> <span class="hljs-keyword">class</span> &lt;classname&gt;<br></code></pre></td></tr></table></figure><p>这个比较详细，应该是完全实现了？</p><h2 id="启动Activity或Service"><a href="#启动Activity或Service" class="headerlink" title="启动Activity或Service"></a>启动Activity或Service</h2><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">android <span class="hljs-built_in">int</span>ent launch_activity &lt;activity_class&gt;<br>android <span class="hljs-built_in">int</span>ent launch_service &lt;service_class&gt;<br></code></pre></td></tr></table></figure><p>如果应用的启动权限没有设置好，就可以达到Activity绕过的效果，比如说不用登陆就可以进入某些界面！！！</p><h2 id="关闭-ssl-效验"><a href="#关闭-ssl-效验" class="headerlink" title="关闭 ssl 效验"></a>关闭 ssl 效验</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">android sslpinning <span class="hljs-built_in">disable</span><br></code></pre></td></tr></table></figure><h2 id="关闭-root-检测"><a href="#关闭-root-检测" class="headerlink" title="关闭 root 检测"></a>关闭 root 检测</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">android root <span class="hljs-built_in">disable</span><br></code></pre></td></tr></table></figure><h2 id="显示-app-相关环境变量"><a href="#显示-app-相关环境变量" class="headerlink" title="显示 app 相关环境变量"></a>显示 app 相关环境变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">env</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312191559546.png"></p><p>可以看到缓存目录（cacheDirectory）以及安装后应用所在目录（packageCodePath）等。</p><h2 id="指令解释"><a href="#指令解释" class="headerlink" title="指令解释"></a>指令解释</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">help</span> &lt;<span class="hljs-built_in">command</span>&gt;<br></code></pre></td></tr></table></figure><hr><p>参考：</p><p><a href="https://www.anquanke.com/post/id/197657">https://www.anquanke.com/post/id/197657</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>Hook</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Frida</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python中frida库使用</title>
    <link href="/2023/12/18/Python%E4%B8%ADfrida%E5%BA%93%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/12/18/Python%E4%B8%ADfrida%E5%BA%93%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="启动frida服务"><a href="#启动frida服务" class="headerlink" title="启动frida服务"></a>启动frida服务</h1><h2 id="包名附加"><a href="#包名附加" class="headerlink" title="包名附加"></a>包名附加</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> frida<br><span class="hljs-keyword">import</span> sys<br><br>jscode = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>device = frida.get_usb_device()<span class="hljs-comment"># 获取usb连接的测试机</span><br>process = device.attach(<span class="hljs-string">&quot;设置&quot;</span>)<span class="hljs-comment"># 包名附加进程,可通过frida-ps -U查看</span><br>script = process.create_script(jscode)<span class="hljs-comment">#创建注入脚本</span><br>script.load()<span class="hljs-comment">#注入脚本</span><br>sys.stdin.read()<span class="hljs-comment"># 加这个才能回显log输出</span><br></code></pre></td></tr></table></figure><h2 id="PID附加"><a href="#PID附加" class="headerlink" title="PID附加"></a>PID附加</h2><p>由于有的应用是多进程，这个时候使用包名附加就会冲突，因此可以使用PID附加。PID附加同样使用<code>attach()</code>方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">frida.get_usb_device().attach(pid)<span class="hljs-comment">#pid附加进程,可通过frida-ps -U查看pid</span><br></code></pre></td></tr></table></figure><h2 id="spawn方式启动"><a href="#spawn方式启动" class="headerlink" title="spawn方式启动"></a>spawn方式启动</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> frida<br><span class="hljs-keyword">import</span> sys<br><br>jscode = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    </span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>device = frida.get_usb_device()<span class="hljs-comment"># 获取usb连接的测试机</span><br>pid = device.spawn([<span class="hljs-string">&#x27;com.android.settings&#x27;</span>])<span class="hljs-comment">#以挂起方式创建进程</span><br>process = device.attach(pid)<span class="hljs-comment">#然后再附加进程</span><br>script = process.create_script(jscode)<span class="hljs-comment">#创建脚本</span><br>script.load()<span class="hljs-comment">#注入脚本</span><br>device.resume(pid)<span class="hljs-comment">#恢复进程运行</span><br>sys.stdin.read()<span class="hljs-comment"># 回显log输出</span><br></code></pre></td></tr></table></figure><p>因为是以挂起的方式启动进程（相当于动调时的附加），程序处于暂停状态，所以需要<code>resume()</code>恢复进程运行</p><h2 id="非标准端口启动frida-server的连接"><a href="#非标准端口启动frida-server的连接" class="headerlink" title="非标准端口启动frida-server的连接"></a>非标准端口启动frida-server的连接</h2><p>如果使用非标准端口启动手机端frida-server时，</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">./frida-<span class="hljs-keyword">server</span> -l <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:port<br></code></pre></td></tr></table></figure><p>则python中的设备获取的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">device = frida.get_device_manager().add_remote_device(<span class="hljs-string">&quot;ip:port&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="连接多个设备"><a href="#连接多个设备" class="headerlink" title="连接多个设备"></a>连接多个设备</h2><p>通过<code>frida.get_device_manager().add_remote_device()</code>依次添加。</p><h1 id="js与python的交互"><a href="#js与python的交互" class="headerlink" title="js与python的交互"></a>js与python的交互</h1><h2 id="数据从js到python"><a href="#数据从js到python" class="headerlink" title="数据从js到python"></a>数据从js到python</h2><p>在js代码中，我们经常使用console.log()打印我们想要知道的值，但是这个值并不能交给python使用，因此在js代码中需要用到<code>send(message[, data])</code>方法将值传递给python处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> frida<br><span class="hljs-keyword">import</span> sys<br><br>jscode = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    function main()&#123;</span><br><span class="hljs-string">        Java.perform(function()&#123;</span><br><span class="hljs-string">            console.log(&quot;nihao123&quot;)</span><br><span class="hljs-string">            send(11111111)</span><br><span class="hljs-string">        &#125;)</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    setImmediate(main)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-comment"># 需要自定义方法，处理js传过来的值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">onMessage</span>(<span class="hljs-params">message, data</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;message = <span class="hljs-subst">&#123;message&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">if</span> message[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;send&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;value = <span class="hljs-subst">&#123;message[<span class="hljs-string">&#x27;payload&#x27;</span>]&#125;</span>&quot;</span>)<br><br>device = frida.get_usb_device()<br>process = device.attach(<span class="hljs-string">&#x27;设置&#x27;</span>)<br>script = process.create_script(jscode)<span class="hljs-comment">#创建注入脚本</span><br>script.on(<span class="hljs-string">&quot;message&quot;</span>, onMessage)<span class="hljs-comment">#注册消息处理函数</span><br>script.load()<span class="hljs-comment">#注入脚本</span><br>sys.stdin.read()<span class="hljs-comment"># 回显log输出</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">nihao123</span><br><span class="hljs-string">message = &#123;&#x27;type&#x27;: &#x27;send&#x27;, &#x27;payload&#x27;: 11111111&#125;</span><br><span class="hljs-string">value = 11111111</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br></code></pre></td></tr></table></figure><h2 id="数据从python到js"><a href="#数据从python到js" class="headerlink" title="数据从python到js"></a>数据从python到js</h2><p>python要向js发送数据则需要使用<code>script.post()</code>方法，js中则使用<code>recv([type, ]callback)</code>来接收。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> frida<br><span class="hljs-keyword">import</span> sys<br><br>jscode = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    function main()&#123;</span><br><span class="hljs-string">        Java.perform(function()&#123;</span><br><span class="hljs-string">            recv(function(obj)&#123;</span><br><span class="hljs-string">                console.log(obj.data)</span><br><span class="hljs-string">            &#125;).wait()</span><br><span class="hljs-string">        &#125;)</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    setImmediate(main)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>device = frida.get_usb_device()<br>process = device.attach(<span class="hljs-string">&#x27;设置&#x27;</span>)<br>script = process.create_script(jscode)<span class="hljs-comment">#创建注入脚本</span><br>script.load()<span class="hljs-comment">#注入脚本</span><br>script.post(&#123;<span class="hljs-string">&quot;data&quot;</span>: <span class="hljs-string">&quot;111111&quot;</span>&#125;)<br>sys.stdin.read()<span class="hljs-comment"># 回显log输出</span><br></code></pre></td></tr></table></figure><h1 id="rcp转发"><a href="#rcp转发" class="headerlink" title="rcp转发"></a>rcp转发</h1><p>js 端使用<code>rpc.exports = &#123; key: value&#125;</code>导出函数供python使用，其中键指定方法名称，值是导出的函数。</p><p>python端调用<code>script.exports_sync.func()</code>执行js中的函数。</p><blockquote><p> 注: 如果 js 导出函数中包含驼峰命名，则 python 需要将大写替换成_小写，如 getUser &#x3D;&gt; get_user</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> frida<br><span class="hljs-keyword">import</span> sys<br><br>jscode = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    function add(a, b)&#123;</span><br><span class="hljs-string">        return a + b;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    function sub(a, b)&#123;</span><br><span class="hljs-string">        return a - b;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    rpc.exports = &#123;</span><br><span class="hljs-string">        add: add,</span><br><span class="hljs-string">        sub: sub</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>device = frida.get_usb_device()<br>process = device.attach(<span class="hljs-string">&#x27;设置&#x27;</span>)<br>script = process.create_script(jscode)<span class="hljs-comment">#创建注入脚本</span><br>script.load()<span class="hljs-comment">#注入脚本</span><br><span class="hljs-comment"># result = script.exports.add(3, 5)报错</span><br><span class="hljs-comment"># DeprecationWarning: Script.exports will become asynchronous in the future, use the explicit Script.exports_sync instead</span><br>result = script.exports_sync.add(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)<br><span class="hljs-built_in">print</span>(result)<br></code></pre></td></tr></table></figure><h1 id="使用-fastapi-搭建服务端接口"><a href="#使用-fastapi-搭建服务端接口" class="headerlink" title="使用 fastapi 搭建服务端接口"></a>使用 fastapi 搭建服务端接口</h1><p><a href="https://blog.csdn.net/my_name_is_learn/article/details/109819127">超全面整理fastAPI(从入门到运用)，进来看十秒钟再走不迟-CSDN博客</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> frida<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> fastapi<br><span class="hljs-keyword">import</span> uvicorn<br><br>jscode = <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">    function getUserData(uid)&#123;</span><br><span class="hljs-string">        return &#123;&quot;username&quot;: &quot;gal2xy&quot;, &quot;uid&quot;: uid, token: &quot;asldhoinzponpnasdf&quot;&#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">    rpc.exports = &#123;</span><br><span class="hljs-string">        getUserData: getUserData</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>app = fastapi.FastAPI()<br><span class="hljs-comment"># 构造api：请求方式(路径)，请求方式:get、delete、post、put</span><br><span class="hljs-meta">@app.get(<span class="hljs-params"><span class="hljs-string">&quot;/getUserData&quot;</span></span>)</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">getUserData</span>(<span class="hljs-params">uid</span>):<br>    result = script.exports_sync.get_user_data(uid)<br>    <span class="hljs-keyword">return</span> result<br>uvicorn.run(app, port=<span class="hljs-number">8080</span>)<span class="hljs-comment"># 启动服务端</span><br><br>device = frida.get_usb_device()<br>process = device.attach(<span class="hljs-string">&#x27;设置&#x27;</span>)<br>script = process.create_script(jscode)<span class="hljs-comment">#创建注入脚本</span><br>script.load()<span class="hljs-comment">#注入脚本</span><br></code></pre></td></tr></table></figure><p>在本地访问<a href="http://127.0.0.1:8080/getUserData?uid=123">127.0.0.1:8080&#x2F;getUserData?uid&#x3D;123</a>就可以得到userdata。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312181700772.png"></p><hr><p>参考：</p><p><a href="https://kuizuo.cn/docs/frida-python-usage">Frida Python库使用 | 愧怍的小站 (kuizuo.cn)</a></p><p><a href="https://blog.csdn.net/my_name_is_learn/article/details/109819127">超全面整理fastAPI(从入门到运用)，进来看十秒钟再走不迟-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>Hook</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Frida</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Frida Java层Hook学习笔记</title>
    <link href="/2023/12/17/Frida%20Java%E5%B1%82Hook%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/12/17/Frida%20Java%E5%B1%82Hook%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Java层Hook"><a href="#Java层Hook" class="headerlink" title="Java层Hook"></a>Java层Hook</h1><p>简单的代码框架：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-comment">//使用Java平台，Java层hook在Java.perform中执行</span><br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<br>        <span class="hljs-comment">//代码逻辑</span><br>        <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            ...<br>        &#125;<br>    )<br>&#125;<br><span class="hljs-comment">//调用main方法</span><br><span class="hljs-title function_">setImmediate</span>(main)<br></code></pre></td></tr></table></figure><h2 id="获取类对象"><a href="#获取类对象" class="headerlink" title="获取类对象"></a>获取类对象</h2><ul><li><code>Java.use(classname)</code>：获取<code>classname</code>对应的类。</li></ul><p>普通类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//普通类的获取</span><br><span class="hljs-keyword">var</span> clazz = Java.<span class="hljs-keyword">use</span>(<span class="hljs-string">&quot;com.example.testfrida.demo&quot;</span>);<br></code></pre></td></tr></table></figure><p>内部类：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//内部类的获取</span><br><span class="hljs-keyword">var</span> clazz = Java.<span class="hljs-keyword">use</span>(<span class="hljs-string">&quot;com.example.testfrida.demo<span class="hljs-subst">$innerClass</span>&quot;</span>);<br><span class="hljs-keyword">var</span> clazz = Java.<span class="hljs-keyword">use</span>(<span class="hljs-string">&#x27;外部类$1&#x27;</span>) <span class="hljs-comment">// 获取第一个内部类</span><br></code></pre></td></tr></table></figure><p>匿名类：</p><p>匿名类是根据内存生成，没有具体的内部类名，通过 smali 代码来判断，具体参考：<a href="https://blog.xhyeax.com/2021/10/13/frida-hook-anonymous-class/">Frida Hook匿名内部类 | Xhy’s Blog (xhyeax.com)</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> clazz = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;包名.MainActivity$1&#x27;</span>)<br></code></pre></td></tr></table></figure><p>枚举类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java">Java.choose(<span class="hljs-string">&quot;枚举类&quot;</span> &#123;<br>    onMatch: function (obj) &#123;<br>        console.log(obj.ordinal()); <span class="hljs-comment">// 输出枚举的键</span><br>    &#125;, onComplete: function () &#123;<br><br>    &#125;<br>&#125;)<br>console.log(Java.use(<span class="hljs-string">&quot;枚举类&quot;</span>).values()); <span class="hljs-comment">// 输出值</span><br></code></pre></td></tr></table></figure><p>获取类对象之后，可以使用类似Java反射的方法，具体如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> cl = java.<span class="hljs-title function_">use</span>(类名)<br><span class="hljs-comment">//cl.newInstance()</span><br><span class="hljs-keyword">var</span> methods = cl.<span class="hljs-property">class</span>.<span class="hljs-title function_">getDeclaredMethods</span>() 、<span class="hljs-title function_">getMethods</span>()  <span class="hljs-comment">// 方法</span><br><span class="hljs-keyword">var</span> constructors = cl.<span class="hljs-property">class</span>.<span class="hljs-title function_">getDeclaredConstructors</span>() <span class="hljs-comment">// 构造函数</span><br><span class="hljs-keyword">var</span> fields = cl.<span class="hljs-property">class</span>.<span class="hljs-title function_">getDeclaredFields</span>() <span class="hljs-comment">// 字段</span><br><span class="hljs-keyword">var</span> classes = cl.<span class="hljs-property">class</span>.<span class="hljs-title function_">getDeclaredClasses</span>() <span class="hljs-comment">// 内部类</span><br><span class="hljs-keyword">var</span> superClass = cl.<span class="hljs-property">class</span>.<span class="hljs-title function_">getSuperclass</span>() <span class="hljs-comment">// 父类(抽象类)</span><br><span class="hljs-keyword">var</span> interfaces = cl.<span class="hljs-property">class</span>.<span class="hljs-title function_">getInterfaces</span>() <span class="hljs-comment">// 所有接口</span><br><br><span class="hljs-comment">// 遍历输出</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> method <span class="hljs-keyword">of</span> methods) &#123;<br>  <span class="hljs-comment">//method.getName()、invoke()</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="普通方法Hook"><a href="#普通方法Hook" class="headerlink" title="普通方法Hook"></a>普通方法Hook</h2><p>测试用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>        <span class="hljs-keyword">return</span>  a + b;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//应用中主动调用</span><br>Log.d(<span class="hljs-string">&quot;demo&quot;</span>, <span class="hljs-string">&quot;onCreate: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">demo</span>().add(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>));<br></code></pre></td></tr></table></figure><p>hook代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<br>        <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">var</span> clazz = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.testfrida.demo&quot;</span>);<br>            clazz.<span class="hljs-property">add</span>.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>)&#123;<br>                <span class="hljs-comment">//修改传入的参数值</span><br>                a = <span class="hljs-number">1</span>;<br>                b = <span class="hljs-number">2</span>;<br>                <span class="hljs-comment">//调用原有的add方法，实现原有逻辑</span><br>                <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">add</span>(a,b);<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;value = &quot;</span> + result);<br>                <span class="hljs-comment">//原add方法需要返回，在这里也需要返回相应的类型值</span><br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>        &#125;<br>    )<br>&#125;<br><span class="hljs-title function_">setImmediate</span>(main)<br><span class="hljs-comment">/*结果</span><br><span class="hljs-comment">js输出：</span><br><span class="hljs-comment">value = 3</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">app log输出：</span><br><span class="hljs-comment">onCreate: 3</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><strong>注意：这里只是hook，并没有主动调用add方法，只有应用程序的代码逻辑触发了才会有结果。</strong></p><h2 id="重载方法Hook"><a href="#重载方法Hook" class="headerlink" title="重载方法Hook"></a>重载方法Hook</h2><ul><li><code>class.methodname.overload(paramterTypes...)</code>：通过<code>overload</code>指定特定的重载方法。</li><li><code>class.methodname.overloads</code>：获取<code>class</code>类中的<code>methodname</code>方法的所有重载方法。</li></ul><p>测试用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span>&#123;<br>        <span class="hljs-keyword">return</span>  a + b;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">int</span> c)</span>&#123;<br>        <span class="hljs-keyword">return</span> add(a, b) + c;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//应用中主动调用</span><br>Log.d(<span class="hljs-string">&quot;demo&quot;</span>, <span class="hljs-string">&quot;onCreate: &quot;</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">demo</span>().add(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>));<br></code></pre></td></tr></table></figure><p>hook代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<br>        <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">var</span> clazz = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.testfrida.demo&quot;</span>);<br><span class="hljs-comment">//通过overload()指定所要hook的重载方法</span><br>            clazz.<span class="hljs-property">add</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>)&#123;<br>                <span class="hljs-comment">//重写两个参数的add方法的加法逻辑为乘法逻辑</span><br>                <span class="hljs-keyword">var</span> result = a*b;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;value = &quot;</span> + result);<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br><span class="hljs-comment">//通过overload()指定所要hook的重载方法</span><br>            clazz.<span class="hljs-property">add</span>.<span class="hljs-title function_">overload</span>(<span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>, <span class="hljs-string">&#x27;int&#x27;</span>).<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params">a, b, c</span>)&#123;<br>                <span class="hljs-comment">//重写三个参数的add方法的加法逻辑为减法逻辑</span><br>                <span class="hljs-keyword">var</span> result = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">add</span>(a,b) - c;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;value = &quot;</span> + result);<br>                <span class="hljs-keyword">return</span> result;<br>            &#125;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            //function中的参数个数也可以改变！</span><br><span class="hljs-comment">            clazz.add.overload(&#x27;int&#x27;, &#x27;int&#x27;, &#x27;int&#x27;).implementation = function(a, b, c, d)&#123;</span><br><span class="hljs-comment">                d = 4</span><br><span class="hljs-comment">                var result = this.add(a,b) - c - d;</span><br><span class="hljs-comment">                console.log(&quot;value = &quot; + result);</span><br><span class="hljs-comment">                return result;</span><br><span class="hljs-comment">            &#125;</span><br><span class="hljs-comment">            */</span><br>        &#125;<br>    )<br>&#125;<br><span class="hljs-title function_">setImmediate</span>(main)<br><span class="hljs-comment">/*结果</span><br><span class="hljs-comment">js输出：注释掉的：</span><br><span class="hljs-comment">value = 30value = 30</span><br><span class="hljs-comment">value = 23value = 19</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">app log输出：</span><br><span class="hljs-comment">onCreate: 23onCreate: 19</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> clazz = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.testfrida.demo&quot;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(clazz.<span class="hljs-property">add</span>.<span class="hljs-property">overloads</span>);<br><span class="hljs-comment">/*输出</span><br><span class="hljs-comment">function add(int, int): int,function add(int, int, int): int</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="构造方法Hook"><a href="#构造方法Hook" class="headerlink" title="构造方法Hook"></a>构造方法Hook</h2><ul><li><code>class.$init</code>：获取class类的构造方法，如有多个重载的构造方法，使用<code>.overload(paramterTypes...)</code>指定。</li></ul><p>测试用例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">demo</span> &#123;<br>...<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">demo</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">demo</span><span class="hljs-params">(String b)</span> &#123;<br>        <span class="hljs-built_in">this</span>.b = b;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">demo</span><span class="hljs-params">(String b, <span class="hljs-type">boolean</span> flag)</span> &#123;<br>        <span class="hljs-built_in">this</span>.b = b;<br>        <span class="hljs-built_in">this</span>.flag = flag;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>hook代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<br>        <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-keyword">var</span> clazz = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.testfrida.demo&quot;</span>)<br>            <span class="hljs-comment">//多个构造方法使用overload方法指定</span><br>            clazz.<span class="hljs-property">$init</span>.<span class="hljs-title function_">overload</span>().<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-comment">//hook后代码逻辑实现</span><br>            &#125;<br>        &#125;<br>    )<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实例化对象"><a href="#实例化对象" class="headerlink" title="实例化对象"></a>实例化对象</h2><ul><li><code>class.$new(paramters...)</code>：实例化class类对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<br>    <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-keyword">var</span> clazz = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.testfrida.demo&quot;</span>);<br>        <span class="hljs-keyword">var</span> demoObj = clazz.$new();<br>        <span class="hljs-comment">//调用add方法</span><br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(demoObj.<span class="hljs-title function_">add</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>));<br>    &#125;<br>)<br></code></pre></td></tr></table></figure><h2 id="主动调用方法"><a href="#主动调用方法" class="headerlink" title="主动调用方法"></a>主动调用方法</h2><ul><li><p>静态方法：可通过类直接调用，也可通过实例调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> clazz = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(类名) <br>clazz.方法()<br></code></pre></td></tr></table></figure></li><li><p>非静态方法：只能通过实例调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> clazz = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(类名) <br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Obj</span> = clazz.$new(paramters...)<br><span class="hljs-title class_">Obj</span>.方法(paramters...)<br></code></pre></td></tr></table></figure></li></ul><h2 id="获取已有对象"><a href="#获取已有对象" class="headerlink" title="获取已有对象"></a>获取已有对象</h2><p>内存中遍历，找到所有符合条件的对象。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">choose</span>(<span class="hljs-string">&#x27;类路径&#x27;</span>, &#123;<br>    <span class="hljs-comment">//每遍历一个对象都会调用onMatch</span><br>    <span class="hljs-attr">onMatch</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params">obj</span>) &#123;<br>        <span class="hljs-comment">//todo...(主要在这里实现代码逻辑)</span><br>    &#125;,<br>    <span class="hljs-comment">//遍历完成后调用onComplete</span><br>    <span class="hljs-attr">onComplete</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-comment">//todo...</span><br>    &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="字段Hook"><a href="#字段Hook" class="headerlink" title="字段Hook"></a>字段Hook</h2><blockquote><p><strong>注: 如果字段名与方法名一样，则需要给字段名前加下划线_，否则获取到的是方法</strong></p></blockquote><h3 id="静态字段"><a href="#静态字段" class="headerlink" title="静态字段"></a>静态字段</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js">类.字段<span class="hljs-comment">//获取类的属性定义，例如Java.Field&#123;holder: &lt;class: com.example.testfrida.demo&gt;, fieldType: 1, fieldReturnType: I, value: 3&#125;</span><br>类.字段.<span class="hljs-property">value</span> <span class="hljs-comment">// 获取类的属性值</span><br>类.字段.<span class="hljs-property">value</span> = newValue <span class="hljs-comment">// 修改类的值</span><br></code></pre></td></tr></table></figure><h3 id="非静态字段"><a href="#非静态字段" class="headerlink" title="非静态字段"></a>非静态字段</h3><ul><li><p>通过<code>$new</code>实例化对象，然后再获取。</p></li><li><p>使用<code>Java.choose()</code>遍历内存获取已存在的类对象，然后再获取。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java">Java.choose(<span class="hljs-string">&#x27;类路径&#x27;</span>, &#123;<br>    onMatch: function (obj) &#123;<br>        obj.字段.value = ?;<br>        console.log(obj.字段.value);<br>    &#125;,<br>    onComplete: function () &#123;&#125;,<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h2 id="获取已加载的所有类名"><a href="#获取已加载的所有类名" class="headerlink" title="获取已加载的所有类名"></a>获取已加载的所有类名</h2><ul><li><code>Java.enumerateLoadedClassesSync()</code> ： 同步获取已加载所有类，返回一个数组，<strong>里面的类型是字符串并不是类对象</strong>。</li><li><code>Java.enumerateLoadedClasses() </code>：异步获取已加载所有类，需内部实现onMatch、onComplete方法。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1.</span><br><span class="hljs-keyword">var</span> classes = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">enumerateLoadedClassesSync</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i=<span class="hljs-number">0</span>;i&lt;classes.<span class="hljs-property">length</span>;i++)&#123;<br>    <span class="hljs-keyword">if</span>(classes[i] == <span class="hljs-string">&quot;com.example.testfrida.demo&quot;</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">typeof</span>(classes[i]));<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(classes[i]);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//2.</span><br><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">enumerateLoadedClasses</span>(&#123;<br>    <span class="hljs-comment">//对每个类进行操作</span><br>    <span class="hljs-attr">onMatch</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">clazz</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(clazz);<br>    &#125;,<br>    <span class="hljs-attr">onComplete</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="获取ClassLoader"><a href="#获取ClassLoader" class="headerlink" title="获取ClassLoader"></a>获取ClassLoader</h2><ul><li><code>Java.enumerateClassLoadersSync()</code> ： 同步获取已存在的所有类加载器，返回一个数组，<strong>里面的是类加载器对象</strong>。</li><li><code>Java.enumerateClassLoaders() </code>：异步获取已存在的所有加载器，需内部实现onMatch、onComplete方法。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1.</span><br><span class="hljs-keyword">var</span> loaderlist = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">enumerateClassLoadersSync</span>()<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">const</span> loader <span class="hljs-keyword">of</span> loaderlist)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(loader);<br>&#125;<br><span class="hljs-comment">//2.</span><br><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">enumerateClassLoaders</span>(&#123;<br>    <span class="hljs-attr">onMatch</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">loader</span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(loader);<br>    &#125;,<br>    <span class="hljs-attr">onComplete</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>hook动态加载的类：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<br>    <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">enumerateClassLoaders</span>(&#123;<br>            <span class="hljs-attr">onMatch</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params">loader</span>)&#123;<br>                <span class="hljs-comment">//需要使用try-catch模块，因为findClass可能因找不到类而报错</span><br>                <span class="hljs-keyword">try</span>&#123;<br>                    <span class="hljs-keyword">if</span>(loader.<span class="hljs-title function_">finClass</span>(<span class="hljs-string">&quot;com.example.testfrida.nodo&quot;</span>))&#123;<br>                        <span class="hljs-comment">//更改js代码当前所使用的classloader为此loader</span><br>                        java.<span class="hljs-property">ClassFactory</span>.<span class="hljs-property">loader</span> = loader<br>                        <span class="hljs-comment">//进行hook实现</span><br>                        <span class="hljs-keyword">var</span> clazz = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&quot;com.example.testfrida.nodo&quot;</span>)<br>                        clazz.<span class="hljs-property">add</span>.<span class="hljs-property">implementation</span>  =  <span class="hljs-keyword">function</span>(<span class="hljs-params">a, b</span>)&#123;<br>                            <span class="hljs-keyword">return</span> a - b;<br>                        &#125;<br>                        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(clazz.<span class="hljs-title function_">add</span>(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>));<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">catch</span>(error)&#123;<br><br>                &#125;<br><br>            &#125;,<br>            <span class="hljs-attr">onComplete</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><br>            &#125;<br>        &#125;);<br>    &#125;<br>)<br></code></pre></td></tr></table></figure><h2 id="构建Java数组"><a href="#构建Java数组" class="headerlink" title="构建Java数组"></a>构建Java数组</h2><ul><li><code>Java.array(type,elements)</code>：构造<code>elements</code>数组为<code>type</code>类型的Java数组，其中<code>type</code>是Java类型的签名。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//字符串数组</span><br><span class="hljs-keyword">var</span> arr = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">array</span>(<span class="hljs-string">&#x27;Ljava.lang.String;&#x27;</span>,[<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>])<br><span class="hljs-comment">//int数组</span><br><span class="hljs-keyword">var</span> values = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">array</span>(<span class="hljs-string">&#x27;int&#x27;</span>, [ <span class="hljs-number">1003</span>, <span class="hljs-number">1005</span>, <span class="hljs-number">1007</span> ]);<br><span class="hljs-comment">//byte数组</span><br><span class="hljs-keyword">const</span> values = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">array</span>(<span class="hljs-string">&#x27;byte&#x27;</span>, [ <span class="hljs-number">0x48</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x69</span> ])<br><span class="hljs-comment">//对象数组</span><br><span class="hljs-keyword">var</span> integerclass = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.lang.Integer&#x27;</span>)<span class="hljs-comment">//获取Java中Integer对象</span><br><span class="hljs-keyword">var</span> booleanclass = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.lang.Boolean&#x27;</span>)<span class="hljs-comment">//获取Java中Boolean对象</span><br><span class="hljs-comment">//构建对象数组，基本类型不是对象，需要包装成对象才行</span><br><span class="hljs-keyword">var</span> objarr = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">array</span>(<span class="hljs-string">&#x27;Ljava.lang.Object;&#x27;</span>, [<span class="hljs-string">&#x27;hello&#x27;</span>, integerclass.$new(<span class="hljs-number">1</span>), booleanclass.$new(<span class="hljs-literal">true</span>)])<br><br><span class="hljs-comment">//动态数组ArrayList</span><br><span class="hljs-keyword">var</span> arraylist = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.util.ArrayList&#x27;</span>).$new()<br><span class="hljs-keyword">var</span> num = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.lang.Integer&#x27;</span>).$new(<span class="hljs-number">1</span>)<br>arraylist.<span class="hljs-title function_">add</span>(num);<br>arraylist.<span class="hljs-title function_">add</span>(<span class="hljs-string">&#x27;hello&#x27;</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arraylist);<br>arraylist.<span class="hljs-title function_">remove</span>(num);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arraylist)<br></code></pre></td></tr></table></figure><h2 id="取消Hook"><a href="#取消Hook" class="headerlink" title="取消Hook"></a>取消Hook</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> cl = java.<span class="hljs-title function_">use</span>(类名)<br><span class="hljs-comment">//对方法进行hook</span><br>cl.方法名.<span class="hljs-property">implementation</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><br>&#125;<br><span class="hljs-comment">//取消hook</span><br>cl.方法名.<span class="hljs-property">implementation</span> = <span class="hljs-literal">null</span><br></code></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><ul><li><code>Java.cast(handle, klass)</code>：将句柄handle转成klass类型的变量&#x2F;类型。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> <span class="hljs-title class_">Activity</span> = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;android.app.Activity&#x27;</span>);<br><span class="hljs-keyword">const</span> activity = <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">cast</span>(<span class="hljs-title function_">ptr</span>(<span class="hljs-string">&#x27;0x1234&#x27;</span>), <span class="hljs-title class_">Activity</span>);<br></code></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><ul><li><code>Java.openClassFile(filePath)</code>：打开dex文件，返回一个对象，该对象拥有<code>load()</code>（加载包含的类）、<code>getClassNames()</code>方法</li></ul><h2 id="函数堆栈打印"><a href="#函数堆栈打印" class="headerlink" title="函数堆栈打印"></a>函数堆栈打印</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">showStack</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;android.util.Log&#x27;</span>).<span class="hljs-title function_">getStackTraceString</span>(<span class="hljs-title class_">Java</span>.<span class="hljs-title function_">use</span>(<span class="hljs-string">&#x27;java.lang.Throwable&#x27;</span>).$new()))<br>  &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>参考：</p><p><a href="https://blog.csdn.net/qq_38474570/article/details/120876120">Android之Frida框架完全使用指南-CSDN博客</a></p><p><a href="https://kuizuo.cn/docs/frida-note">https://kuizuo.cn/docs/frida-note</a></p><p><a href="https://frida.re/docs/javascript-api/#java">JavaScript API | Frida • A world-class dynamic instrumentation toolkit</a></p><p><a href="https://blog.csdn.net/weixin_35016347/article/details/104002411">Frida用法详解【附用例】_frida -u -f-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
      <category>Hook</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Frida</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android第一二代壳的脱壳点分析</title>
    <link href="/2023/12/12/Android%E7%AC%AC%E4%B8%80%E4%BA%8C%E4%BB%A3%E5%A3%B3%E7%9A%84%E8%84%B1%E5%A3%B3%E7%82%B9%E5%88%86%E6%9E%90/"/>
    <url>/2023/12/12/Android%E7%AC%AC%E4%B8%80%E4%BA%8C%E4%BB%A3%E5%A3%B3%E7%9A%84%E8%84%B1%E5%A3%B3%E7%82%B9%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<blockquote><p>只讲ART下的脱壳，DVM太过时了</p></blockquote><hr><h1 id="一、脱壳点分析"><a href="#一、脱壳点分析" class="headerlink" title="一、脱壳点分析"></a>一、脱壳点分析</h1><p>编写过Android第一二代加固壳的可以知道，无论是通过系统的类加载器加载的，还是通过自定义类加载器加载的，无一例外，最终都逃不过创建DexFile对象：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DexFile</span> &#123;<br>    ...<br>    <span class="hljs-comment">// Raw header_item.</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Header</span> &#123;<br>        <span class="hljs-type">uint8_t</span> magic_[<span class="hljs-number">8</span>];<br>        <span class="hljs-type">uint32_t</span> checksum_;  <span class="hljs-comment">// See also location_checksum_</span><br>        <span class="hljs-type">uint8_t</span> signature_[kSha1DigestSize];<br>        <span class="hljs-type">uint32_t</span> file_size_;  <span class="hljs-comment">// size of entire file</span><br>        <span class="hljs-type">uint32_t</span> header_size_;  <span class="hljs-comment">// offset to start of next section</span><br>        <span class="hljs-type">uint32_t</span> endian_tag_;<br>        <span class="hljs-type">uint32_t</span> link_size_;  <span class="hljs-comment">// unused</span><br>        <span class="hljs-type">uint32_t</span> link_off_;  <span class="hljs-comment">// unused</span><br>        <span class="hljs-type">uint32_t</span> map_off_;  <span class="hljs-comment">// unused</span><br>        <span class="hljs-type">uint32_t</span> string_ids_size_;  <span class="hljs-comment">// number of StringIds</span><br>        <span class="hljs-type">uint32_t</span> string_ids_off_;  <span class="hljs-comment">// file offset of StringIds array</span><br>        <span class="hljs-type">uint32_t</span> type_ids_size_;  <span class="hljs-comment">// number of TypeIds, we don&#x27;t support more than 65535</span><br>        <span class="hljs-type">uint32_t</span> type_ids_off_;  <span class="hljs-comment">// file offset of TypeIds array</span><br>        <span class="hljs-type">uint32_t</span> proto_ids_size_;  <span class="hljs-comment">// number of ProtoIds, we don&#x27;t support more than 65535</span><br>        <span class="hljs-type">uint32_t</span> proto_ids_off_;  <span class="hljs-comment">// file offset of ProtoIds array</span><br>        <span class="hljs-type">uint32_t</span> field_ids_size_;  <span class="hljs-comment">// number of FieldIds</span><br>        <span class="hljs-type">uint32_t</span> field_ids_off_;  <span class="hljs-comment">// file offset of FieldIds array</span><br>        <span class="hljs-type">uint32_t</span> method_ids_size_;  <span class="hljs-comment">// number of MethodIds</span><br>        <span class="hljs-type">uint32_t</span> method_ids_off_;  <span class="hljs-comment">// file offset of MethodIds array</span><br>        <span class="hljs-type">uint32_t</span> class_defs_size_;  <span class="hljs-comment">// number of ClassDefs</span><br>        <span class="hljs-type">uint32_t</span> class_defs_off_;  <span class="hljs-comment">// file offset of ClassDef array</span><br>        <span class="hljs-type">uint32_t</span> data_size_;  <span class="hljs-comment">// unused</span><br>        <span class="hljs-type">uint32_t</span> data_off_;  <span class="hljs-comment">// unused</span><br>        <span class="hljs-keyword">private</span>:<br>        <span class="hljs-built_in">DISALLOW_COPY_AND_ASSIGN</span>(Header);<br>    &#125;;<br>    ...<br>    <span class="hljs-comment">// 关键函数：返回DexFile对象对应的内存中的dex的起始地址</span><br>    <span class="hljs-function"><span class="hljs-type">const</span> byte* <span class="hljs-title">Begin</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> begin_;<br>    &#125;<br><span class="hljs-comment">// 关键函数：返回DexFile对象对应的内存中的dex的大小</span><br>    <span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">Size</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> size_;<br>    &#125;<br>    ...<br>    <span class="hljs-comment">// 关键变量：内存中的dex的起始地址</span><br>    <span class="hljs-type">const</span> byte* <span class="hljs-type">const</span> begin_;<br>    <span class="hljs-comment">// 关键变量：内存中的dex的大小</span><br>    <span class="hljs-type">const</span> <span class="hljs-type">size_t</span> size_;<br>&#125;<br></code></pre></td></tr></table></figure><p>因此，我们脱壳，也会围绕DexFile这个类（或者说是对象）来进行。</p><p>我们要明白，脱壳无非就是从内存中将解密状态下的dex整体dump下来（或者说写成文件存储下来）。而要想实现这一目的，就需要解决以下几个问题：</p><ol><li>内存中dex的起始地址和大小，或者是DexFile对象，甚至是DexFile对象的首地址。</li><li>脱壳时机，只有正确的脱壳时机，才能够dump下解密状态下的dex，否则即使dump下来也只是加密状态下的dex。</li></ol><p>对于问题一，我们跟踪dex文件的加载流程就可以很容易解决的。dex文件的加载流程具体见：</p><ul><li><a href="https://gal2xy.github.io/2023/12/06/InMemoryDexClassLoader%E5%8A%A0%E8%BD%BD%E5%86%85%E5%AD%98dex%E7%9A%84%E6%B5%81%E7%A8%8B/">InMemoryDexClassLoader加载内存dex的流程</a></li><li><a href="https://gal2xy.github.io/2023/11/20/dex%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B(%E4%B8%80)/">dex文件加载流程(一)</a></li></ul><p>在链接文章中，拥有dex的起始地址和大小的有这么几个函数：</p><ul><li>DexFile::Open(const uint8_t* base, size_t size, …)</li><li>OpenAndReadMagic()，因为该函数中会创建dex文件输入流，可以借此dump。</li><li>OpenCommon(const uint8_t* base, size_t size, …)</li><li>OpenMemory(const uint8_t* base, size_t size, …)</li><li>DexFile的构造函数</li><li>DexFileVerifier::Verify(const DexFile* dex_file, const uint8_t* begin, size_t size, …)</li><li>DexFileVerifier的构造函数</li></ul><p>因此它们都可以作为脱壳点。当然了， 肯定不止这些函数，还有很多很多函数可以作为脱壳点，比如说那些返回值是DexFile类型的函数、与DexFile有关的函数、与cookie有关的函数等等。对这些函数在源码层面进行改写，就可以实现一个简单的脱壳机了。</p><p>问题二很简单，如何确定脱壳时机呢？根据脱壳程序中的代码逻辑，首先是壳程序先走一遍dex加载流程，然后再是源程序走一遍dex加载流程，虽然有的脱壳点会触发两次，即会dump两次（一次壳程序dex，一次源程序dex），但是没关系，因为dump下来保存的文件名是固定的，造成的结果就是重写覆盖，而后者就是我们想要的源程序dex。</p><h1 id="二、脱壳方法"><a href="#二、脱壳方法" class="headerlink" title="二、脱壳方法"></a>二、脱壳方法</h1><p>详见[<a href="https://bbs.kanxue.com/thread-273293.htm#msg_header_h2_4">原创]Android漏洞之战（11）——整体加壳原理和脱壳技巧详解-Android安全-看雪-安全社区|安全招聘|kanxue.com</a>。</p><hr><p>参考：</p><p>[<a href="https://bbs.kanxue.com/thread-254555.htm">原创]拨云见日：安卓APP脱壳的本质以及如何快速发现ART下的脱壳点-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p><p><a href="https://bbs.kanxue.com/thread-273293.htm">Android漏洞之战（11）——整体加壳原理和脱壳技巧详解</a></p><p><a href="https://bbs.kanxue.com/thread-277771.htm">[原创]ART环境下dex加载流程分析及frida dump dex方案</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android脱壳</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android第二代加固壳的原理及实现 —— 不落地加载</title>
    <link href="/2023/12/10/Android%E7%AC%AC%E4%BA%8C%E4%BB%A3%E5%8A%A0%E5%9B%BA%E5%A3%B3%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
    <url>/2023/12/10/Android%E7%AC%AC%E4%BA%8C%E4%BB%A3%E5%8A%A0%E5%9B%BA%E5%A3%B3%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一、对第一代壳的改良"><a href="#一、对第一代壳的改良" class="headerlink" title="一、对第一代壳的改良"></a>一、对第一代壳的改良</h1><p>在第一代加固壳中，会将源程序APK存储到文件系统中，然后再通过DexClassLoader动态加载。这种落地加载方式存在很大问题，一是容易在文件系统中获取到源程序APK，二是两次加载源程序APK到内存中，效率低。</p><p>第二代壳就是为了解决上述问题，做到不落地加载，即不使用文件系统作为中转站，而是直接将内存中的源APK字节码进行加载。</p><p>那么问题就来了，怎样解决加载内存dex的难题呢？</p><h2 id="1-1-如何加载内存dex"><a href="#1-1-如何加载内存dex" class="headerlink" title="1.1 如何加载内存dex"></a>1.1 如何加载内存dex</h2><p>不管是直接加载文件字节码还是借助文件系统作为中转站来加载，最终肯定是都需要解析dex文件，因此我们来看看dex文件加载源码中有没有直接加载文件字节码的方法。</p><p>具体分析详见<a href="https://gal2xy.github.io/2023/11/20/dex%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B(%E4%B8%80)/">dex文件加载流程(一)</a>。这里就简明说一下：</p><ol><li><p>Android 4及以下，最终调用带三个参数的native方法<code>openDexFile()</code>，但并不接受文件字节码作为参数。<strong>然而其另一个重载方法接受字节码数组作为参数传入</strong>，具体如下：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312101628175.png"></p></li><li><p>Android 5~7，最终调用<code>openDexFile()</code>方法，里面会调用native方法<code>openDexFileNative()</code>，然而并不接受文件字节码作为参数。因此需要借助<code>libart.so</code>库中的<code>OpenMemory()</code>函数来实现内存加载文件字节码（需要编写native层代码实现）。</p></li><li><p>Android 8及以上，跟Android 5~7一样的流程，但是额外多了一个用于加载内存dex的类加载器InMemoryDexClassLoader，详细见<a href="https://gal2xy.github.io/2023/12/06/InMemoryDexClassLoader%E5%8A%A0%E8%BD%BD%E5%86%85%E5%AD%98dex%E7%9A%84%E6%B5%81%E7%A8%8B/">InMemoryDexClassLoader加载内存dex的流程</a>。</p></li></ol><p>不管哪种方法，它们都会返回一个cookie值，它是对dex文件进行操作的唯一凭据，可以简单理解成dex文件的“身份证”。</p><blockquote><p>不管什么版本，加载dex流程中最终都会调用DexFile的构造函数，<code>OpenMemory()</code>函数也是一样的，也就是说，返回的这个cookie其实就是DexFile的地址！？</p></blockquote><p>从上面可以看出，除了Android 8及以上版本的系统拥有一整套内存dex加载的方法（即拥有类加载器InMemoryDexClassLoader），其他版本并没有类加载器，因此面临内存dex中类加载的问题。</p><h2 id="1-2-如何解决内存dex中类的加载问题"><a href="#1-2-如何解决内存dex中类的加载问题" class="headerlink" title="1.2 如何解决内存dex中类的加载问题"></a>1.2 如何解决内存dex中类的加载问题</h2><p>系统给定的类加载器DexClassLoader和PathClassLoader类加载器，在创建时只接受文件路径，也就是只接受文件系统中的dex相关文件，因此我们需要自定义类加载器，使其能够接受内存dex。而在这之前，非常有必要源码分析类的加载过程，具体分析请见<a href="https://gal2xy.github.io/2023/11/25/Android%E4%B8%AD%E7%9A%84ClassLoader/#%E5%9B%9B%E3%80%81ClassLoader%E5%8A%A0%E8%BD%BD%E7%B1%BB%E7%9A%84%E8%BF%87%E7%A8%8B">Android中的ClassLoader&#x2F;#四、ClassLoader加载类的过程</a>（Android 8源码）。简单总结一下该过程：</p><p>ClassLoader类的<code>loadClass()</code>方法 → BaseDexClassLoader类的<code>findClass()</code>方法 → DexPathList类的<code>findClass()</code>方法 → Element类的<code>findClass()</code>方法 → DexFile类的<code>loadClassBinaryName()</code>方法 → DexFile类的<code>defineClass()</code>方法 →  DexFile类的<code>defineClassNative()</code>方法</p><p>如果仔细去看源码的话，应该可以注意到，中间的方法（3~6）都只是作为一个跳板而已，并没有加载类的代码实现，而是调用后者方法。因此我们在自定义类加载器的时候，可以跳过中间这些方法，也就是说我们要重写BaseDexClassLoader类的<code>findClass()</code>方法，使其能够直接调用<code>defineClassNative()</code>方法。</p><p>那么这里又有一个小问题，就是我们怎么获取到dex中的类名，这样才能知道要加载的类是不是dex中的，如果是，我们就要调用<code>defineClassNative()</code>方法来解决，如果不是，就交给父类。不过好在<code>/libcore/dalvik/src/main/java/dalvik/system/DexFile.java</code>中就有这样一个函数，可以通过cookie获取到dex中的所有类名，它的定义如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> String[] getClassNameList(Object cookie);<br></code></pre></td></tr></table></figure><p>这样一来，问题就都解决了。接下来就是具体的实现环节了！</p><blockquote><p>从Android 7 开始，<code>defineClassNative(String name, ClassLoader loader, Object cookie)</code>变成了<code>defineClassNative(String name, ClassLoader loader, Object cookie, DexFile dexFile)</code>，多了一个DexFile参数。</p><p>解决方法：</p><ol><li><p>传入null，查看对应源码，可以知道就是多了一步<code>class_linker-&gt;InsertDexFileInToClassLoader()</code>，顾名思义，应该是将DexFile文件加载到类加载器中，方便之后加载类。而加载类的过程我们自己实现了，应该不会有问题的。</p></li><li><p>刚刚上一小节说过，cookie这个其实就是个DexFile的首地址，那么我们就可以通过这个获取DexFile对象。（强转？）</p></li></ol><p>为什么说cookie是地址呢，证据如下：</p><p><code>art/runtime/native/dalvik_system_DexFile.cc</code>目录下的<code>DexFile_defineClassNative</code>函数：</p><ul><li><p>Android 5.1 ：第一行就是调用<code>toDexFiles(cookie, env)</code>函数获取DexFile对象，而且该方法定义时，第一个参数名为dex_file_address。</p></li><li><p>Android 6 ~ ：第一行代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">`std::unique_ptr&lt;std::vector&lt;<span class="hljs-type">const</span> DexFile*&gt;&gt; dex_files = <span class="hljs-built_in">ConvertJavaArrayToNative</span>(env, cookie)`<br></code></pre></td></tr></table></figure><p>是吧，又是通过cookie得到DexFile对象！</p></li></ul><p>所以说，非常肯定cookie就是DexFile的首地址</p></blockquote><h1 id="二、项目"><a href="#二、项目" class="headerlink" title="二、项目"></a>二、项目</h1><h2 id="2-1-使用一种新的加壳方法"><a href="#2-1-使用一种新的加壳方法" class="headerlink" title="2.1 使用一种新的加壳方法"></a>2.1 使用一种新的加壳方法</h2><p>在编写第一代壳的时候，我是用的是合并方法是脱壳程序dex + 源源程序APK并且以脱壳程序APK为寄主，但我感觉这样做缺点很大。因为源程序可能会使用到资源文件，就需要进行资源替换了。</p><p>但是我们应该注意到，脱壳程序并不需要用户界面，理应也不需要加载资源文件，只需要dex中的代码逻辑，以及在脱壳程序APK（寄主）的<code>AndroidManifest.xml</code>中声明Application代理类。那么我们加壳的方法可以改成这样：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312101629323.png"></p><p>之前怎么改脱壳程序的<code>AndroidManifest.xml</code>就怎么改源程序的<code>AndroidManifest.xml</code>，其实就是相当于换了个寄主而已。</p><h2 id="Android-8及以上"><a href="#Android-8及以上" class="headerlink" title="Android 8及以上"></a>Android 8及以上</h2><p>Android 8及以上的系统环境中，非常好实现不落地加载壳，因为系统直接提供了相应的内存dex加载器InMemoryDexClassLoader，因此在第一代壳基础上，只需要在替换类加载器的过程中，修改创建新的类加载器的方式即可。</p><h3 id="源程序"><a href="#源程序" class="headerlink" title="源程序"></a>源程序</h3><p>跟之前的一样，只不过之前改的是脱壳APK中的AndroidMainfest.xml文件，而现在改的是源程序APK的AndroidMainfest.xml文件，但内容不变。</p><h3 id="加壳程序"><a href="#加壳程序" class="headerlink" title="加壳程序"></a>加壳程序</h3><p>因为涉及到源程序多dex的情况，所以需要对代码进行修改，同时也减少了一些手动操作，具体如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> zlib <span class="hljs-keyword">import</span> adler32<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha1<br><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> unhexlify<br><span class="hljs-keyword">import</span> zipfile<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fixCheckSum</span>(<span class="hljs-params">dexBytesArray</span>):<br>    <span class="hljs-comment"># dexfile[8:12]</span><br>    <span class="hljs-comment"># 小端存储</span><br>    value = adler32(<span class="hljs-built_in">bytes</span>(dexBytesArray[<span class="hljs-number">12</span>:]))<br>    valueArray = <span class="hljs-built_in">bytearray</span>(value.to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;little&#x27;</span>))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(valueArray)):<br>        dexBytesArray[<span class="hljs-number">8</span> + i] = valueArray[i]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fixSignature</span>(<span class="hljs-params">dexBytesArray</span>):<br>    <span class="hljs-comment"># dexfile[12:32]</span><br>    sha_1 = sha1()<br>    sha_1.update(<span class="hljs-built_in">bytes</span>(dexBytesArray[<span class="hljs-number">32</span>:]))<br>    value = sha_1.hexdigest()<br>    valueArray = <span class="hljs-built_in">bytearray</span>(unhexlify(value))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(valueArray)):<br>        dexBytesArray[<span class="hljs-number">12</span> + i] = valueArray[i]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fixFileSize</span>(<span class="hljs-params">dexBytesArray, fileSize</span>):<br>    <span class="hljs-comment"># dexfile[32:36]</span><br>    <span class="hljs-comment"># 小端存储</span><br>    fileSizeArray = <span class="hljs-built_in">bytearray</span>(fileSize.to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;little&quot;</span>))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(fileSizeArray)):<br>        dexBytesArray[<span class="hljs-number">32</span> + i] = fileSizeArray[i]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypto</span>(<span class="hljs-params">file</span>):<br>    <span class="hljs-comment"># for i in range(len(file)):</span><br>    <span class="hljs-comment">#     file[i] ^= 0xff</span><br>    <span class="hljs-keyword">return</span> file<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">readDexsSourceApk</span>(<span class="hljs-params">sourceApkPath</span>):<br>    dexList = []<br>    <span class="hljs-keyword">with</span> zipfile.ZipFile(sourceApkPath, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> sourceApk:<br>        <span class="hljs-comment"># 获取apk中所有的文件路径名称</span><br>        nameList = sourceApk.namelist()<br>        <span class="hljs-keyword">for</span> fileName <span class="hljs-keyword">in</span> nameList:<br>            <span class="hljs-comment"># 提取dex文件</span><br>            <span class="hljs-keyword">if</span> fileName.endswith(<span class="hljs-string">&quot;.dex&quot;</span>):<br>                <span class="hljs-comment"># 解压缩到当前目录下 sourceApk.extract(fileName)</span><br>                <span class="hljs-comment"># 建议直接读取</span><br>                <span class="hljs-keyword">with</span> sourceApk.<span class="hljs-built_in">open</span>(fileName) <span class="hljs-keyword">as</span> dexfile:<br>                    data = <span class="hljs-built_in">bytearray</span>(dexfile.read())<br>                    dexList.append(data)<br>    <span class="hljs-keyword">return</span> dexList<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">readDexFromShellApk</span>(<span class="hljs-params">shellApkPath</span>):<br>    <span class="hljs-keyword">with</span> zipfile.ZipFile(shellApkPath, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> sourceApk:<br>        <span class="hljs-comment"># 获取apk中所有的文件路径名称</span><br>        nameList = sourceApk.namelist()<br>        <span class="hljs-keyword">for</span> fileName <span class="hljs-keyword">in</span> nameList:<br>            <span class="hljs-comment"># 提取dex文件</span><br>            <span class="hljs-keyword">if</span> fileName.endswith(<span class="hljs-string">&quot;.dex&quot;</span>):<br>                <span class="hljs-comment"># 建议直接读取</span><br>                <span class="hljs-keyword">with</span> sourceApk.<span class="hljs-built_in">open</span>(fileName) <span class="hljs-keyword">as</span> dexfile:<br>                    data = <span class="hljs-built_in">bytearray</span>(dexfile.read())<br>                <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> data<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">combineSourceDexs</span>(<span class="hljs-params">sourceDexList</span>):<br>    combinedDex = <span class="hljs-built_in">bytearray</span>()<br>    <span class="hljs-keyword">for</span> dexfile <span class="hljs-keyword">in</span> sourceDexList:<br>        dexfileLen = <span class="hljs-built_in">len</span>(dexfile)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(dexfileLen))<br>        <span class="hljs-comment"># 首先存放当前dex的大小，四字节，小端存储</span><br>        combinedDex += <span class="hljs-built_in">bytearray</span>(dexfileLen.to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;little&#x27;</span>))<br>        <span class="hljs-comment"># 然后存放当前dex</span><br>        combinedDex += dexfile<br>    <span class="hljs-keyword">return</span> combinedDex<br><span class="hljs-comment"># 待实现</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">forkShellLibIntoSourceApk</span>():<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>():<br>    sourceApkPath = <span class="hljs-string">&quot;sourceApk.apk&quot;</span><br>    shellApkPath = <span class="hljs-string">&quot;shellApk.apk&quot;</span><br>    newApkPath = <span class="hljs-string">&quot;newApk.apk&quot;</span><br>    <span class="hljs-comment"># 读取源APK中的dex文件,可以接受多dex</span><br>    sourceDexList = readDexsSourceApk(sourceApkPath)<br>    <span class="hljs-comment"># 读取壳程序dex,只能有一个dex</span><br>    shellDex = readDexFromShellApk(shellApkPath)<br>    <span class="hljs-comment"># 合并源程序dex</span><br>    combineSourceDex = combineSourceDexs(sourceDexList)<br>    <span class="hljs-comment"># 加密源程序dex</span><br>    encSourceDex = encrypto(combineSourceDex)<br>    encSourceDexLen = <span class="hljs-built_in">len</span>(encSourceDex)<br>    <span class="hljs-comment"># 新的dex文件内容 = 壳dex + 加密的源dex + 四字节标识加密后源dex大小长度</span><br>    newDex = shellDex + encSourceDex + <span class="hljs-built_in">bytearray</span>(encSourceDexLen.to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;little&#x27;</span>))<br>    newDexLen = <span class="hljs-built_in">len</span>(newDex)<br>    <span class="hljs-comment"># 首先修改filesize</span><br>    fixFileSize(newDex, newDexLen)<br>    <span class="hljs-comment"># 其次修改signature</span><br>    fixSignature(newDex)<br>    <span class="hljs-comment"># 最后修改checksum</span><br>    fixCheckSum(newDex)<br>    <br>    <span class="hljs-comment"># 本想用代码实现替换apk中的dex（先删除再写入），但zipfile库没有现成的方法，还是算了</span><br>    <span class="hljs-comment"># 导出成新的dex文件</span><br>    <br>    <span class="hljs-comment"># 其实还有一个问题，就是需要把脱壳APK中的lib库复制过来！</span><br>    <span class="hljs-comment"># 待实现（解压缩，替换，再压缩？？？）</span><br>    <span class="hljs-comment"># forkShellLibIntoSourceApk()</span><br>    <br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;classes.dex&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(<span class="hljs-built_in">bytes</span>(newDex))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    start()<br></code></pre></td></tr></table></figure><p>对于源程序多dex的情况，先将合并源程序的dex为单独一个dex，之后的操作就跟之前的一样。</p><h3 id="脱壳程序"><a href="#脱壳程序" class="headerlink" title="脱壳程序"></a>脱壳程序</h3><p>RefInvoke类是我之前封装好的反射类，详细见Github仓库：<a href="https://github.com/gal2xy/RefInvoke%E3%80%82">https://github.com/gal2xy/RefInvoke。</a></p><h4 id="attachBaseContext"><a href="#attachBaseContext" class="headerlink" title="attachBaseContext()"></a>attachBaseContext()</h4><p>首先展示以下代理Application类中的<code>attachBaseContext()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attachBaseContext</span><span class="hljs-params">(Context base)</span> &#123;<br>    <span class="hljs-built_in">super</span>.attachBaseContext(base);<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//读取Classes.dex文件</span><br>        <span class="hljs-type">byte</span>[] shellDexData = readDexFromApk();<br>        Log.d(TAG, <span class="hljs-string">&quot;成功从源APK中读取classes.dex&quot;</span>);<br>        <span class="hljs-comment">//从中分理出源dex文件</span><br>        ByteBuffer[] byteBuffers = splitSourceApkFromShellDex(shellDexData);<br>        Log.d(TAG, <span class="hljs-string">&quot;成功分离出源dex集合&quot;</span>);<br>        <span class="hljs-comment">//配置加载源程序的动态环境,即替换mClassLoader</span><br>        replaceClassLoaderInLoadedApk(byteBuffers);<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        Log.d(TAG, Log.getStackTraceString(e));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>readDexFromApk()</code>方法跟之前一代壳中使用的方法一样，这里不再展示。</p><p>由于我们的目标是适配多dex的情况，所以<code>splitSourceApkFromShellDex()</code>方法需要修改，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">private</span> ByteBuffer[] splitSourceApkFromShellDex(<span class="hljs-type">byte</span>[] shellDexData) <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">shellDexlength</span> <span class="hljs-operator">=</span> shellDexData.length;<br>    <span class="hljs-comment">//开始解析dex文件</span><br>    <span class="hljs-type">byte</span>[] sourceDexsSizeByte = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4</span>];<br>    <span class="hljs-comment">//读取源dexs的大小</span><br>    System.arraycopy(shellDexData,shellDexlength - <span class="hljs-number">4</span>, sourceDexsSizeByte,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<br>    <span class="hljs-comment">//转成bytebuffer,方便4byte转int</span><br>    <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">wrap</span> <span class="hljs-operator">=</span> ByteBuffer.wrap(sourceDexsSizeByte);<br>    <span class="hljs-comment">//将byte转成int, 加壳时,长度我是按小端存储的</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">sourceDexsSizeInt</span> <span class="hljs-operator">=</span> wrap.order(ByteOrder.LITTLE_ENDIAN).getInt();<br>    Log.d(TAG, <span class="hljs-string">&quot;源dex集合的大小: &quot;</span> + sourceDexsSizeInt);<br>    <span class="hljs-comment">//读取源dexs</span><br>    <span class="hljs-type">byte</span>[] sourceDexsData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[sourceDexsSizeInt];<br>    System.arraycopy(shellDexData,shellDexlength - sourceDexsSizeInt - <span class="hljs-number">4</span>, sourceDexsData, <span class="hljs-number">0</span>, sourceDexsSizeInt);<br>    <span class="hljs-comment">//解密源dexs</span><br>    sourceDexsData = decryptoSourceApk(sourceDexsData);<br><br>    <span class="hljs-comment">//更新部分</span><br>    <span class="hljs-comment">//从源dexs中分离dex</span><br>    ArrayList&lt;<span class="hljs-type">byte</span>[]&gt; sourceDexList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">pos</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(pos &lt; sourceDexsSizeInt)&#123;<br>        <span class="hljs-comment">//先提取四个字节，描述当前dex的大小</span><br>        <span class="hljs-comment">//开始解析dex文件</span><br>        <span class="hljs-type">byte</span>[] singleDexSizeByte = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4</span>];<br>        <span class="hljs-comment">//读取源dexs的大小</span><br>        System.arraycopy(sourceDexsData, pos, singleDexSizeByte,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<br>        <span class="hljs-comment">//转成bytebuffer,方便4byte转int</span><br>        <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">singleDexwrap</span> <span class="hljs-operator">=</span> ByteBuffer.wrap(singleDexSizeByte);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">singleDexSizeInt</span> <span class="hljs-operator">=</span> singleDexwrap.order(ByteOrder.LITTLE_ENDIAN).getInt();<br>        Log.d(TAG, <span class="hljs-string">&quot;当前singleDex的大小: &quot;</span> + singleDexSizeInt);<br>        <span class="hljs-comment">//读取单独dex</span><br>        <span class="hljs-type">byte</span>[] singleDexData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[singleDexSizeInt];<br>        System.arraycopy(sourceDexsData,pos + <span class="hljs-number">4</span>, singleDexData, <span class="hljs-number">0</span>, singleDexSizeInt);<br>        <span class="hljs-comment">//加入到dexlist中</span><br>        sourceDexList.add(singleDexData);<br>        <span class="hljs-comment">//更新pos</span><br>        pos += <span class="hljs-number">4</span> + singleDexSizeInt;<br>    &#125;<br><br>    <span class="hljs-comment">//将dexlist包装成ByteBuffer</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">dexNum</span> <span class="hljs-operator">=</span> sourceDexList.size();<br>    Log.d(TAG, <span class="hljs-string">&quot;源dex的数量: &quot;</span> + dexNum);<br>    ByteBuffer[] dexBuffers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteBuffer</span>[dexNum];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; dexNum; i++)&#123;<br>        dexBuffers[i] = ByteBuffer.wrap(sourceDexList.get(i));<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> dexBuffers;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里多了将源dex集合分离开来，并将它们封装成ByteBuffer。</p><p><code>replaceClassLoaderInLoadedApk()</code>方法大差不差，只不过是将类加载器换成InMemoryDexClassLoader而已，当然，在代码中，我没有通过ActivityThread实例中的mPackages获取LoadedApk实例，而是通过ActivityThread实例中的mBoundApplication获取，详细原因见<a href="https://gal2xy.github.io/2023/12/02/%E5%85%B3%E4%BA%8E%E4%B8%80%E4%BB%A3%E5%A3%B3%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/">关于一代壳的一些理解</a>。</p><h4 id="onCreate"><a href="#onCreate" class="headerlink" title="onCreate()"></a>onCreate()</h4><p>接下来是代理Application类中的<code>onCreate()</code>方法，该部分处理的是Application实例的替换，做法跟一代壳的做法一样，只不过在这里我封装了一下，具体代码就不展示了，直接去仓库看代码就行了.</p><h2 id="Android-8以下-ART环境下"><a href="#Android-8以下-ART环境下" class="headerlink" title="Android 8以下 (ART环境下)"></a>Android 8以下 (ART环境下)</h2><p>这中环境下还是挺难的，因为没有一套用于加载内存dex的类加载器，需要我们自己去实现，那么也就面临类加载器的实现和内存dex加载实现。该小节主要展示这两部分的代码。</p><h3 id="类加载器的实现"><a href="#类加载器的实现" class="headerlink" title="类加载器的实现"></a>类加载器的实现</h3><p>由于<code>defineNative()</code>和<code>getClassNameList()</code>的参数在一些版本中有所不同，所以需要判断一下设备的SDK版本，根据不同版本编写相应的反射调用代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">DexClassLoader</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;demo&quot;</span>;<br>    <span class="hljs-keyword">private</span> ArrayList&lt;Object&gt; cookieArray;<br>    <span class="hljs-keyword">private</span> Context mContext;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        System.loadLibrary(<span class="hljs-string">&quot;androidsecondshell2&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//native层通过调用libart.so中的openMemory函数加载dex</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> Object <span class="hljs-title function_">OpenMemory</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] dex, <span class="hljs-type">long</span> dexlen, <span class="hljs-type">int</span> sdkInt)</span>;<br><br>    <span class="hljs-comment">/*构造函数</span><br><span class="hljs-comment">    * librarySearchPath、dexPath、optimizedDirectory传入为null就行，</span><br><span class="hljs-comment">    * 后两者不需要解释（都加载内存dex，这两参数就没啥用）</span><br><span class="hljs-comment">    * librarySearchPath在父类加载器中加载过，所以我觉得可以为null</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyClassLoader</span><span class="hljs-params">(Context context, ByteBuffer[] dexBuffers, String librarySearchPath,</span><br><span class="hljs-params">                         ClassLoader parent, String dexPath, String optimizedDirectory)</span>&#123;<br>        <span class="hljs-built_in">super</span>(dexPath, optimizedDirectory, librarySearchPath, parent);<br>        setContext(context);<br><br>        <span class="hljs-comment">//反射调用openMemory方法加载多个dex</span><br>        <span class="hljs-keyword">for</span>(ByteBuffer dexbuffer : dexBuffers)&#123;<br>            <span class="hljs-comment">//获取长度</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">dexlen</span> <span class="hljs-operator">=</span> dexbuffer.limit() - dexbuffer.position();<br>            Log.d(TAG, <span class="hljs-string">&quot;dexbuffer.capacity(): &quot;</span> + dexlen);<br>            <span class="hljs-type">byte</span>[] dex = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[dexlen];<br>            <span class="hljs-comment">//转byte[]</span><br>            dexbuffer.get(dex);<br>            Log.d(TAG, <span class="hljs-string">&quot;dex前3个字节: &quot;</span> + dex[<span class="hljs-number">0</span>] + dex[<span class="hljs-number">1</span>] + dex[<span class="hljs-number">2</span>]);<br>            <span class="hljs-comment">//调用native层方法, OpenMemory返回的是DexFile对象，这是不是说明cookie其实就是DexFile的地址？尤其是对int型的cookie来说</span><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">cookie</span> <span class="hljs-operator">=</span> OpenMemory(dex, dexlen, Build.VERSION.SDK_INT);<br>            <span class="hljs-comment">//加入到cookieArray数组中</span><br>            addIntoCookieArray(cookie);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//重写findClass方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <br>        Class&lt;?&gt; clazz = <span class="hljs-literal">null</span>;<br>        <span class="hljs-comment">//获取Dex中的所有类，支持多dex</span><br>        ArrayList&lt;String[]&gt; classNameList = getClassNameList(<span class="hljs-built_in">this</span>.cookieArray);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">classNameNum</span> <span class="hljs-operator">=</span> classNameList.size();<br>        Log.d(TAG, <span class="hljs-string">&quot;dex num: &quot;</span> + classNameNum);<br>        <span class="hljs-comment">//遍历每个dex获取classNameList</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">cookiePos</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; cookiePos &lt; classNameNum; cookiePos++)&#123;<br>            String[] singleClassNameList = classNameList.get(cookiePos);<br>            <span class="hljs-comment">//遍历每个dex中的classNameList，获取className</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">classPos</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; classPos &lt; singleClassNameList.length; classPos++)&#123;<br>                Log.d(TAG, <span class="hljs-string">&quot;className: &quot;</span> + singleClassNameList[classPos]);<br>                <span class="hljs-comment">//如果找到了需要加载的类</span><br>                <span class="hljs-keyword">if</span> (singleClassNameList[classPos].equals(name))&#123;<br>                    clazz = defineClassNative(<br>                            name.replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>),<br>                            <span class="hljs-built_in">this</span>.mContext.getClassLoader(),<br>                            <span class="hljs-built_in">this</span>.cookieArray.get(cookiePos)<br>                    );<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//这一步存疑，都不是要加载的类为什么还有加载？？？</span><br>                    clazz = defineClassNative(<br>                            singleClassNameList[classPos].replace(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;/&#x27;</span>),<br>                            <span class="hljs-built_in">this</span>.mContext.getClassLoader(),<br>                            <span class="hljs-built_in">this</span>.cookieArray.get(cookiePos)<br>                    );<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-built_in">super</span>.findClass(name);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> clazz;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="hljs-type">boolean</span> resolve) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>        <span class="hljs-comment">//其实并不需要改写，就是添加几个日志语句</span><br>        Log.d(TAG, <span class="hljs-string">&quot;loadClass: &quot;</span> + name + <span class="hljs-string">&quot;resolve: &quot;</span> + resolve);<br>        Class&lt;?&gt; clazz = <span class="hljs-built_in">super</span>.loadClass(name, resolve);<br>        <span class="hljs-keyword">if</span> (clazz == <span class="hljs-literal">null</span>)&#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;loadClass failed&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> clazz;<br>    &#125;<br><br>    <span class="hljs-comment">//反射调用defineNative方法加载类</span><br>    <span class="hljs-keyword">private</span> Class <span class="hljs-title function_">defineClassNative</span><span class="hljs-params">(String name, ClassLoader loader, Object cookie)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * Android5~6的defineClassNative没有DexFile参数</span><br><span class="hljs-comment">        * Android7~ 的defineClassNative多了DexFile参数</span><br><span class="hljs-comment">        * */</span><br>        Class&lt;?&gt; clazz = <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-comment">//系统API判断</span><br>        <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &lt; <span class="hljs-number">23</span>)&#123;<br>            <span class="hljs-comment">// ~ Android5</span><br>            clazz = (Class) RefInvoke.invokeMethod(<br>                    <span class="hljs-string">&quot;dalvik.system.DexFile&quot;</span>,<br>                    <span class="hljs-string">&quot;defineClassNative&quot;</span>,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, ClassLoader.class, <span class="hljs-type">long</span>.class&#125;,<br>                    <span class="hljs-literal">null</span>,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;name, loader, (<span class="hljs-type">long</span>) cookie&#125;<br>            );<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT == <span class="hljs-number">23</span>)&#123;<br>            <span class="hljs-comment">//Android 6</span><br>            clazz = (Class) RefInvoke.invokeMethod(<br>                    <span class="hljs-string">&quot;dalvik.system.DexFile&quot;</span>,<br>                    <span class="hljs-string">&quot;defineClassNative&quot;</span>,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, ClassLoader.class, Object.class&#125;,<br>                    <span class="hljs-literal">null</span>,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;name, loader, cookie&#125;<br>            );<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//Android 7 ~</span><br>            clazz = (Class) RefInvoke.invokeMethod(<br>                    <span class="hljs-string">&quot;dalvik.system.DexFile&quot;</span>,<br>                    <span class="hljs-string">&quot;defineClassNative&quot;</span>,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;String.class, ClassLoader.class, Object.class, DexFile.class&#125;,<br>                    <span class="hljs-literal">null</span>,<br>                    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;name, loader, cookie, <span class="hljs-literal">null</span>&#125; <span class="hljs-comment">/*设置为空应该没问题吧，反正也不会用到类加载器*/</span><br>            );<br>        &#125;<br>        <span class="hljs-keyword">return</span> clazz;<br><br>    &#125;<br>    <span class="hljs-comment">//获取dex中的类名集合</span><br>    <span class="hljs-keyword">private</span> ArrayList&lt;String[]&gt; getClassNameList(ArrayList&lt;Object&gt; cookieArray) &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 注意！！！Android5 中是long类型的cookie，Android6、7是Object类型的cookie</span><br><span class="hljs-comment">         * */</span><br>        ArrayList&lt;String[]&gt; classNameList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String[]&gt;();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cookieNum</span> <span class="hljs-operator">=</span> cookieArray.size();<br><br>        <span class="hljs-comment">//系统API判断</span><br>        <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &lt; <span class="hljs-number">23</span>)&#123;<br>            <span class="hljs-comment">// ~ Android 5</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; cookieNum; i++)&#123;<br>                String[] singleDexClassNameList = (String[]) RefInvoke.invokeMethod(<br>                        <span class="hljs-string">&quot;dalvik.system.DexFile&quot;</span>,<br>                        <span class="hljs-string">&quot;getClassNameList&quot;</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;<span class="hljs-type">long</span>.class&#125;,<br>                        <span class="hljs-literal">null</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;(<span class="hljs-type">long</span>)cookieArray.get(i)&#125;<br>                );<br>                classNameList.add(singleDexClassNameList);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-comment">// Android 6 ~</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; cookieNum; i++)&#123;<br>                String[] singleDexClassNameList = (String[]) RefInvoke.invokeMethod(<br>                        <span class="hljs-string">&quot;dalvik.system.DexFile&quot;</span>,<br>                        <span class="hljs-string">&quot;getClassNameList&quot;</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[]&#123;Object.class&#125;,<br>                        <span class="hljs-literal">null</span>,<br>                        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[]&#123;cookieArray.get(i)&#125;<br>                );<br>                classNameList.add(singleDexClassNameList);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> classNameList;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setContext</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-built_in">this</span>.mContext = context;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addIntoCookieArray</span><span class="hljs-params">(Object cookie)</span>&#123;<br>        <span class="hljs-built_in">this</span>.cookieArray.add(cookie);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="内存dex加载实现-Native层"><a href="#内存dex加载实现-Native层" class="headerlink" title="内存dex加载实现(Native层)"></a>内存dex加载实现(Native层)</h3><p>大部分都是参考<a href="https://github.com/Frezrik/Jiagu">Frezrik&#x2F;Jiagu: Android apk jiagu (github.com)</a>的。</p><p>使用libart.so中的<code>openMemory</code>方法需要使用到两个关键函数：</p><ol><li><code>dlopen()</code>：dlopen函数以指定模式打开指定的动态链接库文件，并返回一个句柄供<code>dlsym()</code>使用。</li><li><code>dlsym()</code>：根据动态链接库操作句柄与符号，返回符号对应的地址。使用这个函数不但可以获取函数地址，也可以获取变量地址。</li></ol><p><code>dlsym()</code>第二个参数可以是<code>JNINativeMethod</code>或<code>DalvikNativeMethod </code>结构体（存放Native 方法与 JNI 层函数的对应关系），也可以是函数在内存中的方法名。由于<code>openMemory</code>方法所在的<code>/art/runtime/dex_file.cc</code>中并没有这种结构体，所以只能使用第二种方法。至于怎么获取函数在内存中的方法名，可以参考<a href="https://blog.csdn.net/qq409732112/article/details/109391210">hook加载libart.so中的OpenMemory函数</a>。简单来说，就是IDA打开<code>libart.so</code>文件，找到对应的函数，右键<code>Edit function</code>就可以知道了。</p><blockquote><p>不知道对不对，因为安装不了所以无法测试，见下一小节</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;jni.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dlfcn.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;android/log.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdint&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOGE(...) __android_log_print(ANDROID_LOG_ERROR, <span class="hljs-string">&quot;Tag&quot;</span>, __VA_ARGS__)</span><br><br><span class="hljs-comment">/* 以下是 OpenMemory函数在内存中对外的方法名 */</span><br><span class="hljs-comment">/*Android 5*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OpenMemory21 <span class="hljs-string">&quot;_ZN3art7DexFile10OpenMemoryEPKhjRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEjPNS_6MemMapEPS9_&quot;</span></span><br><span class="hljs-comment">/*Android 5.1*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OpenMemory22 <span class="hljs-string">&quot;_ZN3art7DexFile10OpenMemoryEPKhjRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEjPNS_6MemMapEPKNS_7OatFileEPS9_&quot;</span></span><br><span class="hljs-comment">/*Android 6*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> OpenMemory23 <span class="hljs-string">&quot;_ZN3art7DexFile10OpenMemoryEPKhjRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEjPNS_6MemMapEPKNS_10OatDexFileEPS9_&quot;</span></span><br><span class="hljs-comment">/*Android 7.1, 与Android 6一致*/</span><br><span class="hljs-comment">//#define openMemory25 &quot;_ZN3art7DexFile10OpenMemoryEPKhjRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEjPNS_6MemMapEPKNS_10OatDexFileEPS9_&quot;</span><br><br><span class="hljs-comment">/*定义函数指针*/</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> *(*org_artDexFileOpenMemory21)(<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> *base,<br>                                            <span class="hljs-type">size_t</span> size,<br>                                            <span class="hljs-type">const</span> std::string &amp;location,<br>                                            <span class="hljs-type">uint32_t</span> location_checksum,<br>                                            <span class="hljs-type">void</span> *mem_map,<br>                                            std::string *error_msg);<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">void</span> *(*org_artDexFileOpenMemory22)(<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> *base,<br>                                            <span class="hljs-type">size_t</span> size,<br>                                            <span class="hljs-type">const</span> std::string &amp;location,<br>                                            <span class="hljs-type">uint32_t</span> location_checksum,<br>                                            <span class="hljs-type">void</span> *mem_map,<br>                                            <span class="hljs-type">const</span> <span class="hljs-type">void</span> *oat_file,<br>                                            std::string *error_msg);<br><br><span class="hljs-keyword">typedef</span> std::<span class="hljs-built_in">unique_ptr</span>&lt;<span class="hljs-type">const</span> <span class="hljs-type">void</span> *&gt; (*org_artDexFileOpenMemory23)(<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span> *base,<br>                                                                    <span class="hljs-type">size_t</span> size,<br>                                                                    <span class="hljs-type">const</span> std::string &amp;location,<br>                                                                    <span class="hljs-type">uint32_t</span> location_checksum,<br>                                                                    <span class="hljs-type">void</span> *mem_map,<br>                                                                    <span class="hljs-type">const</span> <span class="hljs-type">void</span> *oat_dex_file,<br>                                                                    std::string *error_msg);<br><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">size_t</span> kSha1DigestSize = <span class="hljs-number">20</span>;<br><span class="hljs-comment">//放头文件中一堆错误！?</span><br><span class="hljs-comment">// Raw header_item.</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Header</span><br>&#123;<br>    <span class="hljs-type">uint8_t</span>  magic_[<span class="hljs-number">8</span>];<br>    <span class="hljs-type">uint32_t</span> checksum_;        <span class="hljs-comment">// See also location_checksum_</span><br>    <span class="hljs-type">uint8_t</span>  signature_[kSha1DigestSize];<br>    <span class="hljs-type">uint32_t</span> file_size_;       <span class="hljs-comment">// size of entire file</span><br>    <span class="hljs-type">uint32_t</span> header_size_;     <span class="hljs-comment">// offset to start of next section</span><br>    <span class="hljs-type">uint32_t</span> endian_tag_;<br>    <span class="hljs-type">uint32_t</span> link_size_;       <span class="hljs-comment">// unused</span><br>    <span class="hljs-type">uint32_t</span> link_off_;        <span class="hljs-comment">// unused</span><br>    <span class="hljs-type">uint32_t</span> map_off_;         <span class="hljs-comment">// unused</span><br>    <span class="hljs-type">uint32_t</span> string_ids_size_; <span class="hljs-comment">// number of StringIds</span><br>    <span class="hljs-type">uint32_t</span> string_ids_off_;  <span class="hljs-comment">// file offset of StringIds array</span><br>    <span class="hljs-type">uint32_t</span> type_ids_size_;   <span class="hljs-comment">// number of TypeIds, we don&#x27;t support more than 65535</span><br>    <span class="hljs-type">uint32_t</span> type_ids_off_;    <span class="hljs-comment">// file offset of TypeIds array</span><br>    <span class="hljs-type">uint32_t</span> proto_ids_size_;  <span class="hljs-comment">// number of ProtoIds, we don&#x27;t support more than 65535</span><br>    <span class="hljs-type">uint32_t</span> proto_ids_off_;   <span class="hljs-comment">// file offset of ProtoIds array</span><br>    <span class="hljs-type">uint32_t</span> field_ids_size_;  <span class="hljs-comment">// number of FieldIds</span><br>    <span class="hljs-type">uint32_t</span> field_ids_off_;   <span class="hljs-comment">// file offset of FieldIds array</span><br>    <span class="hljs-type">uint32_t</span> method_ids_size_; <span class="hljs-comment">// number of MethodIds</span><br>    <span class="hljs-type">uint32_t</span> method_ids_off_;  <span class="hljs-comment">// file offset of MethodIds array</span><br>    <span class="hljs-type">uint32_t</span> class_defs_size_; <span class="hljs-comment">// number of ClassDefs</span><br>    <span class="hljs-type">uint32_t</span> class_defs_off_;  <span class="hljs-comment">// file offset of ClassDef array</span><br>    <span class="hljs-type">uint32_t</span> data_size_;       <span class="hljs-comment">// unused</span><br>    <span class="hljs-type">uint32_t</span> data_off_;        <span class="hljs-comment">// unused</span><br>&#125;;<br><br><span class="hljs-comment">//libart.so指针</span><br><span class="hljs-type">void</span>* artHandle = <span class="hljs-literal">nullptr</span>;<br><br><br><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-title">loadDexInAndroid5</span><span class="hljs-params">(<span class="hljs-type">int</span> sdk_int, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *base, <span class="hljs-type">size_t</span> size)</span></span>;<br><span class="hljs-function">std::unique_ptr&lt;<span class="hljs-type">const</span> <span class="hljs-type">void</span> *&gt; <span class="hljs-title">loadDexAboveAndroid6</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *base, <span class="hljs-type">size_t</span> size)</span></span>;<br><br><span class="hljs-comment">/*加载内存dex*/</span><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span><br><span class="hljs-function">JNIEXPORT jobject * JNICALL</span><br><span class="hljs-function"><span class="hljs-title">Java_com_example_androidsecondshell2_MyClassLoader_OpenMemory</span><span class="hljs-params">(JNIEnv *env, jclass clazz,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                              jbyteArray dex, jlong dexlen, jint sdk_int)</span> </span>&#123;<br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> implement OpenMemory()</span><br>    <span class="hljs-type">void</span>* value;<br><br>    <span class="hljs-keyword">if</span> (sdk_int &lt; <span class="hljs-number">22</span>) &#123;<span class="hljs-comment">/* android 5.0, 5.1*/</span><br>        value =  <span class="hljs-built_in">loadDexInAndroid5</span>(sdk_int,(<span class="hljs-type">char</span>*)dex,(<span class="hljs-type">size_t</span>)dexlen);<br>    &#125; <span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">/* android 6.0 7.0 7.1 */</span><br>        value = <span class="hljs-built_in">loadDexAboveAndroid6</span>((<span class="hljs-type">char</span>*)dex,(<span class="hljs-type">size_t</span>)dexlen).<span class="hljs-built_in">get</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!value)&#123;<br>        <span class="hljs-built_in">LOGE</span>(<span class="hljs-string">&quot;fail to load dex&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> (jobject*) value;<br><br>&#125;<br><span class="hljs-comment">/* 加载内存dex，适用于android 5, 5.1 */</span><br><span class="hljs-function"><span class="hljs-type">void</span>* <span class="hljs-title">loadDexInAndroid5</span><span class="hljs-params">(<span class="hljs-type">int</span> sdk_int, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *base, <span class="hljs-type">size_t</span> size)</span></span>&#123;<br>    std::string location = <span class="hljs-string">&quot;Anonymous-DexFile&quot;</span>;<br>    std::string err_msg;<br>    <span class="hljs-type">void</span>* value;<br><br>    <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> *dex_header = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> Header *&gt;(base);<br><br>    <span class="hljs-keyword">if</span> (sdk_int == <span class="hljs-number">21</span>) &#123;<span class="hljs-comment">/* android 5.0 */</span><br>        <span class="hljs-keyword">auto</span> func21 = (org_artDexFileOpenMemory21) <span class="hljs-built_in">dlsym</span>(artHandle, OpenMemory21);<br>        value = <span class="hljs-built_in">func21</span>((<span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *) base,<br>                       (<span class="hljs-type">size_t</span>)size,<br>                       location,<br>                       dex_header-&gt;checksum_,<br>                       <span class="hljs-literal">nullptr</span>,<br>                       &amp;err_msg);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (sdk_int == <span class="hljs-number">22</span>) &#123;<span class="hljs-comment">/* android 5.1 */</span><br>        <span class="hljs-keyword">auto</span> func22 = (org_artDexFileOpenMemory22) <span class="hljs-built_in">dlsym</span>(artHandle, OpenMemory22);<br>        value = <span class="hljs-built_in">func22</span>((<span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *) base,<br>                       size,<br>                       location,<br>                       dex_header-&gt;checksum_,<br>                       <span class="hljs-literal">nullptr</span>,<br>                       <span class="hljs-literal">nullptr</span>,<br>                       &amp;err_msg);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!value)&#123;<br>        <span class="hljs-built_in">LOGE</span>(<span class="hljs-string">&quot;fail to load dex in Android 5&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> value;<br><br>&#125;<br><br><span class="hljs-comment">/* 加载内存dex，适用于android 6.0 7.0 7.1 */</span><br><span class="hljs-function">std::unique_ptr&lt;<span class="hljs-type">const</span> <span class="hljs-type">void</span> *&gt; <span class="hljs-title">loadDexAboveAndroid6</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *base, <span class="hljs-type">size_t</span> size)</span></span>&#123;<br><br>    std::string location = <span class="hljs-string">&quot;Anonymous-DexFile&quot;</span>;<br>    std::string err_msg;<br>    std::unique_ptr&lt;<span class="hljs-type">const</span> <span class="hljs-type">void</span> *&gt; value;<br><br>    <span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> *dex_header = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> Header *&gt;(base);<br><br>    <span class="hljs-keyword">auto</span> func23 = (org_artDexFileOpenMemory23) <span class="hljs-built_in">dlsym</span>(artHandle, OpenMemory23);<br>    value = <span class="hljs-built_in">func23</span>((<span class="hljs-type">const</span> <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> *) base,<br>                   size,<br>                   location,<br>                   dex_header-&gt;checksum_,<br>                   <span class="hljs-literal">nullptr</span>,<br>                   <span class="hljs-literal">nullptr</span>,<br>                   &amp;err_msg);<br><br>    <span class="hljs-keyword">if</span> (!value) &#123;<br>        <span class="hljs-built_in">LOGE</span>(<span class="hljs-string">&quot;fail to load dex in Android 6 and above&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> value;<br><br>&#125;<br><br><span class="hljs-function">JNIEXPORT jint <span class="hljs-title">JNI_OnLoad</span><span class="hljs-params">(JavaVM* vm, <span class="hljs-type">void</span>* reserved)</span></span>&#123;<br>    <span class="hljs-comment">//打开libart.so文件</span><br>    artHandle = (<span class="hljs-type">void</span>*)<span class="hljs-built_in">dlopen</span>(<span class="hljs-string">&quot;libart.so&quot;</span>, RTLD_LAZY);<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三、出现的问题"><a href="#三、出现的问题" class="headerlink" title="三、出现的问题"></a>三、出现的问题</h1><p>在Android 8以下的环境下，因为脱壳程序会需要lib库，所以我将脱壳APK中的lib目录直接拖到源程序APK中（在此之前，源程序APK并没有lib目录），于是乎就出现这样的问题：</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs subunit">adb: failed to install SourceApk_sign.apk: <br><span class="hljs-keyword">Failure </span>[INSTALL_FAILED_INVALID_APK: Failed to extract native libraries, res=<span class="hljs-string">-2</span>]<br></code></pre></td></tr></table></figure><p>可我使用 zipalign 工具后，仍然安装失败！</p><p>（先搁置一下吧😔）</p><p>——————</p><p>直接对源程序动手，创建一个新的源程序，选择成native开发，代码复制过来，可以解决上述问题。</p><p>但仍然存在新的问题，native层的成功打开libart.so文件，但是报错：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ada">open libart.so success//这是我用LOGE输出的<br>terminating <span class="hljs-keyword">with</span> uncaught <span class="hljs-keyword">exception</span> <span class="hljs-keyword">of</span> <span class="hljs-keyword">type</span> <span class="hljs-type">std::bad_alloc: </span><br><span class="hljs-type"></span>Fatal signal <span class="hljs-number">6</span> (SIGABRT), code -<span class="hljs-number">6</span> <span class="hljs-keyword">in</span> tid <span class="hljs-number">27489</span> (ample.sourceapk)<br>Build fingerprint: <span class="hljs-symbol">&#x27;google</span>/marlin/marlin:<span class="hljs-number">7</span><br>...手机指纹...<br></code></pre></td></tr></table></figure><p>可是我没分配内存啊？哪来的bad_alloc？</p><hr><p>参考：</p><p><a href="http://www.520monkey.com/archives/629">Android中apk加固完善篇之内存加载dex方案实现原理(不落地方式加载) | 尼古拉斯.赵四 (520monkey.com)</a></p><p><a href="https://bbs.kanxue.com/thread-277298.htm">Android加壳与脱壳（11）——不落地加载的对抗研究</a></p><p><a href="https://github.com/Frezrik/Jiagu">Frezrik&#x2F;Jiagu: Android apk jiagu (github.com)</a></p><p>[<a href="https://bbs.kanxue.com/thread-261939.htm#msg_header_h1_2">原创]安卓加固方案从落地加载到类指令抽取编写报告-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p><p>[<a href="https://bbs.kanxue.com/thread-260124.htm#msg_header_h2_1">原创]Android App加固原理与技术历程-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p><p><a href="">安卓各版本源码</a></p><p><a href="https://blog.csdn.net/rzleilei/article/details/102911506">Android最新版本号与API级别对应关系（更新到android13）_android 13 api版本-CSDN博客</a></p><p><a href="https://blog.csdn.net/qq409732112/article/details/109391210">hook加载libart.so中的OpenMemory函数</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android加固</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JNI原理</title>
    <link href="/2023/12/10/JNI%E5%8E%9F%E7%90%86/"/>
    <url>/2023/12/10/JNI%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>在 Android 逆向过程中，常常可以见到 java 层使用 native 函数，但 native 函数并没有在 java 层实现，而是在 native 层实现，java 层通过加载库文件来正常使用该函数。java 层之所以可以使用 native 层实现的函数，是因为 JNI 的存在。</p><p>如果我们进一步探究 so 文件，可以发现有的 so 文件中含有 JNI_OnLoad 函数，而有的没有该函数。这个是因为函数组注册的方式不同，具体而言可分为静态注册和动态注册。</p><p>下面我们将一起学习 JNI 以及native函数的注册方法。</p><h1 id="二、什么是JNI？"><a href="#二、什么是JNI？" class="headerlink" title="二、什么是JNI？"></a>二、什么是JNI？</h1><p>JNI（Java Native Interface）译为 java 本地接口，是 java 与其他语言通信的桥梁。开发人员可以使用 JNI 技术来完成 java 编程无法处理的任务或者不便处理的任务，例如：</p><ol><li>调用 Java 语言不支持的依赖于操作系统平台特性的功能。</li><li>整合以前的非 Java 语言开发的系统。</li><li>节省程序的运行时间，采用其他语言（如 C&#x2F;C++）来提升运行效率。</li></ol><h1 id="三、Native注册方法"><a href="#三、Native注册方法" class="headerlink" title="三、Native注册方法"></a>三、Native注册方法</h1><p>Native 方法注册可分为静态注册和动态注册，其中静态注册多用于 NDK 开发，而动态注册多用于 Framework 开发。</p><h2 id="3-1-静态注册"><a href="#3-1-静态注册" class="headerlink" title="3.1 静态注册"></a>3.1 静态注册</h2><p>Android Studio中创建一个native项目，会自动定义一个 JNI 函数<code>stringFromJNI</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.mynative;<br><br><span class="hljs-keyword">import</span> androidx.appcompat.app.AppCompatActivity;<br><br><span class="hljs-keyword">import</span> android.os.Bundle;<br><span class="hljs-keyword">import</span> android.widget.TextView;<br><br><span class="hljs-keyword">import</span> com.example.mynative.databinding.ActivityMainBinding;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-comment">//加载native库</span><br>        System.loadLibrary(<span class="hljs-string">&quot;mynative&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> ActivityMainBinding binding;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br><br>        binding = ActivityMainBinding.inflate(getLayoutInflater());<br>        setContentView(binding.getRoot());<br><br>        <span class="hljs-type">TextView</span> <span class="hljs-variable">tv</span> <span class="hljs-operator">=</span> binding.sampleText;<br>        <span class="hljs-comment">//调用stringFromJNI方法</span><br>        tv.setText(stringFromJNI());<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 声明native库中的stringFromJNI方法，以供Java层调用</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">native</span> String <span class="hljs-title function_">stringFromJNI</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的<code>stringFromJNI</code>方法在Native层的实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;jni.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <br><span class="hljs-function">JNIEXPORT jstring JNICALL</span><br><span class="hljs-function"><span class="hljs-title">Java_com_example_mynative_MainActivity_stringFromJNI</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        JNIEnv* env,</span></span><br><span class="hljs-params"><span class="hljs-function">        jobject <span class="hljs-comment">/* this */</span>)</span> </span>&#123;<br>    std::string hello = <span class="hljs-string">&quot;Hello from C++&quot;</span>;<br>    <span class="hljs-keyword">return</span> env-&gt;<span class="hljs-built_in">NewStringUTF</span>(hello.<span class="hljs-built_in">c_str</span>());<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的函数名为<code>Java_com_example_mynative_MainActivity_stringFromJNI</code>，该函数名特点为：</p><ol><li>带有<code>JNIEXPORT</code>和<code>JNICALL</code>两个宏定义。</li><li>符合函数命名规则：以字符串 “Java” 为前缀，用 “_” 下划线将包名、类名以及方法名连接起来。</li></ol><p>当我们在 Java 层调用该函数时，就会根据以上特征从 JNI 中寻找对应函数，如果找到了，就会为 Java 层 和 Native 层的相应函数建关联，即保存 JNI 的函数指针，以后调用就可以直接使用函数指针即可。静态注册就是根据方法名，将Java方法和JNI函数建立关联，但是它有一些缺陷：</p><ul><li>JNI层的函数名过长。</li><li>初次调用Native方法时需要建立关联，影响效率。</li></ul><p>我们知道，静态注册就是Java的Native方法通过方法指针来与JNI进行关联，如果Java的Native方法知道它在JNI中对应的函数指针，就可以避免上述的缺点，这就是动态注册。</p><h2 id="3-2-动态注册"><a href="#3-2-动态注册" class="headerlink" title="3.2 动态注册"></a>3.2 动态注册</h2><p>在动态注册中，JNI 中会使用 JNINativeMethod 结构体来记录 Java 的Native 方法和 JNI 方法的关联关系，它的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* name;<span class="hljs-comment">//Java方法的名字</span><br><span class="hljs-type">const</span> <span class="hljs-type">char</span>* signature;<span class="hljs-comment">//Java方法的签名信息（参数类型+返回值类型）</span><br><span class="hljs-type">void</span>* fnPtr;<span class="hljs-comment">//JNI中对应的方法指针</span><br>&#125;JNINativeMethod;<br></code></pre></td></tr></table></figure><p>以 Android 系统中的 MediaRecorder 为例，来探究动态注册的过程。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//frameworks/base/media/jni/android_media_MediaRecorder.cpp</span><br><span class="hljs-type">static</span> <span class="hljs-type">const</span> JNINativeMethod gMethods[] = &#123;<br>...<br>    &#123;<span class="hljs-string">&quot;start&quot;</span>,            <span class="hljs-string">&quot;()V&quot;</span>,      (<span class="hljs-type">void</span> *)android_media_MediaRecorder_start&#125;,<span class="hljs-comment">//1</span><br>    &#123;<span class="hljs-string">&quot;stop&quot;</span>,             <span class="hljs-string">&quot;()V&quot;</span>,      (<span class="hljs-type">void</span> *)android_media_MediaRecorder_stop&#125;,<br>    &#123;<span class="hljs-string">&quot;pause&quot;</span>,            <span class="hljs-string">&quot;()V&quot;</span>,      (<span class="hljs-type">void</span> *)android_media_MediaRecorder_pause&#125;,<br>    &#123;<span class="hljs-string">&quot;resume&quot;</span>,           <span class="hljs-string">&quot;()V&quot;</span>,      (<span class="hljs-type">void</span> *)android_media_MediaRecorder_resume&#125;,<br>    &#123;<span class="hljs-string">&quot;native_reset&quot;</span>,     <span class="hljs-string">&quot;()V&quot;</span>,      (<span class="hljs-type">void</span> *)android_media_MediaRecorder_native_reset&#125;,<br>    &#123;<span class="hljs-string">&quot;release&quot;</span>,          <span class="hljs-string">&quot;()V&quot;</span>,      (<span class="hljs-type">void</span> *)android_media_MediaRecorder_release&#125;,<br>    &#123;<span class="hljs-string">&quot;native_init&quot;</span>,      <span class="hljs-string">&quot;()V&quot;</span>,      (<span class="hljs-type">void</span> *)android_media_MediaRecorder_native_init&#125;,<br>   ...<br>&#125;;<br></code></pre></td></tr></table></figure><p>在 JNINativeMethod 类型的 gMethods 数组，存放的都是 MediaRecorder 的 Native 方法与 JNI 层函数的对应关系（即 JNINativeMethod 结构体）。</p><p>这里只是定义了 JNINativeMethod 类型的数组，还需要注册它，注册的函数为 register_android_media_MediaRecorder，这个函数会被 JNI_OnLoad 函数调用，而 JNI_OnLoad 函数是在 java 层调用 System.loadLibrary 函数时被调用。 MediaRecorder 对应的 JNI_OnLoad 函数如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//frameworks/base/media/jni/android_media_MediaPlayer.cpp</span><br><span class="hljs-function">jint <span class="hljs-title">JNI_OnLoad</span><span class="hljs-params">(JavaVM* vm, <span class="hljs-type">void</span>* <span class="hljs-comment">/* reserved */</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    JNIEnv* env = <span class="hljs-literal">NULL</span>;<br>    jint result = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-keyword">if</span> (vm-&gt;<span class="hljs-built_in">GetEnv</span>((<span class="hljs-type">void</span>**) &amp;env, JNI_VERSION_1_4) != JNI_OK) &#123;<br>        <span class="hljs-built_in">ALOGE</span>(<span class="hljs-string">&quot;ERROR: GetEnv failed\n&quot;</span>);<br>        <span class="hljs-keyword">goto</span> bail;<br>    &#125;<br>    <span class="hljs-built_in">assert</span>(env != <span class="hljs-literal">NULL</span>);<br>...<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">register_android_media_MediaPlayer</span>(env) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">ALOGE</span>(<span class="hljs-string">&quot;ERROR: MediaPlayer native registration failed\n&quot;</span>);<br>        <span class="hljs-keyword">goto</span> bail;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">register_android_media_MediaRecorder</span>(env) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">ALOGE</span>(<span class="hljs-string">&quot;ERROR: MediaRecorder native registration failed\n&quot;</span>);<br>        <span class="hljs-keyword">goto</span> bail;<br>    &#125;<br>...<br>    <span class="hljs-comment">/* success -- return valid version number */</span><br>    result = JNI_VERSION_1_4;<br><br>bail:<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>在 JNI_OnLoad 函数中调用了整个多媒体框架的注册 JNINativeMethod 数组的函数。跟随 register_android_media_MediaRecorder 函数进一步深入：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//frameworks/base/media/jni/android_media_MediaRecorder.cpp</span><br><br><span class="hljs-comment">// This function only registers the native methods, and is called from</span><br><span class="hljs-comment">// JNI_OnLoad in android_media_MediaPlayer.cpp</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">register_android_media_MediaRecorder</span><span class="hljs-params">(JNIEnv *env)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> AndroidRuntime::<span class="hljs-built_in">registerNativeMethods</span>(env,<br>                <span class="hljs-string">&quot;android/media/MediaRecorder&quot;</span>, gMethods, <span class="hljs-built_in">NELEM</span>(gMethods));<br>&#125;<br></code></pre></td></tr></table></figure><p>该函数中调用了 AndroidRuntime 的 registerNativeMethods 函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//frameworks/base/core/jni/AndroidRuntime.cpp</span><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Register native methods using JNI.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/*static*/</span> <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">AndroidRuntime::registerNativeMethods</span><span class="hljs-params">(JNIEnv* env,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* className, <span class="hljs-type">const</span> JNINativeMethod* gMethods, <span class="hljs-type">int</span> numMethods)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">jniRegisterNativeMethods</span>(env, className, gMethods, numMethods);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>调用了 jniRegisterNativeMethods 函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//libnativehelper/JNIHelp.cpp</span><br><br><span class="hljs-keyword">extern</span> <span class="hljs-string">&quot;C&quot;</span> <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">jniRegisterNativeMethods</span><span class="hljs-params">(C_JNIEnv* env, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* className,</span></span><br><span class="hljs-params"><span class="hljs-function">    <span class="hljs-type">const</span> JNINativeMethod* gMethods, <span class="hljs-type">int</span> numMethods)</span></span><br><span class="hljs-function"></span>&#123;<br>    JNIEnv* e = <span class="hljs-built_in">reinterpret_cast</span>&lt;JNIEnv*&gt;(env);<br><br>    <span class="hljs-built_in">ALOGV</span>(<span class="hljs-string">&quot;Registering %s&#x27;s %d native methods...&quot;</span>, className, numMethods);<br><span class="hljs-comment">//找要加载的类</span><br>    <span class="hljs-function">scoped_local_ref&lt;jclass&gt; <span class="hljs-title">c</span><span class="hljs-params">(env, findClass(env, className))</span></span>;<br>    <span class="hljs-keyword">if</span> (c.<span class="hljs-built_in">get</span>() == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-type">char</span>* tmp;<br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span>* msg;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">asprintf</span>(&amp;tmp,<br>                     <span class="hljs-string">&quot;Native registration unable to find class &#x27;%s&#x27;; aborting...&quot;</span>,<br>                     className) == <span class="hljs-number">-1</span>) &#123;<br>            <span class="hljs-comment">// Allocation failed, print default warning.</span><br>            msg = <span class="hljs-string">&quot;Native registration unable to find class; aborting...&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            msg = tmp;<br>        &#125;<br>        e-&gt;<span class="hljs-built_in">FatalError</span>(msg);<br>    &#125;<br><span class="hljs-comment">//进行注册</span><br>    <span class="hljs-keyword">if</span> ((*env)-&gt;<span class="hljs-built_in">RegisterNatives</span>(e, c.<span class="hljs-built_in">get</span>(), gMethods, numMethods) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-type">char</span>* tmp;<br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span>* msg;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">asprintf</span>(&amp;tmp, <span class="hljs-string">&quot;RegisterNatives failed for &#x27;%s&#x27;; aborting...&quot;</span>, className) == <span class="hljs-number">-1</span>) &#123;<br>            <span class="hljs-comment">// Allocation failed, print default warning.</span><br>            msg = <span class="hljs-string">&quot;RegisterNatives failed; aborting...&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            msg = tmp;<br>        &#125;<br>        e-&gt;<span class="hljs-built_in">FatalError</span>(msg);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终通过调用 JNIEnv 的 RegisterNatives 函数来完成 JNI 的注册。 JNIEnv 在 JNI 中非常重要，下一小节将会讲述它。</p><h1 id="四、数据类型的转换"><a href="#四、数据类型的转换" class="headerlink" title="四、数据类型的转换"></a>四、数据类型的转换</h1><p>Java层的数据类型分为两类：基本数据类型和引用数据类型，JNI层也做了相应的数据类型划分。</p><h2 id="4-1-基本数据类型的转换"><a href="#4-1-基本数据类型的转换" class="headerlink" title="4.1 基本数据类型的转换"></a>4.1 基本数据类型的转换</h2><table><thead><tr><th align="center">Java</th><th align="center">Native</th><th align="center">Signature</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">jbyte</td><td align="center">B</td></tr><tr><td align="center">char</td><td align="center">jchar</td><td align="center">C</td></tr><tr><td align="center">double</td><td align="center">jdouble</td><td align="center">D</td></tr><tr><td align="center">float</td><td align="center">jfloat</td><td align="center">F</td></tr><tr><td align="center">int</td><td align="center">jint</td><td align="center">I</td></tr><tr><td align="center">short</td><td align="center">jshort</td><td align="center">S</td></tr><tr><td align="center">long</td><td align="center">jlong</td><td align="center">J</td></tr><tr><td align="center">boolean</td><td align="center">jboolean</td><td align="center">Z</td></tr><tr><td align="center">void</td><td align="center">void</td><td align="center">V</td></tr></tbody></table><p>可以看出，基本数据类型的转换，除了void类型以外，其他的数据类型都只要在前面加上”j”就行了。</p><h2 id="4-2-引用数据类型的转换"><a href="#4-2-引用数据类型的转换" class="headerlink" title="4.2 引用数据类型的转换"></a>4.2 引用数据类型的转换</h2><table><thead><tr><th align="center">Java</th><th align="center">Native</th><th align="center">Signature</th></tr></thead><tbody><tr><td align="center">所有对象</td><td align="center">jobject</td><td align="center">L + classname + ;</td></tr><tr><td align="center">Class</td><td align="center">jclass</td><td align="center">Ljava&#x2F;lang&#x2F;Class;</td></tr><tr><td align="center">String</td><td align="center">jstring</td><td align="center">Ljava&#x2F;lang&#x2F;String;</td></tr><tr><td align="center">Throwable</td><td align="center">jthrowable</td><td align="center">Ljava&#x2F;lang&#x2F;Throwable;</td></tr><tr><td align="center">Object[]</td><td align="center">jobjectArray</td><td align="center">[L + classname + ;</td></tr><tr><td align="center">byte[]</td><td align="center">jbyteArray</td><td align="center">[B</td></tr><tr><td align="center">char[]</td><td align="center">jcharArray</td><td align="center">[C</td></tr><tr><td align="center">double[]</td><td align="center">jdoubleArray</td><td align="center">[D</td></tr><tr><td align="center">float[]</td><td align="center">jfloatArray</td><td align="center">[F</td></tr><tr><td align="center">int[]</td><td align="center">jintArray</td><td align="center">[I</td></tr><tr><td align="center">short[]</td><td align="center">jshortArray</td><td align="center">[S</td></tr><tr><td align="center">long[]</td><td align="center">jlongArray</td><td align="center">[J</td></tr><tr><td align="center">boolean[]</td><td align="center">jbooleanArray</td><td align="center">[Z</td></tr></tbody></table><p>其中jclass、jstring、jarray和jthrowable都继承自jobject，而jobjectArray、jbyteArray等都继承jarray。</p><h1 id="五、方法签名"><a href="#五、方法签名" class="headerlink" title="五、方法签名"></a>五、方法签名</h1><p>在前面两个表格中，都列举了数据类型的签名格式（Signature），方法签名就是由签名格式组成的。</p><p>举个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">static</span> <span class="hljs-type">const</span> JNINativeMethod gMethods[] = &#123;<br>    ...<br>    &#123;<span class="hljs-string">&quot;native_init&quot;</span>, <span class="hljs-string">&quot;()V&quot;</span>, (<span class="hljs-type">void</span> *)android_media_MediaRecorder_native_init&#125;,<br>    &#123;<span class="hljs-string">&quot;native_setup&quot;</span>, <span class="hljs-string">&quot;(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/String;)V&quot;</span>,<br>     (<span class="hljs-type">void</span> *)android_media_MediaRecorder_native_setup&#125;,<br>     ...<br>&#125;;<br></code></pre></td></tr></table></figure><p>每个方法数组中的第二个就是方法签名。Java中是可以定义重载方法，方法名相同但参数不同。正因如此，在JNI中仅仅通过方法名是无法找到Java中对应的具体方法的，JNI为了解决这一问题就将参数类型和返回值类型组合在一起作为方法签名。通过方法签名和方法名就可以找到对应的Java方法。JNI的方法签名格式如下：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(参数签名格式...)</span>返回值签名格式<br></code></pre></td></tr></table></figure><h1 id="六、解析-JNIEnv"><a href="#六、解析-JNIEnv" class="headerlink" title="六、解析 JNIEnv"></a>六、解析 JNIEnv</h1><p>JNIEnv 是 Native 层中 Java 环境的代表，通过 JNIEnv* 指针就可以在 Native 层中访问 Java 层的代码并进行操作，比如调用 Java 的方法、操作 Java 的变量和对象等。但是它只在创建它的线程中有效，不能跨线程传递， 因此不同线程的 JNIEnv 是彼此独立的。</p><p>JNIEnv 的定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//libnativehelper/include/nativehelper/jni.h</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">_JNIEnv</span>;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">_JavaVM</span>;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">JNINativeInterface</span>* C_JNIEnv;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(__cplusplus)</span><br><span class="hljs-keyword">typedef</span> _JNIEnv JNIEnv;<br><span class="hljs-keyword">typedef</span> _JavaVM JavaVM;<br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">JNINativeInterface</span>* JNIEnv;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">JNIInvokeInterface</span>* JavaVM;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><p><code>_JNIEnv </code>和 <code>_JavaVM</code> 结构体存放了各种函数的定义。这里使用了预定义宏 <code>__cplusplus </code>来区分 C 和 C++两种代码。<code>_JavaVM</code>是 <code>Java </code>虚拟机在 <code>JNI </code>层的代表，在一个虚拟机进程中只有一个 <code>JVM</code>，因此该进程的所有线程都可以使用这个 <code>JVM</code>。通过 <code>JVM</code> 的 <code>AttachCurrentThread</code>函数可以获取这个线程的 <code>JNIEnv</code>，这样就可以在不同的线程中调用 <code>Java</code> 方法了。</p><p><code>_JNIEnv </code>的定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//libnativehelper/include/nativehelper/jni.h</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">_JNIEnv</span> &#123;<br>    <span class="hljs-comment">/* do not rename this; it does not seem to be entirely opaque */</span><br>    <span class="hljs-type">const</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">JNINativeInterface</span>* functions;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined(__cplusplus)</span><br>    ...<br><span class="hljs-function">jclass <span class="hljs-title">FindClass</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* name)</span></span><br><span class="hljs-function">    </span>&#123; <span class="hljs-keyword">return</span> functions-&gt;<span class="hljs-built_in">FindClass</span>(<span class="hljs-keyword">this</span>, name); &#125;<br>    ...<br><span class="hljs-function">jmethodID <span class="hljs-title">GetMethodID</span><span class="hljs-params">(jclass clazz, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* name, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* sig)</span></span><br><span class="hljs-function">    </span>&#123; <span class="hljs-keyword">return</span> functions-&gt;<span class="hljs-built_in">GetMethodID</span>(<span class="hljs-keyword">this</span>, clazz, name, sig); &#125;<br>    ...<br><span class="hljs-function">jfieldID <span class="hljs-title">GetFieldID</span><span class="hljs-params">(jclass clazz, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* name, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* sig)</span></span><br><span class="hljs-function">    </span>&#123; <span class="hljs-keyword">return</span> functions-&gt;<span class="hljs-built_in">GetFieldID</span>(<span class="hljs-keyword">this</span>, clazz, name, sig); &#125;<br>...<br>&#125;<br></code></pre></td></tr></table></figure><p><code>_JNIEnv</code>是一个结构体，其内部包含了 <code>JNINativeInterface</code>。在<code>_JNIEnv</code>中定义了许多函数，其中有三个比较常用的函数：</p><ol><li><strong>FindClass</strong>：根据参数<code>name</code>获取<code>Java</code>中的类。</li><li><strong>GetMethodID</strong>：根据参数<code>clazz</code>和参数<code>name</code>获取<code>Java</code>中的类中的方法。</li><li><strong>GetFieldID</strong>：根据参数<code>clazz</code>和参数<code>name</code>获取<code>Java</code>中的类中的成员变量。</li></ol><p>这三个方法都调用了<code>JNINativeInterface</code>中定义的函数，因此C&#x2F;C++对应的<code>JNIEnv</code>的类型都和<code>JNINativeInterface</code>结构体有关，该结构体定义如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//路径：libnativehelper/include/nativehelper/jni.h</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">JNINativeInterface</span> &#123;<br>...<br>    <span class="hljs-built_in">jclass</span>      (*GetObjectClass)(JNIEnv*, jobject);<br>...<br>    <span class="hljs-built_in">jmethodID</span>   (*GetMethodID)(JNIEnv*, jclass, <span class="hljs-type">const</span> <span class="hljs-type">char</span>*, <span class="hljs-type">const</span> <span class="hljs-type">char</span>*);<br>...<br>    <span class="hljs-built_in">jfieldID</span>    (*GetStaticFieldID)(JNIEnv*, jclass, <span class="hljs-type">const</span> <span class="hljs-type">char</span>*, <span class="hljs-type">const</span> <span class="hljs-type">char</span>*);<br>...<br>&#125;;<br></code></pre></td></tr></table></figure><p>在<code>JNINativeInterface</code>结构体中定义了很多和<code>JNIEnv</code>结构体对应的函数指针。通过这些函数指针，就能够定位到虚拟机中的 JNI 函数表，从而实现 JNI 层在虚拟机中的函数调用，这样就 JNI 层就可以调用 Java 层的方法了。</p><h1 id="七、引用类型"><a href="#七、引用类型" class="headerlink" title="七、引用类型"></a>七、引用类型</h1><p>和Java的引用类型一样，JNI也有引用类型，它们分别是本地引用（Local References）、全局引用（Global References）和弱全局引用（Weak Global References）。</p><h2 id="7-1-本地引用"><a href="#7-1-本地引用" class="headerlink" title="7.1 本地引用"></a>7.1 本地引用</h2><p>JNIEnv提供的函数所返回的引用基本上都是本地引用，因此本地引用也是JNI中最常见的引用类型。本地引用具有以下特点：</p><ul><li>当Native函数返回时，这个本地引用就会被自动释放。（也可以手动调用JNIEnv的DeleteLocalRef函数来删除本地引用）</li><li>只在创建它的线程中有效，不能够跨线程使用。</li><li>局部引用是JVM负责的引用类型，受JVM管理。</li></ul><h2 id="7-2-全局引用"><a href="#7-2-全局引用" class="headerlink" title="7.2 全局引用"></a>7.2 全局引用</h2><p>全局引用与本地引用相反，它具有以下特点：</p><ul><li>在native函数返回时不会被自动释放，因此全局引用需要手动释放，并且不会被GC回收。</li><li>全局引用是可以跨线程使用的。</li><li>全局引用不受到JVM管理。</li></ul><p>全局引用通过JNIEnv的NewGlobalRef函数创建，通过JNIEnv的DeleteGlobalRef函数释放。示例代码如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">jclass clazz = env-&gt;<span class="hljs-constructor">GetObjectClass(<span class="hljs-params">classname</span>)</span>;<br>jcalss mClass = (jcalss)env-&gt;<span class="hljs-constructor">NewGlobalRef(<span class="hljs-params">clazz</span>)</span>;<br>env-&gt;<span class="hljs-constructor">DeleteGlobalRef(<span class="hljs-params">mClass</span>)</span><br></code></pre></td></tr></table></figure><h2 id="7-3-弱全局引用"><a href="#7-3-弱全局引用" class="headerlink" title="7.3 弱全局引用"></a>7.3 弱全局引用</h2><p>弱全局引用是一种特殊的全局引用，它和全局引用的特点相似，但是弱全局引用是可以被GC回收的。弱全局引用被GC回收之后会指向NULL，因此在调用前需要判断它是否被回收了（通过JNIEnv的IsSameObject函数来判断）。弱全局引用通过JNIEnv的NewWeakGlobalRef函数来创建弱全局引用，通过JNIEnv的DeleteWeakGlobalRef函数释放。</p><p>示例代码如下：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">jclass clazz = env-&gt;<span class="hljs-constructor">GetObjectClass(<span class="hljs-params">classname</span>)</span>;<br>jcalss mClass = (jcalss)env-&gt;<span class="hljs-constructor">NewWeakGlobalRef(<span class="hljs-params">clazz</span>)</span>;<br>env-&gt;<span class="hljs-constructor">DeleteWeakGlobalRef(<span class="hljs-params">mClass</span>)</span><br><span class="hljs-comment">//使用时</span><br><span class="hljs-keyword">if</span>(env-&gt;<span class="hljs-constructor">IsSameObject(<span class="hljs-params">mClass</span>,NULL)</span>)&#123;<br><span class="hljs-comment">//不能使用</span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">//可以使用</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h1><p>JNI 是 Java 和其他语言通信的桥梁。JNI 注册又分为静态注册和动态注册。静态注册则是在方法被调用时将 Java 方法和JNI函数建立关联；而动态注册则是在方法被调用前就依靠 JNI_OnLoad 方法建立联系。但不管是哪种注册方式，它们在 Java 层的代码编写都是一样的。</p><p>Java 层能够调用 Native 层的函数，那反过来也同样可以。这需要依靠 JNIEnv 和 JavaVM，通过 JavaVM 获取当前线程的 JNIEnv，然后通过调用 JNIEnv 中的一系列函数就可以访问到 Java 层的类、方法、变量、对象等。</p><hr><p>参考：</p><p><a href="http://liuwangshu.cn/framework/jni/1-mediarecorder_register.html">Android深入理解JNI（一）JNI原理与静态、动态注册 | BATcoder - 刘望舒 (liuwangshu.cn)</a></p><p><a href="https://docs.oracle.com/javase/1.5.0/docs/guide/jni/spec/design.html">Design Overview (oracle.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/357885076">Android NDK开发——静态注册和动态注册 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Android源码解析</tag>
      
      <tag>JNI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>InMemoryDexClassLoader加载内存dex的流程</title>
    <link href="/2023/12/06/InMemoryDexClassLoader%E5%8A%A0%E8%BD%BD%E5%86%85%E5%AD%98dex%E7%9A%84%E6%B5%81%E7%A8%8B/"/>
    <url>/2023/12/06/InMemoryDexClassLoader%E5%8A%A0%E8%BD%BD%E5%86%85%E5%AD%98dex%E7%9A%84%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>在之前分析dex文件加载流程中（<a href="https://gal2xy.github.io/2023/11/20/dex%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B(%E4%B8%80)/">dex文件加载流程(一)(二)(三)</a>），我们分析过了DexClassLoader和PathClassLoader这两个类加载器加载dex的流程。它们两个都是用来记载文件dex的，但是在Android 8新增了InMemoryDexClassLoader，专门用于加载内存dex，接下来我们就根据源码来剖析内存dex的加载流程。</p><h1 id="二、InMemoryDexClassLoader加载内存dex的流程"><a href="#二、InMemoryDexClassLoader加载内存dex的流程" class="headerlink" title="二、InMemoryDexClassLoader加载内存dex的流程"></a>二、InMemoryDexClassLoader加载内存dex的流程</h1><h2 id="2-1-InMemoryDexClassLoader"><a href="#2-1-InMemoryDexClassLoader" class="headerlink" title="2.1 InMemoryDexClassLoader"></a>2.1 InMemoryDexClassLoader</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/libcore/dalvik/src/main/java/dalvik/system/InMemoryDexClassLoader.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InMemoryDexClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseDexClassLoader</span> &#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Create an in-memory DEX class loader with the given dex buffers.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dexBuffers array of buffers containing DEX files between</span><br><span class="hljs-comment">     *                       &lt;tt&gt;buffer.position()&lt;/tt&gt; and &lt;tt&gt;buffer.limit()&lt;/tt&gt;.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parent the parent class loader for delegation.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@hide</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InMemoryDexClassLoader</span><span class="hljs-params">(ByteBuffer[] dexBuffers, ClassLoader parent)</span> &#123;<br>        <span class="hljs-built_in">super</span>(dexBuffers, parent);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">InMemoryDexClassLoader</span><span class="hljs-params">(ByteBuffer dexBuffer, ClassLoader parent)</span> &#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteBuffer</span>[] &#123; dexBuffer &#125;, parent);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>InMemoryDexClassLoader继承自BaseDexClassLoader，是专门用来加载内存dex的，<strong>其中第一个构造方法接受ByteBuffer数组，因此是可以支持多dex的</strong>。它的方法都在父类中实现，其中对应的构造方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/libcore/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * Constructs an instance.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * dexFile must be an in-memory representation of a full dexFile.</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> dexFiles the array of in-memory dex files containing classes.</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> parent the parent class loader</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@hide</span></span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseDexClassLoader</span><span class="hljs-params">(ByteBuffer[] dexFiles, ClassLoader parent)</span> &#123;<br>    <span class="hljs-built_in">super</span>(parent);<br>    <span class="hljs-built_in">this</span>.pathList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DexPathList</span>(<span class="hljs-built_in">this</span>, dexFiles);<br>&#125;<br></code></pre></td></tr></table></figure><p>在该方法中，会创建一个DexPathList对象。</p><h2 id="2-2-DexPathList实例化"><a href="#2-2-DexPathList实例化" class="headerlink" title="2.2 DexPathList实例化"></a>2.2 DexPathList实例化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/libcore/dalvik/src/main/java/dalvik/system/DexPathList.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">DexPathList</span><span class="hljs-params">(ClassLoader definingContext, ByteBuffer[] dexFiles)</span> &#123;<br>    <span class="hljs-comment">//校验参数</span><br>    <span class="hljs-keyword">if</span> (definingContext == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">&quot;definingContext == null&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (dexFiles == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">&quot;dexFiles == null&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (Arrays.stream(dexFiles).anyMatch(v -&gt; v == <span class="hljs-literal">null</span>)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>(<span class="hljs-string">&quot;dexFiles contains a null Buffer!&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">this</span>.definingContext = definingContext;<br>    <span class="hljs-comment">// 加载本地库</span><br>    <span class="hljs-built_in">this</span>.nativeLibraryDirectories = Collections.emptyList();<br>    <span class="hljs-built_in">this</span>.systemNativeLibraryDirectories = splitPaths(System.getProperty(<span class="hljs-string">&quot;java.library.path&quot;</span>), <span class="hljs-literal">true</span>);<br>    <span class="hljs-built_in">this</span>.nativeLibraryPathElements = makePathElements(<span class="hljs-built_in">this</span>.systemNativeLibraryDirectories);<br><br>    ArrayList&lt;IOException&gt; suppressedExceptions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;IOException&gt;();<br>    <span class="hljs-comment">// 加载dex</span><br>    <span class="hljs-built_in">this</span>.dexElements = makeInMemoryDexElements(dexFiles, suppressedExceptions);<br>    <span class="hljs-keyword">if</span> (suppressedExceptions.size() &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">this</span>.dexElementsSuppressedExceptions =<br>            suppressedExceptions.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>[suppressedExceptions.size()]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        dexElementsSuppressedExceptions = <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>值得注意的是，它在这里调用的是<code>makeInMemoryDexElements()</code>方法，而在DexClassLoader和PathClassLoader流程中，调用的是<code>makeDexElements()</code>方法。</p><h2 id="2-3-makeInMemoryDexElements"><a href="#2-3-makeInMemoryDexElements" class="headerlink" title="2.3 makeInMemoryDexElements()"></a>2.3 makeInMemoryDexElements()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/libcore/dalvik/src/main/java/dalvik/system/DexPathList.java</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Element[] makeInMemoryDexElements(ByteBuffer[] dexFiles,<br>                                                 List&lt;IOException&gt; suppressedExceptions) &#123;<br>    <span class="hljs-comment">//根据传入的内存dex个数创建Element对象</span><br>    Element[] elements = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Element</span>[dexFiles.length];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">elementPos</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//遍历内存dex数组</span><br>    <span class="hljs-keyword">for</span> (ByteBuffer buf : dexFiles) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//给内存dex创建DexFile对象</span><br>            <span class="hljs-type">DexFile</span> <span class="hljs-variable">dex</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DexFile</span>(buf);<br>            <span class="hljs-comment">//将刚创建的DexFile封装成Element对象</span><br>            elements[elementPos++] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Element</span>(dex);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException suppressed) &#123;<br>            System.logE(<span class="hljs-string">&quot;Unable to load dex file: &quot;</span> + buf, suppressed);<br>            suppressedExceptions.add(suppressed);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (elementPos != elements.length) &#123;<br>        elements = Arrays.copyOf(elements, elementPos);<br>    &#125;<br>    <span class="hljs-keyword">return</span> elements;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个方法主要是遍历内存dex数组，给每个内存dex创建一个DexFile对象，并封装成Element对象。</p><h2 id="2-4-DexFile实例化"><a href="#2-4-DexFile实例化" class="headerlink" title="2.4 DexFile实例化"></a>2.4 DexFile实例化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/libcore/dalvik/src/main/java/dalvik/system/DexFile.java</span><br>DexFile(ByteBuffer buf) <span class="hljs-keyword">throws</span> IOException &#123;<br>    mCookie = openInMemoryDexFile(buf);<br>    mInternalCookie = mCookie;<br>    mFileName = <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用<code>openInMemoryDexFile()</code>方法，返回的cookie是用于操作dex文件的唯一凭证，可以理解为”身份码”。</p><h2 id="2-5-openInMemoryDexFile"><a href="#2-5-openInMemoryDexFile" class="headerlink" title="2.5 openInMemoryDexFile()"></a>2.5 openInMemoryDexFile()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/libcore/dalvik/src/main/java/dalvik/system/DexFile.java</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">openInMemoryDexFile</span><span class="hljs-params">(ByteBuffer buf)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">//ByteBuffer.isDirect()用于判断当前缓冲区是否是直接缓冲区</span><br>    <span class="hljs-keyword">if</span> (buf.isDirect()) &#123;<br>        <span class="hljs-comment">//单dex</span><br>        <span class="hljs-keyword">return</span> createCookieWithDirectBuffer(buf, buf.position(), buf.limit());<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//多dex</span><br>        <span class="hljs-keyword">return</span> createCookieWithArray(buf.array(), buf.position(), buf.limit());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> Object <span class="hljs-title function_">createCookieWithDirectBuffer</span><span class="hljs-params">(ByteBuffer buf, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> Object <span class="hljs-title function_">createCookieWithArray</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] buf, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span>;<br></code></pre></td></tr></table></figure><p>最终调用两个native层的方法，它们都在<code>art/runtime/native/dalvik_system_DexFile.cc</code>中实现。</p><h3 id="2-5-1-createCookieWithDirectBuffer"><a href="#2-5-1-createCookieWithDirectBuffer" class="headerlink" title="2.5.1 createCookieWithDirectBuffer()"></a>2.5.1 createCookieWithDirectBuffer()</h3><p><code>createCookieWithDirectBuffer()</code>对应<code>DexFile_createCookieWithDirectBuffer()</code>方法，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//路径：/art/runtime/native/dalvik_system_DexFile.cc</span><br><span class="hljs-function"><span class="hljs-type">static</span> jobject <span class="hljs-title">DexFile_createCookieWithDirectBuffer</span><span class="hljs-params">(JNIEnv* env,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                    jclass,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                    jobject buffer,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                    jint start,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                    jint end)</span> </span>&#123;<br>    <span class="hljs-comment">//获取起始地址</span><br>    <span class="hljs-type">uint8_t</span>* base_address = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">uint8_t</span>*&gt;(env-&gt;<span class="hljs-built_in">GetDirectBufferAddress</span>(buffer));<br>    <span class="hljs-keyword">if</span> (base_address == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-function">ScopedObjectAccess <span class="hljs-title">soa</span><span class="hljs-params">(env)</span></span>;<br>        <span class="hljs-built_in">ThrowWrappedIOException</span>(<span class="hljs-string">&quot;dexFileBuffer not direct&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><span class="hljs-comment">//分配内存</span><br>    <span class="hljs-function">std::unique_ptr&lt;MemMap&gt; <span class="hljs-title">dex_mem_map</span><span class="hljs-params">(AllocateDexMemoryMap(env, start, end))</span></span>;<br>    <span class="hljs-keyword">if</span> (dex_mem_map == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-built_in">DCHECK</span>(Thread::<span class="hljs-built_in">Current</span>()-&gt;<span class="hljs-built_in">IsExceptionPending</span>());<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-type">size_t</span> length = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">size_t</span>&gt;(end - start);<br>    <span class="hljs-comment">//复制到dex_mem_map中</span><br>    <span class="hljs-built_in">memcpy</span>(dex_mem_map-&gt;<span class="hljs-built_in">Begin</span>(), base_address, length);<br><span class="hljs-comment">//调用CreateSingleDexFileCookie创建Cookie</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">CreateSingleDexFileCookie</span>(env, std::<span class="hljs-built_in">move</span>(dex_mem_map));<br>&#125;<br></code></pre></td></tr></table></figure><p>主要是将java层的数据转换成native层的数据，最后调用<code>CreateSingleDexFileCookie()</code>方法。</p><h3 id="2-5-2-createCookieWithArray"><a href="#2-5-2-createCookieWithArray" class="headerlink" title="2.5.2 createCookieWithArray()"></a>2.5.2 createCookieWithArray()</h3><p><code>createCookieWithArray()</code>对应<code>DexFile_createCookieWithArray()</code>方法，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//路径：/art/runtime/native/dalvik_system_DexFile.cc</span><br><span class="hljs-function"><span class="hljs-type">static</span> jobject <span class="hljs-title">DexFile_createCookieWithArray</span><span class="hljs-params">(JNIEnv* env,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             jclass,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             jbyteArray buffer,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             jint start,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             jint end)</span> </span>&#123;<br>    <span class="hljs-comment">//分配内存</span><br>    <span class="hljs-function">std::unique_ptr&lt;MemMap&gt; <span class="hljs-title">dex_mem_map</span><span class="hljs-params">(AllocateDexMemoryMap(env, start, end))</span></span>;<br>    <span class="hljs-keyword">if</span> (dex_mem_map == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-built_in">DCHECK</span>(Thread::<span class="hljs-built_in">Current</span>()-&gt;<span class="hljs-built_in">IsExceptionPending</span>());<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><span class="hljs-comment">//获取dex_mem_map的首地址</span><br>    <span class="hljs-keyword">auto</span> destination = <span class="hljs-built_in">reinterpret_cast</span>&lt;jbyte*&gt;(dex_mem_map.<span class="hljs-built_in">get</span>()-&gt;<span class="hljs-built_in">Begin</span>());<br>    <span class="hljs-comment">//复制到destination指向的内存</span><br>    env-&gt;<span class="hljs-built_in">GetByteArrayRegion</span>(buffer, start, end - start, destination);<br>    <span class="hljs-comment">//调用CreateSingleDexFileCookie创建Cookie</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">CreateSingleDexFileCookie</span>(env, std::<span class="hljs-built_in">move</span>(dex_mem_map));<br>&#125;<br></code></pre></td></tr></table></figure><p>同样最终也是调用<code>CreateSingleDexFileCookie()</code>方法。</p><h2 id="2-6-CreateSingleDexFileCookie"><a href="#2-6-CreateSingleDexFileCookie" class="headerlink" title="2.6 CreateSingleDexFileCookie()"></a>2.6 CreateSingleDexFileCookie()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//路径：/art/runtime/native/dalvik_system_DexFile.cc</span><br><span class="hljs-function"><span class="hljs-type">static</span> jobject <span class="hljs-title">CreateSingleDexFileCookie</span><span class="hljs-params">(JNIEnv* env, std::unique_ptr&lt;MemMap&gt; data)</span> </span>&#123;<br>    <span class="hljs-comment">//调用CreateDexFile()创建DexFile对象</span><br>    <span class="hljs-function">std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt; <span class="hljs-title">dex_file</span><span class="hljs-params">(CreateDexFile(env, std::move(data)))</span></span>;<br>    <span class="hljs-keyword">if</span> (dex_file.<span class="hljs-built_in">get</span>() == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-built_in">DCHECK</span>(env-&gt;<span class="hljs-built_in">ExceptionCheck</span>());<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    <span class="hljs-comment">//DexFile数组</span><br>    std::vector&lt;std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt;&gt; dex_files;<br>    <span class="hljs-comment">//将刚刚创建的dex_file放入数组中</span><br>    dex_files.<span class="hljs-built_in">push_back</span>(std::<span class="hljs-built_in">move</span>(dex_file));<br>    <span class="hljs-comment">//调用ConvertDexFilesToJavaArray()方法转成可供Java层使用的数据</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">ConvertDexFilesToJavaArray</span>(env, <span class="hljs-literal">nullptr</span>, dex_files);<br>&#125;<br></code></pre></td></tr></table></figure><p>主要是调用<code>CreateDexFile()</code>方法为内存dex创建DexFile对象，然后移入DexFile数组中，最后调用<code>ConvertDexFilesToJavaArray()</code>方法将DexFile数组转成Java数组。这里我们主要关注<code>CreateDexFile()</code>方法。</p><h2 id="2-7-CreateDexFile"><a href="#2-7-CreateDexFile" class="headerlink" title="2.7 CreateDexFile()"></a>2.7 CreateDexFile()</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//路径：/art/runtime/native/dalvik_system_DexFile.cc</span><br><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">const</span> DexFile* <span class="hljs-title">CreateDexFile</span><span class="hljs-params">(JNIEnv* env, std::unique_ptr&lt;MemMap&gt; dex_mem_map)</span> </span>&#123;<br>    <span class="hljs-comment">//StringPrintf格式化字符串</span><br>    std::string location = <span class="hljs-built_in">StringPrintf</span>(<span class="hljs-string">&quot;Anonymous-DexFile@%p-%p&quot;</span>,<br>                                        dex_mem_map-&gt;<span class="hljs-built_in">Begin</span>(),<br>                                        dex_mem_map-&gt;<span class="hljs-built_in">End</span>());<br>    std::string error_message;<br>    <span class="hljs-comment">//调用DexFile::Open()创建DexFile对象</span><br>    <span class="hljs-function">std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt; <span class="hljs-title">dex_file</span><span class="hljs-params">(DexFile::Open(location,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                          <span class="hljs-number">0</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                          std::move(dex_mem_map),</span></span><br><span class="hljs-params"><span class="hljs-function">                                                          <span class="hljs-comment">/* verify */</span> <span class="hljs-literal">true</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                          <span class="hljs-comment">/* verify_location */</span> <span class="hljs-literal">true</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                          &amp;error_message))</span></span>;<br>    <span class="hljs-keyword">if</span> (dex_file == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-function">ScopedObjectAccess <span class="hljs-title">soa</span><span class="hljs-params">(env)</span></span>;<br>        <span class="hljs-built_in">ThrowWrappedIOException</span>(<span class="hljs-string">&quot;%s&quot;</span>, error_message.<span class="hljs-built_in">c_str</span>());<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (!dex_file-&gt;<span class="hljs-built_in">DisableWrite</span>()) &#123;<br>        <span class="hljs-function">ScopedObjectAccess <span class="hljs-title">soa</span><span class="hljs-params">(env)</span></span>;<br>        <span class="hljs-built_in">ThrowWrappedIOException</span>(<span class="hljs-string">&quot;Failed to make dex file read-only&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><span class="hljs-comment">//调用release()释放dex_file所拥有的内存</span><br>    <span class="hljs-keyword">return</span> dex_file.<span class="hljs-built_in">release</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>主要是调用<code>DexFile::Open()</code>方法，之后的流程就跟DexClassLoader和PathClassLoader一样了，可以详见<a href="https://gal2xy.github.io/2023/11/20/dex%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B(%E4%B8%89)/">dex文件加载流程(三)</a>，本文就不再详细分析了。</p><h2 id="2-8-DexFile-Open"><a href="#2-8-DexFile-Open" class="headerlink" title="2.8 DexFile::Open()"></a>2.8 DexFile::Open()</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//路径：/art/runtime/dex_file.cc</span><br><span class="hljs-function">std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt; <span class="hljs-title">DexFile::Open</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; location,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             <span class="hljs-type">uint32_t</span> location_checksum,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             std::unique_ptr&lt;MemMap&gt; map,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             <span class="hljs-type">bool</span> verify,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             <span class="hljs-type">bool</span> verify_checksum,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             std::string* error_msg)</span> </span>&#123;<br>    <span class="hljs-function">ScopedTrace <span class="hljs-title">trace</span><span class="hljs-params">(std::string(<span class="hljs-string">&quot;Open dex file from mapped-memory &quot;</span>) + location)</span></span>;<br>    <span class="hljs-built_in">CHECK</span>(map.<span class="hljs-built_in">get</span>() != <span class="hljs-literal">nullptr</span>);<br><span class="hljs-comment">//内存dex的长度不能小于它的dex文件头长度</span><br>    <span class="hljs-keyword">if</span> (map-&gt;<span class="hljs-built_in">Size</span>() &lt; <span class="hljs-built_in">sizeof</span>(DexFile::Header)) &#123;<br>        *error_msg = <span class="hljs-built_in">StringPrintf</span>(<br>            <span class="hljs-string">&quot;DexFile: failed to open dex file &#x27;%s&#x27; that is too short to have a header&quot;</span>,<br>            location.<span class="hljs-built_in">c_str</span>());<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><span class="hljs-comment">//调用OpenCommon()创建DexFile</span><br>    std::unique_ptr&lt;DexFile&gt; dex_file = <span class="hljs-built_in">OpenCommon</span>(map-&gt;<span class="hljs-built_in">Begin</span>(),<br>                                                   map-&gt;<span class="hljs-built_in">Size</span>(),<br>                                                   location,<br>                                                   location_checksum,<br>                                                   kNoOatDexFile,<br>                                                   verify,<br>                                                   verify_checksum,<br>                                                   error_msg);<br>    <span class="hljs-keyword">if</span> (dex_file != <span class="hljs-literal">nullptr</span>) &#123;<br>        dex_file-&gt;mem_map_.<span class="hljs-built_in">reset</span>(map.<span class="hljs-built_in">release</span>());<br>    &#125;<br>    <span class="hljs-keyword">return</span> dex_file;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要是调用<code>OpenCommon()</code>方法。</p><h2 id="2-9-OpenCommon"><a href="#2-9-OpenCommon" class="headerlink" title="2.9 OpenCommon()"></a>2.9 OpenCommon()</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//路径：/art/runtime/dex_file.cc</span><br><span class="hljs-function">std::unique_ptr&lt;DexFile&gt; <span class="hljs-title">DexFile::OpenCommon</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span>* base,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             <span class="hljs-type">size_t</span> size,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             <span class="hljs-type">const</span> std::string&amp; location,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             <span class="hljs-type">uint32_t</span> location_checksum,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             <span class="hljs-type">const</span> OatDexFile* oat_dex_file,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             <span class="hljs-type">bool</span> verify,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             <span class="hljs-type">bool</span> verify_checksum,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             std::string* error_msg,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             VerifyResult* verify_result)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (verify_result != <span class="hljs-literal">nullptr</span>) &#123;<br>        *verify_result = VerifyResult::kVerifyNotAttempted;<br>    &#125;<br>    <span class="hljs-comment">//调用DexFile的构造方法真正为内存dex创建DexFile实例，里面会解析dex</span><br>    <span class="hljs-function">std::unique_ptr&lt;DexFile&gt; <span class="hljs-title">dex_file</span><span class="hljs-params">(<span class="hljs-keyword">new</span> DexFile(base,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                  size,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                  location,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                  location_checksum,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                  oat_dex_file))</span></span>;<br>    <span class="hljs-keyword">if</span> (dex_file == <span class="hljs-literal">nullptr</span>) &#123;<br>        *error_msg = <span class="hljs-built_in">StringPrintf</span>(<span class="hljs-string">&quot;Failed to open dex file &#x27;%s&#x27; from memory: %s&quot;</span>, location.<span class="hljs-built_in">c_str</span>(),<br>                                  error_msg-&gt;<span class="hljs-built_in">c_str</span>());<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    <span class="hljs-comment">//检查magic</span><br>    <span class="hljs-keyword">if</span> (!dex_file-&gt;<span class="hljs-built_in">Init</span>(error_msg)) &#123;<br>        dex_file.<span class="hljs-built_in">reset</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    <span class="hljs-comment">//检查dex文件的结构</span><br>    <span class="hljs-keyword">if</span> (verify &amp;&amp; !DexFileVerifier::<span class="hljs-built_in">Verify</span>(dex_file.<span class="hljs-built_in">get</span>(),<br>                                           dex_file-&gt;<span class="hljs-built_in">Begin</span>(),<br>                                           dex_file-&gt;<span class="hljs-built_in">Size</span>(),<br>                                           location.<span class="hljs-built_in">c_str</span>(),<br>                                           verify_checksum,<br>                                           error_msg)) &#123;<br>        <span class="hljs-keyword">if</span> (verify_result != <span class="hljs-literal">nullptr</span>) &#123;<br>            *verify_result = VerifyResult::kVerifyFailed;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (verify_result != <span class="hljs-literal">nullptr</span>) &#123;<br>        *verify_result = VerifyResult::kVerifySucceeded;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dex_file;<br>&#125;<br></code></pre></td></tr></table></figure><p>从这里可以看出，不管是DexClassLoader、PathClassLoader，还是InMemoryDexClassLoader，尽管它们的流程可能会不太一样，但最终都会调用<code>OpenCommon()</code>方法创建dexfile，而且该方法的参数含有dex的起始地址（base）和大小（size），因此这里可以作为一个非常好的脱壳点。</p><hr><p>参考：</p><p><a href="http://aospxref.com/android-8.0.0_r36">http://aospxref.com/android-8.0.0_r36</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android源码解析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>对Java反射方法进行封装</title>
    <link href="/2023/12/04/%E5%AF%B9Java%E5%8F%8D%E5%B0%84%E6%96%B9%E6%B3%95%E8%BF%9B%E8%A1%8C%E5%B0%81%E8%A3%85/"/>
    <url>/2023/12/04/%E5%AF%B9Java%E5%8F%8D%E5%B0%84%E6%96%B9%E6%B3%95%E8%BF%9B%E8%A1%8C%E5%B0%81%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<p>在这之前，我们需要分析一下封装Java反射方法是为了干什么。</p><p>显然在<a href="https://gal2xy.github.io/2023/12/01/Android%E7%AC%AC%E4%B8%80%E4%BB%A3%E5%8A%A0%E5%9B%BA%E5%A3%B3%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/">Android第一代加固壳的原理及实现</a>一文中，我们重复地使用到了Java反射来获取类、字段、方法，无一例外，获取它们的最终目的是获取字段值、修改字段值、调用方法。为了实现这些目的，我们写了很臃肿的代码，因为太多重复的反射获取，所以我们可以将这些代码封装起来，形成一个自定义类，这样一来，加固的代码就可以变得轻巧了，且这个封装类以后还可以被重复利用。</p><p>分析完了封装目的之后，我们也得到了三个目的：</p><ol><li>获取字段值</li><li>设置字段值</li><li>调用方法（构造方法和非构造方法，我这里统称为方法）</li></ol><p>因此，我们只需要针对以上目的，分别实现它们就行了。</p><p>实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.lang.reflect.Constructor;<br><span class="hljs-keyword">import</span> java.lang.reflect.Field;<br><span class="hljs-keyword">import</span> java.lang.reflect.InvocationTargetException;<br><span class="hljs-keyword">import</span> java.lang.reflect.Method;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RefInvoke</span>&#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反射获取指定字段的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> className: 实例对应的类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> field: 所要获取实例中的字段</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> instanceObj: 实例对象，获取静态变量时设置为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">getFieldObject</span><span class="hljs-params">(String className, String field, Object instanceObj)</span>&#123;<br><br>        <span class="hljs-keyword">try</span>&#123;<br>            Class&lt;?&gt; aClass = Class.forName(className);<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(field);<br>            declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> declaredField.get(instanceObj);<br>            <span class="hljs-keyword">return</span> obj;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反射设置指定字段的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> className: 实例对应的类</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> field: 所要设置实例中的字段</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> instanceObj: 实例对象，设置静态变量时设置为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> fieldValue: 字段所要设置成的值</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setFieldObject</span><span class="hljs-params">(String className, String field, Object instanceObj ,Object fieldValue)</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            Class&lt;?&gt; aClass = Class.forName(className);<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">declaredField</span> <span class="hljs-operator">=</span> aClass.getDeclaredField(field);<br>            declaredField.setAccessible(<span class="hljs-literal">true</span>);<br>            declaredField.set(instanceObj, fieldValue);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反射调用指定方法</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> className: 想要调用的方法所在的类名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> methodName: 所要调用方法的方法名</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paramTypes: 所要调用方法的参数类型数组，外部可通过匿名数组传入new Class[]&#123;paramTypes that the method need&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> instanceObj: 类的实例对象，调用静态静态方法时设置为null</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paramValues: 调用方法时所要传入的具体参数值，外部可通过匿名数组传入new Obj[]&#123;paramValues that the method need&#125;</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">invokeMethod</span><span class="hljs-params">(String className, String methodName, Class[] paramTypes, Object instanceObj , Object[] paramValues)</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            Class&lt;?&gt; aClass = Class.forName(className);<br>            <span class="hljs-type">Method</span> <span class="hljs-variable">declaredMethod</span> <span class="hljs-operator">=</span> aClass.getDeclaredMethod(methodName, paramTypes);<br>            declaredMethod.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> declaredMethod.invoke(instanceObj, paramValues);<br>            <span class="hljs-keyword">return</span> obj;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 反射调用指定构造方法来创建对象</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> className:</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paramTypes:</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> paramValues:</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span></span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">creatObject</span><span class="hljs-params">(String className, Class[] paramTypes,Object[] paramValues)</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Class&lt;?&gt; aClass = Class.forName(className);<br>            Constructor&lt;?&gt; declaredConstructor = aClass.getDeclaredConstructor(paramTypes);<br>            declaredConstructor.setAccessible(<span class="hljs-literal">true</span>);<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> declaredConstructor.newInstance(paramValues);<br>            <span class="hljs-keyword">return</span> obj;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125; <span class="hljs-keyword">catch</span> (InstantiationException e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><hr><p>写完这个之后，我也明白了之前写加固代码时的一个问题：为在获取<code>ActivityThread</code>实例时（<code>get()</code>、<code>invoke()</code>），参数对象设置为null了。</p><p>因为静态方法、静态字段，这些可以通过类名点出来，不需要类的实例也能操作它们。（Java学艺不精😭）</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java反射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于一代壳的一些理解</title>
    <link href="/2023/12/02/%E5%85%B3%E4%BA%8E%E4%B8%80%E4%BB%A3%E5%A3%B3%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/"/>
    <url>/2023/12/02/%E5%85%B3%E4%BA%8E%E4%B8%80%E4%BB%A3%E5%A3%B3%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<p>想解释一下一代壳的脱壳代码为什么这么写，以及一些代码中的细节，<strong>解释全在代码注释中！！！</strong></p><p>思维有点乱，可能有错误的地方，烦请告知，谢谢！</p><hr><p>话不多说，直接看<code>handleBindApplication()</code>，想要详细跟踪Application的创建请阅读<a href="https://gal2xy.github.io/2023/11/27/Android%E4%B8%ADApplication%E7%9A%84%E5%88%9B%E5%BB%BA%E6%B5%81%E7%A8%8B/">Android中Application的创建流程</a>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/ActivityThread.java</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleBindApplication</span><span class="hljs-params">(AppBindData data)</span> &#123;<br>    ...<br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">    这就是为什么在加壳时，在attachBaseContext()方法中替换classLoader时，可以借助mBoundApplication获取loadedApk实例，</span><br><span class="hljs-comment">    这是因为mBoundApplication.info就包含创建好的loadedApk实例，</span><br><span class="hljs-comment">    且在运行makeApplication()方法前就赋值好了（进一步说，是调用Application的attachBaseContext()之前），</span><br><span class="hljs-comment">    就不会存在为空的情况，而mInitialApplication例外。</span><br><span class="hljs-comment">    */</span><br>    mBoundApplication = data;<br>    ...<br>    <span class="hljs-comment">/* 创建并获取壳程序的LoadedApk对象 */</span><br>    data.info = getPackageInfoNoCheck(data.appInfo, data.compatInfo);<br>...<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ContextImpl</span> <span class="hljs-variable">appContext</span> <span class="hljs-operator">=</span> ContextImpl.createAppContext(<span class="hljs-built_in">this</span>, data.info);<br>    ...<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        此处data.info指LoadedApk</span><br><span class="hljs-comment">        makeApplication()里面会调用attachBaseContext()方法</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-type">Application</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> data.info.makeApplication(data.restrictedBackupMode, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        这里将壳Application实例赋值到ActivityThread实例的mInitialApplication字段</span><br><span class="hljs-comment">        这也是为什么不在attachBaseContext()方法替换Application实例，</span><br><span class="hljs-comment">        因为就算你替换了，后面壳程序执行完上面的makeApplication()方法后（包括attachBaseContext()方法），</span><br><span class="hljs-comment">        返回到当前方法，然后将壳Application实例赋值给mInitialApplication字段</span><br><span class="hljs-comment">        这样就直接替换了我们的源Application实例</span><br><span class="hljs-comment">        （我尝试了一下这么做，程序正常执行了,是源程序太简单的缘故?）</span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">        由于ActivityThread实例的mInitialApplication字段不是在makeApplication()中赋值的</span><br><span class="hljs-comment">    所以我们需要手动给mInitialApplication字段字段赋值源程序Application。</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    另外请注意，在加壳时，在attachBaseContext()方法中不要通过mInitialApplication获取loadedApk实例，因为此时</span><br><span class="hljs-comment">    代码逻辑还在上面的makeApplication()中，下面的mInitialApplication = app;是没有被执行的，这样一来，</span><br><span class="hljs-comment">    我们获取的mInitialApplication是空的！而应该通过mBoundApplication获取！</span><br><span class="hljs-comment">        */</span><br>        mInitialApplication = app;<br>        ...<br>        <span class="hljs-keyword">try</span> &#123;<br>            mInstrumentation.onCreate(data.instrumentationArgs);<br>        &#125;<br>        ...<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">/*</span><br><span class="hljs-comment">            callApplicationOnCreate()方法里面会调用Application的onCreate()方法</span><br><span class="hljs-comment">            而makeApplication()方法里面会调用Application的attachBaseContext()方法</span><br><span class="hljs-comment">            根据流程可以知道：Application的attachBaseContext()方法执行时间早于onCreate()方法</span><br><span class="hljs-comment">            </span><br><span class="hljs-comment">            因为这里是必走的，所以我们在调用makeApplication()方法创建源程序Application实例时，</span><br><span class="hljs-comment">            设置第二个参数为null，这样在makeApplication()方法就不会调用callApplicationOnCreate()</span><br><span class="hljs-comment">            否则里面调用了，外面再调用就会抛异常</span><br><span class="hljs-comment">            当然也可以简单理解，毕竟源码中调用makeApplication()都设置第二个参数为null，照抄肯定不会错。</span><br><span class="hljs-comment">            */</span><br>            mInstrumentation.callApplicationOnCreate(app);<br>        &#125; <br>        ...<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来看<code>makeApplication()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/LoadedApk.java</span><br><span class="hljs-keyword">public</span> Application <span class="hljs-title function_">makeApplication</span><span class="hljs-params">(<span class="hljs-type">boolean</span> forceDefaultAppClass,</span><br><span class="hljs-params">                                   Instrumentation instrumentation)</span> &#123;<br>    <span class="hljs-comment">//这就是为什么要先置mApplication为null，否者调用了也不会创建源APK的Application</span><br>    <span class="hljs-keyword">if</span> (mApplication != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> mApplication;<br>    &#125;<br><br>    <span class="hljs-type">Application</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">创建Application的实例需要类名才能反射</span><br><span class="hljs-comment">显然mApplicationInfo指的是壳程序的Application类名，</span><br><span class="hljs-comment">所以我们需要手动修改LoadedApk实例中的mApplicationInfo.className的值为源程序Application类名 </span><br><span class="hljs-comment">*/</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">appClass</span> <span class="hljs-operator">=</span> mApplicationInfo.className;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        这也是为什么需要先替换ClassLoader再替换Application</span><br><span class="hljs-comment">        因为创建Application需要ClassLoader，ClassLoaer不对那肯定创建失败</span><br><span class="hljs-comment">        */</span><br>        java.lang.<span class="hljs-type">ClassLoader</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> getClassLoader();<br>        ...<br>        <span class="hljs-type">ContextImpl</span> <span class="hljs-variable">appContext</span> <span class="hljs-operator">=</span> ContextImpl.createAppContext(mActivityThread, <span class="hljs-built_in">this</span>);<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        里面会调用attachBaseContext()方法</span><br><span class="hljs-comment">        */</span><br>        app = mActivityThread.mInstrumentation.newApplication(cl, appClass, appContext);<br>        appContext.setOuterContext(app);<br>    &#125; <br>    ...<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    添加到ActivityThread实例的mAllApplications数组中</span><br><span class="hljs-comment">    所以需要将壳程序的Application从mAllApplications数组中删除</span><br><span class="hljs-comment">    */</span><br>    mActivityThread.mAllApplications.add(app);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    这里是赋值给LoadedApk实例的mApplication字段，所以我们不需要手</span><br><span class="hljs-comment">    动修改LoadedApk实例的mApplication字段的值。</span><br><span class="hljs-comment">    */</span><br>    mApplication = app;<br><br>    <span class="hljs-comment">/*传入的第二个参数instrumentation为null，不走这里*/</span><br>    <span class="hljs-keyword">if</span> (instrumentation != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            instrumentation.callApplicationOnCreate(app);<br>        &#125;<br>        ...<br>    &#125;<br>    ...<br>    <span class="hljs-keyword">return</span> app;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来看<code>getPackageInfoNoCheck()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/ActivityThread.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> LoadedApk <span class="hljs-title function_">getPackageInfoNoCheck</span><span class="hljs-params">(ApplicationInfo ai, CompatibilityInfo compatInfo)</span> &#123;<br>    <span class="hljs-keyword">return</span> getPackageInfo(ai, compatInfo, <span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br>&#125;<br><br><span class="hljs-keyword">private</span> LoadedApk <span class="hljs-title function_">getPackageInfo</span><span class="hljs-params">(ApplicationInfo aInfo, CompatibilityInfo compatInfo,</span><br><span class="hljs-params">                                 ClassLoader baseLoader, <span class="hljs-type">boolean</span> securityViolation, <span class="hljs-type">boolean</span> includeCode,</span><br><span class="hljs-params">                                 <span class="hljs-type">boolean</span> registerPackage)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">differentUser</span> <span class="hljs-operator">=</span> (UserHandle.myUserId() != UserHandle.getUserId(aInfo.uid));<br>    <span class="hljs-keyword">synchronized</span> (mResourcesManager) &#123;<br>        WeakReference&lt;LoadedApk&gt; ref;<br>        <span class="hljs-comment">// 根据不同的情况获取缓存的LoadedApk对象</span><br>        ...<br><br>        <span class="hljs-type">LoadedApk</span> <span class="hljs-variable">packageInfo</span> <span class="hljs-operator">=</span> ref != <span class="hljs-literal">null</span> ? ref.get() : <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (packageInfo == <span class="hljs-literal">null</span> || (packageInfo.mResources != <span class="hljs-literal">null</span> &amp;&amp; !packageInfo.mResources.getAssets().isUpToDate())) &#123;<br>            ...<br>            <span class="hljs-comment">//创建LoadedApk对象</span><br>            packageInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoadedApk</span>(<span class="hljs-built_in">this</span>, aInfo, compatInfo, baseLoader,<br>                              securityViolation, includeCode &amp;&amp;<br>                              (aInfo.flags&amp;ApplicationInfo.FLAG_HAS_CODE) != <span class="hljs-number">0</span>, registerPackage);<br><br>            <span class="hljs-keyword">if</span> (mSystemThread &amp;&amp; <span class="hljs-string">&quot;android&quot;</span>.equals(aInfo.packageName)) &#123;<br>                packageInfo.installSystemApplicationInfo(aInfo,<br>                                                         getSystemContext().mPackageInfo.getClassLoader());<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (differentUser) &#123;<br>                <span class="hljs-comment">// Caching not supported across users</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (includeCode) &#123;<br>                <span class="hljs-comment">/*更新mPackages，即将刚创建的packageInfo加入</span><br><span class="hljs-comment">                  这就是为什么可以通过ActivityThread实例中的mPackages字段获取loadedApk实例，</span><br><span class="hljs-comment">                  因为在运行makeApplication()之前（进一步说，是调用Application的attachBaseContext()之前），</span><br><span class="hljs-comment">                  就已经将创建好的loadedApk实例加入到mPackages中了。</span><br><span class="hljs-comment">                */</span><br>                mPackages.put(aInfo.packageName,<br>                              <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakReference</span>&lt;LoadedApk&gt;(packageInfo));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                mResourcePackages.put(aInfo.packageName,<br>                                      <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakReference</span>&lt;LoadedApk&gt;(packageInfo));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> packageInfo;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android加固</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android第一代加固壳的原理及实现 —— 落地加载</title>
    <link href="/2023/12/01/Android%E7%AC%AC%E4%B8%80%E4%BB%A3%E5%8A%A0%E5%9B%BA%E5%A3%B3%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/"/>
    <url>/2023/12/01/Android%E7%AC%AC%E4%B8%80%E4%BB%A3%E5%8A%A0%E5%9B%BA%E5%A3%B3%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>学习加壳之前，建议先把前置知识学习再说。我们需要先学习dex文件结构、java反射、Android中的ClassLoader、Application以及它的加载流程、App启动流程。</p><p>不然我真不建议直接莽它，不懂原理只能学到皮毛！</p><h1 id="二、第一代加固壳原理"><a href="#二、第一代加固壳原理" class="headerlink" title="二、第一代加固壳原理"></a>二、第一代加固壳原理</h1><p>第一代加固壳原理如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312012216295.png"></p><p>在图中涉及到三个程序：</p><ol><li>待加壳程序的APK（源程序APK）</li><li>（脱）壳程序APK（负责解密源程序APK并加载运行它）</li><li>加壳程序（将源程序APK进行加密并与壳程序的dex合并成新的dex）。</li></ol><p>主要步骤如下：</p><p>首先利用加密算法对源程序APK进行加密，然后与脱壳程序APK合并得到新的dex文件，最后替换脱壳程序中的dex文件即可。之后运行合并后的程序时，会通过壳程序对源程序进行解密和运行时加载，这样一来，源程序就能正常运行。合并示意图如下：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312012216659.png"></p><p>学过dex文件结构后，我们可以知道：对于合并后的dex文件，需要修改其dex_header中的三个字段：</p><ol><li>checksum：dex文件（除 <code>magic</code>、<code>checksum</code>）的校验和（使用adler32算法），通过它来判断dex文件是否被损坏或篡改。</li><li>signature：dex文件（除 <code>magic</code>、<code>checksum</code> 和<code>signature</code>之外的所有内容）的 SHA-1 签名（哈希），用于对文件进行唯一标识。</li><li>file_size：整个dex文件的大小。</li></ol><p>接下来我们就通过案例来深入学习一下。</p><h1 id="三、案例"><a href="#三、案例" class="headerlink" title="三、案例"></a>三、案例</h1><h2 id="3-1-源程序APK"><a href="#3-1-源程序APK" class="headerlink" title="3.1 源程序APK"></a>3.1 源程序APK</h2><p>随便来一个简单的apk。<code>activity_main.xml</code>文件中简简单单填一个textview控件展示文字即可。MainActivity代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Activity</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;demo&quot;</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        Log.d(TAG, <span class="hljs-string">&quot;SourceMainActivity onCreate: &quot;</span> + getApplicationContext());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>另外需要一个Application类（不需要在源程序的<code>ActivityManifest.xml</code>文件中注册）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyApplication</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;demo&quot;</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate();<br>        Log.d(TAG, <span class="hljs-string">&quot;SourceApk onCreate: &quot;</span> + <span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>问题来了，为什么需要自定义Application类呢？</p><p>其实Application即使不创建，系统也会帮我们创建的。但是创建自定义Application类是为了方便反射获取Application类，进而创建源程序的Application实例来替换原有的壳程序的Application实例。</p><h2 id="3-2-加壳程序"><a href="#3-2-加壳程序" class="headerlink" title="3.2 加壳程序"></a>3.2 加壳程序</h2><p>根据加壳流程，很容易实现这部分，主要功能是加密源程序APK、合并成新的dex文件、修正三个字段。这里我觉得用python来实现更简便点。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> zlib <span class="hljs-keyword">import</span> adler32<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha1<br><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> unhexlify<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fixCheckSum</span>(<span class="hljs-params">dexBytesArray</span>):<br>    <span class="hljs-comment"># dexfile[8:12]</span><br>    <span class="hljs-comment"># 小端存储</span><br>    value = adler32(<span class="hljs-built_in">bytes</span>(dexBytesArray[<span class="hljs-number">12</span>:]))<br>    valueArray = <span class="hljs-built_in">bytearray</span>(value.to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;little&#x27;</span>))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(valueArray)):<br>        dexBytesArray[<span class="hljs-number">8</span> + i] = valueArray[i]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fixSignature</span>(<span class="hljs-params">dexBytesArray</span>):<br>    <span class="hljs-comment"># dexfile[12:32]</span><br>    sha_1 = sha1()<br>    sha_1.update(<span class="hljs-built_in">bytes</span>(dexBytesArray[<span class="hljs-number">32</span>:]))<br>    value = sha_1.hexdigest()<br>    valueArray = <span class="hljs-built_in">bytearray</span>(unhexlify(value))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(valueArray)):<br>        dexBytesArray[<span class="hljs-number">12</span> + i] = valueArray[i]<br><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fixFileSize</span>(<span class="hljs-params">dexBytesArray, fileSize</span>):<br>    <span class="hljs-comment"># dexfile[32:36]</span><br>    <span class="hljs-comment"># 小端存储</span><br>    fileSizeArray = <span class="hljs-built_in">bytearray</span>(fileSize.to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;little&quot;</span>))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(fileSizeArray)):<br>        dexBytesArray[<span class="hljs-number">32</span> + i] = fileSizeArray[i]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypto</span>(<span class="hljs-params">file</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(file)):<br>        file[i] ^= <span class="hljs-number">0xff</span><br><br>    <span class="hljs-keyword">return</span> file<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">start</span>():<br>    <span class="hljs-comment"># 读取源程序apk, 转成byte数组，方便后续修改</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;SourceApk.apk&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        SourceApkArray = <span class="hljs-built_in">bytearray</span>(f.read())<br>    <span class="hljs-comment"># 读取壳程序dex</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;shellApk.dex&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        shellDexArray = <span class="hljs-built_in">bytearray</span>(f.read())<br><br>    SourceApkLen = <span class="hljs-built_in">len</span>(SourceApkArray)<br>    shellDexLen = <span class="hljs-built_in">len</span>(shellDexArray)<br>    <span class="hljs-comment"># 新的dex文件长度</span><br>    newDexLen = shellDexLen + SourceApkLen + <span class="hljs-number">4</span><br>    <span class="hljs-comment"># 加密源文件</span><br>    enApkArray = encrypto(SourceApkArray)<br>    <span class="hljs-comment"># 新的dex文件内容 = 壳dex + 加密的源apk + 四字节标识加密后源apk大小长度</span><br>    newDexArray = shellDexArray + enApkArray + <span class="hljs-built_in">bytearray</span>(SourceApkLen.to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;little&#x27;</span>))<br><br>    <span class="hljs-comment"># 首先修改filesize</span><br>    fixFileSize(newDexArray, newDexLen)<br>    <span class="hljs-comment"># 其次修改signature</span><br>    fixSignature(newDexArray)<br>    <span class="hljs-comment"># 最后修改checksum</span><br>    fixCheckSum(newDexArray)<br><br>    <span class="hljs-comment"># 导出文件</span><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;classes.dex&#x27;</span>, <span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        f.write(<span class="hljs-built_in">bytes</span>(newDexArray))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    start()<br></code></pre></td></tr></table></figure><h2 id="3-3-脱壳程序"><a href="#3-3-脱壳程序" class="headerlink" title="3.3 脱壳程序"></a>3.3 脱壳程序</h2><h3 id="3-3-1-先分析一波"><a href="#3-3-1-先分析一波" class="headerlink" title="3.3.1 先分析一波"></a>3.3.1 先分析一波</h3><p>这部分理解起来很难也是整个项目最关键的部分！</p><p>这部分主要是在壳Application类中做如下事情：</p><ol><li>创建源程序的DexClassLoader实例替换LoadedApk中的mClassLoader。</li><li>创建源程序的Application实例替换壳程序的Application实例。</li></ol><p>接下来就解释一下为什么这么做。</p><ol><li><p>为什么要替换LoadedApk中的mClassLoader？</p><p>因为我们的源程序肯定是要依靠ClassLoader动态加载的，而ClassLoader存放了应用所需的类库，如下所示：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gradle">dalvik.system.DexClassLoader[<br>DexPathList[<br>[zip <span class="hljs-keyword">file</span> <span class="hljs-string">&quot;/data/user/0/com.example.shellapk/app_payload_dex/Source.apk&quot;</span>],<br>nativeLibraryDirectories<br>= [<span class="hljs-regexp">/data/u</span>ser<span class="hljs-regexp">/0/</span>com.example.shellapk<span class="hljs-regexp">/app_payload_lib, /</span>system<span class="hljs-regexp">/lib64, /</span>product/lib64]<br>]<br>]<br></code></pre></td></tr></table></figure><p>当需要加载某些类时，就会开始双亲委托模式寻找，而父类加载器以及祖先加载器里面肯定是没有源程序所需要的类的，因而也不可能加载成功，所以我们就需要创建一个新的DexClassLoader来替换壳程序的ClassLoader，由于里面包含源程序的类，这样一来，就可以成功加载源程序。</p></li><li><p>怎么替换LoadedApk中的mClassLoader？</p><p>至于怎么替换，就有好几种方法了，例如：</p><ul><li><p>替换类加载器</p><p>替换壳程序的ClassLoader为源程序的DexClassLoader，同时设置源程序的DexClassLoader的父加载器为壳程序的ClassLoader的父加载器。</p></li><li><p>插入类加载器</p><p>打破原有的双亲关系，在壳程序的ClassLoader和其父加载器之间插入源程序的DexClassLoader。</p></li><li><p>合并dexElements</p><p>将壳程序的ClassLoader中的dexElements与源程序的DexClassLoader中的dexElements合并，仍使用壳程序的ClassLoader。</p></li></ul><p>详细可参考<a href="https://blog.svip.dev/posts/%E5%8A%A0%E5%A3%B3app%E7%9A%84%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%8F%8Aclassloader%E4%BF%AE%E6%AD%A3">加壳App的运行流程及ClassLoader修正 | Security (svip.dev)</a></p></li><li><p>为什么要替换Application？</p><p>因为Application做为整个应用的上下文，它的生命周期就是整个应用程序的生命周期，它还会与Activity、Service等组件有交互关系。对于壳程序和源程序，它们对应的Application实例不一定相同，为了维护应用的正常生命周期，所以需要进行替换。</p><p>你可以认为Application就代表着整个APP，Application都不同，那运行的App能是一样的吗？</p></li><li><p>怎么替换Application？</p><p>多琢磨代码你才能明白。我这里就简要说明一下：</p><p>我们需要将壳程序的Application（也就是mApplication）从ActivityThread实例中的mAllApplications中删除。之后设置LoadedApk实例中的mApplication字段为null，这样才能调用LoadedApk类的<code>makeApplication()</code>方法创建源程序的Application实例（也是反射，需要获取到源Application类名，我们可以通过在壳程序的<code>ActivityManifest.xml</code>中使用<code>&lt;meta-data&gt;</code>标签填写并在代码中获取）。当然ContentProvider也会有Application实例，也是需要替换的。最后运行源程序的Application实例的<code>onCreate()</code>方法，这样源程序才开始它的运行生命周期。详细可参考<a href="https://github.com/13767004362/HookDemo/blob/master/document/%E6%8F%92%E4%BB%B6%E5%8C%96%E4%B9%8B%E5%8A%A8%E6%80%81%E6%9B%BF%E6%8D%A2application.md">插件化之动态替换application.md</a>。</p></li><li><p>为什么选择Application类作为脱壳代码执行的地方？</p><p>因为Application是整个应用程序的入口点，它的创建早于任何一个Activity、Service的创建（ContentProvider例外），因此壳程序必须在Android系统启动组件之前运行，完成源程序的解密和动态加载，否则会使程序出现加载类失败的异常，所以选择这里作为脱壳代码执行的地方。</p><p>其次，Application类的<code>attachBaseContext()</code>方法比<code>onCreate()</code>方法先执行（看Application创建的源码或者自定义Application类并利用log输出试一试）。</p><p><del>利用这一特性，我们就可以在<code>attachBaseContext()</code>方法中替换壳程序的ClassLoader，在<code>onCreate()</code>方法中替换Application。（为什么呢？我是解释不出来。直接全在attachBaseContext中完成不行吗？）</del></p><blockquote><p>尝试了一下，其实全在<code>attachBaseContext()</code>方法或者全在<code>onCreate()</code>方法中执行都行的！</p><p>但都在<code>attachBaseContext()</code>方法执行会有缺陷，就是ActivityThread实例中的mInitialApplication又会被壳程序的Application替换掉，可以参考<a href="https://gal2xy.github.io/2023/12/02/%E5%85%B3%E4%BA%8E%E4%B8%80%E4%BB%A3%E5%A3%B3%E7%9A%84%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/">关于一代壳的一些理解</a>的分析</p></blockquote></li></ol><p>有了上述的解释之后，我想接下来解析代码就简单一些了！</p><h3 id="3-3-2-attachBaseContext-中所需要做的工作"><a href="#3-3-2-attachBaseContext-中所需要做的工作" class="headerlink" title="3.3.2 attachBaseContext()中所需要做的工作"></a>3.3.2 attachBaseContext()中所需要做的工作</h3><p>首先要在Application类的<code>attachBaseContext()</code>方法中完成对源程序的解密和分离，并动态加载源程序apk。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attachBaseContext</span><span class="hljs-params">(Context base)</span> &#123;<br>    <span class="hljs-built_in">super</span>.attachBaseContext(base);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//在应用程序的数据存储目录下创建文件夹，具体路径为data/user/0/包名/app_payload_dex(怎么多了app_?)</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">dex</span> <span class="hljs-operator">=</span> getDir(<span class="hljs-string">&quot;payload_dex&quot;</span>, MODE_PRIVATE);<br>        <span class="hljs-type">File</span> <span class="hljs-variable">lib</span> <span class="hljs-operator">=</span> getDir(<span class="hljs-string">&quot;payload_lib&quot;</span>, MODE_PRIVATE);<br>        dexPath = dex.getAbsolutePath();<br>        libPath = lib.getAbsolutePath();<br>        Log.d(TAG, <span class="hljs-string">&quot;dexPath: &quot;</span> + dexPath);<br>        Log.d(TAG, <span class="hljs-string">&quot;libPath: &quot;</span> + libPath);<br>        apkFileName = dex.getAbsolutePath() + File.separator + <span class="hljs-string">&quot;Source.apk&quot;</span>;<br>        Log.d(TAG, <span class="hljs-string">&quot;apkFileName: &quot;</span> + apkFileName);<br>        <span class="hljs-comment">// 根据文件路径创建File对象</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">dexFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(apkFileName);<br>        <span class="hljs-keyword">if</span> (!dexFile.exists()) &#123;<br>            <span class="hljs-comment">// 根据路径创建文件，即在payload_dex目录下创建Source.apk文件</span><br>            dexFile.createNewFile();<br>            <span class="hljs-comment">//读取Classes.dex文件</span><br>            <span class="hljs-type">byte</span>[] shellDexData = readDexFromApk();<br>            <span class="hljs-comment">//从中分理处源apk文件</span><br>            splitSourceApkFromShellDex(shellDexData);<br>        &#125;<br>        <span class="hljs-comment">//配置加载源程序的动态环境,即替换mClassLoader</span><br>        replaceClassLoaderInLoadedApk();<br>    &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;attachBaseContext: &quot;</span> + Log.getStackTraceString(e));<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-2-1-readDexFromApk"><a href="#3-3-2-1-readDexFromApk" class="headerlink" title="3.3.2.1 readDexFromApk()"></a>3.3.2.1 readDexFromApk()</h4><p>主要功能是从壳APK中找到dex文件并读取出来。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] readDexFromApk() <span class="hljs-keyword">throws</span> IOException &#123;<br><br>    <span class="hljs-comment">//获取当前应用程序的源码路径(apk),一般是data/app目录下,该目录用于存放用户安装的软件</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">sourceDir</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getApplicationInfo().sourceDir;<br>    Log.d(TAG, <span class="hljs-string">&quot;this.getApplicationInfo().sourceDir: &quot;</span> + <span class="hljs-built_in">this</span>.getApplicationInfo().sourceDir);<br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(sourceDir);<br>    <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bufferedInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fileInputStream);<br>    <span class="hljs-type">ZipInputStream</span> <span class="hljs-variable">zipInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipInputStream</span>(bufferedInputStream);<br>    <span class="hljs-comment">//用于存放读取到的dex文件</span><br>    <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-comment">//获取apk中的一个个文件</span><br>        <span class="hljs-type">ZipEntry</span> <span class="hljs-variable">zipEntry</span> <span class="hljs-operator">=</span> zipInputStream.getNextEntry();<br>        <span class="hljs-comment">//遍历完了apk中的文件</span><br>        <span class="hljs-keyword">if</span> (zipEntry == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-comment">// 提取出的文件是classes.dex文件,则读取到bytearray中,显然这里只能处理含单dex文件的apk,多dex的apk待实现</span><br>        <span class="hljs-keyword">if</span> (zipEntry.getName().equals(<span class="hljs-string">&quot;classes.dex&quot;</span>))&#123;<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-comment">//每次读取1024byte,返回的是读取到的byte数</span><br>                <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> zipInputStream.read(bytes);<br>                <span class="hljs-keyword">if</span> (i == -<span class="hljs-number">1</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-comment">//存放到开辟的byteArrayOutputStream中</span><br>                byteArrayOutputStream.write(bytes,<span class="hljs-number">0</span>, i);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//关闭当前条目并定位到apk中的下一个文件</span><br>        zipInputStream.closeEntry();<br>    &#125;<br>    zipInputStream.close();<br><br>    <span class="hljs-comment">//返回读取到的dex文件</span><br>    <span class="hljs-keyword">return</span> byteArrayOutputStream.toByteArray();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-2-2-splitSourceApkFromShellDex"><a href="#3-3-2-2-splitSourceApkFromShellDex" class="headerlink" title="3.3.2.2 splitSourceApkFromShellDex()"></a>3.3.2.2 splitSourceApkFromShellDex()</h4><p>主要功能是从壳dex中分理处源程序apk，存储源程序apk，提取源apk中的本地库文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">splitSourceApkFromShellDex</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] shellDexData)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">shellDexlength</span> <span class="hljs-operator">=</span> shellDexData.length;<br>    <span class="hljs-comment">//开始解析dex文件</span><br>    <span class="hljs-type">byte</span>[] sourceApkSizeByte = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4</span>];<br>    <span class="hljs-comment">//读取源apk的大小</span><br>    System.arraycopy(shellDexData,shellDexlength - <span class="hljs-number">4</span>, sourceApkSizeByte,<span class="hljs-number">0</span>,<span class="hljs-number">4</span>);<br>    <span class="hljs-comment">//转成bytebuffer,方便4byte转int</span><br>    <span class="hljs-type">ByteBuffer</span> <span class="hljs-variable">wrap</span> <span class="hljs-operator">=</span> ByteBuffer.wrap(sourceApkSizeByte);<br>    <span class="hljs-comment">//将byte转成int, 加壳时,长度我是按小端存储的</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">sourceApkSizeInt</span> <span class="hljs-operator">=</span> wrap.order(ByteOrder.LITTLE_ENDIAN).getInt();<br>    <span class="hljs-comment">//读取源apk</span><br>    <span class="hljs-type">byte</span>[] sourceApkData = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[sourceApkSizeInt];<br>    <span class="hljs-comment">//忘记减4了！</span><br>    System.arraycopy(shellDexData,shellDexlength - sourceApkSizeInt - <span class="hljs-number">4</span>, sourceApkData, <span class="hljs-number">0</span>, sourceApkSizeInt);<br>    <span class="hljs-comment">//解密源apk</span><br>    sourceApkData = decryptoSourceApk(sourceApkData);<br>    <span class="hljs-comment">//写入新建的apk文件中</span><br>    <span class="hljs-type">File</span> <span class="hljs-variable">apkfile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(apkFileName);<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">apkfileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(apkfile);<br>        apkfileOutputStream.write(sourceApkData);<br>        apkfileOutputStream.close();<br>    &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>(e);<br>    &#125;<br><br>    <span class="hljs-comment">//分析源apk,取出so文件放入libPath目录中</span><br>    <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(apkfile);<br>    <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bufferedInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(fileInputStream);<br>    <span class="hljs-type">ZipInputStream</span> <span class="hljs-variable">zipInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipInputStream</span>(bufferedInputStream);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>        <span class="hljs-type">ZipEntry</span> <span class="hljs-variable">nextEntry</span> <span class="hljs-operator">=</span> zipInputStream.getNextEntry();<br>        <span class="hljs-keyword">if</span> (nextEntry == <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> nextEntry.getName();<br>        <span class="hljs-keyword">if</span> (name.startsWith(<span class="hljs-string">&quot;lib/&quot;</span>) &amp;&amp; name.endsWith(<span class="hljs-string">&quot;.so&quot;</span>))&#123;<br>            <span class="hljs-comment">//获取文件名并创建相应文件</span><br>            String[] nameSplit = name.split(<span class="hljs-string">&quot;/&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">soFileStorePath</span> <span class="hljs-operator">=</span> libPath + File.separator + nameSplit[nameSplit.length - <span class="hljs-number">1</span>];<br>            <span class="hljs-type">File</span> <span class="hljs-variable">storeFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(soFileStorePath);<br>            storeFile.createNewFile();<br>            <span class="hljs-comment">//读数据到相应so文件中</span><br>            <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(storeFile);<br>            <span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> zipInputStream.read(bytes);<br>                <span class="hljs-keyword">if</span>(i == -<span class="hljs-number">1</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                fileOutputStream.write(bytes,<span class="hljs-number">0</span>,i);<br>            &#125;<br>            <span class="hljs-comment">//存储玩so文件后,关闭so文件的输出缓存区</span><br>            fileOutputStream.flush();<br>            fileOutputStream.close();<br>        &#125;<br>        zipInputStream.closeEntry();<br>    &#125;<br>    zipInputStream.close();<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-2-3-decryptoSourceApk"><a href="#3-3-2-3-decryptoSourceApk" class="headerlink" title="3.3.2.3 decryptoSourceApk()"></a>3.3.2.3 decryptoSourceApk()</h4><p>主要功能就是解密源APK，这没啥好解释的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] decryptoSourceApk(<span class="hljs-type">byte</span>[] sourceApkdata) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; sourceApkdata.length; i++)&#123;<br>        sourceApkdata[i] ^= <span class="hljs-number">0xff</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sourceApkdata;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-2-4-replaceClassLoaderInLoadedApk"><a href="#3-3-2-4-replaceClassLoaderInLoadedApk" class="headerlink" title="3.3.2.4 replaceClassLoaderInLoadedApk()"></a>3.3.2.4 replaceClassLoaderInLoadedApk()</h4><p>主要功能是替换壳程序的ClassLoader为新建的源程序的DexClassLoader。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">replaceClassLoaderInLoadedApk</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>    <span class="hljs-comment">// 获取应用程序当前的classloader</span><br>    <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClassLoader();<br>    Log.d(TAG, <span class="hljs-string">&quot;classLoader get: &quot;</span> + classLoader.toString());<br>    Log.d(TAG, <span class="hljs-string">&quot;parent classLoader get: &quot;</span> + classLoader.getParent().toString());<br>    <span class="hljs-comment">// 获取ActivityThread类</span><br>    Class&lt;?&gt; ActivityThreadClass = classLoader.loadClass(<span class="hljs-string">&quot;android.app.ActivityThread&quot;</span>);<br>    Log.d(TAG, <span class="hljs-string">&quot;ActivityThreadClass: &quot;</span> + ActivityThreadClass.toString());<br>    <span class="hljs-comment">// ActivityThread已经实例化了，我们需要通过反射currentActivityThread()方法获取实例，而不是通过类反射创建实例（他都不是同一个实例，创建没屁用）</span><br>    <span class="hljs-comment">// 1.通过反射获取方法，进一步获取ActivityThread实例</span><br>    <span class="hljs-comment">//            Method currentActivityThreadMethod = ActivityThreadClass.getDeclaredMethod(&quot;currentActivityThread&quot;);</span><br>    <span class="hljs-comment">//            Log.d(TAG, &quot;currentActivityThreadMethod: &quot; + currentActivityThreadMethod.toString());</span><br>    <span class="hljs-comment">//            currentActivityThreadMethod.setAccessible(true);</span><br>    <span class="hljs-comment">//            Object sCurrentActivityThreadObj = currentActivityThreadMethod.invoke(null);//为什么这里可以设置为null</span><br>    <span class="hljs-comment">//            Log.d(TAG, &quot;反射获取方法，进一步获取ActivityThread实例: &quot; + sCurrentActivityThreadObj.toString());</span><br>    <span class="hljs-comment">// 2.直接反射获取ActivityThread字段</span><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">sCurrentActivityThreadField</span> <span class="hljs-operator">=</span> ActivityThreadClass.getDeclaredField(<span class="hljs-string">&quot;sCurrentActivityThread&quot;</span>);<br>    Log.d(TAG, <span class="hljs-string">&quot;sCurrentActivityThread: &quot;</span> + sCurrentActivityThreadField.toString());<br>    sCurrentActivityThreadField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">sCurrentActivityThreadObj</span> <span class="hljs-operator">=</span> sCurrentActivityThreadField.get(<span class="hljs-literal">null</span>);<span class="hljs-comment">//为什么这里可以设置为null</span><br>    Log.d(TAG, <span class="hljs-string">&quot;直接反射获取ActivityThread字段: &quot;</span> + sCurrentActivityThreadObj.toString());<br><br>    <span class="hljs-comment">//获取mPackages,类型为ArrayMap&lt;String, WeakReference&lt;LoadedApk&gt;&gt;, 里面存放了当前应用的LoadedApk对象</span><br>    <span class="hljs-type">Field</span> <span class="hljs-variable">mPackagesField</span> <span class="hljs-operator">=</span> ActivityThreadClass.getDeclaredField(<span class="hljs-string">&quot;mPackages&quot;</span>);<br>    mPackagesField.setAccessible(<span class="hljs-literal">true</span>);<br>    <span class="hljs-comment">//获取当前ActivityThread实例的mPackages字段</span><br>    <span class="hljs-type">ArrayMap</span> <span class="hljs-variable">mPackagesObj</span> <span class="hljs-operator">=</span> (ArrayMap) mPackagesField.get(sCurrentActivityThreadObj);<br>    Log.d(TAG, <span class="hljs-string">&quot;mPackagesObj: &quot;</span> + mPackagesObj.toString());<br><br>    <span class="hljs-comment">//获取mPackages中的当前应用包名</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">currentPackageName</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getPackageName();<br>    Log.d(TAG, <span class="hljs-string">&quot;currentPackageName: &quot;</span> + currentPackageName);<br><br>    <span class="hljs-comment">// 获取loadedApk实例也有好几种,mInitialApplication mAllApplications mPackages</span><br>    <span class="hljs-comment">// 通过包名获取当前应用的loadedApk实例</span><br>    <span class="hljs-type">WeakReference</span> <span class="hljs-variable">weakReference</span> <span class="hljs-operator">=</span> (WeakReference) mPackagesObj.get(currentPackageName);<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">loadedApkObj</span> <span class="hljs-operator">=</span> weakReference.get();<br>    Log.d(TAG, <span class="hljs-string">&quot;loadedApkObj: &quot;</span> + loadedApkObj.toString());<br><br>    <span class="hljs-comment">//动态加载源程序的dex文件,以当前classloader的父加载器作为parent</span><br>    <span class="hljs-type">DexClassLoader</span> <span class="hljs-variable">dexClassLoader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DexClassLoader</span>(apkFileName,dexPath,libPath, classLoader.getParent());<br>    Log.d(TAG, <span class="hljs-string">&quot;dexClassLoader: &quot;</span> + dexClassLoader.toString());<br>    <span class="hljs-comment">//替换loadedApk实例中的mClassLoader字段</span><br>    Class&lt;?&gt; LoadedApkClass = classLoader.loadClass(<span class="hljs-string">&quot;android.app.LoadedApk&quot;</span>);<br>    Log.d(TAG, <span class="hljs-string">&quot;LoadedApkClass: &quot;</span> + LoadedApkClass.toString());<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">mClassLoaderField</span> <span class="hljs-operator">=</span> LoadedApkClass.getDeclaredField(<span class="hljs-string">&quot;mClassLoader&quot;</span>);<br>    mClassLoaderField.setAccessible(<span class="hljs-literal">true</span>);<br>    mClassLoaderField.set(loadedApkObj, dexClassLoader);<br><br>    <span class="hljs-comment">//加载源程序的类</span><br>    <span class="hljs-comment">//可有可无，只是测试看看有没有这个类</span><br>    <span class="hljs-keyword">try</span>&#123;<br>        dexClassLoader.loadClass(<span class="hljs-string">&quot;com.example.sourceapk.MainActivity&quot;</span>);<br>        Log.d(TAG, <span class="hljs-string">&quot;com.example.sourceapk.MainActivity: 类加载成功&quot;</span>);<br>    &#125;<span class="hljs-keyword">catch</span> (ClassNotFoundException e)&#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;com.example.sourceapk.MainActivity: &quot;</span> + Log.getStackTraceString(e));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3-3-onCreate-中所需要做的工作"><a href="#3-3-3-onCreate-中所需要做的工作" class="headerlink" title="3.3.3 onCreate()中所需要做的工作"></a>3.3.3 onCreate()中所需要做的工作</h3><p>之后是Application的<code>onCreate()</code>方法，这里我们需要替换壳程序的Application，需要事先置LoadedApk中的mApplication为null，这样才能调用<code>makeApplication()</code>方法创建出源程序的Application。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">super</span>.onCreate();<br>    Log.d(TAG, <span class="hljs-string">&quot;SourceApk Application onCreate: &quot;</span> + <span class="hljs-built_in">this</span>);<br><br>    <span class="hljs-comment">//Application实例存在于: LoadedApk中的mApplication字段</span><br>    <span class="hljs-comment">// 以及ActivityThread中的mInitialApplication和mAllApplications和mBoundApplication字段</span><br>    <span class="hljs-comment">//替换Application</span><br><br>    <span class="hljs-comment">//获取源程序的Application类名</span><br>    <span class="hljs-type">String</span> <span class="hljs-variable">appClassName</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//获取AndroidManifest.xml 文件中的 &lt;meta-data&gt; 元素</span><br>        <span class="hljs-type">ApplicationInfo</span> <span class="hljs-variable">applicationInfo</span> <span class="hljs-operator">=</span> getPackageManager().getApplicationInfo(<span class="hljs-built_in">this</span>.getPackageName(), PackageManager.GET_META_DATA);<br>        <span class="hljs-type">Bundle</span> <span class="hljs-variable">metaData</span> <span class="hljs-operator">=</span> applicationInfo.metaData;<br>        <span class="hljs-comment">//获取xml文件声明的Application类</span><br>        <span class="hljs-keyword">if</span> (metaData != <span class="hljs-literal">null</span> &amp;&amp; metaData.containsKey(<span class="hljs-string">&quot;APPLICATION_CLASS_NAME&quot;</span>))&#123;<br>            appClassName = metaData.getString(<span class="hljs-string">&quot;APPLICATION_CLASS_NAME&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Log.d(TAG, <span class="hljs-string">&quot;xml文件中没有声明Application类名&quot;</span>);<br>            <span class="hljs-comment">//是因为没有自定义application就不好动态加载源程序的application吗?</span><br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;<br>        Log.d(TAG, Log.getStackTraceString(e));<br>    &#125;<br>    <span class="hljs-comment">//xml文件中存在自定义application类</span><br>    <span class="hljs-comment">//开始替换</span><br><br>    <span class="hljs-comment">//获取ActivityThread实例</span><br>    <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">classLoader</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getClassLoader();<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//获取ActivityThread类</span><br>        Class&lt;?&gt; ActivityThreadClass = classLoader.loadClass(<span class="hljs-string">&quot;android.app.ActivityThread&quot;</span>);<br>        Log.d(TAG, <span class="hljs-string">&quot;ActivityThreadClass: &quot;</span> + ActivityThreadClass.toString());<br>        <span class="hljs-comment">//反射获取sCurrentActivityThread实例</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">sCurrentActivityThreadField</span> <span class="hljs-operator">=</span> ActivityThreadClass.getDeclaredField(<span class="hljs-string">&quot;sCurrentActivityThread&quot;</span>);<br>        Log.d(TAG, <span class="hljs-string">&quot;sCurrentActivityThread: &quot;</span> + sCurrentActivityThreadField.toString());<br>        sCurrentActivityThreadField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">sCurrentActivityThreadObj</span> <span class="hljs-operator">=</span> sCurrentActivityThreadField.get(<span class="hljs-literal">null</span>);<span class="hljs-comment">//为什么这里可以设置为null</span><br>        Log.d(TAG, <span class="hljs-string">&quot;直接反射获取ActivityThread字段: &quot;</span> + sCurrentActivityThreadObj.toString());<br><br>        <span class="hljs-comment">//获取mBoundApplication字段 (AppBindData对象)</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">mBoundApplicationField</span> <span class="hljs-operator">=</span> ActivityThreadClass.getDeclaredField(<span class="hljs-string">&quot;mBoundApplication&quot;</span>);<br>        mBoundApplicationField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">mBoundApplicationObj</span> <span class="hljs-operator">=</span> mBoundApplicationField.get(sCurrentActivityThreadObj);<br><br>        <span class="hljs-comment">//获取mBoundApplication对象中的info (LoadedApk对象)</span><br>        <span class="hljs-comment">//所以这个和之前通过mPackages字段获取LoadedApk有什么不同???</span><br>        <span class="hljs-comment">//首先获取AppBindData类,它位于ActivityThread类内部</span><br>        Class&lt;?&gt; AppBindDataClass = classLoader.loadClass(<span class="hljs-string">&quot;android.app.ActivityThread$AppBindData&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">infoField</span> <span class="hljs-operator">=</span> AppBindDataClass.getDeclaredField(<span class="hljs-string">&quot;info&quot;</span>);<br>        infoField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">infoObj</span> <span class="hljs-operator">=</span> infoField.get(mBoundApplicationObj);<br>        Log.d(TAG, <span class="hljs-string">&quot;infoObj: &quot;</span> + infoObj.toString());<br><br>        <span class="hljs-comment">//把infoObj (LoadedApk对象)中的mApplication设置为null,这样后续才能调用makeApplication()!!!</span><br>        Class&lt;?&gt; LoadedApkClass = classLoader.loadClass(<span class="hljs-string">&quot;android.app.LoadedApk&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">mApplicationField</span> <span class="hljs-operator">=</span> LoadedApkClass.getDeclaredField(<span class="hljs-string">&quot;mApplication&quot;</span>);<br>        mApplicationField.setAccessible(<span class="hljs-literal">true</span>);<br>        Log.d(TAG, <span class="hljs-string">&quot;mApplication: &quot;</span> + mApplicationField.get(infoObj).toString());<br>        mApplicationField.set(infoObj, <span class="hljs-literal">null</span>);<br><br>        <span class="hljs-comment">//获取ActivityThread实例中的mInitialApplication字段,拿到旧的Application(对于要加载的Application来讲)</span><br>        <span class="hljs-comment">//为什么不直接通过刚才的info获取???</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">mInitialApplicationField</span> <span class="hljs-operator">=</span> ActivityThreadClass.getDeclaredField(<span class="hljs-string">&quot;mInitialApplication&quot;</span>);<br>        mInitialApplicationField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">mInitialApplicationObj</span> <span class="hljs-operator">=</span> mInitialApplicationField.get(sCurrentActivityThreadObj);<br>        Log.d(TAG, <span class="hljs-string">&quot;mInitialApplicationObj: &quot;</span> + mInitialApplicationObj.toString());<br><br>        <span class="hljs-comment">//获取ActivityThread实例中的mAllApplications字段,然后删除mInitialApplication,也就是旧的application</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">mAllApplicationsField</span> <span class="hljs-operator">=</span> ActivityThreadClass.getDeclaredField(<span class="hljs-string">&quot;mAllApplications&quot;</span>);<br>        mAllApplicationsField.setAccessible(<span class="hljs-literal">true</span>);<br>        ArrayList&lt;Application&gt; mAllApplicationsObj = (ArrayList&lt;Application&gt;)mAllApplicationsField.get(sCurrentActivityThreadObj);<br>        mAllApplicationsObj.remove(mInitialApplicationObj);<br>        Log.d(TAG, <span class="hljs-string">&quot;mInitialApplication 从 mAllApplications 中移除成功&quot;</span>);<br><br>        <span class="hljs-comment">//这是要干嘛???</span><br>        <span class="hljs-comment">//获取LoadedApk的mApplicationInfo字段</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">mApplicationInfoField</span> <span class="hljs-operator">=</span> LoadedApkClass.getDeclaredField(<span class="hljs-string">&quot;mApplicationInfo&quot;</span>);<br>        mApplicationInfoField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">ApplicationInfo</span> <span class="hljs-variable">appinfoInLoadedApk</span> <span class="hljs-operator">=</span> (ApplicationInfo) mApplicationInfoField.get(infoObj);<br>        Log.d(TAG, <span class="hljs-string">&quot;appinfoInLoadedApk: &quot;</span> + appinfoInLoadedApk.toString());<br><br><br>        <span class="hljs-comment">//获取mBoundApplication对象中的appInfo</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">appInfoField</span> <span class="hljs-operator">=</span> AppBindDataClass.getDeclaredField(<span class="hljs-string">&quot;appInfo&quot;</span>);<br>        appInfoField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">ApplicationInfo</span> <span class="hljs-variable">appinfoInAppBindData</span> <span class="hljs-operator">=</span> (ApplicationInfo) appInfoField.get(mBoundApplicationObj);<br>        Log.d(TAG, <span class="hljs-string">&quot;appinfoInLoadedApk: &quot;</span> + appinfoInAppBindData.toString());<br><br><br>        <span class="hljs-comment">//设置两个appinfo的classname为源程序的application类名,以便后续调用makeApplication()创建源程序的application</span><br>        appinfoInLoadedApk.className = appClassName;<br>        appinfoInAppBindData.className = appClassName;<br>        Log.d(TAG, <span class="hljs-string">&quot;要加载的源程序application类为: &quot;</span> + appClassName);<br><br>        <span class="hljs-comment">//反射调用makeApplication方法创建源程序的application</span><br>        <span class="hljs-type">Method</span> <span class="hljs-variable">makeApplicationMethod</span> <span class="hljs-operator">=</span> LoadedApkClass.getDeclaredMethod(<span class="hljs-string">&quot;makeApplication&quot;</span>, <span class="hljs-type">boolean</span>.class, Instrumentation.class);<br>        Log.d(TAG, <span class="hljs-string">&quot;makeApplicationMethod: &quot;</span> + makeApplicationMethod.toString());<br>        makeApplicationMethod.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">Application</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> (Application) makeApplicationMethod.invoke(infoObj, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>        Log.d(TAG, <span class="hljs-string">&quot;创建源程序application成功&quot;</span>);<br><br>        <span class="hljs-comment">//将刚创建的Application设置到ActivityThread的mInitialApplication字段</span><br>        mInitialApplicationField.set(sCurrentActivityThreadObj, app);<br>        Log.d(TAG, <span class="hljs-string">&quot;源程序的application成功设置到mInitialApplication字段&quot;</span>);<br><br>        <span class="hljs-comment">//ContentProvider会持有代理的Application,需要特殊处理一下</span><br>        <span class="hljs-type">Field</span> <span class="hljs-variable">mProviderMapField</span> <span class="hljs-operator">=</span> ActivityThreadClass.getDeclaredField(<span class="hljs-string">&quot;mProviderMap&quot;</span>);<br>        Log.d(TAG, <span class="hljs-string">&quot;mProviderMapField: &quot;</span> + mProviderMapField.toString());<br>        mProviderMapField.setAccessible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-type">ArrayMap</span> <span class="hljs-variable">mProviderMapObj</span> <span class="hljs-operator">=</span> (ArrayMap) mProviderMapField.get(sCurrentActivityThreadObj);<br>        Log.d(TAG, <span class="hljs-string">&quot;mProviderMapObj: &quot;</span> + mProviderMapObj.toString());<br>        <span class="hljs-comment">//获取所有provider,装进迭代器中遍历</span><br>        <span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> mProviderMapObj.values().iterator();<br>        Log.d(TAG, <span class="hljs-string">&quot;iterator: &quot;</span> + iterator.toString());<br>        <span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>            <span class="hljs-type">Object</span> <span class="hljs-variable">providerClientRecord</span> <span class="hljs-operator">=</span> iterator.next();<br>            <span class="hljs-comment">//获取ProviderClientRecord中的mLocalProvider字段</span><br>            Class&lt;?&gt; ProviderClientRecordClass = classLoader.loadClass(<span class="hljs-string">&quot;android.app.ActivityThread$ProviderClientRecord&quot;</span>);<br>            <span class="hljs-type">Field</span> <span class="hljs-variable">mLocalProviderField</span> <span class="hljs-operator">=</span> ProviderClientRecordClass.getDeclaredField(<span class="hljs-string">&quot;mLocalProvider&quot;</span>);<br>            Log.d(TAG, <span class="hljs-string">&quot;mLocalProviderField: &quot;</span> + mLocalProviderField.toString());<br>            mLocalProviderField.setAccessible(<span class="hljs-literal">true</span>);<br><br>            <span class="hljs-type">Object</span> <span class="hljs-variable">mLocalProviderObj</span> <span class="hljs-operator">=</span> mLocalProviderField.get(providerClientRecord);<br>            <span class="hljs-comment">//mLocalProviderObj可能为空</span><br>            <span class="hljs-keyword">if</span>(mLocalProviderObj != <span class="hljs-literal">null</span>)&#123;<br>                Log.d(TAG, <span class="hljs-string">&quot;mLocalProviderObj: &quot;</span> + mLocalProviderObj.toString());<br>                <span class="hljs-comment">//获取ContentProvider中的mContext字段,设置为新建的Application</span><br>                Class&lt;?&gt; ContentProviderClass = classLoader.loadClass(<span class="hljs-string">&quot;android.content.ContentProvider&quot;</span>);<br>                <span class="hljs-type">Field</span> <span class="hljs-variable">mContextField</span> <span class="hljs-operator">=</span> ContentProviderClass.getDeclaredField(<span class="hljs-string">&quot;mContext&quot;</span>);<br>                mContextField.setAccessible(<span class="hljs-literal">true</span>);<br>                mContextField.set(mLocalProviderObj,app);<br>            &#125;<br><br>        &#125;<br>        Log.d(TAG, <span class="hljs-string">&quot;app: &quot;</span> + app);<br>        <span class="hljs-comment">//开始Application的创建,源程序启动!</span><br>        app.onCreate();<br><br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>        Log.e(TAG, Log.getStackTraceString(e));<br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchFieldException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="四、项目过程中出现的问题"><a href="#四、项目过程中出现的问题" class="headerlink" title="四、项目过程中出现的问题"></a>四、项目过程中出现的问题</h1><p><strong>注意！每次安装玩新的apk后，记得把之前代码创建的两个目录删除，否则就是启动之前存在的源apk。</strong></p><h2 id="4-1-问题一"><a href="#4-1-问题一" class="headerlink" title="4.1 问题一"></a>4.1 问题一</h2><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312012217971.png"></p><p>查看了一下提取出的源程序，它不能被正常识别成apk，而且拖到jadx中反编译失败！Bandzip打开报错该文件已损坏！</p><p>010editor打开，发现连pk头都没有！估计是取源程序的时候定位错了！</p><p>额，还真是，定位初始位置的时候少减了4bytes（存储源APK大小的长度）</p><p>（这不是错误出现的原因！）</p><p>之后提取出来的源程序是正常的，能被正常识别，能被jadx反编译出原本代码，但是仍然上图的这个错误。</p><p>难道是壳APK中的ActivityMainfest.xml中没声明该Activity导致的？？？</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312012217020.png"></p><p>果然是这样！我们需要把源程序的Activity声明搬到壳程序中，之后我的壳程序的ActivityMainfest.xml文件如下：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312012217912.png"></p><h2 id="4-2-问题二"><a href="#4-2-问题二" class="headerlink" title="4.2 问题二"></a>4.2 问题二</h2><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312012218279.png"></p><p>无法创建application，原因如下：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312012218894.png"></p><p>源程序的application类找不到？？？</p><p>我测！我大写了，<meta-data>标签中包application类名大写了，应该是sourceapk而不是sourcApk！🥲</p><h2 id="4-3-问题三"><a href="#4-3-问题三" class="headerlink" title="4.3 问题三"></a>4.3 问题三</h2><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312012218547.png"></p><p>有的providerClientRecord对象中的mLocalProvider字段是空的！？？</p><p>还以为是我的原因造成的呢。其实是可以为空的，那么我们只需要在获取到mLocalProvider对象后用加一层判断就行，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//获取所有provider,装进迭代器中遍历</span><br><span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> mProviderMapObj.values().iterator();<br>Log.d(TAG, <span class="hljs-string">&quot;iterator: &quot;</span> + iterator.toString());<br><span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">providerClientRecord</span> <span class="hljs-operator">=</span> iterator.next();<br>    <span class="hljs-comment">//获取ProviderClientRecord中的mLocalProvider字段</span><br>    Class&lt;?&gt; ProviderClientRecordClass = classLoader.loadClass(<span class="hljs-string">&quot;android.app.ActivityThread$ProviderClientRecord&quot;</span>);<br>    <span class="hljs-type">Field</span> <span class="hljs-variable">mLocalProviderField</span> <span class="hljs-operator">=</span> ProviderClientRecordClass.getDeclaredField(<span class="hljs-string">&quot;mLocalProvider&quot;</span>);<br>    Log.d(TAG, <span class="hljs-string">&quot;mLocalProviderField: &quot;</span> + mLocalProviderField.toString());<br>    mLocalProviderField.setAccessible(<span class="hljs-literal">true</span>);<br><br>    <span class="hljs-type">Object</span> <span class="hljs-variable">mLocalProviderObj</span> <span class="hljs-operator">=</span> mLocalProviderField.get(providerClientRecord);<br>    <span class="hljs-comment">//mLocalProviderObj可能为空</span><br>    <span class="hljs-keyword">if</span>(mLocalProviderObj != <span class="hljs-literal">null</span>)&#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;mLocalProviderObj: &quot;</span> + mLocalProviderObj.toString());<br>        <span class="hljs-comment">//获取ContentProvider中的mContext字段,设置为新建的Application</span><br>        Class&lt;?&gt; ContentProviderClass = classLoader.loadClass(<span class="hljs-string">&quot;android.content.ContentProvider&quot;</span>);<br>        <span class="hljs-type">Field</span> <span class="hljs-variable">mContextField</span> <span class="hljs-operator">=</span> ContentProviderClass.getDeclaredField(<span class="hljs-string">&quot;mContext&quot;</span>);<br>        mContextField.setAccessible(<span class="hljs-literal">true</span>);<br>        mContextField.set(mLocalProviderObj,app);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-4-问题四"><a href="#4-4-问题四" class="headerlink" title="4.4. 问题四"></a>4.4. 问题四</h2><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312012218409.png"></p><p>搜索了一下，源程序的MainActivity不应该继承自AppCompatActivity类，需要改成继承自Activity类，或者修改AndroidManifest.xml文件的主题。（参考<a href="https://blog.csdn.net/lady_zhou/article/details/99590037">解决You need to use a Theme.AppCompat theme (or descendant) with this activity.-CSDN博客</a>）</p><p>我是直接改成继承自Activity类。</p><p>之后成功启动了：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312012218172.png"></p><p>其实到这里就已经可以说加壳脱壳成功了。但是！！！启动后的界面不容乐观</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312012218163.jpg"></p><p>并非源程序的<code>activity_main.xml</code>中的界面。所以我将源程序<code>activity_main.xml</code>文件复制到壳程序的<code>/res/layout</code>目录下，但是下一个问题接踵而来。</p><h2 id="4-5-问题五"><a href="#4-5-问题五" class="headerlink" title="4.5 问题五"></a>4.5 问题五</h2><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312012219334.png"></p><p>复制粘贴过来的<code>activity_main.xml</code>有问题，字符串索引有问题？？可是我是直接填字符串常量进去的啊，就根本没用字符串索引。</p><p>尝试之后，是把容器标签<code>&lt;androidx.constraintlayout.widget.ConstraintLayout&gt;</code>换成其他的就行，我换成了<code>&lt;LinearLayout&gt;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;com.example.sourceapk.MainActivity&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;这是源程序！&quot;</span> /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>最终成功启动并展示出了源程序界面：</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312012219334.jpg" style="zoom:30%;" /><p>显然，在上述问题中，绝大数是我粗心造成的！😢</p><h1 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h1><p>花费了大概一周的时间，从一开始接触第一代壳，前前后后学了不少加壳所需的前置知识，终于在今日也是成功的制作出了一代壳。</p><p>在制作的过程中，还是有很多粗心的地方，一些大小写的问题导致动态加载类失败，当然也注意到反射所用的代码非常雷同，因此可以自定义一个反射类，像那些所参考的文章一样，这样代码就非常简洁了。另一个方面就是，我觉得上面的代码（或者说我所参考的代码）还可以进一步优化，有一些代码为什么这么做我搞不清楚，尚待考究。</p><p>还有就是在代码中反射来反射去的，那些所获取的实例我猜测应该都是同一个，例如LoadedApk、Application实例，存储他们的字段有很多，所以我想，接下来可以验证一下是不是如猜想一样。</p><p>不过我似乎理解了为什么第一代壳又被称为落地加载壳，这是因为它会把源程序从壳程序中分离出来并存储到文件系统中，所以才叫”落地“。由于这一特性，攻击者可以从文件系统中获取源程序。即使我们对源文件加载后删除，攻击者仍然可以通过拦截对应的删除函数阻止删除。</p><hr><p>参考：</p><p><a href="https://github.com/13767004362/HookDemo/blob/master/document/%E6%8F%92%E4%BB%B6%E5%8C%96%E4%B9%8B%E5%8A%A8%E6%80%81%E6%9B%BF%E6%8D%A2application.md">插件化之动态替换application.md</a></p><p><a href="https://blog.svip.dev/posts/%E5%8A%A0%E5%A3%B3app%E7%9A%84%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B%E5%8F%8Aclassloader%E4%BF%AE%E6%AD%A3">加壳App的运行流程及ClassLoader修正 | Security (svip.dev)</a></p><p><a href="https://blog.csdn.net/xiangzhihong8/article/details/79724978">https://blog.csdn.net/xiangzhihong8/article/details/79724978</a></p><p>[<a href="https://bbs.kanxue.com/thread-261939.htm">原创]安卓加固方案从落地加载到类指令抽取编写报告-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p><p><a href="https://www.jianshu.com/p/ae66be381e6f">Android 一二三代壳加固原理分析 - 简书 (jianshu.com)</a></p><p><a href="http://www.520monkey.com/archives/553">Android中的Apk的加固(加壳)原理解析和实现 | 尼古拉斯.赵四 (520monkey.com)</a></p><p>[<a href="https://bbs.kanxue.com/thread-260124.htm">原创]Android App加固原理与技术历程-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p><p><a href="https://zhuanlan.zhihu.com/p/398931026">从第一代到第五代，App加固技术详解 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android加固</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android中的Application类</title>
    <link href="/2023/12/01/Android%E4%B8%AD%E7%9A%84Application%E7%B1%BB/"/>
    <url>/2023/12/01/Android%E4%B8%AD%E7%9A%84Application%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Application是什么"><a href="#一、Application是什么" class="headerlink" title="一、Application是什么"></a>一、Application是什么</h1><p>Application同Activity、Service一样，都是Android系统的组件。当应用程序启动过程中，最先创建的是Application实例（有且仅有一个），它的创建早于应用程序启动以及任何Activity、Service或接收者对象（不包括ContentProvider）的创建。Application的生命周期是整个应用程序中最长的，它的生命周期就等于应用程序的生命周期。</p><p>在<a href="https://gal2xy.github.io/2023/11/27/Android%E4%B8%ADApplication%E7%9A%84%E5%88%9B%E5%BB%BA%E6%B5%81%E7%A8%8B/">Android中Application的创建流程(gal2xy.github.io)</a>一文中，应用程序启动会创建主线程ActivityThread，然后通过AMS的<code>attachApplication()</code>方法绑定Application（深入该方法会有一系列调用，这里只简单描述），最终会创建Application，并赋值给刚刚创建的ActivityThread的<code>mInitialApplication </code>字段，因此这个Application是全局的且单例的，而所有的Activity、Service等组件受ActivityThread的管理，所以在不同的Activity、Service中获得的Application对象都是一样的，因此可以通过Application来进行一些操作，如数据传递、数据共享和数据缓存等。</p><p>Application的形象示意图如下：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202312012213170.png"></p><h2 id="二、Application类的一些方法"><a href="#二、Application类的一些方法" class="headerlink" title="二、Application类的一些方法"></a>二、Application类的一些方法</h2><ul><li><p>getProcessName()</p><p>获取当前进程的名称。</p></li><li><p>onConfigurationChanged()</p><p>监听app的配置信息改变事件，如手机屏幕旋转等。当配置信息发生变化时被调用。</p></li><li><p>onCreate()</p><p>Application初始化时被调用，调用时机早于任何一个Activity、Service。</p></li><li><p>onLowmemory()</p><p>监听系统内存情况，当系统内存不足时调用该方法来释放一些不重要的资源，以保证app能够继续运行而不被系统杀掉。</p></li><li><p>onTerminate()</p><p>应用程序结束时被调用，通常用于模拟过程环境中。</p></li><li><p>onTrimMemory()：</p><p>通知应用的不同内存情况。</p></li><li><p>registerActivityLifecycleCallbacks()和unregisterActivityLifecycleCallbacks()</p><p>注册或者注销对APP内所有Activity的生命周期监听，当app内Activity的生命周期发生变化的时候就会调用ActivityLifecycleCallbacks里面的方法。</p></li><li><p>registerComponentCallbacks()和unregisterComponentCallbacks()</p><p>用于注册和注销ComponentCallbacks或ComponentCallbacks2回调接口。</p></li></ul><h1 id="三、Application的应用"><a href="#三、Application的应用" class="headerlink" title="三、Application的应用"></a>三、Application的应用</h1><p>Application 作为整个 App 的一个单例对象，其作用如下：</p><ol><li>作为 App 的入口，可用来初始化基本配置，如第三方 SDK 的初始化。</li><li>可以在 Application 中定义供全局使用的变量，不过当应用被强杀之后有可能出现空指针的问题，导致再次打开应用的时候崩溃，如果确定要这样使用，一定要处理好这种情况。</li><li>可以借助 Application 管理 Activity 的生命周期状态以及判断应用处于前台还是后台等，可根据内存优先级降低自身应用所占内存，减小自身应用被系统强杀的可能性。</li></ol><h2 id="3-1-自定义Application"><a href="#3-1-自定义Application" class="headerlink" title="3.1 自定义Application"></a>3.1 自定义Application</h2><p>在开发中，我们通常不需要手动实现应用的Application，系统会自动帮我们创建。如果需要自定义Application，那么只需要创建一个类继承Application并在AndroidManifest.xml文件中使用<code>&lt;application/&gt;</code>标签进行注册即可（name属性指定Application的全限定类名）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">package</span> com.example.shellapk;<br><br><span class="hljs-keyword">import</span> android.app.Application;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ProxyApplication</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Application</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate();<br>        <span class="hljs-comment">//可以进行一些全局配置</span><br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>主要重写里面的<code>onCreate()</code>方法（<strong>Application的<code>onCreate()</code>才是真正的Android程序的入口点</strong>），可以在里里面初始化一些全局变量，然后在整个应用中的各个文件中就可以对这些变量进行操作了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">manifest</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!-- 全局唯一，删除默认的application --&gt;</span><br><span class="hljs-comment">&lt;!--    &lt;application--&gt;</span><br><span class="hljs-comment">&lt;!--        android:allowBackup=&quot;true&quot;--&gt;</span><br><span class="hljs-comment">&lt;!--        android:dataExtractionRules=&quot;@xml/data_extraction_rules&quot;--&gt;</span><br><span class="hljs-comment">&lt;!--        android:fullBackupContent=&quot;@xml/backup_rules&quot;--&gt;</span><br><span class="hljs-comment">&lt;!--        android:icon=&quot;@mipmap/ic_launcher&quot;--&gt;</span><br><span class="hljs-comment">&lt;!--        android:label=&quot;@string/app_name&quot;--&gt;</span><br><span class="hljs-comment">&lt;!--        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;--&gt;</span><br><span class="hljs-comment">&lt;!--        android:supportsRtl=&quot;true&quot;--&gt;</span><br><span class="hljs-comment">&lt;!--        android:theme=&quot;@style/Theme.ShellApk&quot;--&gt;</span><br><span class="hljs-comment">&lt;!--        tools:targetApi=&quot;31&quot; /&gt;--&gt;</span><br>    <span class="hljs-comment">&lt;!-- 注册自己自定义的application --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">application</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.example.shellapk.ProxyApplication&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">application</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>Application是Android系统中的一个组件，它是最先创建的（早于任何一个Activity、Service等组件），因而是整个应用程序的入口点，同时也是一个全局的上下文环境，在这个Application类中可以访问和管理应用程序中的其他组件，即与其他组件之间有特定的交互逻辑和数据共享机制。（我似乎已经明白了为什么壳程序里面需要替换掉已有的Application实例为源程序的Application，因为Application可以认为是整个应用程序的抽象，如果不替换掉壳程序的Application，即使通过DexClassLoader加载源程序APK，仍会无法正常运行）</p><hr><p>参考：</p><p><a href="https://guides.codepath.com/android/Understanding-the-Android-Application-Class">https://guides.codepath.com/android/Understanding-the-Android-Application-Class</a></p><p><a href="https://developer.android.com/reference/android/app/Application">https://developer.android.com/reference/android/app/Application</a></p><p><a href="https://www.jianshu.com/p/d21a65e06cdb">Android-Application详解 - 简书 (jianshu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/383410949">Android组件化之Application - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Android中Application的创建流程</title>
    <link href="/2023/11/27/Android%E4%B8%ADApplication%E7%9A%84%E5%88%9B%E5%BB%BA%E6%B5%81%E7%A8%8B/"/>
    <url>/2023/11/27/Android%E4%B8%ADApplication%E7%9A%84%E5%88%9B%E5%BB%BA%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>System进程和App进程都运行着一个或多个App，每个App都会有一个对应的Application对象(该对象跟LoadedApk一一对应)。下面分别解析以下两种进程创建Application的过程：</p><ul><li>System Server进程</li><li>App进程</li></ul><h1 id="二、System-Server进程"><a href="#二、System-Server进程" class="headerlink" title="二、System Server进程"></a>二、System Server进程</h1><p>在<a href="https://gal2xy.github.io/2023/07/04/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/">Android系统启动流程</a>一文中，讲到过Zygote通过回调函数进入到System Server阶段，也就是调用了System Server的<code>main()</code>方法中，该方法中会调用<code>run()</code>方法，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/services/java/com/android/server/SystemServer.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemServer</span>().run();<span class="hljs-comment">//见2.1 </span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-1-SystemServer-run"><a href="#2-1-SystemServer-run" class="headerlink" title="2.1 SystemServer.run()"></a>2.1 SystemServer.run()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/services/java/com/android/server/SystemServer.java  </span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        ......<br>        <span class="hljs-comment">//创建消息Looper</span><br>        Looper.prepareMainLooper();<br>        <span class="hljs-comment">//加载动态库libandroid_servers.so</span><br>        System.loadLibrary(<span class="hljs-string">&quot;android_servers&quot;</span>);<br>        performPendingShutdown();<br>        <span class="hljs-comment">//创建系统的Context</span><br>        createSystemContext();<span class="hljs-comment">//见2.2</span><br>        <span class="hljs-comment">//创建SystemServiceManager</span><br>        mSystemServiceManager = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemServiceManager</span>(mSystemContext);<br>        mSystemServiceManager.setRuntimeRestarted(mRuntimeRestart);<br>        LocalServices.addService(SystemServiceManager.class, mSystemServiceManager);<br>        <span class="hljs-comment">// Prepare the thread pool for init tasks that can be parallelized</span><br>        SystemServerInitThreadPool.get();<br>    &#125;<br>    ...<br>    <span class="hljs-keyword">try</span> &#123;<br>        traceBeginAndSlog(<span class="hljs-string">&quot;StartServices&quot;</span>);<br>        <span class="hljs-comment">//启动引导服务</span><br>        startBootstrapServices();<br>        <span class="hljs-comment">//启动核心服务</span><br>        startCoreServices();<br>        <span class="hljs-comment">//启动其他服务</span><br>        startOtherServices();<br>        SystemServerInitThreadPool.shutdown();<br>    &#125; <br>......<br>    Looper.loop();<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Main thread loop unexpectedly exited&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在System Server的<code>run()</code>方法中，会调用<code>createSystemContext()</code>来创建系统的上下文。</p><h2 id="2-2-createSystemContext"><a href="#2-2-createSystemContext" class="headerlink" title="2.2 createSystemContext()"></a>2.2 createSystemContext()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/services/java/com/android/server/SystemServer.java</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createSystemContext</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">ActivityThread</span> <span class="hljs-variable">activityThread</span> <span class="hljs-operator">=</span> ActivityThread.systemMain();<span class="hljs-comment">//见[2.3]</span><br>    mSystemContext = activityThread.getSystemContext();<span class="hljs-comment">//获取系统上下文</span><br>    mSystemContext.setTheme(DEFAULT_SYSTEM_THEME);<br><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Context</span> <span class="hljs-variable">systemUiContext</span> <span class="hljs-operator">=</span> activityThread.getSystemUiContext();<span class="hljs-comment">//获取系统UI上下文</span><br>    systemUiContext.setTheme(DEFAULT_SYSTEM_THEME);<br>&#125;<br></code></pre></td></tr></table></figure><p>调用了<code>ActivityThread.systemMain()</code>方法，以及<code>getSystemContext()</code>获取系统上下文、<code>getSystemUiContext()</code>获取系统UI上下文。</p><h2 id="2-3-ActivityThread-systemMain"><a href="#2-3-ActivityThread-systemMain" class="headerlink" title="2.3 ActivityThread.systemMain()"></a>2.3 ActivityThread.systemMain()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/ActivityThread.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ActivityThread <span class="hljs-title function_">systemMain</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-comment">// 高内存设备进行硬件加速绘图</span><br>    <span class="hljs-keyword">if</span> (!ActivityManager.isHighEndGfx()) &#123;<br>        ThreadedRenderer.disable(<span class="hljs-literal">true</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ThreadedRenderer.enableForegroundTrimming();<br>    &#125;<br>    <span class="hljs-type">ActivityThread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActivityThread</span>();<span class="hljs-comment">//见2.4</span><br>    thread.attach(<span class="hljs-literal">true</span>);<span class="hljs-comment">//见2.5</span><br>    <span class="hljs-keyword">return</span> thread;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-4-ActivityThread初始化"><a href="#2-4-ActivityThread初始化" class="headerlink" title="2.4 ActivityThread初始化"></a>2.4 ActivityThread初始化</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/ActivityThread.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActivityThread</span> &#123;<br><span class="hljs-keyword">private</span> ContextImpl mSystemContext;<span class="hljs-comment">//记录system进程的ContextImpl对象</span><br>    <span class="hljs-keyword">private</span> ContextImpl mSystemUiContext;<span class="hljs-comment">//系统 UI 的上下文对象</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ApplicationThread</span> <span class="hljs-variable">mAppThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationThread</span>();<span class="hljs-comment">//创建ApplicationThread对象</span><br>    AppBindData mBoundApplication;<span class="hljs-comment">//用于绑定应用程序的相关信息</span><br>    Application mInitialApplication;<span class="hljs-comment">//当前进程中首次初始化的app对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> ActivityThread sCurrentActivityThread;<span class="hljs-comment">//记录当前ActivityThread</span><br>    Instrumentation mInstrumentation;<span class="hljs-comment">//用于监控和管理应用程序的执行环境。它提供了一种机制，可以向应用程序注入代码，监视和控制应用程序的行为</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">mSystemThread</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//标记当前进程是否为system进程</span><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Handler sMainThreadHandler;<span class="hljs-comment">//处理主线程消息的句柄</span><br>    ...<br>    ActivityThread() &#123;<br>        mResourcesManager = ResourcesManager.getInstance();<span class="hljs-comment">//获取资源管理实例</span><br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>创建ActivityThread实例时，会初始化很多变量，其中有一个Application类的mInitialApplication对象，它的初始化分为两种情况：</p><ol><li>System Server进程则是由<code>ActivityThread.attach()</code>过程赋值。</li><li>普通App进程则是由<code>ActivityThread.handleBindApplication()</code>过程赋值。</li></ol><h2 id="2-5-ActivityThread-attach"><a href="#2-5-ActivityThread-attach" class="headerlink" title="2.5 ActivityThread.attach()"></a>2.5 ActivityThread.attach()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/ActivityThread.java</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attach</span><span class="hljs-params">(<span class="hljs-type">boolean</span> system)</span> &#123;<br>    sCurrentActivityThread = <span class="hljs-built_in">this</span>;<br>    mSystemThread = system;<span class="hljs-comment">//传入的参数为true,即设置mSystemThread为true，这意味着当前进程是系统进程</span><br>    <span class="hljs-keyword">if</span> (!system) &#123;<span class="hljs-comment">//非系统进程执行该分支</span><br>        ...<br>    &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//系统进程执行该分支</span><br>        ...<br>        <span class="hljs-keyword">try</span> &#123;<br>            mInstrumentation = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Instrumentation</span>();<span class="hljs-comment">//创建Instrumentation对像</span><br>            <span class="hljs-comment">//getSystemContext见[2.6]</span><br>            <span class="hljs-comment">//createAppContext见[2.7]</span><br>            <span class="hljs-type">ContextImpl</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> ContextImpl.createAppContext(<span class="hljs-built_in">this</span>, getSystemContext().mPackageInfo);<br>            <span class="hljs-comment">//makeApplication见[2.8]</span><br>            mInitialApplication = context.mPackageInfo.makeApplication(<span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br>            mInitialApplication.onCreate();<span class="hljs-comment">//创建Application对象</span><br>        &#125; <br>        ...<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>传入的system参数为true，这意味着当前进程是系统进程，对应进入else分支，会实例化mInstrumentation和mInitialApplication对象。</p><h2 id="2-6-getSystemContext"><a href="#2-6-getSystemContext" class="headerlink" title="2.6 getSystemContext()"></a>2.6 getSystemContext()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/ActivityThread.java</span><br><span class="hljs-keyword">public</span> ContextImpl <span class="hljs-title function_">getSystemContext</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>        <span class="hljs-keyword">if</span> (mSystemContext == <span class="hljs-literal">null</span>) &#123;<br>            mSystemContext = ContextImpl.createSystemContext(<span class="hljs-built_in">this</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> mSystemContext;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用<code>createSystemContext()</code>创建系统上下文。</p><h3 id="2-6-1-createSystemContext"><a href="#2-6-1-createSystemContext" class="headerlink" title="2.6.1 createSystemContext()"></a>2.6.1 createSystemContext()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/ContextImpl.java</span><br><span class="hljs-keyword">static</span> ContextImpl <span class="hljs-title function_">createSystemContext</span><span class="hljs-params">(ActivityThread mainThread)</span> &#123;<br><span class="hljs-comment">//创建LoadedApk对象，见[2.6.1.1]</span><br>    <span class="hljs-type">LoadedApk</span> <span class="hljs-variable">packageInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoadedApk</span>(mainThread);<br>    <span class="hljs-comment">//创建ContextImpl对象，见[2.6.1.2]</span><br>    <span class="hljs-type">ContextImpl</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContextImpl</span>(<span class="hljs-literal">null</span>, mainThread, packageInfo, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">null</span>);<br><span class="hljs-comment">//设置资源并更新资源配置</span><br>    context.setResources(packageInfo.getResources());<br>    context.mResources.updateConfiguration(context.mResourcesManager.getConfiguration(),<br>                                           context.mResourcesManager.getDisplayMetrics());<br>    <span class="hljs-keyword">return</span> context;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建LoadedApk对象和ContextImpl对象，并设置资源、更新资源配置。</p><h4 id="2-6-1-1-LoadedApk初始化"><a href="#2-6-1-1-LoadedApk初始化" class="headerlink" title="2.6.1.1 LoadedApk初始化"></a>2.6.1.1 LoadedApk初始化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/LoadedApk.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoadedApk</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ActivityThread mActivityThread;<br>    <span class="hljs-keyword">final</span> String mPackageName;<br>    <span class="hljs-keyword">private</span> ApplicationInfo mApplicationInfo;<br>    <span class="hljs-keyword">private</span> String mAppDir;<br>    <span class="hljs-keyword">private</span> String mResDir;<br>    <span class="hljs-keyword">private</span> String[] mOverlayDirs;<br>    <span class="hljs-keyword">private</span> String[] mSharedLibraries;<br>    <span class="hljs-keyword">private</span> String mDataDir;<br>    <span class="hljs-keyword">private</span> String mLibDir;<br>    <span class="hljs-keyword">private</span> File mDataDirFile;<br>    <span class="hljs-keyword">private</span> File mDeviceProtectedDataDirFile;<br>    <span class="hljs-keyword">private</span> File mCredentialProtectedDataDirFile;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ClassLoader mBaseClassLoader;<br>    ...<br>    Resources mResources;<br>    <span class="hljs-keyword">private</span> ClassLoader mClassLoader;<br>    <span class="hljs-keyword">private</span> Application mApplication;<br>    ...<br>    <span class="hljs-comment">// Create information about a new .apk</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">LoadedApk</span><span class="hljs-params">(ActivityThread activityThread, ApplicationInfo aInfo,</span><br><span class="hljs-params">            CompatibilityInfo compatInfo, ClassLoader baseLoader,</span><br><span class="hljs-params">            <span class="hljs-type">boolean</span> securityViolation, <span class="hljs-type">boolean</span> includeCode, <span class="hljs-type">boolean</span> registerPackage)</span> &#123;<br>        mActivityThread = activityThread;<br>        setApplicationInfo(aInfo);<br>        mPackageName = aInfo.packageName;<br>        mBaseClassLoader = baseLoader;<br>        mSecurityViolation = securityViolation;<br>        mIncludeCode = includeCode;<br>        mRegisterPackage = registerPackage;<br>        mDisplayAdjustments.setCompatibilityInfo(compatInfo);<br>    &#125;<br>    <br>    LoadedApk(ActivityThread activityThread) &#123;<br>        mActivityThread = activityThread;<span class="hljs-comment">//对应ActivityThread实例</span><br>        mApplicationInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationInfo</span>();<span class="hljs-comment">//创建ApplicationInfo对象，里面啥也没干</span><br>        mApplicationInfo.packageName = <span class="hljs-string">&quot;android&quot;</span>;<span class="hljs-comment">//默认包名为&quot;android&quot;</span><br>        mPackageName = <span class="hljs-string">&quot;android&quot;</span>;<br>        ...<br>        mClassLoader = ClassLoader.getSystemClassLoader();<span class="hljs-comment">//见https://gal2xy.github.io/2023/11/25/Android中的ClassLoader/</span><br>        mResources = Resources.getSystem();<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>LoadedApk主要是用来创建apk的相关信息，并集合成一个LoadedApk对象，其中相关信息包括：活动线程、包名、资源目录、共享库目录、类加载器等等。System Server进程走的是带一个参数的LoadedApk构造函数，其中比较重要的是将之前创建的ActivityThread实例赋值mActivityThread字段、创建ApplicationInfo对象、获取类加载器。</p><h4 id="2-6-1-2-ContextImpl初始化"><a href="#2-6-1-2-ContextImpl初始化" class="headerlink" title="2.6.1.2 ContextImpl初始化"></a>2.6.1.2 ContextImpl初始化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/ContextImpl.java</span><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">ContextImpl</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> ContextImpl container, <span class="hljs-meta">@NonNull</span> ActivityThread mainThread,</span><br><span class="hljs-params">                    <span class="hljs-meta">@NonNull</span> LoadedApk packageInfo, <span class="hljs-meta">@Nullable</span> String splitName,</span><br><span class="hljs-params">                    <span class="hljs-meta">@Nullable</span> IBinder activityToken, <span class="hljs-meta">@Nullable</span> UserHandle user, <span class="hljs-type">int</span> flags,</span><br><span class="hljs-params">                    <span class="hljs-meta">@Nullable</span> ClassLoader classLoader)</span> &#123;<br>    mOuterContext = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">if</span> ((flags &amp; (Context.CONTEXT_CREDENTIAL_PROTECTED_STORAGE<br>                  | Context.CONTEXT_DEVICE_PROTECTED_STORAGE)) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">File</span> <span class="hljs-variable">dataDir</span> <span class="hljs-operator">=</span> packageInfo.getDataDirFile();<br>        <span class="hljs-keyword">if</span> (Objects.equals(dataDir, packageInfo.getCredentialProtectedDataDirFile())) &#123;<br>            flags |= Context.CONTEXT_CREDENTIAL_PROTECTED_STORAGE;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (Objects.equals(dataDir, packageInfo.getDeviceProtectedDataDirFile())) &#123;<br>            flags |= Context.CONTEXT_DEVICE_PROTECTED_STORAGE;<br>        &#125;<br>    &#125;<br>    mMainThread = mainThread;<br>    mActivityToken = activityToken;<br>    mFlags = flags;<br><span class="hljs-comment">//设置当前进程的用户</span><br>    <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span>) &#123;<br>        user = Process.myUserHandle();<br>    &#125;<br>    mUser = user;<br><span class="hljs-comment">//将刚刚创建的LoadedApk实例赋给mPackageInfo</span><br>    mPackageInfo = packageInfo;<br>    mSplitName = splitName;<br>    mClassLoader = classLoader;<br>    mResourcesManager = ResourcesManager.getInstance();<br><span class="hljs-comment">//根据传入的上下文对象container是否为空来进行不同操作</span><br>    <span class="hljs-keyword">if</span> (container != <span class="hljs-literal">null</span>) &#123;<br>        mBasePackageName = container.mBasePackageName;<br>        mOpPackageName = container.mOpPackageName;<br>        setResources(container.mResources);<br>        mDisplay = container.mDisplay;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//将刚刚创建的LoadedApk实例的信息赋值某些字段</span><br>        mBasePackageName = packageInfo.mPackageName;<br>        <span class="hljs-type">ApplicationInfo</span> <span class="hljs-variable">ainfo</span> <span class="hljs-operator">=</span> packageInfo.getApplicationInfo();<span class="hljs-comment">//实际上是空的对象</span><br>        <span class="hljs-keyword">if</span> (ainfo.uid == Process.SYSTEM_UID &amp;&amp; ainfo.uid != Process.myUid()) &#123;<br>            mOpPackageName = ActivityThread.currentPackageName();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            mOpPackageName = mBasePackageName;<br>        &#125;<br>    &#125;<br>    mContentResolver = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ApplicationContentResolver</span>(<span class="hljs-built_in">this</span>, mainThread, user);<br>&#125;<br></code></pre></td></tr></table></figure><p>传入的参数mainThread为之前创建的ActivityThread实例、参数packageInfo为刚刚创建的LoadedApk实例。</p><p>整个代码实际上是利用刚刚创建的LoadedApk实例来创建ContextImpl实例。</p><h2 id="2-7-ContextImpl-createAppContext"><a href="#2-7-ContextImpl-createAppContext" class="headerlink" title="2.7 ContextImpl.createAppContext()"></a>2.7 ContextImpl.createAppContext()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/ContextImpl.java</span><br><span class="hljs-keyword">static</span> ContextImpl <span class="hljs-title function_">createAppContext</span><span class="hljs-params">(ActivityThread mainThread, LoadedApk packageInfo)</span> &#123;<br>    <span class="hljs-keyword">if</span> (packageInfo == <span class="hljs-literal">null</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;packageInfo&quot;</span>);<br>    <span class="hljs-comment">//见[2.6.1.2]</span><br>    <span class="hljs-type">ContextImpl</span> <span class="hljs-variable">context</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContextImpl</span>(<span class="hljs-literal">null</span>, mainThread, packageInfo, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">null</span>);<br>    context.setResources(packageInfo.getResources());<span class="hljs-comment">//设置app资源</span><br>    <span class="hljs-keyword">return</span> context;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要注意，传入的参数mainThread为之前创建的ActivityThread实例，参数packageInfo是ContextImpl实例（在2.6.1.2中创建的）中的mpackageInfo（在2.6.1.1中创建的）。</p><p>调用ContextImpl的构造函数再创建一次ContextImpl实例！？是因为一个是SystemContext一个是AppContext的缘故？</p><h2 id="2-8-makeApplication"><a href="#2-8-makeApplication" class="headerlink" title="2.8 makeApplication()"></a>2.8 makeApplication()</h2><p>在2.5中通过<code>context.mPackageInfo.makeApplication(true, null)</code>调用该方法，context.mPackageInfo是刚刚创建的LoadedApk实例（在2.6.1.1中创建的）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/LoadedApk.java</span><br><span class="hljs-keyword">public</span> Application <span class="hljs-title function_">makeApplication</span><span class="hljs-params">(<span class="hljs-type">boolean</span> forceDefaultAppClass,</span><br><span class="hljs-params">                                   Instrumentation instrumentation)</span> &#123;<br>    <span class="hljs-comment">//保证一个LoadedApk对象只创建一个对应的Application对象</span><br>    <span class="hljs-keyword">if</span> (mApplication != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> mApplication;<br>    &#125;<br>...<br>    <span class="hljs-type">Application</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">appClass</span> <span class="hljs-operator">=</span> mApplicationInfo.className;<br>    <span class="hljs-keyword">if</span> (forceDefaultAppClass || (appClass == <span class="hljs-literal">null</span>)) &#123;<span class="hljs-comment">//传入的参数为true，进入该分支</span><br>        appClass = <span class="hljs-string">&quot;android.app.Application&quot;</span>;<span class="hljs-comment">//system_server进程进入该分支</span><br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//获取类加载器，见[2.9]</span><br>        java.lang.<span class="hljs-type">ClassLoader</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> getClassLoader();<br>        <span class="hljs-keyword">if</span> (!mPackageName.equals(<span class="hljs-string">&quot;android&quot;</span>)) &#123;<span class="hljs-comment">//在之前流程可知默认android，显然不进入此分支</span><br>            initializeJavaContextClassLoader();<br>        &#125;<br>        <span class="hljs-type">ContextImpl</span> <span class="hljs-variable">appContext</span> <span class="hljs-operator">=</span> ContextImpl.createAppContext(mActivityThread, <span class="hljs-built_in">this</span>);<br>        <span class="hljs-comment">//创建Application对象，见[2.10]</span><br>        app = mActivityThread.mInstrumentation.newApplication(cl, appClass, appContext);<br>        appContext.setOuterContext(app);<br>    &#125; <br>    ...<br>    mActivityThread.mAllApplications.add(app);<span class="hljs-comment">//加入到Application列表中，之前说个一个进程可以有多个app</span><br>    mApplication = app;<span class="hljs-comment">//将刚刚创建的Application对象app赋值给mApplication</span><br>    <span class="hljs-keyword">if</span> (instrumentation != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//传入的instrumentation为null，不进入此分支</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            instrumentation.callApplicationOnCreate(app);<br>        &#125; <br>        ...<br>    &#125;<br>    ...<br>    <span class="hljs-keyword">return</span> app;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要是获取appClass、创建类加载器和appContext，利用这些来创建Application对象。</p><h2 id="2-9-getClassLoader"><a href="#2-9-getClassLoader" class="headerlink" title="2.9 getClassLoader()"></a>2.9 getClassLoader()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/LoadedApk.java</span><br><span class="hljs-keyword">public</span> ClassLoader <span class="hljs-title function_">getClassLoader</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>        <span class="hljs-keyword">if</span> (mClassLoader == <span class="hljs-literal">null</span>) &#123;<br>            createOrUpdateClassLoaderLocked(<span class="hljs-literal">null</span> <span class="hljs-comment">/*addedPaths*/</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> mClassLoader;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果类加载器不为空则调用<code>createOrUpdateClassLoaderLocked()</code>方法。</p><h3 id="2-9-1-createOrUpdateClassLoaderLocked"><a href="#2-9-1-createOrUpdateClassLoaderLocked" class="headerlink" title="2.9.1 createOrUpdateClassLoaderLocked()"></a>2.9.1 createOrUpdateClassLoaderLocked()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/LoadedApk.java</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">createOrUpdateClassLoaderLocked</span><span class="hljs-params">(List&lt;String&gt; addedPaths)</span> &#123;<br>        <span class="hljs-keyword">if</span> (mPackageName.equals(<span class="hljs-string">&quot;android&quot;</span>)) &#123;<span class="hljs-comment">//System Server进程进入该分支</span><br>            <span class="hljs-keyword">if</span> (mClassLoader != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (mBaseClassLoader != <span class="hljs-literal">null</span>) &#123;<br>                mClassLoader = mBaseClassLoader;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                mClassLoader = ClassLoader.getSystemClassLoader();<span class="hljs-comment">//如果是System Server进程则到这</span><br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    <span class="hljs-comment">//mPackageName不为&quot;android&quot;</span><br>        ...<br>        <span class="hljs-keyword">if</span> (mRegisterPackage) &#123;<br>            ...<br>                <span class="hljs-comment">//添加包依赖，见[2.9.2]</span><br>                ActivityManager.getService().addPackageDependency(mPackageName);<br>            ...<br>        &#125;<br>        <span class="hljs-comment">// Lists for the elements of zip/code and native libraries.</span><br>        <span class="hljs-keyword">final</span> List&lt;String&gt; zipPaths = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">final</span> List&lt;String&gt; libPaths = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">10</span>);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isBundledApp</span> <span class="hljs-operator">=</span> mApplicationInfo.isSystemApp() &amp;&amp; !mApplicationInfo.isUpdatedSystemApp();<br>        <span class="hljs-comment">//构建路径，见[2.9.3]</span><br>    makePaths(mActivityThread, isBundledApp, mApplicationInfo, zipPaths, libPaths);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">libraryPermittedPath</span> <span class="hljs-operator">=</span> mDataDir;<br>        <span class="hljs-keyword">if</span> (isBundledApp) &#123;<br>            libraryPermittedPath += File.pathSeparator + System.getProperty(<span class="hljs-string">&quot;java.library.path&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">librarySearchPath</span> <span class="hljs-operator">=</span> TextUtils.join(File.pathSeparator, libPaths);<br>        <span class="hljs-keyword">if</span> (!mIncludeCode) &#123;<span class="hljs-comment">//构造函数中mIncludeCode为true</span><br>            ...<br>        &#125;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">zip</span> <span class="hljs-operator">=</span> (zipPaths.size() == <span class="hljs-number">1</span>) ? zipPaths.get(<span class="hljs-number">0</span>) : TextUtils.join(File.pathSeparator, zipPaths);<br>...<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">needToSetupJitProfiles</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">if</span> (mClassLoader == <span class="hljs-literal">null</span>) &#123;<br>            ...<br>            <span class="hljs-comment">////见[2.9.4]</span><br>            mClassLoader = ApplicationLoaders.getDefault().getClassLoader(zip,<br>                    mApplicationInfo.targetSdkVersion, isBundledApp, librarySearchPath,<br>                    libraryPermittedPath, mBaseClassLoader);<br>            ...<br>        &#125;<br>    ...<br>        <span class="hljs-comment">// Setup jit profile support.</span><br>        ...<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="2-9-2-ActivityManagerService-addPackageDependency"><a href="#2-9-2-ActivityManagerService-addPackageDependency" class="headerlink" title="2.9.2 ActivityManagerService.addPackageDependency()"></a>2.9.2 ActivityManagerService.addPackageDependency()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addPackageDependency</span><span class="hljs-params">(String packageName)</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>        <span class="hljs-comment">//获取调用该方法的进程id</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">callingPid</span> <span class="hljs-operator">=</span> Binder.getCallingPid();<br>        <span class="hljs-comment">//调用该方法的进程的 PID 和当前进程的 PID 相同，说明是在当前进程内部调用该方法，直接返回</span><br>        <span class="hljs-keyword">if</span> (callingPid == myPid()) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        ProcessRecord proc;<br>        <span class="hljs-keyword">synchronized</span> (mPidsSelfLocked) &#123;<br>            <span class="hljs-comment">//根据调用该方法的进程id获取对应进程记录</span><br>            proc = mPidsSelfLocked.get(Binder.getCallingPid());<br>        &#125;<br>        <span class="hljs-keyword">if</span> (proc != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//成功获取到该进程的记录</span><br>            <span class="hljs-keyword">if</span> (proc.pkgDeps == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//该进程的包名依赖为空</span><br>                proc.pkgDeps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArraySet</span>&lt;String&gt;(<span class="hljs-number">1</span>);<br>            &#125;<br>            proc.pkgDeps.add(packageName);<span class="hljs-comment">//添加包名依赖</span><br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-9-3-makePaths"><a href="#2-9-3-makePaths" class="headerlink" title="2.9.3 makePaths()"></a>2.9.3 makePaths()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/LoadedApk.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">makePaths</span><span class="hljs-params">(ActivityThread activityThread,</span><br><span class="hljs-params">                             <span class="hljs-type">boolean</span> isBundledApp,</span><br><span class="hljs-params">                             ApplicationInfo aInfo,</span><br><span class="hljs-params">                             List&lt;String&gt; outZipPaths,</span><br><span class="hljs-params">                             List&lt;String&gt; outLibPaths)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">appDir</span> <span class="hljs-operator">=</span> aInfo.sourceDir;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">libDir</span> <span class="hljs-operator">=</span> aInfo.nativeLibraryDir;<br>    <span class="hljs-keyword">final</span> String[] sharedLibraries = aInfo.sharedLibraryFiles;<br><br>    outZipPaths.clear();<br>    outZipPaths.add(appDir);<br><br>    <span class="hljs-comment">// Do not load all available splits if the app requested isolated split loading.</span><br>    <span class="hljs-keyword">if</span> (aInfo.splitSourceDirs != <span class="hljs-literal">null</span> &amp;&amp; !aInfo.requestsIsolatedSplitLoading()) &#123;<br>        Collections.addAll(outZipPaths, aInfo.splitSourceDirs);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (outLibPaths != <span class="hljs-literal">null</span>) &#123;<br>        outLibPaths.clear();<br>    &#125;<br><br>    String[] instrumentationLibs = <span class="hljs-literal">null</span>;<br>    <span class="hljs-comment">// activityThread will be null when called from the WebView zygote; just assume</span><br>    <span class="hljs-comment">// no instrumentation applies in this case.</span><br>    <span class="hljs-keyword">if</span> (activityThread != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">instrumentationPackageName</span> <span class="hljs-operator">=</span> activityThread.mInstrumentationPackageName;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">instrumentationAppDir</span> <span class="hljs-operator">=</span> activityThread.mInstrumentationAppDir;<br>        String[] instrumentationSplitAppDirs = activityThread.mInstrumentationSplitAppDirs;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">instrumentationLibDir</span> <span class="hljs-operator">=</span> activityThread.mInstrumentationLibDir;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">instrumentedAppDir</span> <span class="hljs-operator">=</span> activityThread.mInstrumentedAppDir;<br>        String[] instrumentedSplitAppDirs = activityThread.mInstrumentedSplitAppDirs;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">instrumentedLibDir</span> <span class="hljs-operator">=</span> activityThread.mInstrumentedLibDir;<br><br>        <span class="hljs-keyword">if</span> (appDir.equals(instrumentationAppDir)<br>            || appDir.equals(instrumentedAppDir)) &#123;<br>            outZipPaths.clear();<br>            outZipPaths.add(instrumentationAppDir);<br><br>            <span class="hljs-comment">// Only add splits if the app did not request isolated split loading.</span><br>            <span class="hljs-keyword">if</span> (!aInfo.requestsIsolatedSplitLoading()) &#123;<br>                <span class="hljs-keyword">if</span> (instrumentationSplitAppDirs != <span class="hljs-literal">null</span>) &#123;<br>                    Collections.addAll(outZipPaths, instrumentationSplitAppDirs);<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (!instrumentationAppDir.equals(instrumentedAppDir)) &#123;<br>                    outZipPaths.add(instrumentedAppDir);<br>                    <span class="hljs-keyword">if</span> (instrumentedSplitAppDirs != <span class="hljs-literal">null</span>) &#123;<br>                        Collections.addAll(outZipPaths, instrumentedSplitAppDirs);<br>                    &#125;<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (outLibPaths != <span class="hljs-literal">null</span>) &#123;<br>                outLibPaths.add(instrumentationLibDir);<br>                <span class="hljs-keyword">if</span> (!instrumentationLibDir.equals(instrumentedLibDir)) &#123;<br>                    outLibPaths.add(instrumentedLibDir);<br>                &#125;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (!instrumentedAppDir.equals(instrumentationAppDir)) &#123;<br>                instrumentationLibs = getLibrariesFor(instrumentationPackageName);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (outLibPaths != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (outLibPaths.isEmpty()) &#123;<br>            outLibPaths.add(libDir);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (aInfo.primaryCpuAbi != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//目标sdk版本 &lt; Android 7的sdk版本</span><br>            <span class="hljs-keyword">if</span> (aInfo.targetSdkVersion &lt; Build.VERSION_CODES.N) &#123;<br>                outLibPaths.add(<span class="hljs-string">&quot;/system/fake-libs&quot;</span> + (VMRuntime.is64BitAbi(aInfo.primaryCpuAbi) ? <span class="hljs-string">&quot;64&quot;</span> : <span class="hljs-string">&quot;&quot;</span>));<br>            &#125;<br>            <span class="hljs-keyword">for</span> (String apk : outZipPaths) &#123;<br>                outLibPaths.add(apk + <span class="hljs-string">&quot;!/lib/&quot;</span> + aInfo.primaryCpuAbi);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (isBundledApp) &#123;<br>            outLibPaths.add(System.getProperty(<span class="hljs-string">&quot;java.library.path&quot;</span>));<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//遍历sharedLibraries的Lib库，未包含在其中的则添加到outZipPaths中，如果需要还可以添加到outLibPaths</span><br>    <span class="hljs-keyword">if</span> (sharedLibraries != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">for</span> (String lib : sharedLibraries) &#123;<br>            <span class="hljs-keyword">if</span> (!outZipPaths.contains(lib)) &#123;<br>                outZipPaths.add(<span class="hljs-number">0</span>, lib);<br>                appendApkLibPathIfNeeded(lib, aInfo, outLibPaths);<br>            &#125;<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//遍历instrumentation的Lib库，未包含在其中的则添加到outZipPaths中，如果需要还可以添加到outLibPaths</span><br>    ...逻辑同上<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-9-4-ApplicationLoader-getClassLoader"><a href="#2-9-4-ApplicationLoader-getClassLoader" class="headerlink" title="2.9.4 ApplicationLoader.getClassLoader()"></a>2.9.4 ApplicationLoader.getClassLoader()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/ApplicationLoaders.java</span><br>ClassLoader <span class="hljs-title function_">getClassLoader</span><span class="hljs-params">(String zip, <span class="hljs-type">int</span> targetSdkVersion, <span class="hljs-type">boolean</span> isBundled, String librarySearchPath, String libraryPermittedPath, ClassLoader parent)</span> &#123;<br>    <span class="hljs-keyword">return</span> getClassLoader(zip, targetSdkVersion, isBundled, librarySearchPath, libraryPermittedPath, parent, zip);<br>&#125;<br><br><span class="hljs-keyword">private</span> ClassLoader <span class="hljs-title function_">getClassLoader</span><span class="hljs-params">(String zip, <span class="hljs-type">int</span> targetSdkVersion, <span class="hljs-type">boolean</span> isBundled,</span><br><span class="hljs-params">                                   String librarySearchPath, String libraryPermittedPath,</span><br><span class="hljs-params">                                   ClassLoader parent, String cacheKey)</span> &#123;<br><span class="hljs-comment">//获取父加载器</span><br>    <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">baseParent</span> <span class="hljs-operator">=</span> ClassLoader.getSystemClassLoader().getParent();<br><br>    <span class="hljs-keyword">synchronized</span> (mLoaders) &#123;<br>        <span class="hljs-keyword">if</span> (parent == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//走这</span><br>            parent = baseParent;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (parent == baseParent) &#123;<span class="hljs-comment">//进而走这</span><br>            <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> mLoaders.get(cacheKey);<br>            <span class="hljs-keyword">if</span> (loader != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-keyword">return</span> loader;<br>            &#125;<br>            <span class="hljs-comment">//创建pathClassloader对象</span><br>            <span class="hljs-type">PathClassLoader</span> <span class="hljs-variable">pathClassloader</span> <span class="hljs-operator">=</span> PathClassLoaderFactory.createClassLoader(<br>                zip,<br>                librarySearchPath,<br>                libraryPermittedPath,<br>                parent,<br>                targetSdkVersion,<br>                isBundled);<br>            <span class="hljs-comment">//native方法</span><br>            setupVulkanLayerPath(pathClassloader, librarySearchPath);<br>            mLoaders.put(cacheKey, pathClassloader);<br>            <span class="hljs-keyword">return</span> pathClassloader;<br>        &#125;<br>        <span class="hljs-type">PathClassLoader</span> <span class="hljs-variable">pathClassloader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PathClassLoader</span>(zip, parent);<br>        <span class="hljs-keyword">return</span> pathClassloader;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>传入的参数parent（ClassLoader对象）为mBaseClassLoader，在SystemServer进程中LoadedApk初始化时是为null的，所以走<code>if (parent == null) </code>分支，进而走<code>if (parent == baseParent) </code>分支。</p><h2 id="2-10-newApplication"><a href="#2-10-newApplication" class="headerlink" title="2.10 newApplication()"></a>2.10 newApplication()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/Instrumentation.java</span><br><span class="hljs-keyword">public</span> Application <span class="hljs-title function_">newApplication</span><span class="hljs-params">(ClassLoader cl, String className, Context context)</span> <span class="hljs-keyword">throws</span> InstantiationException, IllegalAccessException, ClassNotFoundException &#123;<br>    <span class="hljs-keyword">return</span> newApplication(cl.loadClass(className), context);<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> Application <span class="hljs-title function_">newApplication</span><span class="hljs-params">(Class&lt;?&gt; clazz, Context context)</span> <span class="hljs-keyword">throws</span> InstantiationException, IllegalAccessException, ClassNotFoundException &#123;<br>    <span class="hljs-type">Application</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> (Application)clazz.newInstance();<br>    app.attach(context);<br>    <span class="hljs-keyword">return</span> app;<br>&#125;<br></code></pre></td></tr></table></figure><p>传入的参数cl是在 2.9 处获得的PathClassLoader对象，参数className对应要加载的Application类（”android.app.Application”），最后通过反射获取到该类，然后调用<code>newInstance()</code>方法实例化Application。</p><h3 id="2-10-1-Application-attach"><a href="#2-10-1-Application-attach" class="headerlink" title="2.10.1 Application.attach()"></a>2.10.1 Application.attach()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/Application.java</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attach</span><span class="hljs-params">(Context context)</span> &#123;<br>    attachBaseContext(context);<br>    mLoadedApk = ContextImpl.getImpl(context).mPackageInfo;<br>&#125;<br><br><span class="hljs-comment">//路径：/frameworks/base/core/java/android/content/ContextWrapper.java</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attachBaseContext</span><span class="hljs-params">(Context base)</span> &#123;<br>    <span class="hljs-keyword">if</span> (mBase != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(<span class="hljs-string">&quot;Base context already set&quot;</span>);<br>    &#125;<br>    mBase = base;<br>&#125;<br></code></pre></td></tr></table></figure><p>该方法主要功能:</p><ol><li>将新创建的ContextImpl对象（2.8中创建的appContext）保存到Application的父类成员变量mBase;</li><li>将新创建的LoadedApk对象（2.8中创建的appContext中的mPackageInfo对象）保存到Application的父员变量mLoadedApk;</li></ol><h1 id="三、App进程"><a href="#三、App进程" class="headerlink" title="三、App进程"></a>三、App进程</h1><p>在<a href="https://gal2xy.github.io/2023/07/17/Android%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B(%E4%B8%80)/">Android应用程序启动流程(一)</a>一文中，应用程序同样也通过回调函数<code>Zygote.MethodAndArgsCaller()</code>进入到App运行阶段，即回调<code>ActivityThread.main()</code>方法。</p><h2 id="3-1-ActivityThread-main"><a href="#3-1-ActivityThread-main" class="headerlink" title="3.1 ActivityThread.main()"></a>3.1 ActivityThread.main()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/ActivityThread.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    ...<br><span class="hljs-comment">//创建线程并将当前线程附加到ActivityThread，参数false表示不使用新线程</span><br>    <span class="hljs-type">ActivityThread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActivityThread</span>();<br>    thread.attach(<span class="hljs-literal">false</span>);<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>在该方法中调用了<code>thread.attach()</code>方法。</p><h2 id="3-2-ActivityThread-attach"><a href="#3-2-ActivityThread-attach" class="headerlink" title="3.2 ActivityThread.attach()"></a>3.2 ActivityThread.attach()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/ActivityThread.java</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attach</span><span class="hljs-params">(<span class="hljs-type">boolean</span> system)</span> &#123;<br>    sCurrentActivityThread = <span class="hljs-built_in">this</span>;<br>    mSystemThread = system;<br>    <span class="hljs-keyword">if</span> (!system) &#123;<span class="hljs-comment">//非系统进程进入此分支</span><br>        <span class="hljs-comment">//初始化RuntimeInit.mApplicationObject值</span><br>        RuntimeInit.setApplicationObject(mAppThread.asBinder());<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">IActivityManager</span> <span class="hljs-variable">mgr</span> <span class="hljs-operator">=</span> ActivityManager.getService();<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//见[3.3]</span><br>            mgr.attachApplication(mAppThread);<br>        &#125; <br>        ...<br>    &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//系统进程进入此分支</span><br>        ...<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>重点是<code>mgr.attachApplication(mAppThread)</code>。</p><h2 id="3-3-ActivityManagerService-attachApplication"><a href="#3-3-ActivityManagerService-attachApplication" class="headerlink" title="3.3 ActivityManagerService.attachApplication()"></a>3.3 ActivityManagerService.attachApplication()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">attachApplication</span><span class="hljs-params">(IApplicationThread thread)</span> &#123;<br>    <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>        <span class="hljs-comment">//获取调用该方法的进程的pid</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">callingPid</span> <span class="hljs-operator">=</span> Binder.getCallingPid();<br>        <span class="hljs-comment">//临时清除调用者的身份信息,返回唯一标识符以便后续恢复调用者身份</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">origId</span> <span class="hljs-operator">=</span> Binder.clearCallingIdentity();<br>        <span class="hljs-comment">//给进程附加Application，见[3.4]</span><br>        attachApplicationLocked(thread, callingPid);<br>        <span class="hljs-comment">//恢复之前清除的调用者身份</span><br>        Binder.restoreCallingIdentity(origId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着调用<code>attachApplicationLocked()</code>方法给进程附加Application。</p><h2 id="3-4-attachApplicationLocked"><a href="#3-4-attachApplicationLocked" class="headerlink" title="3.4 attachApplicationLocked()"></a>3.4 attachApplicationLocked()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">attachApplicationLocked</span><span class="hljs-params">(IApplicationThread thread, <span class="hljs-type">int</span> pid)</span> &#123;<br>    ProcessRecord app;<br>    <span class="hljs-type">long</span> <span class="hljs-variable">startTime</span> <span class="hljs-operator">=</span> SystemClock.uptimeMillis();<br>    <span class="hljs-keyword">if</span> (pid != MY_PID &amp;&amp; pid &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">synchronized</span> (mPidsSelfLocked) &#123;<br>            app = mPidsSelfLocked.get(pid);<span class="hljs-comment">//根据pid获取application record</span><br>        &#125;<br>    &#125;<br>    ...<br>    <span class="hljs-keyword">try</span> &#123;<br>        ...<br>        <span class="hljs-type">ApplicationInfo</span> <span class="hljs-variable">appInfo</span> <span class="hljs-operator">=</span> app.instr != <span class="hljs-literal">null</span> ? app.instr.mTargetInfo : app.info;<br>        ...<br>        <span class="hljs-keyword">if</span> (app.instr != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//见[3.5]</span><br>            thread.bindApplication(processName, appInfo, providers,<br>                                   app.instr.mClass,<br>                                   profilerInfo, app.instr.mArguments,<br>                                   app.instr.mWatcher,<br>                                   app.instr.mUiAutomationConnection, testMode,<br>                                   mBinderTransactionTrackingEnabled, enableTrackAllocation,<br>                                   isRestrictedBackupMode || !normalMode, app.persistent,<br>                                   <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>(getGlobalConfiguration()), app.compat,<br>                                   getCommonServicesLocked(app.isolated),<br>                                   mCoreSettingsObserver.getCoreSettingsLocked(),<br>                                   buildSerial);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//也是调用thread.bindApplication(),只不过参数不同</span><br>            ...<br>        &#125;<br><br>        ...<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>代码很长，这里只关注<code>thread.bindApplication()</code>方法。</p><h2 id="3-5-ActivityThread-bindApplication"><a href="#3-5-ActivityThread-bindApplication" class="headerlink" title="3.5 ActivityThread.bindApplication()"></a>3.5 ActivityThread.bindApplication()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/ActivityThread.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">bindApplication</span><span class="hljs-params">(String processName, ApplicationInfo appInfo,</span><br><span class="hljs-params">                                  List&lt;ProviderInfo&gt; providers, ComponentName instrumentationName,</span><br><span class="hljs-params">                                  ProfilerInfo profilerInfo, Bundle instrumentationArgs,</span><br><span class="hljs-params">                                  IInstrumentationWatcher instrumentationWatcher,</span><br><span class="hljs-params">                                  IUiAutomationConnection instrumentationUiConnection, <span class="hljs-type">int</span> debugMode,</span><br><span class="hljs-params">                                  <span class="hljs-type">boolean</span> enableBinderTracking, <span class="hljs-type">boolean</span> trackAllocation,</span><br><span class="hljs-params">                                  <span class="hljs-type">boolean</span> isRestrictedBackupMode, <span class="hljs-type">boolean</span> persistent, Configuration config,</span><br><span class="hljs-params">                                  CompatibilityInfo compatInfo, Map services, Bundle coreSettings,</span><br><span class="hljs-params">                                  String buildSerial)</span> &#123;<br><br>    <span class="hljs-comment">//给AppBindData实例（data）进行一系列赋值</span><br>    ...<br>    <br>    sendMessage(H.BIND_APPLICATION, data);<br>&#125;<br></code></pre></td></tr></table></figure><p>对data对象进行了一系列的赋值，最终调用<code>sendMessage()</code>方法将<code>BIND_APPLICATION</code>消息添加到消息队列中，接着我们就需要看ActivityThread的<code>handleMessage()</code>方法了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/ActivityThread.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(Message msg)</span> &#123;<br>    <span class="hljs-keyword">switch</span> (msg.what) &#123;<br>        ...<br>        <span class="hljs-keyword">case</span> BIND_APPLICATION:<br><span class="hljs-type">AppBindData</span> <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> (AppBindData)msg.obj;<br>            <span class="hljs-comment">//见[3.6]</span><br>            handleBindApplication(data);<br>            <span class="hljs-keyword">break</span>;<br>        ...<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>主线程接收到<code>BIND_APPLICATION</code>消息，执行<code>handleBindApplication()</code>方法。</p><h2 id="3-6-handleBindApplication"><a href="#3-6-handleBindApplication" class="headerlink" title="3.6 handleBindApplication()"></a>3.6 handleBindApplication()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/ActivityThread.java</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleBindApplication</span><span class="hljs-params">(AppBindData data)</span> &#123;<br>    ...<br>    mBoundApplication = data;<br>    ...<br>    <span class="hljs-comment">//获取LoadedApk对象,见[3.7]</span><br>    data.info = getPackageInfoNoCheck(data.appInfo, data.compatInfo);<br>...<br>    <span class="hljs-comment">//创建appContext，见[2.7]</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ContextImpl</span> <span class="hljs-variable">appContext</span> <span class="hljs-operator">=</span> ContextImpl.createAppContext(<span class="hljs-built_in">this</span>, data.info);<br>    ...<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//此处data.info指LoadedApk, 通过反射创建目标应用Application对象，见[2.8]</span><br>        <span class="hljs-type">Application</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> data.info.makeApplication(data.restrictedBackupMode, <span class="hljs-literal">null</span>);<br>        mInitialApplication = app;<br>        ...<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//调用的是空方法，啥也没干,见[3.6.1]</span><br>            mInstrumentation.onCreate(data.instrumentationArgs);<br>        &#125;<br>        ...<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//见[3.6.1]</span><br>            mInstrumentation.callApplicationOnCreate(app);<br>        &#125; <br>        ...<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        StrictMode.setThreadPolicy(savedPolicy);<br>    &#125;<br>    <span class="hljs-comment">// Preload fonts resources</span><br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><p>主要是获取LoadedApk对象，借此创建ContextImpl对象（appContext）以及Application对象（app），并将创建好的app赋值给ActivityThread的mInitialApplication字段。</p><h3 id="3-6-1-callApplicationOnCreate"><a href="#3-6-1-callApplicationOnCreate" class="headerlink" title="3.6.1 callApplicationOnCreate()"></a>3.6.1 callApplicationOnCreate()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">/frameworks/base/core/java/android/app/Instrumentation.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">callApplicationOnCreate</span><span class="hljs-params">(Application app)</span> &#123;<br>    app.onCreate();<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle arguments)</span> &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-7-getPackageInfoNoCheck"><a href="#3-7-getPackageInfoNoCheck" class="headerlink" title="3.7 getPackageInfoNoCheck()"></a>3.7 getPackageInfoNoCheck()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/ActivityThread.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> LoadedApk <span class="hljs-title function_">getPackageInfoNoCheck</span><span class="hljs-params">(ApplicationInfo ai, CompatibilityInfo compatInfo)</span> &#123;<br>    <span class="hljs-keyword">return</span> getPackageInfo(ai, compatInfo, <span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>, <span class="hljs-literal">false</span>);<br>&#125;<br><br><span class="hljs-keyword">private</span> LoadedApk <span class="hljs-title function_">getPackageInfo</span><span class="hljs-params">(ApplicationInfo aInfo, CompatibilityInfo compatInfo,</span><br><span class="hljs-params">                                 ClassLoader baseLoader, <span class="hljs-type">boolean</span> securityViolation, <span class="hljs-type">boolean</span> includeCode,</span><br><span class="hljs-params">                                 <span class="hljs-type">boolean</span> registerPackage)</span> &#123;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">differentUser</span> <span class="hljs-operator">=</span> (UserHandle.myUserId() != UserHandle.getUserId(aInfo.uid));<br>    <span class="hljs-keyword">synchronized</span> (mResourcesManager) &#123;<br>        WeakReference&lt;LoadedApk&gt; ref;<br>        <span class="hljs-comment">// 根据不同的情况获取缓存的LoadedApk对象</span><br>        <span class="hljs-keyword">if</span> (differentUser) &#123;<br>            <span class="hljs-comment">// Caching not supported across users</span><br>            ref = <span class="hljs-literal">null</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (includeCode) &#123;<br>            ref = mPackages.get(aInfo.packageName);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ref = mResourcePackages.get(aInfo.packageName);<br>        &#125;<br><br>        <span class="hljs-type">LoadedApk</span> <span class="hljs-variable">packageInfo</span> <span class="hljs-operator">=</span> ref != <span class="hljs-literal">null</span> ? ref.get() : <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (packageInfo == <span class="hljs-literal">null</span> || (packageInfo.mResources != <span class="hljs-literal">null</span><br>                                    &amp;&amp; !packageInfo.mResources.getAssets().isUpToDate())) &#123;<br>            ...<br>            <span class="hljs-comment">//创建LoadedApk对象</span><br>            packageInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LoadedApk</span>(<span class="hljs-built_in">this</span>, aInfo, compatInfo, baseLoader,<br>                              securityViolation, includeCode &amp;&amp;<br>                              (aInfo.flags&amp;ApplicationInfo.FLAG_HAS_CODE) != <span class="hljs-number">0</span>, registerPackage);<br><br>            <span class="hljs-keyword">if</span> (mSystemThread &amp;&amp; <span class="hljs-string">&quot;android&quot;</span>.equals(aInfo.packageName)) &#123;<br>               <span class="hljs-comment">//见[3.7.1]</span><br>                packageInfo.installSystemApplicationInfo(aInfo,<br>                                                         getSystemContext().mPackageInfo.getClassLoader());<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (differentUser) &#123;<br>                <span class="hljs-comment">// Caching not supported across users</span><br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (includeCode) &#123;<br>                <span class="hljs-comment">//更新mPackages，即将刚创建的packageInfo加入</span><br>                mPackages.put(aInfo.packageName,<br>                              <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakReference</span>&lt;LoadedApk&gt;(packageInfo));<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                mResourcePackages.put(aInfo.packageName,<br>                                      <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakReference</span>&lt;LoadedApk&gt;(packageInfo));<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> packageInfo;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建LoadedApk对象，并将将新创建的LoadedApk加入到mPackages。也就是说每个app都会创建唯一的LoadedApk对象。此处aInfo来源于ProcessRecord.info变量，也就是进程中的第一个app。</p><h3 id="3-7-1-installSystemApplicationInfo"><a href="#3-7-1-installSystemApplicationInfo" class="headerlink" title="3.7.1 installSystemApplicationInfo()"></a>3.7.1 installSystemApplicationInfo()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/LoadedApk.java</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">installSystemApplicationInfo</span><span class="hljs-params">(ApplicationInfo info, ClassLoader classLoader)</span> &#123;<br>    <span class="hljs-keyword">assert</span> info.packageName.equals(<span class="hljs-string">&quot;android&quot;</span>);<br>    mApplicationInfo = info;<br>    mClassLoader = classLoader;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二个参数通过<code>getSystemContext().mPackageInfo.getClassLoader()</code>获取的，对应LoadedApk对象中的ClassLoader。代码中很明显的一个特征就是比对packageName是否为”android”，而在System Server进程中创建的LoadedApk对象默认packageName为”android”。</p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>LoadedApk与Application一一对应，Application借助LoadedApk创建的，并存放在LoadedApk的mApplication字段，而在创建Application的过程中，也将LoadedApk存放在Application的mLoadedApk字段（互相包含！？）。最后返回Application的时候，也将Application存放在ActivityThread中的mInitialApplication字段。</p><p>接下来借用gityuan的两种流程图：</p><ul><li><p>System Server进程创建Application</p><p><img src="https://gityuan.com/images/application/system_application.jpg"></p></li><li><p>App进程创建Application</p><p><img src="https://gityuan.com/images/application/app_application.jpg"></p></li></ul><hr><p>参考：</p><p><a href="http://androidxref.com/8.0.0_r4/xref/">http://androidxref.com/8.0.0_r4/xref/</a></p><p><a href="https://gityuan.com/2017/04/02/android-application/">https://gityuan.com/2017/04/02/android-application/</a></p><p><a href="https://phantomvk.github.io/2019/07/23/Android_Application_class/">https://phantomvk.github.io/2019/07/23/Android_Application_class/</a></p><p><a href="https://ljd1996.github.io/2019/12/16/Android-Application/">https://ljd1996.github.io/2019/12/16/Android-Application/</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Application</tag>
      
      <tag>Android源码解析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android中的ClassLoader</title>
    <link href="/2023/11/25/Android%E4%B8%AD%E7%9A%84ClassLoader/"/>
    <url>/2023/11/25/Android%E4%B8%AD%E7%9A%84ClassLoader/</url>
    
    <content type="html"><![CDATA[<h1 id="一、ClassLoader的类型"><a href="#一、ClassLoader的类型" class="headerlink" title="一、ClassLoader的类型"></a>一、ClassLoader的类型</h1><p>java中的ClassLoader和Android中的ClassLoader并不完全相同，因为java的可执行文件为class文件，而Android的可执行文件为dex文件，他们所加载的文件不同，因而所使用的ClassLoader也不相同。</p><p>Android中的ClassLoader分为两种类型，分别如下：</p><ol><li>系统类加载器：BootClassLoader、PathClassLoader、DexClassLoader。</li><li>自定义加载器，即继承自系统的类加载器。</li></ol><h2 id="1-1-BootClassLoader"><a href="#1-1-BootClassLoader" class="headerlink" title="1.1 BootClassLoader"></a>1.1 BootClassLoader</h2><p>Android系统启动时会使用BootClassLoader来预加载常用类，它由Java实现，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/libcore/ojluni/src/main/java/java/lang/ClassLoader.java</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">BootClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassLoader</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> BootClassLoader instance;<br><br>    <span class="hljs-meta">@FindBugsSuppressWarnings(&quot;DP_CREATE_CLASSLOADER_INSIDE_DO_PRIVILEGED&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> BootClassLoader <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>            instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BootClassLoader</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> instance;<br>    &#125;<br><br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><p>BootClassLoader是ClassLoader的内部类，并继承自ClassLoader。由于BootClassLoader的权限声明是默认的，只有在同一包中才能访问，因此我们在应用程序中是无法直接调用的。</p><h2 id="1-2-DexClassLoader"><a href="#1-2-DexClassLoader" class="headerlink" title="1.2 DexClassLoader"></a>1.2 DexClassLoader</h2><p>DexClassLoader是用来加载dex文件以及包含dex文件的压缩包（apk、jar）。它的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/libcore/dalvik/src/main/java/dalvik/system/DexClassLoader.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DexClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseDexClassLoader</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DexClassLoader</span><span class="hljs-params">(String dexPath, String optimizedDirectory,</span><br><span class="hljs-params">            String librarySearchPath, ClassLoader parent)</span> &#123;<br>        <span class="hljs-built_in">super</span>(dexPath, <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(optimizedDirectory), librarySearchPath, parent);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>参数解析如下：</p><ul><li><code>dexPath</code>：dex文件或包含dex文件的jar&#x2F;apk文件的路径集合，多个路径用文件分隔符分隔，默认文件分隔符为”:”。</li><li><code>optimizedDirectory</code>：dex优化后产生的文件所存放的路径。</li><li><code>librarySearchPath</code>：native库的路径集合，多个路径用文件分隔符分隔。</li><li><code>parent</code>：父加载器</li></ul><p>DexClassLoader继承自BaseDexClassLoader，它的方法均在BaseDexClassLoader中实现。DexClassLoader通常用来加载已安装的jar、apk、dex以及SD卡中加载未安装的apk。</p><h2 id="1-3-PathClassLoader"><a href="#1-3-PathClassLoader" class="headerlink" title="1.3 PathClassLoader"></a>1.3 PathClassLoader</h2><p>Android系统使用PathClassLoader来加载系统类和应用程序的类，它的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/libcore/dalvik/src/main/java/dalvik/system/PathClassLoader.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PathClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseDexClassLoader</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PathClassLoader</span><span class="hljs-params">(String dexPath, ClassLoader parent)</span> &#123;<br>        <span class="hljs-built_in">super</span>(dexPath, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, parent);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PathClassLoader</span><span class="hljs-params">(String dexPath, String librarySearchPath, ClassLoader parent)</span> &#123;<br>        <span class="hljs-built_in">super</span>(dexPath, <span class="hljs-literal">null</span>, librarySearchPath, parent);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>同DexClassLoader一样，PathClassLoader继承自BaseDexClassLoader，方法也都在父类中实现。</p><p>可以注意到，PathClassLoader的构造方法中都没有optimizedDirectory参数，这是因为PathClassLoader中默认optimizedDirectory的值为<code>/data/dalvik-cache</code>（是的，默认dex优化文件的存放目录），因此PathClassLoader是用来加载系统中已经安装过的apk的dex文件。</p><h2 id="1-4-BaseDexClassLoader"><a href="#1-4-BaseDexClassLoader" class="headerlink" title="1.4 BaseDexClassLoader"></a>1.4 BaseDexClassLoader</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/libcore/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseDexClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ClassLoader</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> DexPathList pathList;  <span class="hljs-comment">//记录dex文件路径信息</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseDexClassLoader</span><span class="hljs-params">(String dexPath, File optimizedDirectory, String libraryPath, ClassLoader parent)</span> &#123;<br>        <span class="hljs-built_in">super</span>(parent);<br>        <span class="hljs-built_in">this</span>.pathList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DexPathList</span>(<span class="hljs-built_in">this</span>, dexPath, libraryPath, optimizedDirectory);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>BaseDexClassLoader继承自ClassLoader，在构造方法中初始化了DexPathList对象，这个对象比较关键，后续会讲解到。</p><h2 id="1-5-ClassLoader"><a href="#1-5-ClassLoader" class="headerlink" title="1.5 ClassLoader"></a>1.5 ClassLoader</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/libcore/ojluni/src/main/java/java/lang/ClassLoader.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassLoader</span> &#123;<br>    <span class="hljs-keyword">private</span> ClassLoader parent;  <span class="hljs-comment">//记录父类加载器</span><br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Void <span class="hljs-title function_">checkCreateClassLoader</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">ClassLoader</span><span class="hljs-params">(Void unused, ClassLoader parent)</span> &#123;<br>        <span class="hljs-built_in">this</span>.parent = parent;<br>    &#125;<br>    <br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">ClassLoader</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">this</span>(checkCreateClassLoader(), getSystemClassLoader());<br>    &#125;<br>    <br>    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">ClassLoader</span><span class="hljs-params">(ClassLoader parent)</span> &#123;<br>        <span class="hljs-built_in">this</span>(checkCreateClassLoader(), parent);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>ClassLoader是一个抽象类，在构造方法中调用了<code>getSystemClassLoader()</code>方法，获取SystemClassLoader，它的代码同样在ClassLoader类中，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ClassLoader</span> &#123;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SystemClassLoader</span> &#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">loader</span> <span class="hljs-operator">=</span> ClassLoader.createSystemClassLoader();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ClassLoader <span class="hljs-title function_">getSystemClassLoader</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> SystemClassLoader.loader;<br>    &#125;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ClassLoader <span class="hljs-title function_">createSystemClassLoader</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">classPath</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;java.class.path&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">librarySearchPath</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;java.library.path&quot;</span>, <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PathClassLoader</span>(classPath, librarySearchPath, BootClassLoader.getInstance());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可见SystemClassLoader对应的是PathClassLoader。</p><p>从ClassLoader的代码中可以看出，每创建一个ClassLoader实例，都需要一个现有的ClassLoader实例作为新创建的实例的Parent，这样一来，所有的ClassLoader之间的关联就像一棵树一样，这也是ClassLoader的 双亲代理模型的特点。</p><h1 id="二、ClassLoader的继承关系"><a href="#二、ClassLoader的继承关系" class="headerlink" title="二、ClassLoader的继承关系"></a>二、ClassLoader的继承关系</h1><p>它们之间的继承关系如下图所示：</p><p><img src="E:\LearningLibrary\逆向\Android基础知识\pic\19.Android中的ClassLoader\a.drawio.png" alt="a.drawio"></p><ul><li>ClassLoader：它是一个抽象类，其中定义了ClassLoader的主要功能。</li><li>BootClassLoader：它是ClassLoader的内部类，并继承自ClassLoader，用来在Android系统启动时预加载常用类。</li><li>SecureClassLoader：它与JDK 8 中的SecureClassLoader类的代码是一样的，它继承自ClassLoader。SecureClassLoader扩展了ClassLoader类的权限方面的功能，加强了ClassLoader的安全性。</li><li>URLClassLoader：它与JDK 8 中的URLClassLoader类的代码是一样的，它继承自SecureClassLoader，用来通过URL路径从jar文件和文件夹中加载类和资源。</li><li>BaseDexClassLoader：它继承自ClassLoader，是抽象类ClassLoader的具体实现类。</li><li>InMemoryDexClassLoader：它是Android 8.0 新增的类加载器，继承自BaseDexClassLoader，用于加载内存中的dex文件。</li><li>PathClassLoader：它继承自BaseDexClassLoader，用来加载系统中已经安装过的apk的dex文件。</li><li>DexClassLoader：它继承自BaseDexClassLoader，用来加载已安装的jar、apk、dex以及SD卡中加载未安装的apk。</li></ul><p>在实际开发过程中，我们一般是使用DexClassLoader和PathClassLoader这两个类加载器来加载类。</p><h1 id="三、类加载器的双亲委托模式"><a href="#三、类加载器的双亲委托模式" class="headerlink" title="三、类加载器的双亲委托模式"></a>三、类加载器的双亲委托模式</h1><p>类加载器查找Class所采用的是双亲委托模式，具体为：首先判断该Class是否已经加载，如果没有，则委托给父加载器进行查找而不是自己先去查找，这样依次递归，直到委托到最顶层的ClassLoader，如果最顶层的ClassLoader找到了该Class，就会直接返回，如果没找到，则交还给子加载器查找，依次递归，如果还没找到则最后会交还给自己去查找。</p><p>请注意，父类加载器和子类加载器之间<strong>并不是继承关系的</strong>，而是使用组合关系来调用父类加载器，即创建类加载器时传入的parent参数。</p><p>对应ClassLoader中的核心代码<code>loadClass()</code>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/libcore/ojluni/src/main/java/java/lang/ClassLoader.java</span><br><span class="hljs-keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="hljs-type">boolean</span> resolve)<br>    <span class="hljs-keyword">throws</span> ClassNotFoundException<br>&#123;<br>    <span class="hljs-comment">// 先检查是否已经加载过了该类</span><br>    Class&lt;?&gt; c = findLoadedClass(name);<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (parent != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//没有加载该类，且存在父加载器，交给父加载器处理</span><br>                c = parent.loadClass(name, <span class="hljs-literal">false</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//没有加载该类，且不存在父加载器</span><br>                c = findBootstrapClassOrNull(name);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            <span class="hljs-comment">// ClassNotFoundException thrown if class not found</span><br>            <span class="hljs-comment">// from the non-null parent class loader</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//父加载器处理失败，自己来找</span><br>            c = findClass(name);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-keyword">private</span> Class&lt;?&gt; findBootstrapClassOrNull(String name)<br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这段代码就很好的诠释了双亲委托模式。</p><p>双亲委托模式优点：</p><ol><li>避免重复加载。</li><li>更加安全。如果不使用双亲委托模式，就可以自定义一个String类来替代系统的String类，这显然会造成安全隐患。（两个类名一致且被同一类加载器加载的类，JVM才会认为它们是同一个类）</li></ol><h1 id="四、ClassLoader加载类的过程"><a href="#四、ClassLoader加载类的过程" class="headerlink" title="四、ClassLoader加载类的过程"></a>四、ClassLoader加载类的过程</h1><p>ClassLoader加载类的方法为<code>loadClass()</code>，它被定义在抽象类ClassLoader中，具体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/libcore/ojluni/src/main/java/java/lang/ClassLoader.java</span><br><span class="hljs-keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="hljs-type">boolean</span> resolve)<br>    <span class="hljs-keyword">throws</span> ClassNotFoundException<br>&#123;<br>    <span class="hljs-comment">// 先检查是否已经加载过了该类</span><br>    Class&lt;?&gt; c = findLoadedClass(name);<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> (parent != <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//没有加载该类，且存在父加载器，交给父加载器处理</span><br>                c = parent.loadClass(name, <span class="hljs-literal">false</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//没有加载该类，且不存在父加载器</span><br>                c = findBootstrapClassOrNull(name);<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>            <span class="hljs-comment">// ClassNotFoundException thrown if class not found</span><br>            <span class="hljs-comment">// from the non-null parent class loader</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//父加载器处理失败，自己来找</span><br>            c = findClass(name);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-keyword">private</span> Class&lt;?&gt; findBootstrapClassOrNull(String name)<br>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先调用<code>findLoadedClass()</code>方法查看本身有没有加载过该类，对应代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/libcore/ojluni/src/main/java/java/lang/ClassLoader.java</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> Class&lt;?&gt; findLoadedClass(String name) &#123;<br>    ClassLoader loader;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> == BootClassLoader.getInstance())<br>        loader = <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">else</span><br>        loader = <span class="hljs-built_in">this</span>;<br>    <span class="hljs-keyword">return</span> VMClassLoader.findLoadedClass(loader, name);<br>&#125;<br></code></pre></td></tr></table></figure><p>继而调用VMClassLoader的<code>findLoadedClass()</code>方法，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/libcore/libart/src/main/java/java/lang/VMClassLoader.java</span><br><span class="hljs-keyword">native</span> <span class="hljs-keyword">static</span> Class <span class="hljs-title function_">findLoadedClass</span><span class="hljs-params">(ClassLoader cl, String name)</span>;<br></code></pre></td></tr></table></figure><p>这个方法需要在native层实现。</p><p>OK！回到<code>loadClass()</code>的流程中，之后是调用父加载器的<code>loadClass()</code>方法（如果存在父加载器），其实就是这个方法本身。</p><p>接下来看<code>findClass()</code>方法，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/libcore/ojluni/src/main/java/java/lang/ClassLoader.java</span><br><span class="hljs-keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassNotFoundException</span>(name);<br>&#125;  <br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>    <span class="hljs-keyword">return</span> Class.classForName(name, <span class="hljs-literal">false</span>, <span class="hljs-literal">null</span>);<br>&#125;<br><span class="hljs-comment">//路径：/libcore/ojluni/src/main/java/java/lang/Class.java</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> Class&lt;?&gt; classForName(String className, <span class="hljs-type">boolean</span> shouldInitialize,<br>                                    ClassLoader classLoader) <span class="hljs-keyword">throws</span> ClassNotFoundException;<br></code></pre></td></tr></table></figure><p>第一个<code>findClass()</code>方法直接抛异常，这说明需要子类来实现；第二个<code>findClass()</code>方法则调用的是Class类中的<code>classForName()</code>方法，是个native方法。</p><p>回到第一个<code>findClass()</code>方法，它的实现在BaseDexClassLoader类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/libcore/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java</span><br><span class="hljs-keyword">protected</span> Class&lt;?&gt; findClass(String name) <span class="hljs-keyword">throws</span> ClassNotFoundException &#123;<br>    List&lt;Throwable&gt; suppressedExceptions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Throwable&gt;();<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> pathList.findClass(name, suppressedExceptions);<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-type">ClassNotFoundException</span> <span class="hljs-variable">cnfe</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ClassNotFoundException</span>(<span class="hljs-string">&quot;Didn&#x27;t find class \&quot;&quot;</span> + name + <span class="hljs-string">&quot;\&quot; on path: &quot;</span> + pathList);<br>        <span class="hljs-keyword">for</span> (Throwable t : suppressedExceptions) &#123;<br>            cnfe.addSuppressed(t);<br>        &#125;<br>        <span class="hljs-keyword">throw</span> cnfe;<br>    &#125;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseDexClassLoader</span><span class="hljs-params">(String dexPath, File optimizedDirectory, String librarySearchPath, ClassLoader parent)</span> &#123;<br>    <span class="hljs-built_in">super</span>(parent);<br>    <span class="hljs-built_in">this</span>.pathList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DexPathList</span>(<span class="hljs-built_in">this</span>, dexPath, librarySearchPath, <span class="hljs-literal">null</span>);<br>    <span class="hljs-keyword">if</span> (reporter != <span class="hljs-literal">null</span>) &#123;<br>        reporter.report(<span class="hljs-built_in">this</span>.pathList.getDexPaths());<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseDexClassLoader</span><span class="hljs-params">(ByteBuffer[] dexFiles, ClassLoader parent)</span> &#123;<br>    <span class="hljs-built_in">super</span>(parent);<br>    <span class="hljs-built_in">this</span>.pathList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DexPathList</span>(<span class="hljs-built_in">this</span>, dexFiles);<br>&#125;<br></code></pre></td></tr></table></figure><p>在该方法中调用了pathList的<code>findClass()</code>方法，这个pathList实在BaseDexClassLoader实例初始化时创建的，是一个DexPathList对象，对应的<code>findClass()</code>方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/libcore/dalvik/src/main/java/dalvik/system/DexPathList.java</span><br><span class="hljs-keyword">public</span> Class&lt;?&gt; findClass(String name, List&lt;Throwable&gt; suppressed) &#123;<br>    <span class="hljs-keyword">for</span> (Element element : dexElements) &#123;<br>        Class&lt;?&gt; clazz = element.findClass(name, definingContext, suppressed);<br>        <span class="hljs-keyword">if</span> (clazz != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> clazz;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (dexElementsSuppressedExceptions != <span class="hljs-literal">null</span>) &#123;<br>        suppressed.addAll(Arrays.asList(dexElementsSuppressedExceptions));<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>遍历Element数组dexElements，并对每个元素调用其<code>findClass()</code>方法。</p><p>整个代码其实就是遍历加载过的所有dex文件，看它们里面是否存在需要加载的类。至于为什么是dex文件，详见文章<a href="https://gal2xy.github.io/2023/11/20/dex%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B(%E4%B8%80)/">dex文件加载流程(一)</a>中的DexPathList的创建。</p><blockquote><p>热修复核心逻辑：在DexPathList.findClass()过程，一个Classloader可以包含多个dex文件，每个dex文件被封装到一个Element对象，这些Element对象排列成有序的数组dexElements。当查找某个类时，会遍历所有的dex文件，如果找到则直接返回，不再继续遍历dexElements。也就是说当两个类不同的dex中出现，会优先处理排在前面的dex文件，这便是热修复的核心精髓，将需要修复的类所打包的dex文件插入到dexElements前面。——gityuan</p></blockquote><p>OK！接下来就是查看Element类的<code>findClass()</code>方法，Element类是DexPathList类中的一个静态类，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/libcore/dalvik/src/main/java/dalvik/system/DexPathList.java</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Element</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> DexFile dexFile;<br>    ......<br>    <span class="hljs-keyword">public</span> Class&lt;?&gt; findClass(String name, ClassLoader definingContext,<br>                              List&lt;Throwable&gt; suppressed) &#123;<br>        <span class="hljs-keyword">return</span> dexFile != <span class="hljs-literal">null</span> ? dexFile.loadClassBinaryName(name, definingContext, suppressed)<br>            : <span class="hljs-literal">null</span>;<br>    &#125;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>findClass()</code>方法中调用了DexFile的<code>loadClassBinaryName()</code>方法，具体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/libcore/dalvik/src/main/java/dalvik/system/DexFile.java</span><br><span class="hljs-keyword">public</span> Class <span class="hljs-title function_">loadClassBinaryName</span><span class="hljs-params">(String name, ClassLoader loader, List&lt;Throwable&gt; suppressed)</span> &#123;<br>    <span class="hljs-keyword">return</span> defineClass(name, loader, mCookie, <span class="hljs-built_in">this</span>, suppressed);<br>&#125;<br></code></pre></td></tr></table></figure><p>继而调用<code>defineClass()</code>方法，对应代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/libcore/dalvik/src/main/java/dalvik/system/DexFile.java</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Class <span class="hljs-title function_">defineClass</span><span class="hljs-params">(String name, ClassLoader loader, Object cookie,</span><br><span class="hljs-params">                                 DexFile dexFile, List&lt;Throwable&gt; suppressed)</span> &#123;<br>    <span class="hljs-type">Class</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        result = defineClassNative(name, loader, cookie, dexFile);<br>    &#125; <span class="hljs-keyword">catch</span> (NoClassDefFoundError e) &#123;<br>        <span class="hljs-keyword">if</span> (suppressed != <span class="hljs-literal">null</span>) &#123;<br>            suppressed.add(e);<br>        &#125;<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>        <span class="hljs-keyword">if</span> (suppressed != <span class="hljs-literal">null</span>) &#123;<br>            suppressed.add(e);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> Class <span class="hljs-title function_">defineClassNative</span><span class="hljs-params">(String name, ClassLoader loader, Object cookie,</span><br><span class="hljs-params">                                              DexFile dexFile)</span><br>    <span class="hljs-keyword">throws</span> ClassNotFoundException, NoClassDefFoundError;<br></code></pre></td></tr></table></figure><p>最终调用的是<code>defineClassNative()</code>方法来查找所需要加载的类，而这个方法是个native方法，这里就不再分析了。</p><p>这里借用huanzhiyazi的文章中的一句话来概括一下native层做的事：<strong>先从已加载类的 class_table 中查询，若找到则直接返回；若找不到则说明该类是第一次加载，则执行加载流程，其中可能需要穿插加载依赖的类，加载完成后将其缓存到 class_table 中。</strong></p><h1 id="五、预加载类的流程"><a href="#五、预加载类的流程" class="headerlink" title="五、预加载类的流程"></a>五、预加载类的流程</h1><p>在ZygoteInit的<code>main()</code>方法中，会调用<code>preload()</code>方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String argv[])</span> &#123;<br>    ......<br>    <br>    <span class="hljs-keyword">try</span> &#123;<br>        ......<br>        <span class="hljs-comment">// In some configurations, we avoid preloading resources and classes eagerly.</span><br>        <span class="hljs-comment">// In such cases, we will preload things prior to our first fork.</span><br>        <span class="hljs-keyword">if</span> (!enableLazyPreload) &#123;<br>            ......<br>            preload(bootTimingsTraceLog);<br>            ......<br>        &#125; <br>        ......<br>    &#125; <br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><p><code>preload()</code>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preload</span><span class="hljs-params">(TimingsTraceLog bootTimingsTraceLog)</span> &#123;<br>    Log.d(TAG, <span class="hljs-string">&quot;begin preload&quot;</span>);<br>    bootTimingsTraceLog.traceBegin(<span class="hljs-string">&quot;BeginIcuCachePinning&quot;</span>);<br>    beginIcuCachePinning();<br>    bootTimingsTraceLog.traceEnd(); <span class="hljs-comment">// BeginIcuCachePinning</span><br>    bootTimingsTraceLog.traceBegin(<span class="hljs-string">&quot;PreloadClasses&quot;</span>);<br>    preloadClasses();<br>    bootTimingsTraceLog.traceEnd(); <span class="hljs-comment">// PreloadClasses</span><br>    bootTimingsTraceLog.traceBegin(<span class="hljs-string">&quot;PreloadResources&quot;</span>);<br>    preloadResources();<br>    bootTimingsTraceLog.traceEnd(); <span class="hljs-comment">// PreloadResources</span><br>    Trace.traceBegin(Trace.TRACE_TAG_DALVIK, <span class="hljs-string">&quot;PreloadAppProcessHALs&quot;</span>);<br>    nativePreloadAppProcessHALs();<br>    Trace.traceEnd(Trace.TRACE_TAG_DALVIK);<br>    Trace.traceBegin(Trace.TRACE_TAG_DALVIK, <span class="hljs-string">&quot;PreloadOpenGL&quot;</span>);<br>    preloadOpenGL();<br>    Trace.traceEnd(Trace.TRACE_TAG_DALVIK);<br>    preloadSharedLibraries();<br>    preloadTextResources();<br>    <span class="hljs-comment">// Ask the WebViewFactory to do any initialization that must run in the zygote process,</span><br>    <span class="hljs-comment">// for memory sharing purposes.</span><br>    WebViewFactory.prepareWebViewInZygote();<br>    endIcuCachePinning();<br>    warmUpJcaProviders();<br>    Log.d(TAG, <span class="hljs-string">&quot;end preload&quot;</span>);<br><br>    sPreloadComplete = <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>preload()</code>方法中，会预加载类、资源、共享库等等。其中<code>preloadClasses()</code>方法用于Zygote进程初始化时预加载常用类，该方法对应代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preloadClasses</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">VMRuntime</span> <span class="hljs-variable">runtime</span> <span class="hljs-operator">=</span> VMRuntime.getRuntime();<br>        InputStream is;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//将/system/etc/preloaded-classes文件封装成FileInputStream</span><br>            is = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(PRELOADED_CLASSES);<br>        &#125; <span class="hljs-keyword">catch</span> (FileNotFoundException e) &#123;<br>            ...<br>        &#125;<br>        ...<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//将FileInputStream封装成BufferedReader</span><br>            <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(is), <span class="hljs-number">256</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            String line;<br>            <span class="hljs-comment">//读取预加载类记录</span><br>            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                <span class="hljs-comment">// Skip comments and blank lines.</span><br>                line = line.trim();<br>                <span class="hljs-keyword">if</span> (line.startsWith(<span class="hljs-string">&quot;#&quot;</span>) || line.equals(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                Trace.traceBegin(Trace.TRACE_TAG_DALVIK, line);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-literal">false</span>) &#123;<br>                        Log.v(TAG, <span class="hljs-string">&quot;Preloading &quot;</span> + line + <span class="hljs-string">&quot;...&quot;</span>);<br>                    &#125;<br>                    <span class="hljs-comment">//通过Class.forName()来加载和初始化给定的类</span><br>                    Class.forName(line, <span class="hljs-literal">true</span>, <span class="hljs-literal">null</span>);<br>                    count++;<br>                &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>                    Log.w(TAG, <span class="hljs-string">&quot;Class not found for preloading: &quot;</span> + line);<br>                &#125; <span class="hljs-keyword">catch</span> (UnsatisfiedLinkError e) &#123;<br>                    Log.w(TAG, <span class="hljs-string">&quot;Problem preloading &quot;</span> + line + <span class="hljs-string">&quot;: &quot;</span> + e);<br>                &#125; <span class="hljs-keyword">catch</span> (Throwable t) &#123;<br>                    ...<br>                &#125;<br>                Trace.traceEnd(Trace.TRACE_TAG_DALVIK);<br>            &#125;<br>            ...<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            ...<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>            ...<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>常量<code>PRELOADED_CLASSES</code>的值为<code>/system/etc/preloaded-classes</code>，在<code>preloaded-classes</code>文件中存有预加载记录，这个文件在Android源码中的目录为<code>/frameworks/base/preloaded-classes</code>，这里举例一些文件中的预加载类：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stylus">android<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.ApplicationLoaders</span><br>android<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.ApplicationPackageManager</span><br>android<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.ContentProviderHolder</span><br>android<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.DexLoadReporter</span><br>android<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.Dialog</span><br>android<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.DownloadManager</span><br>android<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.Fragment</span><br>android<span class="hljs-selector-class">.animation</span><span class="hljs-selector-class">.Animator</span><br>android<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.Activity</span><br>android<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.ActivityManager</span><br>android<span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.ActivityThread</span><br>java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.String</span><br>java<span class="hljs-selector-class">.lang</span>.Thread<br></code></pre></td></tr></table></figure><p>很眼熟吧，不然怎么叫常见类呢！</p><p>回到<code>preloadClasses()</code>方法中，遍历预加载类记录，对每个预加载类调用<code>Class.forName()</code>方法，该方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/libcore/ojluni/src/main/java/java/lang/Class.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Class&lt;?&gt; forName(String name, <span class="hljs-type">boolean</span> initialize,<br>                               ClassLoader loader)<br>    <span class="hljs-keyword">throws</span> ClassNotFoundException<br>&#123;<br>    <span class="hljs-keyword">if</span> (loader == <span class="hljs-literal">null</span>) &#123;<br>        loader = BootClassLoader.getInstance();<span class="hljs-comment">//创建BootClassLoader实例</span><br>    &#125;<br>    Class&lt;?&gt; result;<br>    <span class="hljs-keyword">try</span> &#123;<br>        result = classForName(name, initialize, loader);<span class="hljs-comment">//调用native方法</span><br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException e) &#123;<br>        <span class="hljs-type">Throwable</span> <span class="hljs-variable">cause</span> <span class="hljs-operator">=</span> e.getCause();<br>        <span class="hljs-keyword">if</span> (cause <span class="hljs-keyword">instanceof</span> LinkageError) &#123;<br>            <span class="hljs-keyword">throw</span> (LinkageError) cause;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> e;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果没有就通过<code>BootClassLoader.getInstance()</code>创建BootClassLoader实例，该方法代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/libcore/ojluni/src/main/java/java/lang/ClassLoader.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> BootClassLoader <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) &#123;<br>        instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BootClassLoader</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> instance;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后创建好的BootClassLoader实例作为参数传入<code>classForName()</code>方法中，该方法是native方法，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/libcore/ojluni/src/main/java/java/lang/Class.java</span><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> Class&lt;?&gt; classForName(String className, <span class="hljs-type">boolean</span> shouldInitialize,<br>                                    ClassLoader classLoader) <span class="hljs-keyword">throws</span> ClassNotFoundException;<br></code></pre></td></tr></table></figure><p>Java层到此为止，接下来是Native层，不在这里分析。</p><p>回顾整个预加载类的流程，我们可以知道，BootClassLoader是在Zygote进程的Zygote入口方法（main）中被创建的，并用来加载preloaded-classes文件中存放的与加载类。</p><h1 id="六、PathClassLoader的创建"><a href="#六、PathClassLoader的创建" class="headerlink" title="六、PathClassLoader的创建"></a>六、PathClassLoader的创建</h1><p>PathClassLoader的创建也得从Zygote进程开始说起，Zygote进程启动SystemServer进程是会调用ZygoteInit的<code>startSystemServer()</code>方法，具体如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startSystemServer</span><span class="hljs-params">(String abiList, String socketName, ZygoteServer zygoteServer)</span><br>    <span class="hljs-keyword">throws</span> Zygote.MethodAndArgsCaller, RuntimeException &#123;<br>    ...<br>    <span class="hljs-type">int</span> pid;<br>    <span class="hljs-keyword">try</span> &#123;<br>        parsedArgs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZygoteConnection</span>.Arguments(args);<br>        ZygoteConnection.applyDebuggerSystemProperty(parsedArgs);<br>        ZygoteConnection.applyInvokeWithSystemProperty(parsedArgs);<br>        <span class="hljs-comment">/* Request to fork the system server process */</span><br>        pid = Zygote.forkSystemServer(<br>            parsedArgs.uid, parsedArgs.gid,<br>            parsedArgs.gids,<br>            parsedArgs.debugFlags,<br>            <span class="hljs-literal">null</span>,<br>            parsedArgs.permittedCapabilities,<br>            parsedArgs.effectiveCapabilities);<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(ex);<br>    &#125;<br>    <span class="hljs-comment">/* For child process */</span><br>    <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (hasSecondZygote(abiList)) &#123;<br>            waitForSecondaryZygote(socketName);<br>        &#125;<br><br>        zygoteServer.closeServerSocket();<br>        handleSystemServerProcess(parsedArgs);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>Zygote通过<code>forkSystemServer()</code>方法fork自身来创建子进程（SystemServer进程），如果返回的pid&#x3D;0，说明当前代码是在新创建的SystemServer进程中执行的，接着就会调用<code>handleSystemServerProcess()</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleSystemServerProcess</span><span class="hljs-params">(ZygoteConnection.Arguments parsedArgs)</span> <span class="hljs-keyword">throws</span> Zygote.MethodAndArgsCaller &#123;<br>...<br>    <span class="hljs-keyword">if</span> (parsedArgs.invokeWith != <span class="hljs-literal">null</span>) &#123;<br>        ...<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (systemServerClasspath != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//创建PathClassLoader</span><br>            cl = createPathClassLoader(systemServerClasspath, parsedArgs.targetSdkVersion);<br><span class="hljs-comment">//设置成线程的上下文的类加载器</span><br>            Thread.currentThread().setContextClassLoader(cl);<br>        &#125;<br>        ZygoteInit.zygoteInit(parsedArgs.targetSdkVersion, parsedArgs.remainingArgs, cl);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用<code>createPathClassLoader()</code>方法创建PathClassLoader，<u>然后获取当前线程实例，设置新创建的PathClassLoader为上下文的类加载器</u>。<code>createPathClassLoader()</code>方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">static</span> PathClassLoader <span class="hljs-title function_">createPathClassLoader</span><span class="hljs-params">(String classPath, <span class="hljs-type">int</span> targetSdkVersion)</span> &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">libraryPath</span> <span class="hljs-operator">=</span> System.getProperty(<span class="hljs-string">&quot;java.library.path&quot;</span>);<br>    <span class="hljs-keyword">return</span> PathClassLoaderFactory.createClassLoader(classPath,<br>                                                    libraryPath,<br>                                                    libraryPath,<br>                                                    ClassLoader.getSystemClassLoader(),<br>                                                    targetSdkVersion,<br>                                                    <span class="hljs-literal">true</span> <span class="hljs-comment">/* isNamespaceShared */</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>java.library.path </code>是一个系统属性，它指定了 Java 虚拟机 (JVM) 在加载本地库时应搜索的路径。上述代码通过<code>System.getProperty(&quot;java.library.path&quot;)</code>获取本地库信息，然后调用PathClassLoaderFactory类的<code>createClassLoader()</code>方法创建PathClassLoader。<code>createClassLoader()</code>方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/core/java/com/android/internal/os/PathClassLoaderFactory.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> PathClassLoader <span class="hljs-title function_">createClassLoader</span><span class="hljs-params">(String dexPath,</span><br><span class="hljs-params">                                                String librarySearchPath,</span><br><span class="hljs-params">                                                String libraryPermittedPath,</span><br><span class="hljs-params">                                                ClassLoader parent,</span><br><span class="hljs-params">                                                <span class="hljs-type">int</span> targetSdkVersion,</span><br><span class="hljs-params">                                                <span class="hljs-type">boolean</span> isNamespaceShared)</span> &#123;<br>    <span class="hljs-comment">//创建PathClassLoader</span><br>    <span class="hljs-type">PathClassLoader</span> <span class="hljs-variable">pathClassloader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PathClassLoader</span>(dexPath, librarySearchPath, parent);<br><br>    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="hljs-string">&quot;createClassloaderNamespace&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">errorMessage</span> <span class="hljs-operator">=</span> createClassloaderNamespace(pathClassloader,<br>                                                     targetSdkVersion,<br>                                                     librarySearchPath,<br>                                                     libraryPermittedPath,<br>                                                     isNamespaceShared);<br>    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);<br><br>    <span class="hljs-keyword">if</span> (errorMessage != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsatisfiedLinkError</span>(<span class="hljs-string">&quot;Unable to create namespace for the classloader &quot;</span> +<br>                                       pathClassloader + <span class="hljs-string">&quot;: &quot;</span> + errorMessage);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> pathClassloader;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码直接通过new创建PathClassLoader实例。</p><p>回顾整个预加载类的流程，我们可以知道，PathClassLoader是在SystemServer进程中采用工厂模式创建的。</p><hr><p>参考：</p><p><a href="http://aospxref.com/android-8.0.0_r36/">http://aospxref.com/android-8.0.0_r36/</a></p><p><a href="https://github.com/huanzhiyazi/articles/issues/30">https://github.com/huanzhiyazi/articles/issues/30</a></p><p><a href="http://liuwangshu.cn/application/classloader/2-android-classloader.html">http://liuwangshu.cn/application/classloader/2-android-classloader.html</a></p><p><a href="http://gityuan.com/2017/03/19/android-classloader/">http://gityuan.com/2017/03/19/android-classloader/</a></p><p><a href="https://segmentfault.com/a/1190000004062880">Android动态加载基础 ClassLoader工作机制 - 中二病也要开发ANDROID - SegmentFault 思否</a></p><p><a href="https://segmentfault.com/a/1190000004062866">Android动态加载技术 简单易懂的介绍方式 - 中二病也要开发ANDROID - SegmentFault 思否</a></p><p><a href="https://segmentfault.com/a/1190000004062952">Android动态加载入门 简单加载模式 - 中二病也要开发ANDROID - SegmentFault 思否</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android源码解析</tag>
      
      <tag>ClassLoader</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>java反射技术学习</title>
    <link href="/2023/11/23/java%E5%8F%8D%E5%B0%84%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/11/23/java%E5%8F%8D%E5%B0%84%E6%8A%80%E6%9C%AF%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="一、什么是反射"><a href="#一、什么是反射" class="headerlink" title="一、什么是反射"></a>一、什么是反射</h1><p>反射是指在程序运行时动态地获取类的信息，包括类名、字段、方法等。Java提供了一系列反射方法来操作（如获取、创建、修改、调用）Class对象、构造函数、方法、字段等。通过反射，我们可以创建对象、调用方法和访问字段，而不需要提前知道类的具体定义。同时反射也是一种实现动态加载的技术之一。</p><h1 id="二、基于反射进行动态加载"><a href="#二、基于反射进行动态加载" class="headerlink" title="二、基于反射进行动态加载"></a>二、基于反射进行动态加载</h1><p>贴一段用于辅助测试的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.uu;<br><span class="hljs-keyword">import</span> com.test.wtf.Dog;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span> &#123;<br><br>    <span class="hljs-keyword">public</span> String publicStr;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">privateStr</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abc&quot;</span>;<br><br>    Dog dog;<span class="hljs-comment">//另一个类，具体代码就不贴了</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Test</span><span class="hljs-params">(String publicStr)</span> &#123;<br>        <span class="hljs-built_in">this</span>.publicStr = publicStr;<br>        <span class="hljs-built_in">this</span>.dog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;ww&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Test</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPublicStr</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> publicStr;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPublicStr</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> &#123;<br>        <span class="hljs-keyword">return</span> publicStr;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>基于上面这段代码， 来学习如何使用Java反射。</p><h2 id="2-1-类反射"><a href="#2-1-类反射" class="headerlink" title="2.1 类反射"></a>2.1 类反射</h2><h3 id="2-1-1-获取类"><a href="#2-1-1-获取类" class="headerlink" title="2.1.1 获取类"></a>2.1.1 获取类</h3><ul><li><code>Class.forName(ClassName)</code>：动态加载类，<code>ClassName</code>指定要加载的类名。</li><li><code>ClassLoader的loaderclass()</code>：动态加载类，<code>ClassName</code>指定要加载的类名。</li><li><code>类名.class</code>：非动态加载。</li><li><code>类对象.getClass()</code>：非动态加载。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.Class.forName()</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.example.uu.Test&quot;</span>);<br><span class="hljs-comment">//2.ClassLoader</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> ClassLoader.getSystemClassLoader().loadClass(<span class="hljs-string">&quot;com.example.uu.Test&quot;</span>);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">class com.example.uu.Test</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//3.类名.class</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">sClass</span> <span class="hljs-operator">=</span> String.class;<br>System.out.println(sClass);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">class java.lang.String</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//4.类对象.getClass()</span><br><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;a&quot;</span>;<br><span class="hljs-type">Class</span> <span class="hljs-variable">aClass</span> <span class="hljs-operator">=</span> a.getClass();<br>System.out.println(aClass);<br></code></pre></td></tr></table></figure><h3 id="2-1-2-通过类获取类实例"><a href="#2-1-2-通过类获取类实例" class="headerlink" title="2.1.2 通过类获取类实例"></a>2.1.2 通过类获取类实例</h3><ul><li><code>class.newInstrance()</code>：执行无参构造获取类实例，该方法要求<code>class</code>类有无参构造方法。</li></ul><p>示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.获取类</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.example.uu.Test&quot;</span>);<br><span class="hljs-comment">//执行类的无参构造方法来获取类实例（必须要求该类含有无参构造方法）</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> cl.newInstance();<br></code></pre></td></tr></table></figure><h2 id="2-2-构造方法反射"><a href="#2-2-构造方法反射" class="headerlink" title="2.2 构造方法反射"></a>2.2 构造方法反射</h2><h3 id="2-2-1-获取构造方法"><a href="#2-2-1-获取构造方法" class="headerlink" title="2.2.1 获取构造方法"></a>2.2.1 获取构造方法</h3><ul><li><code>class.getConstructor(...ParameterTypes)</code>：获取<code>class</code>类中的public权限的构造方法，<code>ParameterTypes</code>指定所获取的构造方法中的参数的类型，没有则表示无参。</li><li><code>class.getConstructors()</code>：获取<code>class</code>类中的所有public权限的构造方法。</li><li><code>class.getDeclaredConstructor(...ParameterTypes)</code> ：获取<code>class</code>类中的任意构造方法。</li><li><code>class.getDeclaredConstructors()</code>：获取<code>class</code>类中的所有构造方法。</li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1. 获取无参构造方法</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> cl.getConstructor();<br>System.out.println(constructor);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">public com.example.uu.Test()</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//2. 获取带一个参数且为string类型的构造方法</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> cl.getConstructor(String.class);<br>System.out.println(constructor);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">public com.example.uu.Test(java.lang.String)</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//3. 获取该类的所有构造方法</span><br>Constructor[] constructors = cl.getConstructors();<br><span class="hljs-keyword">for</span> (Constructor con:constructors) &#123;<br>    System.out.println(con);<br>    System.out.println(con.getName() + <span class="hljs-string">&quot;||&quot;</span> + con.getModifiers() + <span class="hljs-string">&quot;||&quot;</span><br>                       + Arrays.toString(con.getParameters()) + <span class="hljs-string">&quot;||&quot;</span><br>                       + Arrays.toString(con.getParameterTypes()));<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出</span><br><span class="hljs-comment">public com.example.uu.Test(java.lang.String)</span><br><span class="hljs-comment">com.example.uu.Test||1||[java.lang.String arg0]||[class java.lang.String]</span><br><span class="hljs-comment">public com.example.uu.Test()</span><br><span class="hljs-comment">com.example.uu.Test||1||[]||[]</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="2-2-2-通过构造方法获取类实例"><a href="#2-2-2-通过构造方法获取类实例" class="headerlink" title="2.2.2 通过构造方法获取类实例"></a>2.2.2 通过构造方法获取类实例</h3><ul><li><code>constructor.newInstance(...args)</code>：通过<code>constructor</code>构造方法构造类实例对象，根据获取到的<code>constructor</code>构造方法来决定是否需要传入参数<code>args</code>。</li><li><code>constructor.setAccessible(bool)</code>：设置<code>constructor</code>构造函数的访问权限，若<code>bool</code>为true则表示取消构造函数的访问权限控制，这意味着private声明的构造函数也可以进行访问。</li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//1.无参构造</span><br><span class="hljs-type">Class</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> Class.forName(<span class="hljs-string">&quot;com.example.uu.Test&quot;</span>);<span class="hljs-comment">//获取类</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> cl.getConstructor();<span class="hljs-comment">//通过类获取无参构造方法</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> constructor.newInstance();<span class="hljs-comment">//执行构造方法获得类实例</span><br><br><span class="hljs-comment">//2.有参构造</span><br>Class cl= Class.forName(<span class="hljs-string">&quot;com.example.uu.Test&quot;</span>);<span class="hljs-comment">//获取类</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> cl.getConstructor(String.class);<span class="hljs-comment">///获取带一个参数且参数类型为String类型的构造方法</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-string">&quot;aaaaaaaaaaaaaaaa&quot;</span>);<span class="hljs-comment">//执行构造方法获得类实例</span><br></code></pre></td></tr></table></figure><h2 id="2-3-字段反射"><a href="#2-3-字段反射" class="headerlink" title="2.3 字段反射"></a>2.3 字段反射</h2><h3 id="2-3-1-获取字段"><a href="#2-3-1-获取字段" class="headerlink" title="2.3.1 获取字段"></a>2.3.1 获取字段</h3><ul><li><p><code>class.getField(FieldName)</code> ：获取<code>class</code>类中的带public声明的<code>FieldName</code>变量。</p></li><li><p><code>class.getFields()</code>：获取<code>class</code>类中的带public声明变量。</p></li><li><p><code>class.getDeclaredField(FieldName)</code>：获取<code>class</code>类中的<code>FieldName</code>变量。</p></li><li><p><code>class.getDeclaredFields()</code>：获取<code>class</code>类中的所有变量。</p></li></ul><p>示例代码：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1. 获取该类的publicStr字段</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">field</span> <span class="hljs-operator">=</span> cl.getField(<span class="hljs-string">&quot;publicStr&quot;</span>);<span class="hljs-comment">//只能获取public声明的变量，获取privateStr失败</span><br>System.out.println(field);<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">public java.lang.String com.example.uu.Test.publicStr</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//2.获取该类中所有字段</span><br>Field[] declaredFields = cl.getDeclaredFields();<br><span class="hljs-keyword">for</span>(Field dec : declaredFields)&#123;<br>    System.out.println(dec);<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">public java.lang.String com.example.uu.Test.publicStr</span><br><span class="hljs-comment">private java.lang.String com.example.uu.Test.privateStr</span><br><span class="hljs-comment">com.test.wtf.Dog com.example.uu.Test.dog</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="2-3-2-操作字段"><a href="#2-3-2-操作字段" class="headerlink" title="2.3.2 操作字段"></a>2.3.2 操作字段</h3><ul><li><code>field.getXxx(obj)</code>：获取<code>obj</code>对象的<code>field</code>字段的属性值。<code>Xxx</code>代指8个基本数据类型，如果该属性类型是引用类型则直接使用<code>Field.get(obj)</code>。</li><li><code>field.setXxx(obj, value)</code>：将<code>obj</code>对象的Field字段赋值为<code>value</code>。<code>Xxx</code>代指8个基本数据类型，如果该字段类型是引用类型则直接使用<code>Field.set(obj, value)</code>。</li><li><code>field.setAccessible(bool)</code>：设置<code>field</code>字段的访问权限，若<code>bool</code>为true则表示取消字段的访问权限控制，这意味着private声明的字段也可以进行访问。</li></ul><p>   代码示例：</p>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.获取类</span><br>Class cl= Class.forName(<span class="hljs-string">&quot;com.example.uu.Test&quot;</span>);<br><span class="hljs-comment">//2.获取构造函数</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> cl.getConstructor(String.class);<br><span class="hljs-comment">//3.创建类对象</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">newtest</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-string">&quot;ousasf&quot;</span>);<br><span class="hljs-comment">//4.获取privateStr字段</span><br><span class="hljs-type">Field</span> <span class="hljs-variable">privateStr</span> <span class="hljs-operator">=</span> cl.getDeclaredField(<span class="hljs-string">&quot;privateStr&quot;</span>);<br><span class="hljs-comment">//5.因为该字段是Private权限，所以需要取消属性的访问权限控制</span><br>privateStr.setAccessible(<span class="hljs-literal">true</span>);<br>System.out.println(privateStr.get(newtest));<br><span class="hljs-comment">//6.修改privateStr字段的值</span><br>privateStr.set(newtest,<span class="hljs-string">&quot;ahlsdfjpasp&quot;</span>);<br>System.out.println(privateStr.get(newtest));<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">abc</span><br><span class="hljs-comment">ahlsdfjpasp</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="2-4-方法反射"><a href="#2-4-方法反射" class="headerlink" title="2.4 方法反射"></a>2.4 方法反射</h2><h3 id="2-4-1-获取方法"><a href="#2-4-1-获取方法" class="headerlink" title="2.4.1 获取方法"></a>2.4.1 获取方法</h3><ul><li><code>class.getMethod(MethodName,...ParameterTypes)</code>：获取<code>class</code>类中的public权限的方法，<code>MethodName</code>指定所要获取的方法的方法名，<code>ParameterTypes</code>指定所获取的方法中的参数的类型，没有则表示无参。</li><li><code>class.getMethods()</code>：获取<code>class</code>类中所有public权限的方法。</li><li><code>class.getDeclaredMethod(MethodName,...ParameterTypes)</code>：获取<code>class</code>类中任意方法。</li><li><code>class.getDeclaredMethods()</code>：获取<code>class</code>类的所有方法。</li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//获取带一个参数的且为int类型的getPublicStr方法</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> cl.getMethod(<span class="hljs-string">&quot;getPublicStr&quot;</span>,<span class="hljs-type">int</span>.class);<br>System.out.println(method);<br></code></pre></td></tr></table></figure><h3 id="2-4-2-执行方法"><a href="#2-4-2-执行方法" class="headerlink" title="2.4.2 执行方法"></a>2.4.2 执行方法</h3><ul><li><code>method.invoke(obj,...args)</code>：调用<code>obj</code>对象的<code>method</code>方法，<code>args</code>指定传入的参数，没有则表示无参。</li><li><code>method.setAccessible(bool)</code>：设置<code>method</code>方法的访问权限，若<code>bool</code>为true则表示取消方法的访问权限控制，这意味着private声明的方法也可以被调用。</li></ul><p>示例代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.获取类</span><br>Class cl= Class.forName(<span class="hljs-string">&quot;com.example.uu.Test&quot;</span>);<br><span class="hljs-comment">//2.获取带一个参数且为String类型的构造方法</span><br><span class="hljs-type">Constructor</span> <span class="hljs-variable">constructor</span> <span class="hljs-operator">=</span> cl.getConstructor(String.class);<br><span class="hljs-comment">//3.通过构造方法，构造类对象</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">newtest</span> <span class="hljs-operator">=</span> constructor.newInstance(<span class="hljs-string">&quot;abcdedfg&quot;</span>);<br><span class="hljs-comment">//4.获取getPublicStr()方法</span><br><span class="hljs-type">Method</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> cl.getDeclaredMethod(<span class="hljs-string">&quot;getPublicStr&quot;</span>);<br>System.out.println(method);<br><span class="hljs-comment">//5.取消访问控制</span><br><span class="hljs-comment">//method.setAccessible(true);</span><br><span class="hljs-comment">//6.调用该方法</span><br>System.out.println(method.invoke(newtest));<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">输出：</span><br><span class="hljs-comment">public java.lang.String com.example.uu.Test.getPublicStr()</span><br><span class="hljs-comment">abcdedfg</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><hr><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/405325823">Java反射机制-十分钟搞懂 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java反射</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dex文件加载流程(三)</title>
    <link href="/2023/11/20/dex%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B(%E4%B8%89)/"/>
    <url>/2023/11/20/dex%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B(%E4%B8%89)/</url>
    
    <content type="html"><![CDATA[<p>书接上文<a href="https://gal2xy.github.io/2023/11/20/dex%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B(%E4%BA%8C)/">dex文件加载流程(二) (gal2xy.github.io)</a>。</p><h1 id="一、DexFile-Open"><a href="#一、DexFile-Open" class="headerlink" title="一、DexFile::Open()"></a>一、DexFile::Open()</h1><p>根据上一篇文章的学习可知，在<code>OpenDexFilesFromOat()</code>方法中，如果能够从oat文件中加载dex文件，则最终在<code>OatFile::OatDexFile::OpenDexFile()</code>方法中调用带8个参数的<code>DexFile::Open()</code>方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">DexFile::<span class="hljs-built_in">Open</span>(dex_file_pointer_,<br>              <span class="hljs-built_in">FileSize</span>(),<br>              dex_file_location_,<br>              dex_file_location_checksum_,<br>              <span class="hljs-keyword">this</span>,<br>              kVerify,<br>              kVerifyChecksum,<br>              error_msg);<br></code></pre></td></tr></table></figure><p>否则直接调用带5个参数的<code>DexFile::Open()</code>方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">DexFile::<span class="hljs-built_in">Open</span>(dex_location, dex_location, kVerifyChecksum, <span class="hljs-comment">/*out*/</span> &amp;error_msg, &amp;dex_files)<br></code></pre></td></tr></table></figure><h2 id="1-1-带8个参数的DexFile-Open"><a href="#1-1-带8个参数的DexFile-Open" class="headerlink" title="1.1 带8个参数的DexFile::Open()"></a>1.1 带8个参数的DexFile::Open()</h2><p>带8个参数的<code>DexFile::Open()</code>方法比较简单，直接调用<code>OpenCommon()</code>方法，具体如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//路径：/art/runtime/dex_file.cc</span><br><span class="hljs-function">std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt; <span class="hljs-title">DexFile::Open</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span>* base,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             <span class="hljs-type">size_t</span> size,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             <span class="hljs-type">const</span> std::string&amp; location,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             <span class="hljs-type">uint32_t</span> location_checksum,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             <span class="hljs-type">const</span> OatDexFile* oat_dex_file,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             <span class="hljs-type">bool</span> verify,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             <span class="hljs-type">bool</span> verify_checksum,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             std::string* error_msg)</span> </span>&#123;<br>    <span class="hljs-function">ScopedTrace <span class="hljs-title">trace</span><span class="hljs-params">(std::string(<span class="hljs-string">&quot;Open dex file from RAM &quot;</span>) + location)</span></span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">OpenCommon</span>(base,<br>                      size,<br>                      location,<br>                      location_checksum,<br>                      oat_dex_file,<br>                      verify,<br>                      verify_checksum,<br>                      error_msg);<br>&#125;<br></code></pre></td></tr></table></figure><p>对<code>DexFile::Open()</code>的参数进行说明：</p><ul><li>base：指向dex文件的内存地址。</li><li>size：dex文件的大小。</li><li>location：dex文件的位置。</li><li>location_checksum：dex文件位置的校验和。</li><li>oat_dex_file：指向OatDexFile对象的指针。</li><li>verify：表示是否要对dex文件进行验证。</li><li>verify_checksum：表示是否要验证dex文件的校验和。</li><li>error_msg：指向错误信息字符串的指针。</li></ul><h2 id="1-2-带5个参数的DexFile-Open"><a href="#1-2-带5个参数的DexFile-Open" class="headerlink" title="1.2 带5个参数的DexFile::Open()"></a>1.2 带5个参数的DexFile::Open()</h2><p>带5个参数的<code>DexFile::Open()</code>方法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//路径：/art/runtime/dex_file.cc</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">DexFile::Open</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* filename,</span></span><br><span class="hljs-params"><span class="hljs-function">                   <span class="hljs-type">const</span> std::string&amp; location,</span></span><br><span class="hljs-params"><span class="hljs-function">                   <span class="hljs-type">bool</span> verify_checksum,</span></span><br><span class="hljs-params"><span class="hljs-function">                   std::string* error_msg,</span></span><br><span class="hljs-params"><span class="hljs-function">                   std::vector&lt;std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt;&gt;* dex_files)</span> </span>&#123;<br>    <span class="hljs-function">ScopedTrace <span class="hljs-title">trace</span><span class="hljs-params">(std::string(<span class="hljs-string">&quot;Open dex file &quot;</span>) + std::string(location))</span></span>;<br>    <span class="hljs-built_in">DCHECK</span>(dex_files != <span class="hljs-literal">nullptr</span>) &lt;&lt; <span class="hljs-string">&quot;DexFile::Open: out-param is nullptr&quot;</span>;<br>    <span class="hljs-type">uint32_t</span> magic;<br>    <span class="hljs-comment">//打开文件读取magic[8]，OpenAndReadMagic可作为一个常用脱壳点</span><br>    File fd = <span class="hljs-built_in">OpenAndReadMagic</span>(filename, &amp;magic, error_msg);<br>    <span class="hljs-keyword">if</span> (fd.<span class="hljs-built_in">Fd</span>() == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-built_in">DCHECK</span>(!error_msg-&gt;<span class="hljs-built_in">empty</span>());<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//如果是zip文件头</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsZipMagic</span>(magic)) &#123;<br>        <span class="hljs-comment">//通过DexFile::OpenZip()打开zip文件</span><br>        <span class="hljs-keyword">return</span> DexFile::<span class="hljs-built_in">OpenZip</span>(fd.<span class="hljs-built_in">Release</span>(), location, verify_checksum, error_msg, dex_files);<br>    &#125;<br>    <span class="hljs-comment">//如果是dex文件头</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsDexMagic</span>(magic)) &#123;<br><span class="hljs-comment">//通过DexFile::OpenFile()打开dex文件</span><br>        <span class="hljs-function">std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt; <span class="hljs-title">dex_file</span><span class="hljs-params">(DexFile::OpenFile(fd.Release(),</span></span><br><span class="hljs-params"><span class="hljs-function">                                                                  location,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                                  <span class="hljs-comment">/* verify */</span> <span class="hljs-literal">true</span>,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                                  verify_checksum,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                                  error_msg))</span></span>;<br>        <span class="hljs-keyword">if</span> (dex_file.<span class="hljs-built_in">get</span>() != <span class="hljs-literal">nullptr</span>) &#123;<br>            dex_files-&gt;<span class="hljs-built_in">push_back</span>(std::<span class="hljs-built_in">move</span>(dex_file));<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    *error_msg = <span class="hljs-built_in">StringPrintf</span>(<span class="hljs-string">&quot;Expected valid zip or dex file: &#x27;%s&#x27;&quot;</span>, filename);<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对<code>DexFile::Open()</code>的参数进行说明：</p><ul><li>filename：dex文件名。</li><li>location：dex文件的位置。</li><li>verify_checksum：表示是否要验证dex文件的校验和。</li><li>error_msg：指向错误信息字符串的指针。</li><li>dex_files：存储dex file的DexFile数组。</li></ul><p>整个代码逻辑比较简单，首先通过<code>OpenAndReadMagic()</code>获取文件头，然后根据文件头判断文件类型，执行不同代码：如果是zip文件，则调用<code>DexFile::OpenZip()</code>打开zip文件，如果是dex文件，则调用<code>DexFile::OpenFile()</code>打开dex文件。</p><p>其中<code>OpenAndReadMagic()</code>可以作为一个脱壳点，但并不是很适合，因为此时dex文件还没有加载到内存中。</p><h3 id="1-2-1-DexFile-OpenZip"><a href="#1-2-1-DexFile-OpenZip" class="headerlink" title="1.2.1 DexFile::OpenZip()"></a>1.2.1 DexFile::OpenZip()</h3><p>首先来看<code>DexFile::OpenZip()</code>方法，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">DexFile::OpenZip</span><span class="hljs-params">(<span class="hljs-type">int</span> fd,</span></span><br><span class="hljs-params"><span class="hljs-function">                      <span class="hljs-type">const</span> std::string&amp; location,</span></span><br><span class="hljs-params"><span class="hljs-function">                      <span class="hljs-type">bool</span> verify_checksum,</span></span><br><span class="hljs-params"><span class="hljs-function">                      std::string* error_msg,</span></span><br><span class="hljs-params"><span class="hljs-function">                      std::vector&lt;std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt;&gt;* dex_files)</span> </span>&#123;<br>    <span class="hljs-function">ScopedTrace <span class="hljs-title">trace</span><span class="hljs-params">(<span class="hljs-string">&quot;Dex file open Zip &quot;</span> + std::string(location))</span></span>;<br>    <span class="hljs-built_in">DCHECK</span>(dex_files != <span class="hljs-literal">nullptr</span>) &lt;&lt; <span class="hljs-string">&quot;DexFile::OpenZip: out-param is nullptr&quot;</span>;<br>    <span class="hljs-comment">//通过ZipArchive::OpenFromFd()打开zip文件</span><br>    <span class="hljs-function">std::unique_ptr&lt;ZipArchive&gt; <span class="hljs-title">zip_archive</span><span class="hljs-params">(ZipArchive::OpenFromFd(fd, location.c_str(), error_msg))</span></span>;<br>    <span class="hljs-keyword">if</span> (zip_archive.<span class="hljs-built_in">get</span>() == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-built_in">DCHECK</span>(!error_msg-&gt;<span class="hljs-built_in">empty</span>());<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//通过DexFile::OpenAllDexFilesFromZip()打开zip中的所有dex文件</span><br>    <span class="hljs-keyword">return</span> DexFile::<span class="hljs-built_in">OpenAllDexFilesFromZip</span>(*zip_archive,<br>                                           location,<br>                                           verify_checksum,<br>                                           error_msg,<br>                                           dex_files);<br>&#125;<br></code></pre></td></tr></table></figure><p>主要是调用<code>DexFile::OpenAllDexFilesFromZip()</code>方法，该方法的代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//路径：/art/runtime/dex_file.cc</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">DexFile::OpenAllDexFilesFromZip</span><span class="hljs-params">(<span class="hljs-type">const</span> ZipArchive&amp; zip_archive,</span></span><br><span class="hljs-params"><span class="hljs-function">                                     <span class="hljs-type">const</span> std::string&amp; location,</span></span><br><span class="hljs-params"><span class="hljs-function">                                     <span class="hljs-type">bool</span> verify_checksum,</span></span><br><span class="hljs-params"><span class="hljs-function">                                     std::string* error_msg,</span></span><br><span class="hljs-params"><span class="hljs-function">                                     std::vector&lt;std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt;&gt;* dex_files)</span> </span>&#123;<br>    <span class="hljs-function">ScopedTrace <span class="hljs-title">trace</span><span class="hljs-params">(<span class="hljs-string">&quot;Dex file open from Zip &quot;</span> + std::string(location))</span></span>;<br>    <span class="hljs-built_in">DCHECK</span>(dex_files != <span class="hljs-literal">nullptr</span>) &lt;&lt; <span class="hljs-string">&quot;DexFile::OpenFromZip: out-param is nullptr&quot;</span>;<br>    ZipOpenErrorCode error_code;<br>    <span class="hljs-comment">//调用OpenOneDexFileFromZip()从zip文件中打开dex文件</span><br>    <span class="hljs-function">std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt; <span class="hljs-title">dex_file</span><span class="hljs-params">(OpenOneDexFileFromZip(zip_archive, kClassesDex, location, verify_checksum, error_msg, &amp;error_code))</span></span>;<br>    <span class="hljs-keyword">if</span> (dex_file.<span class="hljs-built_in">get</span>() == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        dex_files-&gt;<span class="hljs-built_in">push_back</span>(std::<span class="hljs-built_in">move</span>(dex_file));<br><span class="hljs-comment">//zip文件中存在多个dex文件</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">1</span>; ; ++i) &#123;<br>            std::string name = <span class="hljs-built_in">GetMultiDexClassesDexName</span>(i);<br>            std::string fake_location = <span class="hljs-built_in">GetMultiDexLocation</span>(i, location.<span class="hljs-built_in">c_str</span>());<br>            <span class="hljs-comment">//调用OpenOneDexFileFromZip()</span><br>            <span class="hljs-function">std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt; <span class="hljs-title">next_dex_file</span><span class="hljs-params">(OpenOneDexFileFromZip(zip_archive, name.c_str(), fake_location, verify_checksum, error_msg, &amp;error_code))</span></span>;<br>            <span class="hljs-keyword">if</span> (next_dex_file.<span class="hljs-built_in">get</span>() == <span class="hljs-literal">nullptr</span>) &#123;<br>                <span class="hljs-keyword">if</span> (error_code != ZipOpenErrorCode::kEntryNotFound) &#123;<br>                    <span class="hljs-built_in">LOG</span>(WARNING) &lt;&lt; <span class="hljs-string">&quot;Zip open failed: &quot;</span> &lt;&lt; *error_msg;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                dex_files-&gt;<span class="hljs-built_in">push_back</span>(std::<span class="hljs-built_in">move</span>(next_dex_file));<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (i == kWarnOnManyDexFilesThreshold) &#123;<br>                <span class="hljs-built_in">LOG</span>(WARNING) &lt;&lt; location &lt;&lt; <span class="hljs-string">&quot; has in excess of &quot;</span> &lt;&lt; kWarnOnManyDexFilesThreshold<br>                    &lt;&lt; <span class="hljs-string">&quot; dex files. Please consider coalescing and shrinking the number to &quot;</span><br>                    <span class="hljs-string">&quot; avoid runtime overhead.&quot;</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (i == std::numeric_limits&lt;<span class="hljs-type">size_t</span>&gt;::<span class="hljs-built_in">max</span>()) &#123;<br>                <span class="hljs-built_in">LOG</span>(ERROR) &lt;&lt; <span class="hljs-string">&quot;Overflow in number of dex files!&quot;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要是调用<code>OpenOneDexFileFromZip()</code>方法单独打开zip文件中的dex文件，该方法的代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//路径：/art/runtime/dex_file.cc</span><br><span class="hljs-function">std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt; <span class="hljs-title">DexFile::OpenOneDexFileFromZip</span><span class="hljs-params">(<span class="hljs-type">const</span> ZipArchive&amp; zip_archive,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                              <span class="hljs-type">const</span> <span class="hljs-type">char</span>* entry_name,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                              <span class="hljs-type">const</span> std::string&amp; location,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                              <span class="hljs-type">bool</span> verify_checksum,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                              std::string* error_msg,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                              ZipOpenErrorCode* error_code)</span> </span>&#123;<br>    <span class="hljs-function">ScopedTrace <span class="hljs-title">trace</span><span class="hljs-params">(<span class="hljs-string">&quot;Dex file open from Zip Archive &quot;</span> + std::string(location))</span></span>;<br>    <span class="hljs-built_in">CHECK</span>(!location.<span class="hljs-built_in">empty</span>());<br>    <br>    <span class="hljs-comment">//调用zip_archive.Find()找到给定的dex文件</span><br>    <span class="hljs-function">std::unique_ptr&lt;ZipEntry&gt; <span class="hljs-title">zip_entry</span><span class="hljs-params">(zip_archive.Find(entry_name, error_msg))</span></span>;<br>    <span class="hljs-keyword">if</span> (zip_entry == <span class="hljs-literal">nullptr</span>) &#123;<br>        *error_code = ZipOpenErrorCode::kEntryNotFound;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (zip_entry-&gt;<span class="hljs-built_in">GetUncompressedLength</span>() == <span class="hljs-number">0</span>) &#123;<br>        *error_msg = <span class="hljs-built_in">StringPrintf</span>(<span class="hljs-string">&quot;Dex file &#x27;%s&#x27; has zero length&quot;</span>, location.<span class="hljs-built_in">c_str</span>());<br>        *error_code = ZipOpenErrorCode::kDexFileError;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br>    std::unique_ptr&lt;MemMap&gt; map;<br>    <span class="hljs-keyword">if</span> (zip_entry-&gt;<span class="hljs-built_in">IsUncompressed</span>()) &#123;<br>        <span class="hljs-comment">//是否文件对齐</span><br>        <span class="hljs-keyword">if</span> (!zip_entry-&gt;<span class="hljs-built_in">IsAlignedTo</span>(<span class="hljs-built_in">alignof</span>(Header))) &#123;<br>            ......<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// dex文件解压缩?</span><br>            map.<span class="hljs-built_in">reset</span>(zip_entry-&gt;<span class="hljs-built_in">MapDirectlyFromFile</span>(location.<span class="hljs-built_in">c_str</span>(), <span class="hljs-comment">/*out*/</span>error_msg));<br>            <span class="hljs-keyword">if</span> (map == <span class="hljs-literal">nullptr</span>) &#123;<br>                <span class="hljs-built_in">LOG</span>(WARNING) &lt;&lt; <span class="hljs-string">&quot;Can&#x27;t mmap dex file &quot;</span> &lt;&lt; location &lt;&lt; <span class="hljs-string">&quot;!&quot;</span> &lt;&lt; entry_name &lt;&lt; <span class="hljs-string">&quot; directly; &quot;</span><br>                    &lt;&lt; <span class="hljs-string">&quot;is your ZIP file corrupted? Falling back to extraction.&quot;</span>;<br>                <span class="hljs-comment">// Try again with Extraction which still has a chance of recovery.</span><br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (map == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-comment">// Default path for compressed ZIP entries,</span><br>        <span class="hljs-comment">// and fallback for stored ZIP entries.</span><br>        map.<span class="hljs-built_in">reset</span>(zip_entry-&gt;<span class="hljs-built_in">ExtractToMemMap</span>(location.<span class="hljs-built_in">c_str</span>(), entry_name, error_msg));<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (map == <span class="hljs-literal">nullptr</span>) &#123;<br>        *error_msg = <span class="hljs-built_in">StringPrintf</span>(<span class="hljs-string">&quot;Failed to extract &#x27;%s&#x27; from &#x27;%s&#x27;: %s&quot;</span>, entry_name, location.<span class="hljs-built_in">c_str</span>(), error_msg-&gt;<span class="hljs-built_in">c_str</span>());<br>        *error_code = ZipOpenErrorCode::kExtractToMemoryError;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    VerifyResult verify_result;<br>    std::unique_ptr&lt;DexFile&gt; dex_file = <span class="hljs-built_in">OpenCommon</span>(map-&gt;<span class="hljs-built_in">Begin</span>(),<br>                                                   map-&gt;<span class="hljs-built_in">Size</span>(),<br>                                                   location,<br>                                                   zip_entry-&gt;<span class="hljs-built_in">GetCrc32</span>(),<br>                                                   kNoOatDexFile,<br>                                                   <span class="hljs-comment">/* verify */</span> <span class="hljs-literal">true</span>,<br>                                                   verify_checksum,<br>                                                   error_msg,<br>                                                   &amp;verify_result);<br>    <span class="hljs-keyword">if</span> (dex_file == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-keyword">if</span> (verify_result == VerifyResult::kVerifyNotAttempted) &#123;<br>            *error_code = ZipOpenErrorCode::kDexFileError;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            *error_code = ZipOpenErrorCode::kVerifyError;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    dex_file-&gt;mem_map_.<span class="hljs-built_in">reset</span>(map.<span class="hljs-built_in">release</span>());<br>    <span class="hljs-keyword">if</span> (!dex_file-&gt;<span class="hljs-built_in">DisableWrite</span>()) &#123;<br>        *error_msg = <span class="hljs-built_in">StringPrintf</span>(<span class="hljs-string">&quot;Failed to make dex file &#x27;%s&#x27; read only&quot;</span>, location.<span class="hljs-built_in">c_str</span>());<br>        *error_code = ZipOpenErrorCode::kMakeReadOnlyError;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    <span class="hljs-built_in">CHECK</span>(dex_file-&gt;<span class="hljs-built_in">IsReadOnly</span>()) &lt;&lt; location;<br>    <span class="hljs-keyword">if</span> (verify_result != VerifyResult::kVerifySucceeded) &#123;<br>        *error_code = ZipOpenErrorCode::kVerifyError;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    *error_code = ZipOpenErrorCode::kNoError;<br>    <span class="hljs-keyword">return</span> dex_file;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终还是调用<code>OpenCommon()</code>方法。</p><h3 id="1-2-2-DexFile-OpenFile"><a href="#1-2-2-DexFile-OpenFile" class="headerlink" title="1.2.2 DexFile::OpenFile()"></a>1.2.2 DexFile::OpenFile()</h3><p>然后是<code>DexFile::OpenFile()</code>，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//路径：/art/runtime/dex_file.cc</span><br><span class="hljs-function">std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt; <span class="hljs-title">DexFile::OpenFile</span><span class="hljs-params">(<span class="hljs-type">int</span> fd,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                 <span class="hljs-type">const</span> std::string&amp; location,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                 <span class="hljs-type">bool</span> verify,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                 <span class="hljs-type">bool</span> verify_checksum,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                 std::string* error_msg)</span> </span>&#123;<br>    <span class="hljs-function">ScopedTrace <span class="hljs-title">trace</span><span class="hljs-params">(std::string(<span class="hljs-string">&quot;Open dex file &quot;</span>) + std::string(location))</span></span>;<br>    <span class="hljs-built_in">CHECK</span>(!location.<span class="hljs-built_in">empty</span>());<br>    std::unique_ptr&lt;MemMap&gt; map;<br>    &#123;<br>        <span class="hljs-function">File <span class="hljs-title">delayed_close</span><span class="hljs-params">(fd, <span class="hljs-comment">/* check_usage */</span> <span class="hljs-literal">false</span>)</span></span>;<br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">stat</span> sbuf;<br>        <span class="hljs-built_in">memset</span>(&amp;sbuf, <span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(sbuf));<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">fstat</span>(fd, &amp;sbuf) == <span class="hljs-number">-1</span>) &#123;<br>            *error_msg = <span class="hljs-built_in">StringPrintf</span>(<span class="hljs-string">&quot;DexFile: fstat &#x27;%s&#x27; failed: %s&quot;</span>, location.<span class="hljs-built_in">c_str</span>(),<br>                                      <span class="hljs-built_in">strerror</span>(errno));<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">S_ISDIR</span>(sbuf.st_mode)) &#123;<br>            *error_msg = <span class="hljs-built_in">StringPrintf</span>(<span class="hljs-string">&quot;Attempt to mmap directory &#x27;%s&#x27;&quot;</span>, location.<span class="hljs-built_in">c_str</span>());<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>        <span class="hljs-type">size_t</span> length = sbuf.st_size;<br>        <span class="hljs-comment">//将dex文件映射到内存中</span><br>        map.<span class="hljs-built_in">reset</span>(MemMap::<span class="hljs-built_in">MapFile</span>(length,<br>                                  PROT_READ,<br>                                  MAP_PRIVATE,<br>                                  fd,<br>                                  <span class="hljs-number">0</span>,<br>                                  <span class="hljs-comment">/*low_4gb*/</span><span class="hljs-literal">false</span>,<br>                                  location.<span class="hljs-built_in">c_str</span>(),<br>                                  error_msg));<br>        <span class="hljs-keyword">if</span> (map == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-built_in">DCHECK</span>(!error_msg-&gt;<span class="hljs-built_in">empty</span>());<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (map-&gt;<span class="hljs-built_in">Size</span>() &lt; <span class="hljs-built_in">sizeof</span>(DexFile::Header)) &#123;<br>        *error_msg = <span class="hljs-built_in">StringPrintf</span>(<br>            <span class="hljs-string">&quot;DexFile: failed to open dex file &#x27;%s&#x27; that is too short to have a header&quot;</span>,<br>            location.<span class="hljs-built_in">c_str</span>());<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br>    <span class="hljs-type">const</span> Header* dex_header = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> Header*&gt;(map-&gt;<span class="hljs-built_in">Begin</span>());<br><br>    std::unique_ptr&lt;DexFile&gt; dex_file = <span class="hljs-built_in">OpenCommon</span>(map-&gt;<span class="hljs-built_in">Begin</span>(),<br>                                                   map-&gt;<span class="hljs-built_in">Size</span>(),<br>                                                   location,<br>                                                   dex_header-&gt;checksum_,<br>                                                   kNoOatDexFile,<br>                                                   verify,<br>                                                   verify_checksum,<br>                                                   error_msg);<br>    <span class="hljs-keyword">if</span> (dex_file != <span class="hljs-literal">nullptr</span>) &#123;<br>        dex_file-&gt;mem_map_.<span class="hljs-built_in">reset</span>(map.<span class="hljs-built_in">release</span>());<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> dex_file;<br>&#125;<br></code></pre></td></tr></table></figure><p>最终也是调用<code>OpenCommon()</code>方法。</p><p>由此看见，无论dex文件的打开过程多么曲折和多样，最终都会调用<code>OpenCommon()</code>方法，因此该方法可作为<strong>脱壳点</strong>使用（Android 7对应的是<code>OpenMemory()</code>）</p><h1 id="二、OpenCommon"><a href="#二、OpenCommon" class="headerlink" title="二、OpenCommon()"></a>二、OpenCommon()</h1><p><code>OpenCommon()</code>方法对应代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//路径：/art/runtime/dex_file.cc</span><br><span class="hljs-function">std::unique_ptr&lt;DexFile&gt; <span class="hljs-title">DexFile::OpenCommon</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span>* base,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             <span class="hljs-type">size_t</span> size,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             <span class="hljs-type">const</span> std::string&amp; location,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             <span class="hljs-type">uint32_t</span> location_checksum,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             <span class="hljs-type">const</span> OatDexFile* oat_dex_file,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             <span class="hljs-type">bool</span> verify,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             <span class="hljs-type">bool</span> verify_checksum,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             std::string* error_msg,</span></span><br><span class="hljs-params"><span class="hljs-function">                                             VerifyResult* verify_result)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (verify_result != <span class="hljs-literal">nullptr</span>) &#123;<br>        *verify_result = VerifyResult::kVerifyNotAttempted;<br>    &#125;<br>    <span class="hljs-comment">//创建DexFile对象</span><br>    <span class="hljs-function">std::unique_ptr&lt;DexFile&gt; <span class="hljs-title">dex_file</span><span class="hljs-params">(<span class="hljs-keyword">new</span> DexFile(base,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                  size,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                  location,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                  location_checksum,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                  oat_dex_file))</span></span>;<br>    <span class="hljs-keyword">if</span> (dex_file == <span class="hljs-literal">nullptr</span>) &#123;<br>        *error_msg = <span class="hljs-built_in">StringPrintf</span>(<span class="hljs-string">&quot;Failed to open dex file &#x27;%s&#x27; from memory: %s&quot;</span>, location.<span class="hljs-built_in">c_str</span>(),<br>                                  error_msg-&gt;<span class="hljs-built_in">c_str</span>());<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    <span class="hljs-comment">//Init()初始化dex file</span><br>    <span class="hljs-keyword">if</span> (!dex_file-&gt;<span class="hljs-built_in">Init</span>(error_msg)) &#123;<br>        dex_file.<span class="hljs-built_in">reset</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    <span class="hljs-comment">//Verify()对dex file进行验证</span><br>    <span class="hljs-keyword">if</span> (verify &amp;&amp; !DexFileVerifier::<span class="hljs-built_in">Verify</span>(dex_file.<span class="hljs-built_in">get</span>(),<br>                                           dex_file-&gt;<span class="hljs-built_in">Begin</span>(),<br>                                           dex_file-&gt;<span class="hljs-built_in">Size</span>(),<br>                                           location.<span class="hljs-built_in">c_str</span>(),<br>                                           verify_checksum,<br>                                           error_msg)) &#123;<br>        <span class="hljs-keyword">if</span> (verify_result != <span class="hljs-literal">nullptr</span>) &#123;<br>            *verify_result = VerifyResult::kVerifyFailed;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (verify_result != <span class="hljs-literal">nullptr</span>) &#123;<br>        *verify_result = VerifyResult::kVerifySucceeded;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dex_file;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要是调用<code>DexFile()</code>创建DexFile对象，然后调用<code>Init()</code>方法进行初始化工作，最后调用<code>Verify()</code>方法对dex文件进行验证。</p><h2 id="2-1-DexFile"><a href="#2-1-DexFile" class="headerlink" title="2.1 DexFile()"></a>2.1 DexFile()</h2><p><code>DexFile()</code>方法的代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs cpp">DexFile::<span class="hljs-built_in">DexFile</span>(<span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span>* base,<br>                 <span class="hljs-type">size_t</span> size,<br>                 <span class="hljs-type">const</span> std::string&amp; location,<br>                 <span class="hljs-type">uint32_t</span> location_checksum,<br>                 <span class="hljs-type">const</span> OatDexFile* oat_dex_file)<br>    : <span class="hljs-built_in">begin_</span>(base),<br>      <span class="hljs-built_in">size_</span>(size),<br>      <span class="hljs-built_in">location_</span>(location),<br>      <span class="hljs-built_in">location_checksum_</span>(location_checksum),<br>      <span class="hljs-built_in">header_</span>(<span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> Header*&gt;(base)),<br>      <span class="hljs-built_in">string_ids_</span>(<span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> StringId*&gt;(base + header_-&gt;string_ids_off_)),<br>      <span class="hljs-built_in">type_ids_</span>(<span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> TypeId*&gt;(base + header_-&gt;type_ids_off_)),<br>      <span class="hljs-built_in">field_ids_</span>(<span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> FieldId*&gt;(base + header_-&gt;field_ids_off_)),<br>      <span class="hljs-built_in">method_ids_</span>(<span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> MethodId*&gt;(base + header_-&gt;method_ids_off_)),<br>      <span class="hljs-built_in">proto_ids_</span>(<span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> ProtoId*&gt;(base + header_-&gt;proto_ids_off_)),<br>      <span class="hljs-built_in">class_defs_</span>(<span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> ClassDef*&gt;(base + header_-&gt;class_defs_off_)),<br>      <span class="hljs-built_in">method_handles_</span>(<span class="hljs-literal">nullptr</span>),<br>      <span class="hljs-built_in">num_method_handles_</span>(<span class="hljs-number">0</span>),<br>      <span class="hljs-built_in">call_site_ids_</span>(<span class="hljs-literal">nullptr</span>),<br>      <span class="hljs-built_in">num_call_site_ids_</span>(<span class="hljs-number">0</span>),<br>      <span class="hljs-built_in">oat_dex_file_</span>(oat_dex_file) &#123;<br><br>    <span class="hljs-built_in">CHECK</span>(begin_ != <span class="hljs-literal">nullptr</span>) &lt;&lt; <span class="hljs-built_in">GetLocation</span>();<br>    <span class="hljs-built_in">CHECK_GT</span>(size_, <span class="hljs-number">0U</span>) &lt;&lt; <span class="hljs-built_in">GetLocation</span>();<br>    <span class="hljs-comment">// Check base (=header) alignment.</span><br>    <span class="hljs-comment">// Must be 4-byte aligned to avoid undefined behavior when accessing</span><br>    <span class="hljs-comment">// any of the sections via a pointer.</span><br>    <span class="hljs-built_in">CHECK_ALIGNED</span>(begin_, <span class="hljs-built_in">alignof</span>(Header));<br><br>    <span class="hljs-built_in">InitializeSectionsFromMapList</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p><code>DexFile()</code>函数后面加<code>:</code>是赋值的意思，即把<code>()</code>中的变量赋值给<code>()</code>前的变量。因为该方法带有dex的base和size参数，所以也可以作为一个脱壳点。</p><p>整个函数主要是调用了<code>InitializeSectionsFromMapList()</code>方法。该方法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DexFile::InitializeSectionsFromMapList</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">const</span> MapList* map_list = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> MapList*&gt;(begin_ + header_-&gt;map_off_);<br>    <span class="hljs-keyword">if</span> (header_-&gt;map_off_ == <span class="hljs-number">0</span> || header_-&gt;map_off_ &gt; size_) &#123;<br>        <span class="hljs-comment">// Bad offset. The dex file verifier runs after this method and will reject the file.</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-type">const</span> <span class="hljs-type">size_t</span> count = map_list-&gt;size_;<br><br>    <span class="hljs-type">size_t</span> map_limit = header_-&gt;map_off_ + count * <span class="hljs-built_in">sizeof</span>(MapItem);<br>    <span class="hljs-keyword">if</span> (header_-&gt;map_off_ &gt;= map_limit || map_limit &gt; size_) &#123;<br>        <span class="hljs-comment">// Overflow or out out of bounds. The dex file verifier runs after</span><br>        <span class="hljs-comment">// this method and will reject the file as it is malformed.</span><br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; count; ++i) &#123;<br>        <span class="hljs-type">const</span> MapItem&amp; map_item = map_list-&gt;list_[i];<br>        <span class="hljs-keyword">if</span> (map_item.type_ == kDexTypeMethodHandleItem) &#123;<br>            method_handles_ = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> MethodHandleItem*&gt;(begin_ + map_item.offset_);<br>            num_method_handles_ = map_item.size_;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (map_item.type_ == kDexTypeCallSiteIdItem) &#123;<br>            call_site_ids_ = <span class="hljs-built_in">reinterpret_cast</span>&lt;<span class="hljs-type">const</span> CallSiteIdItem*&gt;(begin_ + map_item.offset_);<br>            num_call_site_ids_ = map_item.size_;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码逻辑为：通过dex文件中的map_list结构来解析dex文件。</p><h2 id="2-2-Init"><a href="#2-2-Init" class="headerlink" title="2.2 Init()"></a>2.2 Init()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">bool DexFile::Init(std::string* error_msg) &#123;<br>    <span class="hljs-keyword">if</span> (!CheckMagicAndVersion(error_msg)) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用<code>CheckMagicAndVersion()</code>方法检查magic，即文件头和版本号。</p><h2 id="2-3-DexFileVerifier-Verify"><a href="#2-3-DexFileVerifier-Verify" class="headerlink" title="2.3 DexFileVerifier::Verify()"></a>2.3 DexFileVerifier::Verify()</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//路径：/art/runtime/dex_file_verifier.cc</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">DexFileVerifier::Verify</span><span class="hljs-params">(<span class="hljs-type">const</span> DexFile* dex_file,</span></span><br><span class="hljs-params"><span class="hljs-function">                             <span class="hljs-type">const</span> <span class="hljs-type">uint8_t</span>* begin,</span></span><br><span class="hljs-params"><span class="hljs-function">                             <span class="hljs-type">size_t</span> size,</span></span><br><span class="hljs-params"><span class="hljs-function">                             <span class="hljs-type">const</span> <span class="hljs-type">char</span>* location,</span></span><br><span class="hljs-params"><span class="hljs-function">                             <span class="hljs-type">bool</span> verify_checksum,</span></span><br><span class="hljs-params"><span class="hljs-function">                             std::string* error_msg)</span> </span>&#123;<br>    <span class="hljs-function">std::unique_ptr&lt;DexFileVerifier&gt; <span class="hljs-title">verifier</span><span class="hljs-params">(</span></span><br><span class="hljs-params"><span class="hljs-function">        <span class="hljs-keyword">new</span> DexFileVerifier(dex_file, begin, size, location, verify_checksum))</span></span>;<br>    <span class="hljs-keyword">if</span> (!verifier-&gt;<span class="hljs-built_in">Verify</span>()) &#123;<br>        *error_msg = verifier-&gt;<span class="hljs-built_in">FailureReason</span>();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上述代码功能主要是创建DexFileVerifier对象，并调用<code>Verify()</code>方法验证dex文件结构。<code>Verify()</code>方法的代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//路径：/art/runtime/dex_file_verifier.cc</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">DexFileVerifier::Verify</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 检查dexheaer</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">CheckHeader</span>()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 检查map_list</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">CheckMap</span>()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 检查剩余部分，如string_ids、type_ids等</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">CheckIntraSection</span>()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// Check references from one section to another.</span><br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">CheckInterSection</span>()) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三、总览图"><a href="#三、总览图" class="headerlink" title="三、总览图"></a>三、总览图</h1><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202311202114333.png"></p><hr><p>参考：</p><p><a href="http://aospxref.com/android-8.0.0_r36/">http://aospxref.com/android-8.0.0_r36/</a></p><p>[<a href="https://bbs.kanxue.com/thread-257917.htm">原创]菜鸟学8.1版本dex加载流程笔记–第二篇:DexFile::Open流程与简单脱壳原理-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p><p>[<a href="https://bbs.kanxue.com/thread-277771.htm#msg_header_h2_2">原创]ART环境下dex加载流程分析及frida dump dex方案-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android源码解析</tag>
      
      <tag>dex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dex文件加载流程(二)</title>
    <link href="/2023/11/20/dex%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B(%E4%BA%8C)/"/>
    <url>/2023/11/20/dex%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<p>书接上文<a href="https://gal2xy.github.io/2023/11/20/dex%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B(%E4%B8%80)/">dex文件加载流程(一)(gal2xy.github.io)</a>。</p><h1 id="一、DexFile-openDexFileNative"><a href="#一、DexFile-openDexFileNative" class="headerlink" title="一、DexFile_openDexFileNative()"></a>一、DexFile_openDexFileNative()</h1><p>学习完上一篇文章，我们知道：不管是用PathClassLoader还是DexClassLoader加载dex文件，它们最终都会调用<code>openDexFileNative()</code>方法，该方法对应<code>art/runtime/native/dalivk_system_DexFile.cc</code>目录下的<code>DexFile_openDexFileNative()</code>方法，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//路径：art/runtime/native/dalivk_system_DexFile.cc</span><br><span class="hljs-function"><span class="hljs-type">static</span> jobject <span class="hljs-title">DexFile_openDexFileNative</span><span class="hljs-params">(JNIEnv* env,</span></span><br><span class="hljs-params"><span class="hljs-function">                                         jclass,</span></span><br><span class="hljs-params"><span class="hljs-function">                                         jstring javaSourceName,</span></span><br><span class="hljs-params"><span class="hljs-function">                                         jstring javaOutputName ATTRIBUTE_UNUSED,</span></span><br><span class="hljs-params"><span class="hljs-function">                                         jint flags ATTRIBUTE_UNUSED,</span></span><br><span class="hljs-params"><span class="hljs-function">                                         jobject class_loader,</span></span><br><span class="hljs-params"><span class="hljs-function">                                         jobjectArray dex_elements)</span> </span>&#123;<br>    <span class="hljs-function">ScopedUtfChars <span class="hljs-title">sourceName</span><span class="hljs-params">(env, javaSourceName)</span></span>;<br>    <span class="hljs-keyword">if</span> (sourceName.<span class="hljs-built_in">c_str</span>() == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    Runtime* <span class="hljs-type">const</span> runtime = Runtime::<span class="hljs-built_in">Current</span>();<br>    ClassLinker* linker = runtime-&gt;<span class="hljs-built_in">GetClassLinker</span>();<br>    std::vector&lt;std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt;&gt; dex_files;<br>    std::vector&lt;std::string&gt; error_msgs;<br>    <span class="hljs-type">const</span> OatFile* oat_file = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-comment">//打开oat文件</span><br>    dex_files = runtime-&gt;<span class="hljs-built_in">GetOatFileManager</span>().<span class="hljs-built_in">OpenDexFilesFromOat</span>(sourceName.<span class="hljs-built_in">c_str</span>(),<br>                                                                 class_loader,<br>                                                                 dex_elements,<br>                                                                 <span class="hljs-comment">/*out*/</span> &amp;oat_file,<br>                                                                 <span class="hljs-comment">/*out*/</span> &amp;error_msgs);<br><br>    <span class="hljs-keyword">if</span> (!dex_files.<span class="hljs-built_in">empty</span>()) &#123;<br>        jlongArray array = <span class="hljs-built_in">ConvertDexFilesToJavaArray</span>(env, oat_file, dex_files);<br>        <span class="hljs-keyword">if</span> (array == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-function">ScopedObjectAccess <span class="hljs-title">soa</span><span class="hljs-params">(env)</span></span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; dex_file : dex_files) &#123;<br>                <span class="hljs-keyword">if</span> (linker-&gt;<span class="hljs-built_in">IsDexFileRegistered</span>(soa.<span class="hljs-built_in">Self</span>(), *dex_file)) &#123;<br>                    dex_file.<span class="hljs-built_in">release</span>();<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> array;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>       ......<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>整个代码关键部分是调用了<code>OpenDexFilesFromOat()</code>方法。</p><h1 id="二、OpenDexFilesFromOat"><a href="#二、OpenDexFilesFromOat" class="headerlink" title="二、OpenDexFilesFromOat()"></a>二、OpenDexFilesFromOat()</h1><p>对应代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//路径：/art/runtime/oat_file_manager.cc</span><br>std::vector&lt;std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt;&gt; OatFileManager::<span class="hljs-built_in">OpenDexFilesFromOat</span>(<br>                                            <span class="hljs-type">const</span> <span class="hljs-type">char</span>* dex_location,<br>                                            jobject class_loader,<br>                                            jobjectArray dex_elements,<br>                                            <span class="hljs-type">const</span> OatFile** out_oat_file,<br>                                            std::vector&lt;std::string&gt;* error_msgs) &#123;<br>    ......<br><span class="hljs-comment">//获取oat_file_assistant</span><br>    <span class="hljs-function">OatFileAssistant <span class="hljs-title">oat_file_assistant</span><span class="hljs-params">(dex_location, kRuntimeISA, !runtime-&gt;IsAotCompiler())</span></span>;<br><br>    ......<br><br>    <span class="hljs-type">const</span> OatFile* source_oat_file = <span class="hljs-literal">nullptr</span>;<br><span class="hljs-comment">//判断是否有生成 oat 文件</span><br>    <span class="hljs-keyword">if</span> (!oat_file_assistant.<span class="hljs-built_in">IsUpToDate</span>()) &#123;<br>        <span class="hljs-comment">//执行MakeUpToDate生成oat文件</span><br>        <span class="hljs-keyword">switch</span> (oat_file_assistant.<span class="hljs-built_in">MakeUpToDate</span>(<span class="hljs-comment">/*profile_changed*/</span><span class="hljs-literal">false</span>, <span class="hljs-comment">/*out*/</span> &amp;error_msg)) &#123;<br>            ......<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 通过oat_file_assistant.GetBestOatFile()获取oat文件</span><br>    <span class="hljs-function">std::unique_ptr&lt;<span class="hljs-type">const</span> OatFile&gt; <span class="hljs-title">oat_file</span><span class="hljs-params">(oat_file_assistant.GetBestOatFile().release())</span></span>;<br><br>    <span class="hljs-keyword">if</span> (oat_file != <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-type">bool</span> accept_oat_file = !<span class="hljs-built_in">HasCollisions</span>(oat_file.<span class="hljs-built_in">get</span>(), class_loader, dex_elements, <span class="hljs-comment">/*out*/</span> &amp;error_msg);<br>        <span class="hljs-keyword">if</span> (!accept_oat_file) &#123;<br>            <span class="hljs-comment">// 冲突检测失败，打印警告</span><br>            ......<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (accept_oat_file) &#123;<br>            <span class="hljs-built_in">VLOG</span>(class_linker) &lt;&lt; <span class="hljs-string">&quot;Registering &quot;</span> &lt;&lt; oat_file-&gt;<span class="hljs-built_in">GetLocation</span>();<br>            source_oat_file = <span class="hljs-built_in">RegisterOatFile</span>(std::<span class="hljs-built_in">move</span>(oat_file));<br>            *out_oat_file = source_oat_file;<br>        &#125;<br>    &#125;<br><br>    std::vector&lt;std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt;&gt; dex_files;<br><br>    <span class="hljs-comment">// 从oat文件中加载dex文件</span><br>    <span class="hljs-keyword">if</span> (source_oat_file != <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-type">bool</span> added_image_space = <span class="hljs-literal">false</span>;<br>        <span class="hljs-comment">//if语句这一大块的作用是给oat文件开辟镜像空间?</span><br>        <span class="hljs-keyword">if</span> (source_oat_file-&gt;<span class="hljs-built_in">IsExecutable</span>()) &#123;<br>            std::unique_ptr&lt;gc::space::ImageSpace&gt; image_space = kEnableAppImage ? oat_file_assistant.<span class="hljs-built_in">OpenImageSpace</span>(source_oat_file) : <span class="hljs-literal">nullptr</span>;<br>            <span class="hljs-keyword">if</span> (image_space != <span class="hljs-literal">nullptr</span>) &#123;<br>                <span class="hljs-function">ScopedObjectAccess <span class="hljs-title">soa</span><span class="hljs-params">(self)</span></span>;<br>                <span class="hljs-function">StackHandleScope&lt;1&gt; <span class="hljs-title">hs</span><span class="hljs-params">(self)</span></span>;<br>                <span class="hljs-function">Handle&lt;mirror::ClassLoader&gt; <span class="hljs-title">h_loader</span><span class="hljs-params">(hs.NewHandle(soa.Decode&lt;mirror::ClassLoader&gt;(class_loader)))</span></span>;<br>                <span class="hljs-comment">// Can not load app image without class loader.</span><br>                <span class="hljs-keyword">if</span> (h_loader != <span class="hljs-literal">nullptr</span>) &#123;<br>                    std::string temp_error_msg;<br>                    <span class="hljs-comment">// Add image space has a race condition since other threads could be reading from the</span><br>                    <span class="hljs-comment">// spaces array.</span><br>                    &#123;<br>                        <span class="hljs-function">ScopedThreadSuspension <span class="hljs-title">sts</span><span class="hljs-params">(self, kSuspended)</span></span>;<br>                        <span class="hljs-function">gc::ScopedGCCriticalSection <span class="hljs-title">gcs</span><span class="hljs-params">(self,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                        gc::kGcCauseAddRemoveAppImageSpace,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                        gc::kCollectorTypeAddRemoveAppImageSpace)</span></span>;<br>                        <span class="hljs-function">ScopedSuspendAll <span class="hljs-title">ssa</span><span class="hljs-params">(<span class="hljs-string">&quot;Add image space&quot;</span>)</span></span>;<br>                        runtime-&gt;<span class="hljs-built_in">GetHeap</span>()-&gt;<span class="hljs-built_in">AddSpace</span>(image_space.<span class="hljs-built_in">get</span>());<br>                    &#125;<br>                    &#123;<br>                        <span class="hljs-function">ScopedTrace <span class="hljs-title">trace2</span><span class="hljs-params">(StringPrintf(<span class="hljs-string">&quot;Adding image space for location %s&quot;</span>, dex_location))</span></span>;<br>                        added_image_space = runtime-&gt;<span class="hljs-built_in">GetClassLinker</span>()-&gt;<span class="hljs-built_in">AddImageSpace</span>(image_space.<span class="hljs-built_in">get</span>(),<br>                                                                                     h_loader,<br>                                                                                     dex_elements,<br>                                                                                     dex_location,<br>                                                                                     <span class="hljs-comment">/*out*/</span>&amp;dex_files,<br>                                                                                     <span class="hljs-comment">/*out*/</span>&amp;temp_error_msg);<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (added_image_space) &#123;<br>                        image_space.<span class="hljs-built_in">release</span>();<br>                    &#125; <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-built_in">LOG</span>(INFO) &lt;&lt; <span class="hljs-string">&quot;Failed to add image file &quot;</span> &lt;&lt; temp_error_msg;<br>                        dex_files.<span class="hljs-built_in">clear</span>();<br>                        &#123;<br>                            <span class="hljs-function">ScopedThreadSuspension <span class="hljs-title">sts</span><span class="hljs-params">(self, kSuspended)</span></span>;<br>                            <span class="hljs-function">gc::ScopedGCCriticalSection <span class="hljs-title">gcs</span><span class="hljs-params">(self,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                            gc::kGcCauseAddRemoveAppImageSpace,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                            gc::kCollectorTypeAddRemoveAppImageSpace)</span></span>;<br>                            <span class="hljs-function">ScopedSuspendAll <span class="hljs-title">ssa</span><span class="hljs-params">(<span class="hljs-string">&quot;Remove image space&quot;</span>)</span></span>;<br>                            runtime-&gt;<span class="hljs-built_in">GetHeap</span>()-&gt;<span class="hljs-built_in">RemoveSpace</span>(image_space.<span class="hljs-built_in">get</span>());<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!added_image_space) &#123;<br>            <span class="hljs-built_in">DCHECK</span>(dex_files.<span class="hljs-built_in">empty</span>());<br>            <span class="hljs-comment">//执行LoadDexFiles加载dex文件</span><br>            dex_files = oat_file_assistant.<span class="hljs-built_in">LoadDexFiles</span>(*source_oat_file, dex_location);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (dex_files.<span class="hljs-built_in">empty</span>()) &#123;<span class="hljs-comment">//获取dex文件失败</span><br>            error_msgs-&gt;<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;Failed to open dex files from &quot;</span> + source_oat_file-&gt;<span class="hljs-built_in">GetLocation</span>());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//从oat文件中加载dex文件失败</span><br>    <span class="hljs-keyword">if</span> (dex_files.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-keyword">if</span> (oat_file_assistant.<span class="hljs-built_in">HasOriginalDexFiles</span>()) &#123;<span class="hljs-comment">//判断是否有原始dex文件</span><br>            <span class="hljs-keyword">if</span> (Runtime::<span class="hljs-built_in">Current</span>()-&gt;<span class="hljs-built_in">IsDexFileFallbackEnabled</span>()) &#123;<span class="hljs-comment">//是否启用了Dex文件的回退机制</span><br>                <span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> kVerifyChecksum = <span class="hljs-literal">true</span>;<br>                <span class="hljs-comment">//调用DexFile::Open()打开dex文件</span><br>                <span class="hljs-keyword">if</span> (!DexFile::<span class="hljs-built_in">Open</span>(dex_location, dex_location, kVerifyChecksum, <span class="hljs-comment">/*out*/</span> &amp;error_msg, &amp;dex_files)) &#123;<br>                    <span class="hljs-built_in">LOG</span>(WARNING) &lt;&lt; error_msg;<br>                    error_msgs-&gt;<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;Failed to open dex files from &quot;</span> + std::<span class="hljs-built_in">string</span>(dex_location)  + <span class="hljs-string">&quot; because: &quot;</span> + error_msg);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                error_msgs-&gt;<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;Fallback mode disabled, skipping dex files.&quot;</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            error_msgs-&gt;<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;No original dex files found for dex location &quot;</span> + std::<span class="hljs-built_in">string</span>(dex_location));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> dex_files;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上代码大致流程如下：</p><ol><li>通过<code>oat_file_assistant()</code>获取oat_file_assistant对象。</li><li>通过<code>oat_file_assistant.IsUpToDate()</code>判断是否有oat文件，没有调用<code>oat_file_assistant.MakeUpToDate()</code>则生成oat文件。</li><li>通过<code>oat_file_assistant.GetBestOatFile()</code>获取oat文件</li><li>调用<code>oat_file_assistant.LoadDexFiles()</code>从oat文件中加载dex文件。</li><li>如果从oat文件中加载dex文件失败，则调用<code>DexFile::Open()</code>加载dex文件。</li></ol><h2 id="2-1-GetBestOatFile"><a href="#2-1-GetBestOatFile" class="headerlink" title="2.1 GetBestOatFile()"></a>2.1 GetBestOatFile()</h2><p>先来看<code>GetBestOatFile()</code>方法，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//路径：/art/runtime/oat_file_assistant.cc</span><br><span class="hljs-function">std::unique_ptr&lt;OatFile&gt; <span class="hljs-title">OatFileAssistant::GetBestOatFile</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">GetBestInfo</span>().<span class="hljs-built_in">ReleaseFileForUse</span>();<br>&#125;<br><br><span class="hljs-function">OatFileAssistant::OatFileInfo&amp; <span class="hljs-title">OatFileAssistant::GetBestInfo</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-keyword">if</span> (dex_parent_writable_) &#123;<span class="hljs-comment">//dex文件父目录可写则选择odex</span><br>        <span class="hljs-keyword">return</span> odex_;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (oat_.<span class="hljs-built_in">IsUseable</span>()) &#123;<span class="hljs-comment">//oat文件可用选择oat</span><br>        <span class="hljs-keyword">return</span> oat_;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (odex_.<span class="hljs-built_in">Status</span>() == kOatUpToDate) &#123;<span class="hljs-comment">//odex文件最新</span><br>        <span class="hljs-keyword">return</span> odex_;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">HasOriginalDexFiles</span>()) &#123;<span class="hljs-comment">//如果有原始dex文件</span><br>        <span class="hljs-keyword">return</span> oat_;<br>    &#125;<br><span class="hljs-comment">//最糟糕的情况，有啥就选啥</span><br>    <span class="hljs-keyword">return</span> (odex_.<span class="hljs-built_in">Status</span>() == kOatCannotOpen) ? oat_ : odex_;<br>&#125;<br><br>std::unique_ptr&lt;OatFile&gt; OatFileAssistant::OatFileInfo::<span class="hljs-built_in">ReleaseFileForUse</span>() &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Status</span>() == kOatUpToDate) &#123;<span class="hljs-comment">//oat文件是最新的则释放文件以供直接使用</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">ReleaseFile</span>();<br>    &#125;<br><br>    <span class="hljs-built_in">VLOG</span>(oat) &lt;&lt; <span class="hljs-string">&quot;Oat File Assistant: No relocated oat file found,&quot;</span> &lt;&lt; <span class="hljs-string">&quot; attempting to fall back to interpreting oat file instead.&quot;</span>;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Status</span>() == kOatRelocationOutOfDate &amp;&amp; !<span class="hljs-built_in">IsExecutable</span>()) &#123;<span class="hljs-comment">//oat需要重定位且不可执行</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">ReleaseFile</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">Status</span>() == kOatRelocationOutOfDate) &#123;<span class="hljs-comment">//oat需要重定位</span><br>        <span class="hljs-comment">// 设置加载不可执行，以确保能够解析oat中的dex代码</span><br>        oat_file_assistant_-&gt;load_executable_ = <span class="hljs-literal">false</span>;<br>        <span class="hljs-built_in">Reset</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">IsUseable</span>()) &#123;<br>            <span class="hljs-built_in">CHECK</span>(!<span class="hljs-built_in">IsExecutable</span>());<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">ReleaseFile</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">unique_ptr</span>&lt;OatFile&gt;();<br>&#125;<br><br>std::unique_ptr&lt;OatFile&gt; OatFileAssistant::OatFileInfo::<span class="hljs-built_in">ReleaseFile</span>() &#123;<br>  file_released_ = <span class="hljs-literal">true</span>;<br>  <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">move</span>(file_);<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>GetBestOatFile()</code>方法中，首先调用<code>GetBestInfo()</code>来获取最佳的oat文件（代码中的<code>oat_</code>和<code>oat_</code>在<code>/art/runtime/oat_file_assistant.cc</code>定义），然后调用<code>ReleaseFileForUse()</code>方法根据oat文件的状态释放文件以供使用。</p><h3 id="2-1-1-Status"><a href="#2-1-1-Status" class="headerlink" title="2.1.1 Status()"></a>2.1.1 Status()</h3><p><code>GetBestInfo()</code>中使用的<code>Status()</code>方法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//路径：/art/runtime/oat_file_assistant.cc</span><br>OatFileAssistant::OatStatus OatFileAssistant::OatFileInfo::<span class="hljs-built_in">Status</span>() &#123;<br>    <span class="hljs-keyword">if</span> (!status_attempted_) &#123;<br>        status_attempted_ = <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">//打开oat文件</span><br>        <span class="hljs-type">const</span> OatFile* file = <span class="hljs-built_in">GetFile</span>();<br>        <span class="hljs-keyword">if</span> (file == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-comment">// Check to see if there is a vdex file we can make use of.</span><br>            std::string error_msg;<br>            std::string vdex_filename = <span class="hljs-built_in">GetVdexFilename</span>(filename_);<br>            <span class="hljs-comment">//打开vdex文件</span><br>            std::unique_ptr&lt;VdexFile&gt; vdex = VdexFile::<span class="hljs-built_in">Open</span>(vdex_filename,<br>                                                            <span class="hljs-comment">/*writeable*/</span><span class="hljs-literal">false</span>,<br>                                                            <span class="hljs-comment">/*low_4gb*/</span><span class="hljs-literal">false</span>,<br>                                                            <span class="hljs-comment">/*unquicken*/</span><span class="hljs-literal">false</span>,<br>                                                            &amp;error_msg);<br>            <span class="hljs-keyword">if</span> (vdex == <span class="hljs-literal">nullptr</span>) &#123;<br>                status_ = kOatCannotOpen;<br>                <span class="hljs-built_in">VLOG</span>(oat) &lt;&lt; <span class="hljs-string">&quot;unable to open vdex file &quot;</span> &lt;&lt; vdex_filename &lt;&lt; <span class="hljs-string">&quot;: &quot;</span> &lt;&lt; error_msg;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//检查vdex文件是否是最新的</span><br>                <span class="hljs-keyword">if</span> (oat_file_assistant_-&gt;<span class="hljs-built_in">DexChecksumUpToDate</span>(*vdex, &amp;error_msg)) &#123;<br>                    <span class="hljs-comment">// The vdex file does not contain enough information to determine</span><br>                    <span class="hljs-comment">// whether it is up to date with respect to the boot image, so we</span><br>                    <span class="hljs-comment">// assume it is out of date.</span><br>                    <span class="hljs-built_in">VLOG</span>(oat) &lt;&lt; error_msg;<br>                    status_ = kOatBootImageOutOfDate;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    status_ = kOatDexOutOfDate;<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            status_ = oat_file_assistant_-&gt;<span class="hljs-built_in">GivenOatFileStatus</span>(*file);<br>            <span class="hljs-built_in">VLOG</span>(oat) &lt;&lt; file-&gt;<span class="hljs-built_in">GetLocation</span>() &lt;&lt; <span class="hljs-string">&quot; is &quot;</span> &lt;&lt; status_<br>                &lt;&lt; <span class="hljs-string">&quot; with filter &quot;</span> &lt;&lt; file-&gt;<span class="hljs-built_in">GetCompilerFilter</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> status_;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先通过<code>GetFile()</code>方法打开oat文件，如果有vdex文件，则调用<code>VdexFile::Open()</code>方法打开vdex文件。</p><h4 id="2-1-1-1-GetFile"><a href="#2-1-1-1-GetFile" class="headerlink" title="2.1.1.1 GetFile()"></a>2.1.1.1 GetFile()</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">const</span> OatFile* OatFileAssistant::OatFileInfo::<span class="hljs-built_in">GetFile</span>() &#123;<br>    <span class="hljs-built_in">CHECK</span>(!file_released_) &lt;&lt; <span class="hljs-string">&quot;GetFile called after oat file released.&quot;</span>;<br>    <span class="hljs-keyword">if</span> (!load_attempted_) &#123;<br>        load_attempted_ = <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">if</span> (filename_provided_) &#123;<br>            std::string error_msg;<br>            file_.<span class="hljs-built_in">reset</span>(OatFile::<span class="hljs-built_in">Open</span>(filename_.<span class="hljs-built_in">c_str</span>(),<br>                                      filename_.<span class="hljs-built_in">c_str</span>(),<br>                                      <span class="hljs-literal">nullptr</span>,<br>                                      <span class="hljs-literal">nullptr</span>,<br>                                      oat_file_assistant_-&gt;load_executable_,<br>                                      <span class="hljs-comment">/*low_4gb*/</span><span class="hljs-literal">false</span>,<br>                                      oat_file_assistant_-&gt;dex_location_.<span class="hljs-built_in">c_str</span>(),<br>                                      &amp;error_msg));<br>            <span class="hljs-keyword">if</span> (file_.<span class="hljs-built_in">get</span>() == <span class="hljs-literal">nullptr</span>) &#123;<br>                <span class="hljs-built_in">VLOG</span>(oat) &lt;&lt; <span class="hljs-string">&quot;OatFileAssistant test for existing oat file &quot;</span><br>                    &lt;&lt; filename_ &lt;&lt; <span class="hljs-string">&quot;: &quot;</span> &lt;&lt; error_msg;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> file_.<span class="hljs-built_in">get</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>调用<code>OatFile::Open()</code>打开oat文件。</p><p><code>OatFile::Open()</code>和<code>VdexFile::Open()</code>等讲解oat和vdex文件加载时再详细分析，这里先打住，毕竟我们现在跟踪的是dex文件加载。</p><h2 id="2-2-LoadDexFiles"><a href="#2-2-LoadDexFiles" class="headerlink" title="2.2 LoadDexFiles()"></a>2.2 LoadDexFiles()</h2><p>再来看<code>LoadDexFiles()</code>方法，该方法的代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//路径：/art/runtime/oat_file_assistant.cc</span><br>std::vector&lt;std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt;&gt; OatFileAssistant::<span class="hljs-built_in">LoadDexFiles</span>(<br>    <span class="hljs-type">const</span> OatFile&amp; oat_file, <span class="hljs-type">const</span> <span class="hljs-type">char</span>* dex_location) &#123;<br>    std::vector&lt;std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt;&gt; dex_files;<br><br>    <span class="hljs-comment">// Load the main dex file.</span><br>    std::string error_msg;<br>    <br>    <span class="hljs-comment">//通过oat_file.GetOatDexFile()获得oat、dex文件</span><br>    <span class="hljs-type">const</span> OatFile::OatDexFile* oat_dex_file = oat_file.<span class="hljs-built_in">GetOatDexFile</span>(dex_location, <span class="hljs-literal">nullptr</span>, &amp;error_msg);<br>    <span class="hljs-keyword">if</span> (oat_dex_file == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-built_in">LOG</span>(WARNING) &lt;&lt; error_msg;<br>        <span class="hljs-keyword">return</span> std::vector&lt;std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt;&gt;();<br>    &#125;<br>    <br><span class="hljs-comment">//通过oat_dex_file-&gt;OpenDexFile()打开dex文件</span><br>    std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt; dex_file = oat_dex_file-&gt;<span class="hljs-built_in">OpenDexFile</span>(&amp;error_msg);<br>    <span class="hljs-keyword">if</span> (dex_file.<span class="hljs-built_in">get</span>() == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-built_in">LOG</span>(WARNING) &lt;&lt; <span class="hljs-string">&quot;Failed to open dex file from oat dex file: &quot;</span> &lt;&lt; error_msg;<br>        <span class="hljs-keyword">return</span> std::vector&lt;std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt;&gt;();<br>    &#125;<br>    <span class="hljs-comment">//添加dex文件到dex_files数组中</span><br>    dex_files.<span class="hljs-built_in">push_back</span>(std::<span class="hljs-built_in">move</span>(dex_file));<br><br>    <span class="hljs-comment">// 看是否存在多个dex文件</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">1</span>; ; i++) &#123;<br>        std::string multidex_dex_location = DexFile::<span class="hljs-built_in">GetMultiDexLocation</span>(i, dex_location);<br><span class="hljs-comment">//从oat中获取第i个dex文件</span><br>        oat_dex_file = oat_file.<span class="hljs-built_in">GetOatDexFile</span>(multidex_dex_location.<span class="hljs-built_in">c_str</span>(), <span class="hljs-literal">nullptr</span>);<br>        <span class="hljs-keyword">if</span> (oat_dex_file == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-comment">// There are no more multidex entries to load.</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br><span class="hljs-comment">//打开第i个dex文件</span><br>        dex_file = oat_dex_file-&gt;<span class="hljs-built_in">OpenDexFile</span>(&amp;error_msg);<br>        <span class="hljs-keyword">if</span> (dex_file.<span class="hljs-built_in">get</span>() == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-built_in">LOG</span>(WARNING) &lt;&lt; <span class="hljs-string">&quot;Failed to open dex file from oat dex file: &quot;</span> &lt;&lt; error_msg;<br>            <span class="hljs-keyword">return</span> std::vector&lt;std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt;&gt;();<br>        &#125;<br>        <span class="hljs-comment">//添加dex文件到dex_files数组中</span><br>        dex_files.<span class="hljs-built_in">push_back</span>(std::<span class="hljs-built_in">move</span>(dex_file));<br>    &#125;<br>    <span class="hljs-keyword">return</span> dex_files;<br>&#125;<br></code></pre></td></tr></table></figure><p>主要是<code>GetOatDexFile()</code>、<code>OpenDexFile()</code>，这两个方法与<code>OpenDexFilesFromOat()</code>方法中调用的<code>Open()</code>方法同在<code>oat_file.cc</code>文件中。</p><h3 id="2-2-1-GetOatDexFile"><a href="#2-2-1-GetOatDexFile" class="headerlink" title="2.2.1 GetOatDexFile()"></a>2.2.1 GetOatDexFile()</h3><p>先来看<code>GetOatDexFile()</code>，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//路径：/art/runtime/oat_file.cc</span><br><span class="hljs-function"><span class="hljs-type">const</span> OatFile::OatDexFile* <span class="hljs-title">OatFile::GetOatDexFile</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* dex_location,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                 <span class="hljs-type">const</span> <span class="hljs-type">uint32_t</span>* dex_location_checksum,</span></span><br><span class="hljs-params"><span class="hljs-function">                                                 std::string* error_msg)</span> <span class="hljs-type">const</span> </span>&#123;<br>    <span class="hljs-type">const</span> OatFile::OatDexFile* oat_dex_file = <span class="hljs-literal">nullptr</span>;<br>    <span class="hljs-function">StringPiece <span class="hljs-title">key</span><span class="hljs-params">(dex_location)</span></span>;<br>    <span class="hljs-comment">//通过key在oat_dex_files_map中找到dex文件所在位置</span><br>    <span class="hljs-keyword">auto</span> primary_it = oat_dex_files_.<span class="hljs-built_in">find</span>(key);<br>    <span class="hljs-keyword">if</span> (primary_it != oat_dex_files_.<span class="hljs-built_in">end</span>()) &#123;<span class="hljs-comment">//dex文件不唯一</span><br>        oat_dex_file = primary_it-&gt;second;<br>        <span class="hljs-built_in">DCHECK</span>(oat_dex_file != <span class="hljs-literal">nullptr</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// This dex_location is not one of the dex locations directly mentioned in the</span><br>        <span class="hljs-comment">// oat file. The correct lookup is via the canonical location but first see in</span><br>        <span class="hljs-comment">// the secondary_oat_dex_files_ whether we&#x27;ve looked up this location before.</span><br>        MutexLock <span class="hljs-built_in">mu</span>(Thread::<span class="hljs-built_in">Current</span>(), secondary_lookup_lock_);<br>        <span class="hljs-keyword">auto</span> secondary_lb = secondary_oat_dex_files_.<span class="hljs-built_in">lower_bound</span>(key);<br>        <span class="hljs-keyword">if</span> (secondary_lb != secondary_oat_dex_files_.<span class="hljs-built_in">end</span>() &amp;&amp; key == secondary_lb-&gt;first) &#123;<br>            oat_dex_file = secondary_lb-&gt;second;  <span class="hljs-comment">// May be null.</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// We haven&#x27;t seen this dex_location before, we must check the canonical location.</span><br>            std::string dex_canonical_location = DexFile::<span class="hljs-built_in">GetDexCanonicalLocation</span>(dex_location);<br>            <span class="hljs-keyword">if</span> (dex_canonical_location != dex_location) &#123;<br>                <span class="hljs-function">StringPiece <span class="hljs-title">canonical_key</span><span class="hljs-params">(dex_canonical_location)</span></span>;<br>                <span class="hljs-keyword">auto</span> canonical_it = oat_dex_files_.<span class="hljs-built_in">find</span>(canonical_key);<br>                <span class="hljs-keyword">if</span> (canonical_it != oat_dex_files_.<span class="hljs-built_in">end</span>()) &#123;<br>                    oat_dex_file = canonical_it-&gt;second;<br>                &#125;  <span class="hljs-comment">// else keep null.</span><br>            &#125;  <span class="hljs-comment">// else keep null.</span><br><br>            <span class="hljs-comment">// Copy the key to the string_cache_ and store the result in secondary map.</span><br>            string_cache_.<span class="hljs-built_in">emplace_back</span>(key.<span class="hljs-built_in">data</span>(), key.<span class="hljs-built_in">length</span>());<br>            <span class="hljs-function">StringPiece <span class="hljs-title">key_copy</span><span class="hljs-params">(string_cache_.back())</span></span>;<br>            secondary_oat_dex_files_.<span class="hljs-built_in">PutBefore</span>(secondary_lb, key_copy, oat_dex_file);<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//oat_dex_file获取失败</span><br>    <span class="hljs-keyword">if</span> (oat_dex_file == <span class="hljs-literal">nullptr</span>) &#123;<br>        <span class="hljs-keyword">if</span> (error_msg != <span class="hljs-literal">nullptr</span>) &#123;<br>            std::string dex_canonical_location = DexFile::<span class="hljs-built_in">GetDexCanonicalLocation</span>(dex_location);<br>            *error_msg = <span class="hljs-string">&quot;Failed to find OatDexFile for DexFile &quot;</span> + std::<span class="hljs-built_in">string</span>(dex_location)  + <span class="hljs-string">&quot; (canonical path &quot;</span> + dex_canonical_location + <span class="hljs-string">&quot;) in OatFile &quot;</span> + <span class="hljs-built_in">GetLocation</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><span class="hljs-comment">//验证oat_dex_file文件的校验码</span><br>    <span class="hljs-keyword">if</span> (dex_location_checksum != <span class="hljs-literal">nullptr</span> &amp;&amp; oat_dex_file-&gt;<span class="hljs-built_in">GetDexFileLocationChecksum</span>() != *dex_location_checksum) &#123;<br>        <span class="hljs-keyword">if</span> (error_msg != <span class="hljs-literal">nullptr</span>) &#123;<br>            std::string dex_canonical_location = DexFile::<span class="hljs-built_in">GetDexCanonicalLocation</span>(dex_location);<br>            std::string checksum = <span class="hljs-built_in">StringPrintf</span>(<span class="hljs-string">&quot;0x%08x&quot;</span>, oat_dex_file-&gt;<span class="hljs-built_in">GetDexFileLocationChecksum</span>());<br>            std::string required_checksum = <span class="hljs-built_in">StringPrintf</span>(<span class="hljs-string">&quot;0x%08x&quot;</span>, *dex_location_checksum);<br>            *error_msg = <span class="hljs-string">&quot;OatDexFile for DexFile &quot;</span> + std::<span class="hljs-built_in">string</span>(dex_location) + <span class="hljs-string">&quot; (canonical path &quot;</span> + dex_canonical_location + <span class="hljs-string">&quot;) in OatFile &quot;</span> + <span class="hljs-built_in">GetLocation</span>() + <span class="hljs-string">&quot; has checksum &quot;</span> + checksum + <span class="hljs-string">&quot; but &quot;</span> + required_checksum + <span class="hljs-string">&quot; was required&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">nullptr</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> oat_dex_file;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2-2-OpenDexFile"><a href="#2-2-2-OpenDexFile" class="headerlink" title="2.2.2 OpenDexFile()"></a>2.2.2 OpenDexFile()</h3><p>然后是<code>OpenDexFile()</code>，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::unique_ptr&lt;<span class="hljs-type">const</span> DexFile&gt; OatFile::OatDexFile::<span class="hljs-built_in">OpenDexFile</span>(std::string* error_msg) <span class="hljs-type">const</span> &#123;<br>    <span class="hljs-function">ScopedTrace <span class="hljs-title">trace</span><span class="hljs-params">(__PRETTY_FUNCTION__)</span></span>;<br>    <span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> kVerify = <span class="hljs-literal">false</span>;<br>    <span class="hljs-type">static</span> <span class="hljs-keyword">constexpr</span> <span class="hljs-type">bool</span> kVerifyChecksum = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">return</span> DexFile::<span class="hljs-built_in">Open</span>(dex_file_pointer_,<br>                         <span class="hljs-built_in">FileSize</span>(),<br>                         dex_file_location_,<br>                         dex_file_location_checksum_,<br>                         <span class="hljs-keyword">this</span>,<br>                         kVerify,<br>                         kVerifyChecksum,<br>                         error_msg);<br>&#125;<br></code></pre></td></tr></table></figure><p>直接调用<code>DexFile::Open()</code>方法实现。</p><p>通过上述分析可知，在<code>OpenDexFilesFromOat()</code>中，无论是调用<code>LoadDexFiles()</code>方法加载dex文件，还是调用<code>DexFile::Open()</code>加载dex文件，最终殊途同归，都调用<code>DexFile::Open()</code>方法，只不过参数个数不同。</p><p>在下一篇文章中将沿着<code>DexFile::Open()</code>方法继续分析dex文件加载流程。</p><h1 id="三、总览图"><a href="#三、总览图" class="headerlink" title="三、总览图"></a>三、总览图</h1><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202311202114264.png"></p><hr><p>参考：</p><p>[<a href="https://bbs.kanxue.com/thread-257893.htm">原创]菜鸟学8.1版本dex加载流程笔记–第一篇：oat_file_manager与oat_file_assistant-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p><p><a href="https://www.jianshu.com/p/b89d0b03e82c">入门ART虚拟机(2)——加载DEX文件续 - 简书 (jianshu.com)</a></p><p><a href="http://aospxref.com/android-8.0.0_r36/">http://aospxref.com/android-8.0.0_r36/</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android源码解析</tag>
      
      <tag>dex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dex文件加载流程(一)</title>
    <link href="/2023/11/20/dex%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B(%E4%B8%80)/"/>
    <url>/2023/11/20/dex%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<blockquote><p>dex文件加载系列文章链接：</p><ol><li><p>PathClassLoader、DexClassLoader</p><p><a href="https://gal2xy.github.io/2023/11/20/dex%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B(%E4%B8%80)/">dex文件加载流程(一)</a></p><p><a href="https://gal2xy.github.io/2023/11/20/dex%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B(%E4%BA%8C)/">dex文件加载流程(二)</a></p><p><a href="https://gal2xy.github.io/2023/11/20/dex%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E6%B5%81%E7%A8%8B(%E4%B8%89)/">dex文件加载流程(三)</a></p></li><li><p>InMemoryDexClassLoader</p><p><a href="https://gal2xy.github.io/2023/12/06/InMemoryDexClassLoader%E5%8A%A0%E8%BD%BD%E5%86%85%E5%AD%98dex%E7%9A%84%E6%B5%81%E7%A8%8B/">InMemoryDexClassLoader加载内存dex的流程</a></p></li></ol></blockquote><h1 id="一、PathClassLoader和DexClassLoader"><a href="#一、PathClassLoader和DexClassLoader" class="headerlink" title="一、PathClassLoader和DexClassLoader"></a>一、PathClassLoader和DexClassLoader</h1><p>Android启动APP时，会加载dex文件，而与加载dex文件相关的是两个ClassLoader：</p><ol><li><p>PathClassLoader</p><p>只能加载系统中已经安装过的apk</p></li><li><p>DexClassLoader</p><p>可以加载jar、apk、dex，也可以从SD卡中加载未安装的apk</p></li></ol><p>PathClassLoader和DexClassLoader对应代码分别如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/libcore/dalvik/src/main/java/dalvik/system/PathClassLoader.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PathClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseDexClassLoader</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PathClassLoader</span><span class="hljs-params">(String dexPath, ClassLoader parent)</span> &#123;<br>        <span class="hljs-built_in">super</span>(dexPath, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, parent);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PathClassLoader</span><span class="hljs-params">(String dexPath, String librarySearchPath, ClassLoader parent)</span> &#123;<br>        <span class="hljs-built_in">super</span>(dexPath, <span class="hljs-literal">null</span>, librarySearchPath, parent);<br>    &#125;<br>    <br>&#125;<br><br><span class="hljs-comment">//路径：/libcore/dalvik/src/main/java/dalvik/system/DexClassLoader.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DexClassLoader</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseDexClassLoader</span> &#123;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DexClassLoader</span><span class="hljs-params">(String dexPath, String optimizedDirectory,</span><br><span class="hljs-params">            String librarySearchPath, ClassLoader parent)</span> &#123;<br>        <span class="hljs-built_in">super</span>(dexPath, <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(optimizedDirectory), librarySearchPath, parent);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>两者的父类都是BaseDexClassLoader，且都是用父类的四个参数的构造方法，对应代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/libcore/dalvik/src/main/java/dalvik/system/BaseDexClassLoader.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">BaseDexClassLoader</span><span class="hljs-params">(String dexPath, File optimizedDirectory,</span><br><span class="hljs-params">                          String librarySearchPath, ClassLoader parent)</span> &#123;<br>    <span class="hljs-built_in">super</span>(parent);<br>    <span class="hljs-built_in">this</span>.pathList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DexPathList</span>(<span class="hljs-built_in">this</span>, dexPath, librarySearchPath, <span class="hljs-literal">null</span>);<br><br>    <span class="hljs-keyword">if</span> (reporter != <span class="hljs-literal">null</span>) &#123;<br>        reporter.report(<span class="hljs-built_in">this</span>.pathList.getDexPaths());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在构造方法中，创建一个DexPathList实例。</p><h1 id="二、DexPathList"><a href="#二、DexPathList" class="headerlink" title="二、DexPathList()"></a>二、DexPathList()</h1><p>DexPathList代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/libcore/dalvik/src/main/java/dalvik/system/DexPathList.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">DexPathList</span><span class="hljs-params">(ClassLoader definingContext, String dexPath, String librarySearchPath, File optimizedDirectory)</span> &#123;<br>    ......<br>    <span class="hljs-built_in">this</span>.definingContext = definingContext;<br><br>    ArrayList&lt;IOException&gt; suppressedExceptions = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;IOException&gt;();<br>    <span class="hljs-comment">// save dexPath for BaseDexClassLoader</span><br>    <span class="hljs-built_in">this</span>.dexElements = makeDexElements(splitDexPath(dexPath), optimizedDirectory,<br>                                       suppressedExceptions, definingContext);<span class="hljs-comment">//</span><br><br>    <span class="hljs-built_in">this</span>.nativeLibraryDirectories = splitPaths(librarySearchPath, <span class="hljs-literal">false</span>);<br>    <span class="hljs-built_in">this</span>.systemNativeLibraryDirectories = splitPaths(System.getProperty(<span class="hljs-string">&quot;java.library.path&quot;</span>), <span class="hljs-literal">true</span>);<br>    List&lt;File&gt; allNativeLibraryDirectories = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(nativeLibraryDirectories);<br>    allNativeLibraryDirectories.addAll(systemNativeLibraryDirectories);<br><br>    <span class="hljs-built_in">this</span>.nativeLibraryPathElements = makePathElements(allNativeLibraryDirectories);<span class="hljs-comment">//</span><br><br>    <span class="hljs-keyword">if</span> (suppressedExceptions.size() &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">this</span>.dexElementsSuppressedExceptions =<br>            suppressedExceptions.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">IOException</span>[suppressedExceptions.size()]);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        dexElementsSuppressedExceptions = <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>构造方法中，主要是调用了<code>makeDexElements()</code>方法（<code>makePathElements()</code>先不讲），赋值给<code>this.dexElements</code>，该类型为Element数组，查看Element类的代码可知，类中有DexFile类型的dexFile字段。</p><h1 id="三、makeDexElements"><a href="#三、makeDexElements" class="headerlink" title="三、makeDexElements()"></a>三、makeDexElements()</h1><p>回到<code>makeDexElements()</code>方法，该方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/libcore/dalvik/src/main/java/dalvik/system/DexPathList.java</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Element[] makeDexElements(List&lt;File&gt; files, File optimizedDirectory,<br>                                         List&lt;IOException&gt; suppressedExceptions, ClassLoader loader) &#123;<br>    Element[] elements = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Element</span>[files.size()];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">elementsPos</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">//遍历所有文件</span><br>    <span class="hljs-keyword">for</span> (File file : files) &#123;<br>        <span class="hljs-keyword">if</span> (file.isDirectory()) &#123;<span class="hljs-comment">//文件夹</span><br>            elements[elementsPos++] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Element</span>(file);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (file.isFile()) &#123;<span class="hljs-comment">//文件</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> file.getName();<br><br>            <span class="hljs-keyword">if</span> (name.endsWith(DEX_SUFFIX)) &#123;<span class="hljs-comment">// 判断文件后缀名，DEX_SUFFIX = &quot;.dex&quot;</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-comment">//调用loadDexFile加载dex文件</span><br>                    <span class="hljs-type">DexFile</span> <span class="hljs-variable">dex</span> <span class="hljs-operator">=</span> loadDexFile(file, optimizedDirectory, loader, elements);<br>                    <span class="hljs-keyword">if</span> (dex != <span class="hljs-literal">null</span>) &#123;<br>                        elements[elementsPos++] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Element</span>(dex, <span class="hljs-literal">null</span>);<br>                    &#125;<br>                &#125; <span class="hljs-keyword">catch</span> (IOException suppressed) &#123;<br>                    System.logE(<span class="hljs-string">&quot;Unable to load dex file: &quot;</span> + file, suppressed);<br>                    suppressedExceptions.add(suppressed);<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//zip file?</span><br>                <span class="hljs-type">DexFile</span> <span class="hljs-variable">dex</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    dex = loadDexFile(file, optimizedDirectory, loader, elements);<br>                &#125; <span class="hljs-keyword">catch</span> (IOException suppressed) &#123;<span class="hljs-comment">//zip中没有dex文件</span><br>                    suppressedExceptions.add(suppressed);<br>                &#125;<br><br>                <span class="hljs-keyword">if</span> (dex == <span class="hljs-literal">null</span>) &#123;<br>                    elements[elementsPos++] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Element</span>(file);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    elements[elementsPos++] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Element</span>(dex, file);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            System.logW(<span class="hljs-string">&quot;ClassLoader referenced unknown path: &quot;</span> + file);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (elementsPos != elements.length) &#123;<br>        elements = Arrays.copyOf(elements, elementsPos);<br>    &#125;<br>    <span class="hljs-keyword">return</span> elements;<br>&#125;<br></code></pre></td></tr></table></figure><p>遍历所有文件，寻找dex文件并调用<code>loadDexFile()</code>加载dex文件。</p><h1 id="四、loadDexFile"><a href="#四、loadDexFile" class="headerlink" title="四、loadDexFile()"></a>四、loadDexFile()</h1><p>该方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/libcore/dalvik/src/main/java/dalvik/system/DexPathList.java</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DexFile <span class="hljs-title function_">loadDexFile</span><span class="hljs-params">(File file, File optimizedDirectory, ClassLoader loader,</span><br><span class="hljs-params">                                   Element[] elements)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">if</span> (optimizedDirectory == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DexFile</span>(file, loader, elements);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">optimizedPath</span> <span class="hljs-operator">=</span> optimizedPathFor(file, optimizedDirectory);<br>        <span class="hljs-keyword">return</span> DexFile.loadDex(file.getPath(), optimizedPath, <span class="hljs-number">0</span>, loader, elements);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里再次讲解一下dex文件优化。在Android系统中，应用程序首次启动，会对应用的dex文件进行优化，并在<code>cache/dalvik-cache</code>目录下生成缓存文件，以加快应用的启动速度。代码中<code>optimizedDirectory</code>即指缓存文件所在路径，默认<code>cache/dalvik-cache</code>目录。</p><p>回到代码中，如果APP没有相应的缓存文件，则通过调用<code>DexFile()</code>来解析dex文件，否则调用<code>DexFile.loadDex()</code>方法解析缓存文件。</p><h2 id="4-1-DexFile"><a href="#4-1-DexFile" class="headerlink" title="4.1 DexFile()"></a>4.1 DexFile()</h2><p>对应代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/libcore/dalvik/src/main/java/dalvik/system/DexFile.java</span><br>DexFile(File file, ClassLoader loader, DexPathList.Element[] elements)<br>    <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-built_in">this</span>(file.getPath(), loader, elements);<br>&#125;<br><br><span class="hljs-comment">//进而调用</span><br>DexFile(String fileName, ClassLoader loader, DexPathList.Element[] elements) <span class="hljs-keyword">throws</span> IOException &#123;<br>    mCookie = openDexFile(fileName, <span class="hljs-literal">null</span>, <span class="hljs-number">0</span>, loader, elements);<br>    mInternalCookie = mCookie;<br>    mFileName = fileName;<br>    <span class="hljs-comment">//System.out.println(&quot;DEX FILE cookie is &quot; + mCookie + &quot; fileName=&quot; + fileName);</span><br>&#125;<br></code></pre></td></tr></table></figure><p>最终调用<code>openDexFile()</code>方法，现在这里停下。</p><h2 id="4-2-DexFile-loadDex"><a href="#4-2-DexFile-loadDex" class="headerlink" title="4.2 DexFile.loadDex()"></a>4.2 DexFile.loadDex()</h2><p>对应代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/libcore/dalvik/src/main/java/dalvik/system/DexFile.java</span><br><span class="hljs-keyword">static</span> DexFile <span class="hljs-title function_">loadDex</span><span class="hljs-params">(String sourcePathName, String outputPathName,</span><br><span class="hljs-params">                       <span class="hljs-type">int</span> flags, ClassLoader loader, DexPathList.Element[] elements)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">DexFile</span>(sourcePathName, outputPathName, flags, loader, elements);<br>&#125;<br><br><span class="hljs-comment">//进而调用</span><br><span class="hljs-keyword">private</span> <span class="hljs-title function_">DexFile</span><span class="hljs-params">(String sourceName, String outputName, <span class="hljs-type">int</span> flags, ClassLoader loader,</span><br><span class="hljs-params">                DexPathList.Element[] elements)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    ......<br>    mCookie = openDexFile(sourceName, outputName, flags, loader, elements);<br>    mInternalCookie = mCookie;<br>    mFileName = sourceName;<br>    <span class="hljs-comment">//System.out.println(&quot;DEX FILE cookie is &quot; + mCookie + &quot; sourceName=&quot; + sourceName + &quot; outputName=&quot; + outputName);</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，不管调用的是<code>new DexFile()</code>还是<code>DexFile.loadDex() </code>，最终都会调用<code>openDexFile()</code>。</p><h1 id="五、openDexFile"><a href="#五、openDexFile" class="headerlink" title="五、openDexFile()"></a>五、openDexFile()</h1><p>对应代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/libcore/dalvik/src/main/java/dalvik/system/DexFile.java</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Object <span class="hljs-title function_">openDexFile</span><span class="hljs-params">(String sourceName, String outputName, <span class="hljs-type">int</span> flags,</span><br><span class="hljs-params">                                  ClassLoader loader, DexPathList.Element[] elements)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    <span class="hljs-comment">// Use absolute paths to enable the use of relative paths when testing on host.</span><br>    <span class="hljs-keyword">return</span> openDexFileNative(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(sourceName).getAbsolutePath(),<br>                             (outputName == <span class="hljs-literal">null</span>)<br>                             ? <span class="hljs-literal">null</span><br>                             : <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(outputName).getAbsolutePath(),<br>                             flags,<br>                             loader,<br>                             elements);<br>&#125;<br></code></pre></td></tr></table></figure><p>最终调用<code>openDexFileNative()</code>方法，顾名思义，这是个native方法，在目录<code>art/runtime/native/dalvik_system_DexFile.cc</code>下。</p><p>在下一篇文章中，将继续沿着<code>openDexFileNative()</code>方法分析dex文件加载流程。</p><h1 id="六、总览图"><a href="#六、总览图" class="headerlink" title="六、总览图"></a>六、总览图</h1><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202311202112869.png"></p><hr><p>参考：</p><p><a href="https://www.jianshu.com/p/20dcfcf27004">入门ART虚拟机(1)——加载DEX文件 - 简书 (jianshu.com)</a></p><p><a href="https://blog.csdn.net/weixin_42011443/article/details/106129466">Dex文件加载以及类加载流程_两个dex间能引用类吗-CSDN博客</a></p><p><a href="http://aospxref.com/android-8.0.0_r36/">http://aospxref.com/android-8.0.0_r36/</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android源码解析</tag>
      
      <tag>dex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android中dex odex oat vdex art文件格式区别</title>
    <link href="/2023/11/17/Android%E4%B8%ADdex%20odex%20oat%20vdex%20art%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%8C%BA%E5%88%AB/"/>
    <url>/2023/11/17/Android%E4%B8%ADdex%20odex%20oat%20vdex%20art%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E5%8C%BA%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<h1 id="1-dex"><a href="#1-dex" class="headerlink" title="1. dex"></a>1. dex</h1><p>dex是Android平台的可执行文件。java文件先编译成class文件（java字节码），再通过dx或d8工具转换成dex文件。</p><p>class文件时java虚拟机的可执行文件，与之相对的，dex文件是Dalvik虚拟机的可执行文件，dex文件中存放的自然就是Dalvik字节码。</p><p>Android应用安装包，即apk文件中就含有一个或多个dex文件，命名如下：</p><ul><li>classes.dex</li><li>classes1.dex</li><li>classes2.dex</li><li>……</li></ul><h1 id="2-odex"><a href="#2-odex" class="headerlink" title="2. odex"></a>2. odex</h1><p>odex也是Android平台的可执行文件。</p><p>在Android 5之前（也许），为了加快应用的运行速度，对apk中的dex文件进行优化（优化工具：dexopt-wrapper），生成odex文件，保存在data&#x2F;dalvik-cache目录下或与apk同目录下，并删除apk中的dex文件。之后运行程序时，直接加载odex文件，避免重复验证和优化。</p><p>不过在Android 5之后，.odex就不再是odex文件了，而是oat文件，用十六进制编辑器打开，可以发现文件头是”ELF”，即ELF文件格式。</p><h1 id="3-oat"><a href="#3-oat" class="headerlink" title="3. oat"></a>3. oat</h1><p>oat也是Android平台的可执行文件，是一种elf文件格式。</p><p>在Android 5之后，在安装apk的过程中，Android系统会对应用程序进行优化，使用dex2oat工具生成oat文件。它不仅包含dex文件的内容，也将一些Dalvik指令编译成了本地机器指令。</p><p>oat文件结构会随Android版本变化，且没有向后兼容性。oat文件结构可见<a href="http://romainthomas.fr/oat/%E3%80%82">http://romainthomas.fr/oat/。</a></p><h1 id="4-vdex"><a href="#4-vdex" class="headerlink" title="4. vdex"></a>4. vdex</h1><p>vdex文件不是Android平台的可执行文件。</p><p>在Android 8之后加入的，vdex文件包含apk的未压缩dex代码，以及一些旨在加快验证速度的元数据，其目的主要是为了跳过verified流程，减少dex2oat执行时间。</p><p>同oat文件一样，vdex文件结构也会随Android版本变化，且没有向后兼容性。vdex文件结构可见<a href="https://romainthomas.fr/vdex/%E3%80%82">https://romainthomas.fr/vdex/。</a></p><h1 id="5-art"><a href="#5-art" class="headerlink" title="5. art"></a>5. art</h1><p>oat也是Android平台的可执行文件，是一种elf文件格式。</p><p>借助odex文件进行优化生成的，记录应用启动的热点函数相关地址，方便寻址。</p><p>同oat文件一样，art文件结构也会随Android版本变化，且没有向后兼容性。</p><hr><p>参考：</p><p><a href="https://lief-project.github.io/doc/latest/tutorials/10_android_formats.html">https://lief-project.github.io/doc/latest/tutorials/10_android_formats.html</a></p><p><a href="https://www.wuyifei.cc/dex-vdex-odex-art/">https://www.wuyifei.cc/dex-vdex-odex-art/</a></p><p><a href="https://www.eefocus.com/article/525061.html">https://www.eefocus.com/article/525061.html</a></p><p><a href="https://source.android.com/docs/core/runtime/configure?hl=zh-cn">https://source.android.com/docs/core/runtime/configure?hl=zh-cn</a></p><p><a href="https://medium.com/@_sushil/oat2dex-android-pentesting-6f99e9c57198">https://medium.com/@_sushil/oat2dex-android-pentesting-6f99e9c57198</a></p><p><a href="https://newandroidbook.com/files/ArtOfDalvik.pdf">https://newandroidbook.com/files/ArtOfDalvik.pdf</a></p><p><a href="https://newandroidbook.com/files/%EF%BC%88%E9%87%8C%E9%9D%A2%E6%9C%89%E5%BE%88%E5%A4%9A%E5%8F%AF%E4%BB%A5%E5%8F%82%E8%80%83%E7%9A%84pdf%EF%BC%89">https://newandroidbook.com/files/（里面有很多可以参考的pdf）</a></p><p><a href="http://romainthomas.fr/oat/">http://romainthomas.fr/oat/</a></p><p><a href="https://romainthomas.fr/vdex/">https://romainthomas.fr/vdex/</a></p><p><a href="https://www.blackhat.com/docs/asia-15/materials/asia-15-Sabanal-Hiding-Behind-ART-wp.pdf">https://www.blackhat.com/docs/asia-15/materials/asia-15-Sabanal-Hiding-Behind-ART-wp.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ODEX文件格式解析</title>
    <link href="/2023/11/17/ODEX%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/11/17/ODEX%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="一、什么是odex文件"><a href="#一、什么是odex文件" class="headerlink" title="一、什么是odex文件"></a>一、什么是odex文件</h1><h2 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h2><p>odex文件是Android上的可执行文件。odex文件是由apk中的dex文件优化生成的，存放在cache&#x2F;dalvik-cache目录下或者与apk同一目录下，最后删除apk文件中的classes.dex文件。</p><blockquote><p>注意！！！不要被文件后缀名骗了！ <code>.dex</code>后缀的文件可以是DEX文件或者OAT文件，<code>.odex</code>不再是ODEX文件（应该是Android 5之后），而是OAT文件，<code>.oat</code>是OAT文件</p></blockquote><h2 id="1-2-优势"><a href="#1-2-优势" class="headerlink" title="1.2 优势"></a>1.2 优势</h2><ol><li>加快应用的运行速度，因为有了odex文件包含了加载所需要的依赖库文件列表，DVM只需要检测并加载所需依赖库即可执行odex文件，大大缩短了读取dex文件所需的时间。</li><li>减少空间占用。因为如果没有odex，系统会自动提取dex，这时不仅apk内有dex，&#x2F;data&#x2F;dalvik-cache目录下也有dex。</li><li>反编译APK文件，只能拿到资源文件，起到了一定的保护作用。</li></ol><h1 id="二、odex文件结构"><a href="#二、odex文件结构" class="headerlink" title="二、odex文件结构"></a>二、odex文件结构</h1><h2 id="2-1-整体结构"><a href="#2-1-整体结构" class="headerlink" title="2.1 整体结构"></a>2.1 整体结构</h2><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/aaa.png"></p><p>odex文件在dex文件头部添加了一个odex文件头，然后在dex末尾添加了dex文件的依赖库以及一些辅助数据。</p><p>由于odex文件在Android源码中并没有定义很多数据结构，仅有寥寥几个，所以在本文中会自定义一些数据结构，方便理解知识点。</p><p>在解析dex文件中，整个文件结构在源码中的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexFile</span> &#123;<br>    <span class="hljs-comment">/* directly-mapped &quot;opt&quot; header */</span><br>    <span class="hljs-type">const</span> DexOptHeader* pOptHeader;<br><br>    <span class="hljs-comment">/* pointers to directly-mapped structs and arrays in base DEX */</span><br>    <span class="hljs-type">const</span> DexHeader*    pHeader;<br>    <span class="hljs-type">const</span> DexStringId*  pStringIds;<br>    <span class="hljs-type">const</span> DexTypeId*    pTypeIds;<br>    <span class="hljs-type">const</span> DexFieldId*   pFieldIds;<br>    <span class="hljs-type">const</span> DexMethodId*  pMethodIds;<br>    <span class="hljs-type">const</span> DexProtoId*   pProtoIds;<br>    <span class="hljs-type">const</span> DexClassDef*  pClassDefs;<br>    <span class="hljs-type">const</span> DexLink*      pLinkData;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * These are mapped out of the &quot;auxillary&quot; section, and may not be</span><br><span class="hljs-comment">     * included in the file.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">const</span> DexClassLookup* pClassLookup;<br>    <span class="hljs-type">const</span> <span class="hljs-type">void</span>*         pRegisterMapPool;       <span class="hljs-comment">// RegisterMapClassPool</span><br><br>    <span class="hljs-comment">/* points to start of DEX file data */</span><br>    <span class="hljs-type">const</span> u1*           baseAddr;<br><br>    <span class="hljs-comment">/* track memory overhead for auxillary structures */</span><br>    <span class="hljs-type">int</span>                 overhead;<br><br>    <span class="hljs-comment">/* additional app-specific data structures associated with the DEX */</span><br>    <span class="hljs-comment">//void*               auxData;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>是的，在解析dex文件时，有一部分是没有提及到的。其中DexOptHeader就是odex头，DexLink以下的部分被称为auxillary section，即辅助数据段，它记录了dex文件被优化后添加的一些信息。</p><h2 id="2-2-odex文件头"><a href="#2-2-odex文件头" class="headerlink" title="2.2 odex文件头"></a>2.2 odex文件头</h2><p>odex文件头的数据结构定义在源码目录&#x2F;dalvik&#x2F;libdex&#x2F;DexFile.h中，对应DexOptHeader结构体，定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexOptHeader</span> &#123;<br>    u1  magic[<span class="hljs-number">8</span>];           <span class="hljs-comment">/* odex标识(dey)+版本号 */</span><br><br>    u4  dexOffset;          <span class="hljs-comment">/* dex文件头的文件偏移量 */</span><br>    u4  dexLength;<span class="hljs-comment">/* dex文件的总长度 */</span><br>    u4  depsOffset;         <span class="hljs-comment">/* odex依赖库列表的文件偏移量 */</span><br>    u4  depsLength;<span class="hljs-comment">/* 依赖库列表的总长度 */</span><br>    u4  optOffset;          <span class="hljs-comment">/* odex辅助数据的文件偏移量 */</span><br>    u4  optLength;<span class="hljs-comment">/* 辅助数据的总长度 */</span><br><br>    u4  flags;              <span class="hljs-comment">/* 标识DVM加载odex时的优化与验证选项 */</span><br>    u4  checksum;           <span class="hljs-comment">/* 依赖库与辅助数据的校验和(算法adler32) */</span><br><br>    <span class="hljs-comment">/* pad for 64-bit alignment if necessary */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>odex标识具体值为dey！</p><h2 id="2-3-dex文件"><a href="#2-3-dex文件" class="headerlink" title="2.3 dex文件"></a>2.3 dex文件</h2><p>在上一篇文章中讲过，详见<a href="https://gal2xy.github.io/2023/11/10/dex%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E8%A7%A3%E6%9E%90/">dex文件格式解析 - gla2xy’s blog (gal2xy.github.io)</a>。</p><p>然而，在优化成odex的过程中，该部分有些内容会被修改。</p><h2 id="2-4-依赖库"><a href="#2-4-依赖库" class="headerlink" title="2.4 依赖库"></a>2.4 依赖库</h2><p>依赖库对应的数据结构在Android源码中没有明确定义，借助《Android软件安全与逆向分析》中的定义：</p><blockquote><p>在Android源码中没有定义的结构体，均来自《Android软件安全与逆向分析》</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Dependences</span>&#123;<br>    u4 modWhen;<span class="hljs-comment">/* 优化前dex文件的时间戳 */</span><br>    u4 crc;<span class="hljs-comment">/* 优化前dex文件的crc校验值 */</span><br>    u4 DALVIK_VM_BUILD;<span class="hljs-comment">/* Dalvik虚拟机版本号 */</span><br>    u4 numDeps;<span class="hljs-comment">/* 依赖库个数 */</span><br>    <span class="hljs-keyword">struct</span>&#123;<span class="hljs-comment">/* 依赖库结构体 */</span><br>        u4 len;<span class="hljs-comment">/* name字符串的长度 */</span><br>        u1 name[len];<span class="hljs-comment">/* 依赖库的完整路径名 */</span><br>        u1 signature[kSHA1DigestLen];<span class="hljs-comment">/* sha-1哈希值 */</span><br>    &#125;tabel[numDeps];<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>依赖库结构的具体操作函数在Android 2.x~4.x版本的源码才有（应该，反正5及以上没见过），目录为dalvik\vm\analysis\DexPrepare.cpp，这里手打一下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">int</span> <span class="hljs-title">writeDependencies</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, u4 modWhen, u4 crc)</span></span>&#123;<br>    ......<br>    buf = (u1*)<span class="hljs-built_in">malloc</span>(bufLen);<span class="hljs-comment">//分配依赖库的空间</span><br>    <span class="hljs-built_in">set4LE</span>(buf + <span class="hljs-number">0</span>, modWhen);<span class="hljs-comment">//写入crc校验</span><br>    <span class="hljs-built_in">set4LE</span>(buf + <span class="hljs-number">4</span>, crc);<span class="hljs-comment">//写入crc检验</span><br>    <span class="hljs-built_in">set4LE</span>(buf + <span class="hljs-number">8</span>, DALVIK_VM_BUILD);<span class="hljs-comment">//写入Dalvik虚拟机版本号 </span><br>    <span class="hljs-built_in">set4LE</span>(buf + <span class="hljs-number">12</span>, numDeps);<span class="hljs-comment">//写入依赖库个数</span><br>    ......<br>u1* ptr = buf + <span class="hljs-number">16</span>;<span class="hljs-comment">//跳过前四个字段</span><br>    <span class="hljs-keyword">for</span>(cpe = gDvm.bootClassPath; cpe-&gt;ptr != <span class="hljs-literal">NULL</span>; cpe++)&#123;<span class="hljs-comment">//循环写入依赖库</span><br>        ......<br>        <span class="hljs-type">const</span> u1* signature = <span class="hljs-built_in">getSignature</span>(cpe);<span class="hljs-comment">//计算SHA-1哈希值</span><br>        <span class="hljs-type">int</span> len = <span class="hljs-built_in">strlen</span>(cacheFileName) + <span class="hljs-number">1</span>;<span class="hljs-comment">//&#x27;\0&#x27;占一字节</span><br>        ......<br>        <span class="hljs-built_in">set4LE</span>(ptr, len);<br>        ptr += <span class="hljs-number">4</span>;<br>        <span class="hljs-built_in">memcpy</span>(ptr, cacheFileName, len); <span class="hljs-comment">//写入依赖库文件名</span><br>        ptr += len;<br>        <span class="hljs-built_in">memcpy</span>(ptr, signature, KSHA1DigestLen); <span class="hljs-comment">//写入SHA-1哈希值</span><br>        ptr += KSHA1DigestLen;<br>        ......<br>    &#125;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-5-辅助数据"><a href="#2-5-辅助数据" class="headerlink" title="2.5 辅助数据"></a>2.5 辅助数据</h2><p>该部分有三个Chunk块，它们被Dalvik虚拟机加载到一个称为auxillart的段中。<strong>这三个Chunk块，都以一个header联合体开头</strong>，定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">union</span>&#123;<br>    <span class="hljs-type">char</span> raw[<span class="hljs-number">8</span>];<br>    <span class="hljs-keyword">struct</span>&#123;<br>        u4 type;<br>        u4 size;<br>    &#125;ts;<br>&#125;header;<br></code></pre></td></tr></table></figure><p>union是联合体，里面的变量共用同一空间，所以大小为8字节。其中type字段为枚举常量，具体如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++">eum&#123;<br>    kDexChunkClassLookup = <span class="hljs-number">0x434c4b50</span>,<span class="hljs-comment">/* 对应字符串CLKP */</span><br>    kDexChunkRegisterMaps = <span class="hljs-number">0x524d4150</span>,<span class="hljs-comment">/* 对应字符串RMAP */</span><br>    kDexChunkEnd = <span class="hljs-number">0x41454e44</span>,<span class="hljs-comment">/* 对应字符串AEND */</span><br>&#125;<br></code></pre></td></tr></table></figure><p>size字段表示需要填充的数据的字节数。</p><p>在这三个Chunk块中，首先是ChunkClassLookup结构，具体如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ChunkClassLookup</span>&#123;<br>    <br>    header联合体;<br>    <br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexClassLookup</span>&#123;<br>        <span class="hljs-type">int</span> size;<span class="hljs-comment">/* DexClassLookup结构使用的字节数，包括size字段在内 */</span><br>        <span class="hljs-type">int</span> numEntries;<span class="hljs-comment">/* 接下来的tabel结构的个数 */</span><br>        <span class="hljs-keyword">struct</span> &#123;<span class="hljs-comment">/* 描述类的信息的结构体 */</span><br>            u4 classDescriptorHash;<span class="hljs-comment">/* 类的哈希值 */</span><br>            <span class="hljs-type">int</span> classDescriptorOffset;<span class="hljs-comment">/* 类的描述，值为文件偏移量 */</span><br>            <span class="hljs-type">int</span> classDefOffset;<span class="hljs-comment">/* 指向DexClassDef结构，值为文件偏移量 */</span><br>        &#125; table[<span class="hljs-number">1</span>];<br>    &#125;;<br>&#125;;<br><br></code></pre></td></tr></table></figure><p>Dalvik虚拟机通过DexClassLookup结构来检索dex文件中所有的类。</p><p>然后是ChunkRegisterMapPool结构体：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">ChunkRegisterMapPool</span> &#123;<br><br>    header联合体;<br><br><span class="hljs-keyword">struct</span>&#123;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">RegisterMapClassPool</span>&#123;<br>            u4 numClasses;<span class="hljs-comment">/* 类的个数 */</span><br>            u4 classDataOffset[<span class="hljs-number">1</span>];<span class="hljs-comment">/* 指向类的映射信息的偏移量 */</span><br>        &#125;classpool;<br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">RegisterMapMethodPool</span>&#123;<br>            u2 methodCount;<span class="hljs-comment">/* 方法的个数 */</span><br>            u4 methodData[<span class="hljs-number">1</span>];<span class="hljs-comment">/* 方法的映射信息（连续存储） */</span><br>        &#125;;<br>&#125;MapPool;<br>&#125;;<br></code></pre></td></tr></table></figure><p>其中methodData对应RegisterMap结构体，该结构体如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">RegisterMap</span> &#123;<br>    u1      format;<br>    u1      regWidth;<br>    u1      numEntries[<span class="hljs-number">2</span>];<br>    u1      data[<span class="hljs-number">1</span>];<br>&#125;;<br></code></pre></td></tr></table></figure><p>format字段用来指明需要用多少字节来表示方法内的指令地址。</p><p>regWidth字段用来指明需要用多少字节来表示方法内各个寄存器的状态。</p><p>numEntries字段用来指明保存了多少条寄存器状态的记录。</p><p>data字段用来指向保存实际数据的地方。</p><p>最后是ChunkEnd结构体：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span>&#123;<br>    header联合体;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="2-6-整个odex文件结构总览图"><a href="#2-6-整个odex文件结构总览图" class="headerlink" title="2.6 整个odex文件结构总览图"></a>2.6 整个odex文件结构总览图</h2><p>参考其他人的图，并根据自己的理解画了个总览图，其中有误的地方烦请告知！感谢！</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/odex.drawio.png"></p><hr><p>参考：</p><p><a href="https://lief-project.github.io/doc/latest/tutorials/10_android_formats.html">https://lief-project.github.io/doc/latest/tutorials/10_android_formats.html</a></p><p><a href="https://newandroidbook.com/files/ArtOfDalvik.pdf">https://newandroidbook.com/files/ArtOfDalvik.pdf</a></p><p><a href="https://blog.csdn.net/roland_sun/article/details/47183119">Android系统ODEX文件格式解析-CSDN博客</a></p><p><a href="https://blog.csdn.net/roland_sun/article/details/46832341">Dalvik虚拟机中RegisterMap结构解析-CSDN博客</a></p><p><a href="https://baike.baidu.com/item/ODEX">https://baike.baidu.com/item/ODEX</a></p><p><a href="https://www.wuyifei.cc/dex-vdex-odex-art/">https://www.wuyifei.cc/dex-vdex-odex-art/</a></p><p>《Android软件安全与逆向分析》</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>odex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dex文件格式解析</title>
    <link href="/2023/11/10/dex%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E8%A7%A3%E6%9E%90/"/>
    <url>/2023/11/10/dex%E6%96%87%E4%BB%B6%E6%A0%BC%E5%BC%8F%E8%A7%A3%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="一、dex文件中的数据结构"><a href="#一、dex文件中的数据结构" class="headerlink" title="一、dex文件中的数据结构"></a>一、dex文件中的数据结构</h1><h2 id="1-1-数据类型"><a href="#1-1-数据类型" class="headerlink" title="1.1 数据类型"></a>1.1 数据类型</h2><table><thead><tr><th align="center">类型</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">u1</td><td align="center">表示1byte的无符号数</td></tr><tr><td align="center">u2</td><td align="center">表示2bytes的无符号数</td></tr><tr><td align="center">u4</td><td align="center">表示4bytes的无符号数</td></tr><tr><td align="center">u8</td><td align="center">表示8bytes的无符号数</td></tr><tr><td align="center">sleb128</td><td align="center">有符号LEB128，可变长度为1~5bytes</td></tr><tr><td align="center">uleb128</td><td align="center">无符号LEB128，可变长度为1~5bytes</td></tr><tr><td align="center">uleb128p1</td><td align="center">&#x3D;无符号LEB128值 + 1，可变长度为1~5bytes</td></tr></tbody></table><p>前缀u表示无符号，s表示有符号。<strong>LEB128是一种变长编码格式，每个LEB128由1~5个字节组成，所有的字节组合在一起表示一个32位的数据。每个字节只有7bit有效位，最高位bit表示后一个字节是否需要（1表示需要，0表示不需要）</strong>，因为LEB128最多5字节，所以当读取到的第5个字节的最高位为1时，则表示该dex文件无效，Dalvik虚拟机验证失败。</p><p>LEB128的实现可在Android源码目录&#x2F;dalvik&#x2F;libdex&#x2F;Leb128.h中找到。（需要注意数据存储模式是<strong>小端存储</strong>）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Reads an unsigned LEB128 value, updating the given pointer to point</span><br><span class="hljs-comment"> * just past the end of the read value. This function tolerates</span><br><span class="hljs-comment"> * non-zero high-order bits in the fifth encoded byte.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">DEX_INLINE <span class="hljs-type">int</span> <span class="hljs-title">readUnsignedLeb128</span><span class="hljs-params">(<span class="hljs-type">const</span> u1** pStream)</span> </span>&#123;<br>    <span class="hljs-type">const</span> u1* ptr = *pStream;<br>    <span class="hljs-type">int</span> result = *(ptr++);<span class="hljs-comment">//取低字节</span><br><br>    <span class="hljs-keyword">if</span> (result &gt; <span class="hljs-number">0x7f</span>) &#123;<span class="hljs-comment">//大于说明最高位为1，需要跟后一字节拼接</span><br>        <span class="hljs-type">int</span> cur = *(ptr++);<br>        result = (result &amp; <span class="hljs-number">0x7f</span>) | ((cur &amp; <span class="hljs-number">0x7f</span>) &lt;&lt; <span class="hljs-number">7</span>);<span class="hljs-comment">//读取uleb128,字节的最高位不需要加进来</span><br>        <span class="hljs-keyword">if</span> (cur &gt; <span class="hljs-number">0x7f</span>) &#123;<br>            cur = *(ptr++);<br>            result |= (cur &amp; <span class="hljs-number">0x7f</span>) &lt;&lt; <span class="hljs-number">14</span>;<br>            <span class="hljs-keyword">if</span> (cur &gt; <span class="hljs-number">0x7f</span>) &#123;<br>                cur = *(ptr++);<br>                result |= (cur &amp; <span class="hljs-number">0x7f</span>) &lt;&lt; <span class="hljs-number">21</span>;<br>                <span class="hljs-keyword">if</span> (cur &gt; <span class="hljs-number">0x7f</span>) &#123;<br>                    <span class="hljs-comment">/*</span><br><span class="hljs-comment">                     * Note: We don&#x27;t check to see if cur is out of</span><br><span class="hljs-comment">                     * range here, meaning we tolerate garbage in the</span><br><span class="hljs-comment">                     * high four-order bits.</span><br><span class="hljs-comment">                     */</span><br>                    cur = *(ptr++);<br>                    result |= cur &lt;&lt; <span class="hljs-number">28</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    *pStream = ptr;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Reads a signed LEB128 value, updating the given pointer to point</span><br><span class="hljs-comment"> * just past the end of the read value. This function tolerates</span><br><span class="hljs-comment"> * non-zero high-order bits in the fifth encoded byte.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-function">DEX_INLINE <span class="hljs-type">int</span> <span class="hljs-title">readSignedLeb128</span><span class="hljs-params">(<span class="hljs-type">const</span> u1** pStream)</span> </span>&#123;<br>    <span class="hljs-type">const</span> u1* ptr = *pStream;<br>    <span class="hljs-type">int</span> result = *(ptr++);<br><br>    <span class="hljs-keyword">if</span> (result &lt;= <span class="hljs-number">0x7f</span>) &#123;<span class="hljs-comment">//不需要跟后一字节拼接</span><br>        result = (result &lt;&lt; <span class="hljs-number">25</span>) &gt;&gt; <span class="hljs-number">25</span>;<span class="hljs-comment">//int为32bits，而我们只需要取字节的有效位7位，所以&lt;&lt;25然后&gt;&gt;25是对最高有效位进行符号扩展</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">int</span> cur = *(ptr++);<br>        result = (result &amp; <span class="hljs-number">0x7f</span>) | ((cur &amp; <span class="hljs-number">0x7f</span>) &lt;&lt; <span class="hljs-number">7</span>);<br>        <span class="hljs-keyword">if</span> (cur &lt;= <span class="hljs-number">0x7f</span>) &#123;<br>            result = (result &lt;&lt; <span class="hljs-number">18</span>) &gt;&gt; <span class="hljs-number">18</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cur = *(ptr++);<br>            result |= (cur &amp; <span class="hljs-number">0x7f</span>) &lt;&lt; <span class="hljs-number">14</span>;<br>            <span class="hljs-keyword">if</span> (cur &lt;= <span class="hljs-number">0x7f</span>) &#123;<br>                result = (result &lt;&lt; <span class="hljs-number">11</span>) &gt;&gt; <span class="hljs-number">11</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cur = *(ptr++);<br>                result |= (cur &amp; <span class="hljs-number">0x7f</span>) &lt;&lt; <span class="hljs-number">21</span>;<br>                <span class="hljs-keyword">if</span> (cur &lt;= <span class="hljs-number">0x7f</span>) &#123;<br>                    result = (result &lt;&lt; <span class="hljs-number">4</span>) &gt;&gt; <span class="hljs-number">4</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">/*</span><br><span class="hljs-comment">                     * Note: We don&#x27;t check to see if cur is out of</span><br><span class="hljs-comment">                     * range here, meaning we tolerate garbage in the</span><br><span class="hljs-comment">                     * high four-order bits.</span><br><span class="hljs-comment">                     */</span><br>                    cur = *(ptr++);<br>                    result |= cur &lt;&lt; <span class="hljs-number">28</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    *pStream = ptr;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2-encoded-value-编码"><a href="#1-2-encoded-value-编码" class="headerlink" title="1.2 encoded_value 编码"></a>1.2 encoded_value 编码</h2><p>在 annotation_element 和 encoded_array_item 中会使用到encoded_value 编码。encoded_value是（几乎）任意层次结构数据的编码片。这种编码非常精简，易于解析。</p><table><thead><tr><th align="left">名称</th><th align="left">格式</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">(value_arg &lt;&lt; 5) | value_type</td><td align="left">ubyte</td><td align="left">高3位为value_arg的值，低5位为value_type的值，value_type指定value的格式。</td></tr><tr><td align="left">value</td><td align="left">ubyte[]</td><td align="left">用于表示值的字节，不同 <code>value_type</code> 字节的长度不同且采用不同的解译方式；不过一律采用小端字节序。</td></tr></tbody></table><p>下面将介绍value的格式。</p><h3 id="1-2-1-值格式"><a href="#1-2-1-值格式" class="headerlink" title="1.2.1 值格式"></a>1.2.1 值格式</h3><table><thead><tr><th align="left">类型名称</th><th align="left">value_type</th><th align="left">value_arg 格式</th><th align="left">value 格式</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">VALUE_BYTE</td><td align="left">0x00</td><td align="left">（无；必须为 <code>0</code>）</td><td align="left">ubyte[1]</td><td align="left">有符号的单字节整数值</td></tr><tr><td align="left">VALUE_SHORT</td><td align="left">0x02</td><td align="left">size - 1 (0…1)</td><td align="left">ubyte[size]</td><td align="left">有符号的双字节整数值，符号扩展</td></tr><tr><td align="left">VALUE_CHAR</td><td align="left">0x03</td><td align="left">size - 1 (0…1)</td><td align="left">ubyte[size]</td><td align="left">无符号的双字节整数值，零扩展</td></tr><tr><td align="left">VALUE_INT</td><td align="left">0x04</td><td align="left">size - 1 (0…3)</td><td align="left">ubyte[size]</td><td align="left">有符号的四字节整数值，符号扩展</td></tr><tr><td align="left">VALUE_LONG</td><td align="left">0x06</td><td align="left">size - 1 (0…7)</td><td align="left">ubyte[size]</td><td align="left">有符号的八字节整数值，符号扩展</td></tr><tr><td align="left">VALUE_FLOAT</td><td align="left">0x10</td><td align="left">size - 1 (0…3)</td><td align="left">ubyte[size]</td><td align="left">四字节位模式，向右零扩展，系统会将其解译为 IEEE754 32 位浮点值</td></tr><tr><td align="left">VALUE_DOUBLE</td><td align="left">0x11</td><td align="left">size - 1 (0…7)</td><td align="left">ubyte[size]</td><td align="left">八字节位模式，向右零扩展，系统会将其解译为 IEEE754 64 位浮点值</td></tr><tr><td align="left">VALUE_METHOD_TYPE</td><td align="left">0x15</td><td align="left">size - 1 (0…3)</td><td align="left">ubyte[size]</td><td align="left">无符号（零扩展）四字节整数值，会被解译为要编入 <code>proto_ids</code> 区段的索引；表示方法类型值</td></tr><tr><td align="left">VALUE_METHOD_HANDLE</td><td align="left">0x16</td><td align="left">size - 1 (0…3)</td><td align="left">ubyte[size]</td><td align="left">无符号（零扩展）四字节整数值，会被解译为要编入 <code>method_handles</code> 区段的索引；表示方法句柄值</td></tr><tr><td align="left">VALUE_STRING</td><td align="left">0x17</td><td align="left">size - 1 (0…3)</td><td align="left">ubyte[size]</td><td align="left">无符号（零扩展）四字节整数值，会被解译为要编入 <code>string_ids</code> 区段的索引；表示字符串值</td></tr><tr><td align="left">VALUE_TYPE</td><td align="left">0x18</td><td align="left">size - 1 (0…3)</td><td align="left">ubyte[size]</td><td align="left">无符号（零扩展）四字节整数值，会被解译为要编入 <code>type_ids</code> 区段的索引；表示反射类型&#x2F;类值</td></tr><tr><td align="left">VALUE_FIELD</td><td align="left">0x19</td><td align="left">size - 1 (0…3)</td><td align="left">ubyte[size]</td><td align="left">无符号（零扩展）四字节整数值，会被解译为要编入 <code>field_ids</code> 区段的索引；表示反射字段值</td></tr><tr><td align="left">VALUE_METHOD</td><td align="left">0x1a</td><td align="left">size - 1 (0…3)</td><td align="left">ubyte[size]</td><td align="left">无符号（零扩展）四字节整数值，会被解译为要编入 <code>method_ids</code> 区段的索引；表示反射方法值</td></tr><tr><td align="left">VALUE_ENUM</td><td align="left">0x1b</td><td align="left">size - 1 (0…3)</td><td align="left">ubyte[size]</td><td align="left">无符号（零扩展）四字节整数值，会被解译为要编入 <code>field_ids</code> 区段的索引；表示枚举类型常量的值</td></tr><tr><td align="left">VALUE_ARRAY</td><td align="left">0x1c</td><td align="left">（无；必须为 <code>0</code>）</td><td align="left">encoded_array</td><td align="left">值的数组，采用下文“<code>encoded_array</code> 格式”所指定的格式。<code>value</code> 的大小隐含在编码中。</td></tr><tr><td align="left">VALUE_ANNOTATION</td><td align="left">0x1d</td><td align="left">（无；必须为 <code>0</code>）</td><td align="left">encoded_annotation</td><td align="left">子注解，采用下文“<code>encoded_annotation</code> 格式”所指定的格式。<code>value</code> 的大小隐含在编码中。</td></tr><tr><td align="left">VALUE_NULL</td><td align="left">0x1e</td><td align="left">（无；必须为 <code>0</code>）</td><td align="left">（无）</td><td align="left"><code>null</code> 引用值</td></tr><tr><td align="left">VALUE_BOOLEAN</td><td align="left">0x1f</td><td align="left">布尔值 (0…1)</td><td align="left">（无）</td><td align="left">一位值；<code>0</code> 表示 <code>false</code>，<code>1</code> 表示 <code>true</code>。该位在 <code>value_arg</code> 中表示。</td></tr></tbody></table><p>之后会在下面用到的时候再结合实例一起分析。</p><h1 id="二、dex文件结构"><a href="#二、dex文件结构" class="headerlink" title="二、dex文件结构"></a>二、dex文件结构</h1><h2 id="2-1-dex文件的整体结构"><a href="#2-1-dex文件的整体结构" class="headerlink" title="2.1 dex文件的整体结构"></a>2.1 dex文件的整体结构</h2><p>整体结构如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/1.png"></p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/2.png"></p><p>dex文件结构体的定义在Android源码目录&#x2F;dalvik&#x2F;libdex&#x2F;DexFile.h中可以找到，其中定义的dex文件结构体如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexFile</span> &#123;<br>    <span class="hljs-comment">/* directly-mapped &quot;opt&quot; header */</span><br>    <span class="hljs-type">const</span> DexOptHeader* pOptHeader;<br><br>    <span class="hljs-comment">/* pointers to directly-mapped structs and arrays in base DEX */</span><br>    <span class="hljs-type">const</span> DexHeader*    pHeader;<br>    <span class="hljs-type">const</span> DexStringId*  pStringIds;<br>    <span class="hljs-type">const</span> DexTypeId*    pTypeIds;<br>    <span class="hljs-type">const</span> DexFieldId*   pFieldIds;<br>    <span class="hljs-type">const</span> DexMethodId*  pMethodIds;<br>    <span class="hljs-type">const</span> DexProtoId*   pProtoIds;<br>    <span class="hljs-type">const</span> DexClassDef*  pClassDefs;<br>    <span class="hljs-type">const</span> DexLink*      pLinkData;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * These are mapped out of the &quot;auxillary&quot; section, and may not be</span><br><span class="hljs-comment">     * included in the file.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-type">const</span> DexClassLookup* pClassLookup;<br>    <span class="hljs-type">const</span> <span class="hljs-type">void</span>*         pRegisterMapPool;       <span class="hljs-comment">// RegisterMapClassPool</span><br><br>    <span class="hljs-comment">/* points to start of DEX file data */</span><br>    <span class="hljs-type">const</span> u1*           baseAddr;<br><br>    <span class="hljs-comment">/* track memory overhead for auxillary structures */</span><br>    <span class="hljs-type">int</span>                 overhead;<br><br>    <span class="hljs-comment">/* additional app-specific data structures associated with the DEX */</span><br>    <span class="hljs-comment">//void*               auxData;</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>下面就对这几部分进行详细分析。</p><h2 id="2-2-dex-header（DexHeader）"><a href="#2-2-dex-header（DexHeader）" class="headerlink" title="2.2 dex_header（DexHeader）"></a>2.2 dex_header（DexHeader）</h2><p>dex_header对应DexHeader结构体，该结构体定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexHeader</span> &#123;<br>    u1  magic[<span class="hljs-number">8</span>];<span class="hljs-comment">//dex标识+版本号</span><br>    u4  checksum;<span class="hljs-comment">//32位校验码</span><br>    u1  signature[kSHA1DigestLen];<span class="hljs-comment">// SHA-1哈希值</span><br>    u4  fileSize;<span class="hljs-comment">//dex文件的大小</span><br>    u4  headerSize;<span class="hljs-comment">//dex header的大小，009版本为0x5c,035版本为0x70</span><br>    u4  endianTag;<span class="hljs-comment">//标识字节顺序的常量</span><br>    <br>    u4  linkSize;<span class="hljs-comment">//链接段的大小</span><br>    u4  linkOff;<span class="hljs-comment">//链接段的偏移量</span><br>    <br>    u4  mapOff;<span class="hljs-comment">//dex map list的偏移量</span><br>    <br>    u4  stringIdsSize;<span class="hljs-comment">//dex string id的个数</span><br>    u4  stringIdsOff;<span class="hljs-comment">//dex string id的偏移量</span><br>    <br>    u4  typeIdsSize;<br>    u4  typeIdsOff;<br>    <br>    u4  protoIdsSize;<br>    u4  protoIdsOff;<br>    <br>    u4  fieldIdsSize;<br>    u4  fieldIdsOff;<br>    <br>    u4  methodIdsSize;<br>    u4  methodIdsOff;<br>    <br>    u4  classDefsSize;<br>    u4  classDefsOff;<br>    <br>    u4  dataSize;<br>    u4  dataOff;<br>&#125;;<br></code></pre></td></tr></table></figure><p>各个字段解释如下：</p><table><thead><tr><th>字段</th><th>偏移量</th><th>长度</th><th>解释</th></tr></thead><tbody><tr><td>magic</td><td>0x0</td><td>8</td><td>魔数字段，格式如“dex&#x2F;n035&#x2F;0”，其中035表示dex结构的版本号</td></tr><tr><td>checksum</td><td>0x8</td><td>4</td><td>dex文件的校验和，通过它来判断dex文件是否被损坏或篡改</td></tr><tr><td>signature</td><td>0xC</td><td>20</td><td>文件剩余内容（除 <code>magic</code>、<code>checksum</code> 和此字段之外的所有内容）的 SHA-1 签名（哈希）；用于对文件进行唯一标识</td></tr><tr><td>fileSize</td><td>0x20</td><td>4</td><td>整个dex文件的大小（byte数）</td></tr><tr><td>headerSize</td><td>0x24</td><td>4</td><td>dex_header（即DexHeader结构体）的大小</td></tr><tr><td>endianTag</td><td>0x28</td><td>4</td><td>指定dex运行环境的cpu字节序（即大端还是小端），有小端字节序（ENDIAN_CONSTANT &#x3D; 0x12345678）和大端字节序（REVERSE_ENDIAN_CONSTANT &#x3D; 0x78563412）两种。</td></tr><tr><td>linkSize</td><td>0x2C</td><td>4</td><td>链接段的大小</td></tr><tr><td>linkOff</td><td>0x30</td><td>4</td><td>链接段的文件偏移量</td></tr><tr><td>mapOff</td><td>0x34</td><td>4</td><td>dex_map_list（即DexMapList结构体）的文件偏移量</td></tr><tr><td>stringIdsSize</td><td>0x38</td><td>4</td><td>string_ids区中的字符串索引的个数</td></tr><tr><td>stringIdsOff</td><td>0x3C</td><td>4</td><td>string_ids区的文件偏移量（一般与headerSize相等）</td></tr><tr><td>typeIdsSize</td><td>0x40</td><td>4</td><td>type_ids区中的类型索引的个数</td></tr><tr><td>typeIdsOff</td><td>0x44</td><td>4</td><td>type_ids区的文件偏移量</td></tr><tr><td>protoIdsSize</td><td>0x48</td><td>4</td><td>proto_ids区中的方法原型索引的个数</td></tr><tr><td>protoIdsOff</td><td>0x4C</td><td>4</td><td>proto_ids区的文件偏移量</td></tr><tr><td>fieldIdsSize</td><td>0x50</td><td>4</td><td>field_ids区中的域索引的个数</td></tr><tr><td>fieldIdsOff</td><td>0x54</td><td>4</td><td>field_ids区的文件偏移量</td></tr><tr><td>methodIdsSize</td><td>0x58</td><td>4</td><td>method_ids区中的方法索引的个数</td></tr><tr><td>methodIdsOff</td><td>0x5C</td><td>4</td><td>method_ids区的文件偏移量</td></tr><tr><td>classDefsSize</td><td>0x60</td><td>4</td><td>class_def区中的类的个数</td></tr><tr><td>classDefsOff</td><td>0x64</td><td>4</td><td>class_def区的文件偏移量</td></tr><tr><td>dataSize</td><td>0x68</td><td>4</td><td>data区的大小，必须为4字节的整数倍</td></tr><tr><td>dataOff</td><td>0x6C</td><td>4</td><td>data区的文件偏移量</td></tr></tbody></table><p>以下是一个具体实例的dex_header展示图：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/3.png"></p><h2 id="2-3-string-ids（DexStringId列表）"><a href="#2-3-string-ids（DexStringId列表）" class="headerlink" title="2.3 string_ids（DexStringId列表）"></a>2.3 string_ids（DexStringId列表）</h2><p>string_ids中的项为DexStringId结构体，该结构体定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Direct-mapped &quot;string_id_item&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexStringId</span> &#123;<br>    u4 stringDataOff;      <span class="hljs-comment">/* 字符串的文件偏移量 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>DexStringId结构体中只有一个stringDataOff字段，大小4字节，存储指向字符串数据的文件偏移量。需要注意的是字符串采用的是MUTF-8编码表示，它与UTF-8的区别如下：</p><ul><li>MUTF-8使用1~3个字节编码长度。</li><li>大于16位的Unicode编码U+10000~U+10ffff使用3字节来编码。</li><li>U+000采用2字节来编码。</li><li>采用类似C语言中的空字符（’&#x2F;0x00’）作为字符串的结尾。</li></ul><p><strong>MUTF-8字符串的头部（1byte）存放的是字符串的字节数。</strong></p><p>我们通过具体的实例来更好的理解。在下图中，第4项DexStringId结构体中的stringDataOff的值为0x615E7，指向的字符串的第一个字节为0xC，表示字符串长度为12bytes，后面紧跟着的就是字符串并以0x00作为结束符。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/4.png"></p><h2 id="2-4-type-ids（DexTypeId列表）"><a href="#2-4-type-ids（DexTypeId列表）" class="headerlink" title="2.4 type_ids（DexTypeId列表）"></a>2.4 type_ids（DexTypeId列表）</h2><p>type_ids中的项为DexTypeId结构体，该结构体的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Direct-mapped &quot;type_id_item&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexTypeId</span> &#123;<br>    u4  descriptorIdx;      <span class="hljs-comment">/* 指向DexStringId列表的索引 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>DexTypeId结构体中只有一个descriptorIdx字段，大小4字节，存储指向DexStringId列表的索引，对应的字符串代表具体类的类型（<strong>smali语法中的类型</strong>）。例如：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/5.png"></p><p>type_ids中的第一项的值为0x4C7（即十进制1223），那么就应该寻找string_ids[1223]。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/6.png"></p><p>之后的字符串寻找在 <code>2.3 string_ids</code>中说过了，这里不再重复。</p><h2 id="2-5-proto-ids（DexProtoId列表）"><a href="#2-5-proto-ids（DexProtoId列表）" class="headerlink" title="2.5 proto_ids（DexProtoId列表）"></a>2.5 proto_ids（DexProtoId列表）</h2><p>proto_ids中的项为DexProtoId结构体，该结构体的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Direct-mapped &quot;proto_id_item&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexProtoId</span> &#123;<br>    u4  shortyIdx;          <span class="hljs-comment">/* 方法声明，指向DexStringId列表的索引 */</span><br>    u4  returnTypeIdx;      <span class="hljs-comment">/* 方法的返回类型，指向DexTypeId列表的索引 */</span><br>    u4  parametersOff;      <span class="hljs-comment">/* 参数类型列表，指向type_list(DextypeList结构体)的文件偏移量 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>DexFieldId是<strong>方法声明（方法签名）</strong>的结构体，该结构体中有3个字段，shortyIdx最终指向方法声明字符串（方法声明由返回类型和参数类型列表组成），returnTypeIdx最终指向方法的返回类型字符串，parametersOff指向一个DextypeList结构体，存放了方法的参数类型的列表。</p><h3 id="2-5-1-DexTypeList"><a href="#2-5-1-DexTypeList" class="headerlink" title="2.5.1 DexTypeList"></a>2.5.1 DexTypeList</h3><p>该结构体的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Direct-mapped &quot;type_list&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexTypeList</span> &#123;<br>    u4  size;               <span class="hljs-comment">/* DexTypeItem的个数*/</span><br>    DexTypeItem list[<span class="hljs-number">1</span>];    <span class="hljs-comment">/* 首个DexTypeItem的值，非偏移量 */</span><br>&#125;;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Direct-mapped &quot;type_item&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexTypeItem</span> &#123;<br>    u2  typeIdx;            <span class="hljs-comment">/* 指向DexTypeId列表的索引 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>现在结合实例来解释proto_ids的寻找过程。例如下图中的proto_id[7]。shortyIdx的值为0x5f2，指向string_ids[1522]，最终的字符串为”CL”；returnTypeIdx的值为0x1，指向type_ids[1]，值为0x5b6，指向string_ids[1462]，最终的字符串为“C”；parametersOff的值为0xE1A08，指向的DexTypeList结构体，该结构体中字段size的值为1，表示只有一个参数，接着就是DexTypeItem结构体，其中字段typeIdx的值为0x7B9，指向type_ids[1977]，值为0x14B3，指向string_ids[5299]，最终的字符串为”Ljava&#x2F;lang&#x2F;String;“。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/7.png"></p><h2 id="2-6-field-ids（DexFieldId列表）"><a href="#2-6-field-ids（DexFieldId列表）" class="headerlink" title="2.6 field_ids（DexFieldId列表）"></a>2.6 field_ids（DexFieldId列表）</h2><p>field_ids中的项为DexFieldId结构体，该结构体的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Direct-mapped &quot;field_id_item&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexFieldId</span> &#123;<br>    u2  classIdx;           <span class="hljs-comment">/* 类的类型，指向DexTypeId列表的索引 */</span><br>    u2  typeIdx;            <span class="hljs-comment">/* 字段类型，指向DexTypeId列表的索引 */</span><br>    u4  nameIdx;            <span class="hljs-comment">/* 字段名，指向DexStringId列表的索引 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>DexFieldId结构体指明了成员变量所在的类、类型以及变量名。</p><p>这里放一张dex_field部分的图，方便理解，重复的寻找过程就不重述。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/8.png"></p><h2 id="2-7-method-ids（DexMethodId列表）"><a href="#2-7-method-ids（DexMethodId列表）" class="headerlink" title="2.7 method_ids（DexMethodId列表）"></a>2.7 method_ids（DexMethodId列表）</h2><p>method_ids中的项为DexMethodId结构体，该结构体的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Direct-mapped &quot;method_id_item&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexMethodId</span> &#123;<br>    u2  classIdx;           <span class="hljs-comment">/* 方法的所属的类，指向DexTypeId列表的索引 */</span><br>    u2  protoIdx;           <span class="hljs-comment">/* 声明类型，指向DexProtoId列表的索引 */</span><br>    u4  nameIdx;            <span class="hljs-comment">/* 方法名，指向DexStringId列表的索引 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>DexMethodId结构体指明了方法所在的类、方法的声明（签名）以及方法名。</p><p>同样附带method_ids部分的示例图以供理解。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/9.png"></p><h2 id="2-8-class-def（DexClassDef列表）"><a href="#2-8-class-def（DexClassDef列表）" class="headerlink" title="2.8 class_def（DexClassDef列表）"></a>2.8 class_def（DexClassDef列表）</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Direct-mapped &quot;class_def_item&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexClassDef</span> &#123;<br>    u4  classIdx;           <span class="hljs-comment">/* 类的类型（即全限定类名），指向DexTypeId列表的索引 */</span><br>    u4  accessFlags;<span class="hljs-comment">/* 访问标志，它是以ACC_开头的一个枚举值，例如ACC_PUBLIC（0x1）、ACC_PRIVATE（0x2）*/</span><br>    u4  superclassIdx;      <span class="hljs-comment">/* 父类类型，指向DexTypeId列表的索引*/</span><br>    u4  interfacesOff;      <span class="hljs-comment">/* 接口，指向DexTypeList的文件偏移，如果类中不含有接口声明和实现，则值为0 */</span><br>    u4  sourceFileIdx;      <span class="hljs-comment">/* 类所在源文件的文件名，指向DexStringId列表的索引 */</span><br>    u4  annotationsOff;     <span class="hljs-comment">/* 注解，指向DexAnnotationsDirectoryItem结构体，根据类型不同会有注解类、注解方法、注解字段与注解参数，如果类中没有注解，则值为0 */</span><br>    u4  classDataOff;       <span class="hljs-comment">/* 指向DexClassData结构的文件偏移，DexClassData结构是类的数据部分 */</span><br>    u4  staticValuesOff;    <span class="hljs-comment">/* 指向DexEncodedArray结构的文件偏移，DexEncodedArray结构记录类中的静态数据 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>依次解析其中未曾出现过的结构体。</p><h3 id="2-8-1-DexAnnotationsDirectoryItem"><a href="#2-8-1-DexAnnotationsDirectoryItem" class="headerlink" title="2.8.1 DexAnnotationsDirectoryItem"></a>2.8.1 DexAnnotationsDirectoryItem</h3><p>该结构体的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Direct-mapped &quot;annotations_directory_item&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexAnnotationsDirectoryItem</span> &#123;<br>    u4  classAnnotationsOff;  <span class="hljs-comment">/* 类注释，值为DexAnnotationSetItem的文件偏移量 */</span><br>    u4  fieldsSize;           <span class="hljs-comment">/* 域注释，值为DexFieldAnnotationsItem的数量 */</span><br>    u4  methodsSize;          <span class="hljs-comment">/* 方法注释，值为DexMethodAnnotationsItem的数量 */</span><br>    u4  parametersSize;       <span class="hljs-comment">/* 参数注释。值为DexParameterAnnotationsItem的数量 */</span><br>    <span class="hljs-comment">/* 如果上述后三者中存在一个或多个，则在后面追加以下数据，并按下列顺序排列 */</span><br>    <span class="hljs-comment">/* followed by DexFieldAnnotationsItem[fieldsSize] */</span><br>    <span class="hljs-comment">/* followed by DexMethodAnnotationsItem[methodsSize] */</span><br>    <span class="hljs-comment">/* followed by DexParameterAnnotationsItem[parametersSize] */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>classAnnotationsOff指向DexAnnotationSetItem结构体。DexFieldAnnotationsItem、DexMethodAnnotationsItem、DexParameterAnnotationsItem如果存在，则按顺序排列在parametersSize字段后面！</p><p>下面继续解析未曾出现过的结构。</p><h4 id="2-8-1-1-DexAnnotationSetItem"><a href="#2-8-1-1-DexAnnotationSetItem" class="headerlink" title="2.8.1.1 DexAnnotationSetItem"></a>2.8.1.1 DexAnnotationSetItem</h4><p>该结构体定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Direct-mapped &quot;annotation_set_item&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexAnnotationSetItem</span> &#123;<br>    u4  size;<span class="hljs-comment">/* DexAnnotationItem的数量 */</span><br>    u4  entries[<span class="hljs-number">1</span>];                 <span class="hljs-comment">/* 第一个DexAnnotationItem的文件偏移量 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>其中<strong>DexAnnotationItem</strong>的结构体定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Direct-mapped &quot;annotation_item&quot;.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">NOTE:</span> this structure is byte-aligned.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexAnnotationItem</span> &#123;<br>    u1  visibility;<span class="hljs-comment">/* 此注释的预期可见性 */</span><br>    u1  annotation[<span class="hljs-number">1</span>];              <span class="hljs-comment">/* encoded_annotation格式的注释内容 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>第一个字段visibility表示注释的可见性，主要有以下几种情况：</p><table><thead><tr><th align="left">名称</th><th align="left">值</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">VISIBILITY_BUILD</td><td align="left">0x00</td><td align="left">预计仅在构建（例如，在编译其他代码期间）时可见</td></tr><tr><td align="left">VISIBILITY_RUNTIME</td><td align="left">0x01</td><td align="left">预计在运行时可见</td></tr><tr><td align="left">VISIBILITY_SYSTEM</td><td align="left">0x02</td><td align="left">预计在运行时可见，但仅对基本系统（而不是常规用户代码）可见</td></tr></tbody></table><p>第二个字段annotation表示采用encoded_annotation格式的注释内容。<strong>encoded_annotation格式</strong>如下：</p><table><thead><tr><th align="left">名称</th><th align="left">格式</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">type_idx</td><td align="left">uleb128</td><td align="left">注释的类型，指向DexTypeId列表的索引值</td></tr><tr><td align="left">size</td><td align="left">uleb128</td><td align="left">此注解中 name-value 映射的数量</td></tr><tr><td align="left">elements</td><td align="left">annotation_element[size]</td><td align="left">注解的元素，直接以内嵌形式（不作为偏移量）表示。元素必须按 <code>string_id</code> 索引以升序进行排序。</td></tr></tbody></table><p><strong>annotation_element格式</strong>如下：</p><table><thead><tr><th align="left">名称</th><th align="left">格式</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">name_idx</td><td align="left">uleb128</td><td align="left">元素名称，指向DexStringId列表的索引值</td></tr><tr><td align="left">value</td><td align="left">encoded_value</td><td align="left">元素值</td></tr></tbody></table><p>好！现在结合实例来分析。在下图中，红框中为DexAnnotationSetItem结构体（包括的它偏移量），根据该结构体的定义，首先是四字节的数值表示大小，值为0x3，接着就是四字节表示DexAnnotationItem的文件偏移量，值为0xE922A。那么就到了DexAnnotationItem数组了，这里我们只分析annotation_item[0]即可，根据该结构体的定义，第一个字节表示注释的可见性，值为0x2，对应VISIBILITY_SYSTEM，然后就是encoded_annotation格式的数据。根据encoded_annotation格式，第一个字段type_idx采用uleb128编码，那么值就是0x0775，之后按照索引值查找即可，然后第二个字段size也采用uleb128编码，那么值就是0x01，表示只有一个 name-value键值对，接下来是elements字段，采用annotation_element格式，那么采用uleb128编码的name_idx的值为0x5185，接下来的value采用encoded_value编码，根据1.2节所讲的，高3位为value_arg的值（0x1），低5位为value_type的值（0x18），根据value_type的值查表，可知是后面跟随无符号（零扩展）四字节整数值，且是DexTypeId列表的索引，那么只需要在后面取四字节就是value了，值为0x11D，然后根据索引值查找即可。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/10.png"></p><h4 id="2-8-1-2-DexFieldAnnotationsItem"><a href="#2-8-1-2-DexFieldAnnotationsItem" class="headerlink" title="2.8.1.2 DexFieldAnnotationsItem"></a>2.8.1.2 DexFieldAnnotationsItem</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Direct-mapped &quot;field_annotations_item&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexFieldAnnotationsItem</span> &#123;<br>    u4  fieldIdx;<span class="hljs-comment">/* 指向DexFieldId列表的索引值 */</span><br>    u4  annotationsOff;             <span class="hljs-comment">/* DexAnnotationSetItem的文件偏移量 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>DexAnnotationSetItem结构在<code>2.8.1.1</code>中解析过，不再重复。</p><h4 id="2-8-1-3-DexMethodAnnotationsItem"><a href="#2-8-1-3-DexMethodAnnotationsItem" class="headerlink" title="2.8.1.3 DexMethodAnnotationsItem"></a>2.8.1.3 DexMethodAnnotationsItem</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Direct-mapped &quot;method_annotations_item&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexMethodAnnotationsItem</span> &#123;<br>    u4  methodIdx;<span class="hljs-comment">/* 指向DexMethodId列表的索引值 */</span><br>    u4  annotationsOff;             <span class="hljs-comment">/* DexAnnotationSetItem的文件偏移量 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>DexAnnotationSetItem结构在<code>2.8.1.1</code>中解析过，不再重复。</p><h4 id="2-8-1-4-DexParameterAnnotationsItem"><a href="#2-8-1-4-DexParameterAnnotationsItem" class="headerlink" title="2.8.1.4 DexParameterAnnotationsItem"></a>2.8.1.4 DexParameterAnnotationsItem</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Direct-mapped &quot;parameter_annotations_item&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexParameterAnnotationsItem</span> &#123;<br>    u4  methodIdx;<span class="hljs-comment">/* 指向DexMethodId列表的索引值 */</span><br>    u4  annotationsOff;             <span class="hljs-comment">/* DexAnotationSetRefList的文件偏移量 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>其中DexAnotationSetRefList结构体定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Direct-mapped &quot;annotation_set_ref_list&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexAnnotationSetRefList</span> &#123;<br>    u4  size;<span class="hljs-comment">/* 列表中元素个数，即DexAnnotationSetRefItem的个数 */</span><br>    DexAnnotationSetRefItem list[<span class="hljs-number">1</span>];<span class="hljs-comment">/* 第一个DexAnnotationSetRefItem的内容，非偏移量 */</span><br>&#125;;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Direct-mapped &quot;annotation_set_ref_item&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexAnnotationSetRefItem</span> &#123;<br>    u4  annotationsOff;             <span class="hljs-comment">/* DexAnnotationSetItem的偏移量 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>最终又绕回到了DexAnnotationSetItem结构体。</p><h3 id="2-8-2-DexClassData"><a href="#2-8-2-DexClassData" class="headerlink" title="2.8.2 DexClassData"></a>2.8.2 DexClassData</h3><p>DexClassData结构的声明在DexClass.h文件中，该结构体的定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* expanded form of class_data_item. Note: If a particular item is</span><br><span class="hljs-comment"> * absent (e.g., no static fields), then the corresponding pointer</span><br><span class="hljs-comment"> * is set to NULL. */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexClassData</span> &#123;<br>    DexClassDataHeader header;<span class="hljs-comment">/* 指定字段与方法的个数的DexClassDataHeader结构体 */</span><br>    DexField*          staticFields;<span class="hljs-comment">/* 静态字段，DexField结构体 */</span><br>    DexField*          instanceFields;<span class="hljs-comment">/* 实例字段，DexField结构体 */</span><br>    DexMethod*         directMethods;<span class="hljs-comment">/* 直接方法，DexMethod结构体 */</span><br>    DexMethod*         virtualMethods;<span class="hljs-comment">/* 虚方法，DexMethod结构体 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>下面接着分析DexClassDataHeader、DexField、DexMethod结构体。</p><h4 id="2-8-2-1-DexClassDataHeader"><a href="#2-8-2-1-DexClassDataHeader" class="headerlink" title="2.8.2.1 DexClassDataHeader"></a>2.8.2.1 DexClassDataHeader</h4><p>该结构体定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* expanded form of a class_data_item header */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexClassDataHeader</span> &#123;<br>    u4 staticFieldsSize;<span class="hljs-comment">/* 静态字段个数 */</span><br>    u4 instanceFieldsSize;<span class="hljs-comment">/* 实例字段个数 */</span><br>    u4 directMethodsSize;<span class="hljs-comment">/* 直接方法个数 */</span><br>    u4 virtualMethodsSize;<span class="hljs-comment">/* 虚方法个数 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>这几个属性都是给DexClassData结构体中的下面四个结构体做辅助，方便定位查找。</p><blockquote><p><span style="color:red"><strong>请注意！DexClass.h文件中所有结构体的u4类型其实都是uleb128类型！！！</strong></span></p></blockquote><h4 id="2-8-2-2-DexField"><a href="#2-8-2-2-DexField" class="headerlink" title="2.8.2.2 DexField"></a>2.8.2.2 DexField</h4><p>该结构体定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* expanded form of encoded_field */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexField</span> &#123;<br>    u4 fieldIdx;    <span class="hljs-comment">/* 指向DexFieldId的索引 */</span><br>    u4 accessFlags;<span class="hljs-comment">/* 访问标志 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>其中accessFlags字段与DexClassDef中的相应字段的类型相同。</p><h4 id="2-8-2-3-DexMethod"><a href="#2-8-2-3-DexMethod" class="headerlink" title="2.8.2.3 DexMethod"></a>2.8.2.3 DexMethod</h4><p>DexMethod结构体描述方法的原型、名称、访问标志以及代码数据块，该结构体定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* expanded form of encoded_method */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexMethod</span> &#123;<br>    u4 methodIdx;    <span class="hljs-comment">/* 指向DexMethodId的索引 */</span><br>    u4 accessFlags;<span class="hljs-comment">/* 访问标志 */</span><br>    u4 codeOff;    <span class="hljs-comment">/* DexCode结构的文件偏移量 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>其中codeOff指向DexCode结构体，该结构体用于进一步描述方法更为详细的信息以及方法中的指令，该结构体在DexFile.h文件中，定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Direct-mapped &quot;code_item&quot;.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * The &quot;catches&quot; table is used when throwing an exception,</span><br><span class="hljs-comment"> * &quot;debugInfo&quot; is used when displaying an exception stack trace or</span><br><span class="hljs-comment"> * debugging. An offset of zero indicates that there are no entries.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexCode</span> &#123;<br>    u2  registersSize;<span class="hljs-comment">/* 使用的寄存器个数 */</span><br>    u2  insSize;<span class="hljs-comment">/* 参数个数 */</span><br>    u2  outsSize;<span class="hljs-comment">/* 调用其他方法时使用的寄存器个数 */</span><br>    u2  triesSize;<span class="hljs-comment">/* try_item的个数 */</span><br>    u4  debugInfoOff;       <span class="hljs-comment">/* 指向调试信息的文件偏移量 */</span><br>    u4  insnsSize;          <span class="hljs-comment">/* 指令集个数，以2字节为单位 */</span><br>    u2  insns[<span class="hljs-number">1</span>];<span class="hljs-comment">/* 指令集，insns 数组中的代码格式由随附文档 Dalvik 字节码指定 */</span><br>    <span class="hljs-comment">/* 如果 triesSize 不为零，下面存在*/</span><br>    <span class="hljs-comment">/* 两字节填充，使下面的try_item实现4字节对齐 */</span><br>    <span class="hljs-comment">/* followed by try_item[triesSize]，用于表示代码中捕获异常的位置以及如何对异常进行处理的数组 */</span><br>    <span class="hljs-comment">/* followed by uleb128 handlersSize */</span><br>    <span class="hljs-comment">/* followed by catch_handler_item[handlersSize]，用于表示“捕获类型列表和关联处理程序地址”的列表的字节 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>之后还有更为细节的结构，但不再深入，先在这里停一停。（嵌套的也太深了吧！🥲）</p><h3 id="2-8-3-DexEncodedArray"><a href="#2-8-3-DexEncodedArray" class="headerlink" title="2.8.3 DexEncodedArray"></a>2.8.3 DexEncodedArray</h3><p>该结构体定义如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Direct-mapped &quot;encoded_array&quot;.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">NOTE:</span> this structure is byte-aligned.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexEncodedArray</span> &#123;<br>    u1  array[<span class="hljs-number">1</span>];                   <span class="hljs-comment">/* encoded_array格式的数据 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>接下来解释encoded_array格式。</p><h4 id="2-8-3-1-encoded-array格式"><a href="#2-8-3-1-encoded-array格式" class="headerlink" title="2.8.3.1 encoded_array格式"></a>2.8.3.1 encoded_array格式</h4><p>该格式定义如下：</p><table><thead><tr><th align="left">名称</th><th align="left">格式</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">size</td><td align="left">uleb128</td><td align="left">表示数组中的元素数量</td></tr><tr><td align="left">values</td><td align="left">encoded_value[size]</td><td align="left">采用encoded_value编码的数据</td></tr></tbody></table><p>DexEncodedArray部分比较简单，且encoded_value编码在2.8.1.1小节实例分析过，这里不再重复。</p><h2 id="2-9-DexMapList"><a href="#2-9-DexMapList" class="headerlink" title="2.9 DexMapList"></a>2.9 DexMapList</h2><p>Dalvik虚拟机解析dex文件的内容后，最终将其映射成DexMapList数据结构。DexMapList由DexHeader中的mapOff字段指明，该结构体的定义在DexFile.h文件中，代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Direct-mapped &quot;map_list&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexMapList</span> &#123;<br>    u4  size;               <span class="hljs-comment">/* DexMapItem个数 */</span><br>    DexMapItem list[<span class="hljs-number">1</span>];     <span class="hljs-comment">/* DexMapItem数组 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>DexMapItem结构体如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * Direct-mapped &quot;map_item&quot;.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">DexMapItem</span> &#123;<br>    u2 type;              <span class="hljs-comment">/* KDexType开头的类型 */</span><br>    u2 unused;  <span class="hljs-comment">/* 未使用，用于字节对齐 */</span><br>    u4 size;              <span class="hljs-comment">/* 类型的个数 */</span><br>    u4 offset;            <span class="hljs-comment">/* 类型数据的文件偏移 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>第一个字段type是一个枚举常量，如下所示，通过类型名称很容易判断它的具体类型。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">/* map item type codes */</span><br><span class="hljs-keyword">enum</span> &#123;<br>    kDexTypeHeaderItem               = <span class="hljs-number">0x0000</span>,<br>    kDexTypeStringIdItem             = <span class="hljs-number">0x0001</span>,<br>    kDexTypeTypeIdItem               = <span class="hljs-number">0x0002</span>,<br>    kDexTypeProtoIdItem              = <span class="hljs-number">0x0003</span>,<br>    kDexTypeFieldIdItem              = <span class="hljs-number">0x0004</span>,<br>    kDexTypeMethodIdItem             = <span class="hljs-number">0x0005</span>,<br>    kDexTypeClassDefItem             = <span class="hljs-number">0x0006</span>,<br>    kDexTypeCallSiteIdItem           = <span class="hljs-number">0x0007</span>,<br>    kDexTypeMethodHandleItem         = <span class="hljs-number">0x0008</span>,<br>    kDexTypeMapList                  = <span class="hljs-number">0x1000</span>,<br>    kDexTypeTypeList                 = <span class="hljs-number">0x1001</span>,<br>    kDexTypeAnnotationSetRefList     = <span class="hljs-number">0x1002</span>,<br>    kDexTypeAnnotationSetItem        = <span class="hljs-number">0x1003</span>,<br>    kDexTypeClassDataItem            = <span class="hljs-number">0x2000</span>,<br>    kDexTypeCodeItem                 = <span class="hljs-number">0x2001</span>,<br>    kDexTypeStringDataItem           = <span class="hljs-number">0x2002</span>,<br>    kDexTypeDebugInfoItem            = <span class="hljs-number">0x2003</span>,<br>    kDexTypeAnnotationItem           = <span class="hljs-number">0x2004</span>,<br>    kDexTypeEncodedArrayItem         = <span class="hljs-number">0x2005</span>,<br>    kDexTypeAnnotationsDirectoryItem = <span class="hljs-number">0x2006</span>,<br>&#125;;<br></code></pre></td></tr></table></figure><p>第二个字段size指定了特定类型的个数，它们以特定的类型在dex文件中连续存放。第三个字段offset则是该类型的文件起始偏移地址。</p><p>接下来就是结合实例具体分析。在大红框中的是DexMapList结构，可以看出一共有11个DexMapItem，拿map_item[1]进行分析，type的值为0x0001，对应kDexTypeStringIdItem，也就是对应string_id_item类型，size的值为0x52F4（十进制21236），正好与string_id_item的个数相同（图中小红框中，索引值从0开始），最后是offset的值为0x70，对应string_ids结构的文件偏移量。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/11.png"></p><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>整个dex文件分为dex_header、string_ids、type_ids、proto_ids、field_ids、method_ids、class_defs、map_list这8部分。虽然分了这么多块，但它们之间的联系非常紧密，其中map_list指明了各部分的大小和文件偏移量。所有的常量和字符串都在string_ids中，其他部分需要通过索引在string_ids中查找才能获得具体的数据。</p><p>整个dex文件中最复杂的还得是class_defs部分，这部分结构太多了，嵌套的太深了，需要日后在深入该部分，然后补充该部分知识。</p><p>目前非常有必要做的事情就是编写dex文件分析代码来加深这方面的知识！</p><hr><p>参考：</p><p><a href="https://source.android.google.cn/docs/core/dalvik/dex-format?hl=zh-cn">Dalvik 可执行文件格式  | Android 开源项目  | Android Open Source Project (google.cn)</a></p><p><a href="https://source.android.google.cn/docs/core/runtime/dalvik-bytecode?hl=zh-cn">Dalvik 字节码  | Android 开源项目  | Android Open Source Project (google.cn)</a></p><p><a href="https://cloud.tencent.com/developer/article/2065063">dex文件解析(第三篇)「建议收藏」-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><p>[<a href="https://bbs.kanxue.com/thread-203417.htm">原创]android中Dex文件结构详解-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>dex</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android中的Dalvik和ART虚拟机</title>
    <link href="/2023/09/13/Android%E4%B8%AD%E7%9A%84Dalvik%E5%92%8CART%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    <url>/2023/09/13/Android%E4%B8%AD%E7%9A%84Dalvik%E5%92%8CART%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Dalvik"><a href="#Dalvik" class="headerlink" title="Dalvik"></a>Dalvik</h1><p>Dalvik虚拟机（Dalvik Virtual Machine），简称 DVM，是 Google 专门为 Android 平台开发的虚拟机，它运行在 Android 运行时库中。</p><h2 id="DVM-与-JVM-的区别"><a href="#DVM-与-JVM-的区别" class="headerlink" title="DVM 与 JVM 的区别"></a>DVM 与 JVM 的区别</h2><ul><li><p><strong>架构不同</strong></p><p>JVM基于栈架构，需要频繁地从栈上读写数据，因此需要更多的指令分派和内存访问次数，这样就会耗费不少 CPU 时间。</p><p>DVM基于寄存器架构，数据的访问通过寄存器间的直接传递，相比基于栈的方式更快。</p></li><li><p><strong>执行的字节码不同</strong></p><p>传统的 Java 程序经过编译生成 Java 字节码保存在 class 文件中，JVM 通过解释 class 文件来运行程序。</p><p>而 DVM 会将所有 class 文件转换成一个 dex 文件（存储 Dalvik 字节码），DVM通过解释 dex 文件来执行程序。</p></li><li><p><strong>dex文件体积更小</strong></p><p>java字节码转换到Dalvik字节码的过程中，会用到dx工具。该工具会对所有的Java类文件中的常量池进行分解，消除其中的冗余信息，重新组成一个常量池。如下图所示：</p><p><img src="/pic/jar%E5%92%8Cdex%E7%9A%84%E5%B7%AE%E5%BC%82.png" alt="jar和dex的差异"></p></li><li><p><strong>DVM允许在有限的内存中同时运行多个进程</strong></p><p> DVM经过优化，允许在有限的内存中同时运行多个进程。在Android中的每一个应用都运行在一个DVM实例中，每一个DVM实例都运行在一个独立的进程空间。独立的进程可以防止在虚拟机崩溃的时候所有程序都被关闭。</p></li><li><p><strong>DVM由Zygote创建和初始化</strong></p><p>Zygote是一个DVM进程，同时也用来创建和初始化DVM实例。每当系统需要创建一个应用程序时，Zygote就会fock自身，快速的创建和初始化一个DVM实例，用于应用程序的运行。对于一些只读的系统库，所有的DVM实例都会和Zygote共享一块内存区域。</p></li><li><p><strong>DVM有共享机制</strong></p><p>DVM拥有预加载-共享的机制，不同应用之间在运行时可以共享相同的类，拥有更高的效率。而JVM不存在这种共享机制，不同的程序都是彼此独立的，无法进行共享。</p></li></ul><h2 id="DVM的运行时堆"><a href="#DVM的运行时堆" class="headerlink" title="DVM的运行时堆"></a>DVM的运行时堆</h2><p>DVM的运行时堆主要由两个Space以及多个辅助数据结构组成，两个Space分别是Zygote Space（Zygote Heap）和Allocation Space（Active Heap）。Zygote Space用来管理Zygote进程在启动过程中预加载和创建的各种对象，Zygote Space中不会触发GC，所有进程都共享该区域，比如系统资源。Allocation Space是在Zygote进程fork第一个子进程之前创建的，以后的对象都会在Allocation Space上进行分配和释放。<strong>Allocation Space不是进程间共享的，在每个进程中都独立拥有一份</strong>。除了这两个Space，还包含以下数据结构：</p><ul><li>Card Table：用于DVM Concurrent GC，当第一次进行垃圾标记后，记录垃圾信息。</li><li>Heap Bitmap：有两个Heap Bitmap，一个用来记录上次GC存活的对象，另一个用来记录这次GC存活的对象。</li><li>Mark Stack：DVM的运行时堆使用标记-清除（Mark-Sweep）算法进行GC，Mark Stack就是在GC的标记阶段使用的，它用来遍历存活的对象。</li></ul><p><img src="/pic/DVM%E8%BF%90%E8%A1%8C%E6%97%B6%E5%A0%86.png" alt="DVM运行时堆"></p><h1 id="ART"><a href="#ART" class="headerlink" title="ART"></a>ART</h1><p>在Android5.0版本，ART（Android Runtime）虚拟机完全替代了DVM。</p><h2 id="ART和DVM的区别"><a href="#ART和DVM的区别" class="headerlink" title="ART和DVM的区别"></a>ART和DVM的区别</h2><ul><li>DVM中应用每次运行时，都要进行 JIT 编译（Just In Time Compilation，即时编译）。而在ART中，系统在安装应用程序时会进行一次AOT编译（Ahead Of Time Compilation，预编译），将字节码预先编译成机器码并存储在本地，这样应用程序每次运行时就不需要再编译了，但这也会造成应用程序的安装时间变长，所占存储空间变多。因此在Android7.0版本中，ART加入了 JIT 编译，作为AOT的一个补充，在应用程序安装时并不会将字节码全部编译成机器码，而是将热点代码编译成机器码，从而缩短应用程序的安装时间并节省了存储空间。</li><li>DVM只支持32位CPU，而ART支持64位并兼容32位CPU。</li><li>ART对垃圾回收机制进行了改进，比如更频繁地执行并行垃圾收集。</li><li>ART的运行时堆空间划分和DVM不同。</li></ul><h2 id="ART的运行时堆"><a href="#ART的运行时堆" class="headerlink" title="ART的运行时堆"></a>ART的运行时堆</h2><p>ART的运行时堆主要由四个Space和多个辅助数据结构组成，四个Space分别是Zygote Space、Allocation Space、Image Space、Large Object Space。Zygote Space和Allocation Space的作用同DVM中的一致，Image Space用来存放一些预加载类，Large Object Space用来分配一些大对象，其中Zygote Space和Image Space是进程间共享的。辅助数据结构包括两个Mod Union Table、一个Card Table、两个Heap Bitmap、两个Object Map、三个Object Stack。</p><p><img src="/pic/ART%E8%BF%90%E8%A1%8C%E6%97%B6%E5%A0%86.png" alt="ART运行时堆"></p><hr><p>参考：</p><p><a href="http://liuwangshu.cn/application/performance/ram-1-dvm-art.html">Android内存优化（一）DVM和ART原理初探 | BATcoder - 刘望舒 (liuwangshu.cn)</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20230913日报</title>
    <link href="/2023/09/13/%E6%97%A5%E6%8A%A5/2023%E5%B9%B409%E6%9C%88/13%E6%97%A5%E6%8A%A5/"/>
    <url>/2023/09/13/%E6%97%A5%E6%8A%A5/2023%E5%B9%B409%E6%9C%88/13%E6%97%A5%E6%8A%A5/</url>
    
    <content type="html"><![CDATA[<p>延续昨天的DVM和ART的学习笔记，然后又学习了apk的打包流程，之后是apk的安装流程源码分析，没想到这部分很长很长，可以把这部分分为3部分：</p><ol><li>PackageInstaller应用的初始化，这部分在UI界面上体现就是我们常看到的安装确认界面，包含需要使用到的权限信息等。</li><li>PackageInstaller安装apk，这部分并不是真正的安装，而是创建一个注册一个InstallEventReceiver观察者 ，用于接受安装成功和失败的回调，然后通过调用PackageInstaller.Session的commit方法，交由PMS来安装。</li><li>PMS安装apk。</li></ol><p>看不完，根本看不完！</p>]]></content>
    
    
    <categories>
      
      <category>日报</category>
      
      <category>2023年09月</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日报</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20230912日报</title>
    <link href="/2023/09/12/%E6%97%A5%E6%8A%A5/2023%E5%B9%B409%E6%9C%88/12%E6%97%A5%E6%8A%A5/"/>
    <url>/2023/09/12/%E6%97%A5%E6%8A%A5/2023%E5%B9%B409%E6%9C%88/12%E6%97%A5%E6%8A%A5/</url>
    
    <content type="html"><![CDATA[<p>今天跟着书籍学习了一下DVM、ART以及smali语法，反复看了两三遍，但说实在的，肯定还是记不住的。然后也是对这部分学习写博客，只完成了smali语法的学习笔记，DVM和ART的部分才构思了一点，写文章挺费时间的，但是必须得写，不能养成惰性！</p>]]></content>
    
    
    <categories>
      
      <category>日报</category>
      
      <category>2023年09月</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日报</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>smali语法学习</title>
    <link href="/2023/09/12/smali%E8%AF%AD%E6%B3%95%E6%91%98%E5%BD%95/"/>
    <url>/2023/09/12/smali%E8%AF%AD%E6%B3%95%E6%91%98%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="一、类型"><a href="#一、类型" class="headerlink" title="一、类型"></a>一、类型</h1><p>Dalvik 字节码只有两种类型，基本类型和引用类型。Dalvik 使用这两种类型来表示 Java 语言的全部类型，除了对象与数组属于引用对象外，其他的 Java 类型都是基本类型。</p><table><thead><tr><th align="center">语法</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">V</td><td align="center">void，只用于返回值类型</td></tr><tr><td align="center">Z</td><td align="center">boolean</td></tr><tr><td align="center">B</td><td align="center">byte</td></tr><tr><td align="center">S</td><td align="center">short</td></tr><tr><td align="center">C</td><td align="center">char</td></tr><tr><td align="center">I</td><td align="center">int</td></tr><tr><td align="center">J</td><td align="center">long</td></tr><tr><td align="center">F</td><td align="center">float</td></tr><tr><td align="center">D</td><td align="center">double</td></tr><tr><td align="center">L</td><td align="center">Java类类型</td></tr><tr><td align="center">[</td><td align="center">数组类型</td></tr></tbody></table><p><strong>每个 Dalvik 寄存器都是 32 位大小</strong>，对于超过 32 位的，比如 J、D 类型，它们就需要使用两个相邻的寄存器（<strong>寄存器对</strong>）来存储值。</p><p>这里对于最后两个类型进行详细说明。</p><p>L 类型表示 Java 类型中的任何类。这些类在 Java 代码中以 <code>package.name.ObjectName</code>方法引用，但在 Dalvik 汇编代码中，类以 <code>Lpackage/name/ObjectName; </code>形式表示，注意最后面有个分号。例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>java中<br>java.lang.String<br><span class="hljs-regexp">//</span>Dalvik中<br>Ljava<span class="hljs-regexp">/lang/</span>String;<br></code></pre></td></tr></table></figure><p>[ 类型表示所有基本类型的数组。[ 后面紧跟基本类型描述符，例如 <code>[I</code> 表示 int 类型的一维数组，相当于 Java 中的 <code>int[]</code>。多维数组的表示则是使用多个多个 [ ，例如<code>[[I</code>表示<code>int[][]</code>。</p><p>L 与 [ 可以同时使用来表示对象数组。如 <code>[Ljava.lang.String;</code>表示Java中的字符串数组。</p><h1 id="二、方法"><a href="#二、方法" class="headerlink" title="二、方法"></a>二、方法</h1><p>Dalvik 使用方法名、类型参数与返回值来详细描述一个方法。这样做的目的是：</p><ol><li>方便 Dalvik 虚拟机在运行时从方法表中快速地找到正确的方法</li><li>Dalvik 虚拟机可以使用它们来做一些静态分析，比如 Dalvik 字节码的验证与优化。</li></ol><p>方法的格式如下：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xl">L<span class="hljs-function"><span class="hljs-title">package</span>/<span class="hljs-keyword">name</span>/ObjectName;-&gt;</span>MethodName(III)Z<br></code></pre></td></tr></table></figure><p><code>Lpackage/name/ObjectName;</code>表示类，<code>MethodName</code>表示类中的方法，<code>(III)Z</code>是方法的签名部分，括号中的<code>III</code>表示参数（在这里具体为三个整型参数），<code>Z</code>表示方法的返回类型（在这里具体为布尔型）。</p><p>来一个复杂的例子：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">.method <span class="hljs-keyword">public</span> M(I[[IILjava<span class="hljs-regexp">/lang/</span>String;[Ljava<span class="hljs-regexp">/lang/</span>Object;)Ljava<span class="hljs-regexp">/lang/</span>String<br></code></pre></td></tr></table></figure><p>对应 Java 代码如下：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-title function_">M</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>[][], <span class="hljs-type">int</span>, <span class="hljs-built_in">String</span>, <span class="hljs-built_in">Object</span>[])<br></code></pre></td></tr></table></figure><p>方法代码以<code>.method</code>指令开始，以<code> .end method</code>指令结束。在<code>.method</code>指令后面会跟随<code>.registers num</code>表示使用到的寄存器个数为 num 个，<code>.parameter</code>指定函数的一个参数，<code>.prologue</code>指定函数代码的起始位置 。</p><h1 id="三、字段"><a href="#三、字段" class="headerlink" title="三、字段"></a>三、字段</h1><p>字段与方法很相似，只是字段没有方法签名域的参数和返回值，取而代之的是字段的类型。字段格式如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">Lpackage<span class="hljs-regexp">/name/</span>ObjectName;-&gt;FieldName:Ljava<span class="hljs-regexp">/lang/</span>String;<br></code></pre></td></tr></table></figure><p>字段由类型（<code>Lpackage/name/ObjectName;</code>）、字段名（<code>FieldName</code>）与字段类型（<code>Ljava/lang/String;</code>）组成，并用<code>:</code>将字段名和字段类型隔开。</p><p>字段代码以<code>.field</code>指令开头。</p><h1 id="四、寄存器命名方法"><a href="#四、寄存器命名方法" class="headerlink" title="四、寄存器命名方法"></a>四、寄存器命名方法</h1><p>v命名法：采用以<code>v</code>开头的方式表示函数中用到的局部变量和参数，所有的寄存器命名从 v0 开始，依次递增。</p><p>p命名法：采用以<code>p</code>开头的方式表示函数中引入参数，从 p0 开始，依次递增。但对函数的局部变量寄存器的命名没有影响，即仍然使用 v 命名法。</p><h1 id="五、指令集"><a href="#五、指令集" class="headerlink" title="五、指令集"></a>五、指令集</h1><h2 id="指令特点"><a href="#指令特点" class="headerlink" title="指令特点"></a>指令特点</h2><p>Dalvik 指令在调用格式上模仿了 C 语言的调用约定。Dalvik 指令的语法和助词符有如下特点：</p><ul><li>参数采用从目标（destination）到源（source）的方式。</li><li>根据字节码的大小与类型不同，一些字节码添加了名称后缀以消除歧义、<ul><li>32位常规类型的字节码不添加任何后缀。</li><li>64位常规类型的字节码添加 <code>-wide</code>后缀。</li><li>特殊类型的字节码根据具体类型添加后缀。它们可以是 <code>-boolean</code>、<code>-byte</code>、<code>-char</code>、<code>-short</code>、<code>-int</code>、<code>-long</code>、<code>-float</code>、<code>-double</code>、<code>-object</code>、<code>-string</code>、<code>-class</code>、<code>-void</code>之一。</li></ul></li><li>根据字节码的布局和选项不同，一些字节码添加了字节码后缀以消除歧义。这些后缀通过在字节码主名称后添加<code>/</code>来分隔。</li></ul><p><strong>约定：在指令集的描述中，宽度值中每个字母表示宽度为4位。例如</strong></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">move-wide/from16 vAA,VBBBB<br></code></pre></td></tr></table></figure><p><strong>根据约定，vAA的取值范围位v0~v255；vBBBB的取值范围为v0~v65535。以下谈到的寄存器取值、位数、范围都是指寄存器编号。</strong></p><h2 id="数据定义指令"><a href="#数据定义指令" class="headerlink" title="数据定义指令"></a>数据定义指令</h2><p>声明变量，基础字节码为 const。</p><ul><li>const[&#x2F;4&#x2F;16&#x2F;high16] vA, xx：表示将 xx 赋值给寄存器 vA。<code>[]</code>表示可选内容，根据 xx 的长度选择，比如16位的就选<code>/16</code>，32位就不选。<code>/high16</code>则是取 xx 的高16位，右扩展成32位。</li><li>const-wide[&#x2F;16&#x2F;32&#x2F;high16] vA, xx：表示将 xx 赋值给寄存器对vA。</li><li>const-string[&#x2F;jumbo] vA, string@xxxx：通过字符串索引（string@xxxx）构造一个字符串给寄存器 vA。字符串索引较大时会添加指令后缀<code>/jumbo</code>。</li><li>const-class[&#x2F;jumbo] vA, type@xxxx：通过类型索引获取一个类型引用并赋给寄存器 vA。</li></ul><h2 id="数据操作指令"><a href="#数据操作指令" class="headerlink" title="数据操作指令"></a>数据操作指令</h2><p>数据操作指令为move。</p><ul><li>move[&#x2F;16&#x2F;from16] vA, vB：寄存器赋值，将 vB 寄存器的值赋值给 vA 寄存器。指令后缀<code>/16</code>表示源寄存器和目的寄存器都是16位。指令后缀<code>/from16</code>表示源寄存器位16位，目的寄存器为8位。</li><li>mov-wide[&#x2F;from16] vA, vB：寄存器对赋值。</li><li>move-object[&#x2F;16&#x2F;from16] vA, vB：对象赋值。</li><li>move-result vA：将上一个 invoke 类型指令操作的单字非对象结果赋给 vA 寄存器。</li><li>move-result-wide vA：将上一个 invoke 类型指令操作的双字非对象结果赋给 vA 寄存器。</li><li>move-result-object vA：将上一个 invoke 类型指令操作的对象结果赋给 vA 寄存器。</li><li>move-exception vA：使用 vA 寄存器保存一个运行时发生的异常。这条指令必须是异常发生时的异常处理器的一条指令，否则该指令无效。</li></ul><h2 id="数据转换指令"><a href="#数据转换指令" class="headerlink" title="数据转换指令"></a>数据转换指令</h2><p>数据转换指令用于将一种类型的数值转换成另一种类型。他的格式为<code>unop vA, vB</code>，后者存放需要转换的数据，转换后的结果保存在 vA 寄存器（或 vA 寄存器对）中。</p><ul><li>求补指令<code>neg-xxx</code>：如 <code>neg-int</code> 表示对整型数求补，<code>neg-long</code>表示对长整型数求补。</li><li>求反指令<code>not-xxx</code>：如 <code>not-int</code> 表示对整型数求反，<code>not-long</code>表示对长整型数求反。</li><li>数据类型转换指令<code>xxx-to-xxx</code>：如<code>int-to-float</code>表示将整型数转成单精度浮点型，<code>double-to-long</code>表示将双精度浮点型数转成长整型。<code>int</code>型额外还有<code>int-to-byte</code>、<code>int-to-char</code>、<code>int-to-short</code>指令。</li></ul><h2 id="数据运算指令"><a href="#数据运算指令" class="headerlink" title="数据运算指令"></a>数据运算指令</h2><p>数据运算指令有如下四类：</p><ul><li>binop vA, vB, vC：将 vB 寄存器与 vC 寄存器进行运算，结果保存到 vA 寄存器中。</li><li>binop&#x2F;2addr vA, vB：将 vA 寄存器与 vB 寄存器进行运算，结果保存到 vA 寄存器中。指令后缀<code>/2addr</code>表示使用两地址（即两个寄存器）的形式进行运算。</li><li>binop&#x2F;lit16 vA, vB, xx：将 vB 寄存器与常量xx 进行运算，结果保存到 vA 寄存器中。指令后缀<code>/lit16</code>指明常量是16位的。</li><li>binop&#x2F;lit8 vA, vB, xx：将 vB 寄存器与常量xx 进行运算，结果保存到 vA 寄存器中。指令后缀<code>/lit8</code>指明常量是8位的。</li></ul><p>其中 binop 代指如下运算指令：</p><table><thead><tr><th align="center">运算指令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">add-type</td><td align="center">加法运算，后缀-type代指-int、-long、-float、-double。</td></tr><tr><td align="center">sub-type</td><td align="center">减法运算</td></tr><tr><td align="center">mul-type</td><td align="center">乘法运算</td></tr><tr><td align="center">div-type</td><td align="center">除法运算</td></tr><tr><td align="center">rem-type</td><td align="center">模运算</td></tr><tr><td align="center">and-type</td><td align="center">与运算</td></tr><tr><td align="center">or-type</td><td align="center">或运算</td></tr><tr><td align="center">xor-type</td><td align="center">异或运算</td></tr><tr><td align="center">shl-type</td><td align="center">有符号数左移</td></tr><tr><td align="center">shr-type</td><td align="center">有符号数右移</td></tr><tr><td align="center">ushr-type</td><td align="center">无符号数右移</td></tr></tbody></table><h2 id="跳转指令"><a href="#跳转指令" class="headerlink" title="跳转指令"></a>跳转指令</h2><p>Dalvik指令集中有三种跳转指令：无条件跳转（goto）、分支跳转（switch）、条件跳转（if）。</p><h3 id="无条件跳转指令"><a href="#无条件跳转指令" class="headerlink" title="无条件跳转指令"></a>无条件跳转指令</h3><ul><li>goto xxx</li><li>goto&#x2F;16 xxx</li><li>goto&#x2F;32 xxx</li></ul><p>指令后缀根据由偏移量 xxx 的位数决定，偏移量不能为0。</p><h3 id="分支跳转指令"><a href="#分支跳转指令" class="headerlink" title="分支跳转指令"></a>分支跳转指令</h3><ul><li>packed-switch vA, xxx：vA 寄存器为 switch 分支中需要判断的值，xxx 指向一个 <code>packed-switch-payload</code> 格式的偏移表（switch汇编中对应的的小表？），表中的值是有规律递增的。</li><li>sparse-switch vA, xxx：vA 寄存器为 switch 分支中需要判断的值，xxx 指向一个 <code>sparse-switch-payload</code> 格式的偏移表，表中的值是无规律的偏移量。</li></ul><h3 id="条件跳转指令"><a href="#条件跳转指令" class="headerlink" title="条件跳转指令"></a>条件跳转指令</h3><p>有两种指令格式，第一种指令格式为<code>if-test vA, vB, xxxx</code>，表示比较 vA 寄存器和 vB 寄存器的值，如果比较结果满足就跳转到xxxx指定的偏移处，偏移量不能为0。<code>if-test</code>代指如下指令：</p><table><thead><tr><th align="center">指令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">if-eq</td><td align="center">如果vA &#x3D; vB则跳转</td></tr><tr><td align="center">if-ne</td><td align="center">如果vA !&#x3D; vB则跳转</td></tr><tr><td align="center">if-lt</td><td align="center">如果vA &lt; vB则跳转</td></tr><tr><td align="center">if-ge</td><td align="center">如果vA &gt;&#x3D; vB则跳转</td></tr><tr><td align="center">if-gt</td><td align="center">如果vA &gt; vB则跳转</td></tr><tr><td align="center">if-le</td><td align="center">如果vA &lt;&#x3D; vB则跳转</td></tr></tbody></table><p>第二种指令格式为<code>if-testz vA,xxxx</code>，表示拿 vA 寄存器的值与 0 比较，如果比较结果满足就跳转到xxxx指定的偏移处，偏移量不能为0。<code>if-testz</code>代指的指令同上，只不过后面多了一个<code>z</code>。</p><h2 id="比较指令"><a href="#比较指令" class="headerlink" title="比较指令"></a>比较指令</h2><p>比较指令的格式为<code>cmp-type vA, VB, vC</code>，表示 vB 寄存器(对)与 vC 寄存器(对)进行比较，比较的结果存放在 vA 寄存器中。<code>cmp-type</code>代指如下指令：</p><table><thead><tr><th align="center">指令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">cmpl-float</td><td align="center">比较两个单精度浮点数。如果vB &gt; vC，则结果为-1，相等结果为0，小于结果为1。</td></tr><tr><td align="center">cmpg-float</td><td align="center">比较两个单精度浮点数。如果vB &gt; vC，则结果为1，相等结果为0，小于结果为-1。</td></tr><tr><td align="center">cmpl-double</td><td align="center">比较两个双精度浮点数。如果vB &gt; vC，则结果为-1，相等结果为0，小于结果为1</td></tr><tr><td align="center">cmpg-double</td><td align="center">比较两个双精度浮点数。如果vB &gt; vC，则结果为1，相等结果为0，小于结果为-1。</td></tr><tr><td align="center">cmp-long</td><td align="center">比较两个长整型数。如果vB &gt; vC，则结果为1，相等结果为0，小于结果为-1。</td></tr></tbody></table><h2 id="方法调用指令"><a href="#方法调用指令" class="headerlink" title="方法调用指令"></a>方法调用指令</h2><p>方法调用指令为 invoke，负责调用类实例的方法。该指令有两种格式，分别为<code>invoke-type &#123;vA,vB,...&#125;, method@xxx</code>和<code>invoke-type/range &#123;vA...VN&#125;, method@xxx</code> 。两种类型的指令在作用上无区别，只是前者最多接收5个参数，大于5个参数的方法则使用后者调用。</p><p><code>invoke-type</code>代指如下指令：</p><table><thead><tr><th align="center">指令</th><th align="center">含义</th></tr></thead><tbody><tr><td align="center">invoke-virtual</td><td align="center">调用实例的虚方法</td></tr><tr><td align="center">invoke-super</td><td align="center">调用实例的父类方法</td></tr><tr><td align="center">invoke-direct</td><td align="center">调用实例的直接方法</td></tr><tr><td align="center">invoke-static</td><td align="center">调用实例的静态方法</td></tr><tr><td align="center">inovke-interface</td><td align="center">调用实例的接口方法</td></tr></tbody></table><p>方法调用指令的返回值必须使用<code>move-result[后缀]</code>指令获取。</p><p>例如：</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs smali">invoke-virtual      &#123;v3, v0&#125;, <span class="hljs-class">Lcom/ciscn/glass/MainActivity;</span>-&gt;checkFlag(<span class="hljs-class">Ljava/lang/String;</span>)Z <span class="hljs-comment"># method@3c66</span><span class="hljs-built_in"></span><br><span class="hljs-built_in">move-result </span>        v3<br></code></pre></td></tr></table></figure><h2 id="返回指令"><a href="#返回指令" class="headerlink" title="返回指令"></a>返回指令</h2><p>返回指令为return。</p><ul><li>return-void：表示函数从一个 void 方法返回。</li><li>return vA：表示函数返回一个32位的非对象类型的值。</li><li>return-wide vA：表示函数返回一个64位的非对象类型的值。</li><li>return-object vA：表示函数返回一个对象类型的值。</li></ul><h2 id="字段操作指令"><a href="#字段操作指令" class="headerlink" title="字段操作指令"></a>字段操作指令</h2><p>字段操作指令用来对对象实例的字段进行读写操作。对普通字段与静态字段操作有两种指令集，分别是<code>iinstanceop vA, vB, field@xxx</code>和<code>sstaticop vA, field@xxx</code>。</p><p>普通字段指令的指令前缀为<code>i</code>，比如对普通字段的读操作使用<code>iget</code>指令。</p><p>静态字段指令的指令前缀为<code>s</code>，比如对静态字段的读操作使用<code>sget</code>指令。</p><p>根据访问的字段类型不同，字段操作指令后面会跟随字段类型的后缀，比如<code>iget-byte</code>指令等。</p><p>普通字段操作指令有（只举例get操作，put操作相同，替换get即可）：iget、iget-wide、iget-object、iget-boolean、iget-byte、iget-char、iget-short。</p><p>静态字段操作指令有（只举例get操作，put操作相同，替换get即可）：sget、sget-wide、sget-object、sget-boolean、sget-byte、sget-char、sget-short。</p><h2 id="数组操作指令"><a href="#数组操作指令" class="headerlink" title="数组操作指令"></a>数组操作指令</h2><p>数组操作包括获取数组长度、新建数组、数组赋值、数组元素取值与赋值等操作。</p><ul><li><p>array-length vA, vB：表示获取 vB 寄存器中数组的长度并将值赋值给 vA 寄存器。</p></li><li><p>new-array vA, vB, type@xxx：表示构造指定类型（type@xxx）与大小（vB）的数组，并赋值给 vA 寄存器。可添加指令后缀<code>/jumbo</code>。</p></li><li><p>filled-new-array {vC, vD, vE, vF, vG}, type@xxx：构造指定类型（type@xxx）与大小（vA）的数组并填充数组内容。vA 寄存器是隐式使用的，除了指定数组的大小以外，还指定了参数的个数，vC~vG 是使用到的参数寄存器序列。</p><p>可添加指令后缀<code>/range</code>，功能相同，只是指定了参数寄存器的取值范围。</p><p>可添加指令后缀<code>/jumbo</code>。</p></li><li><p>filled-array-data vA, xxx：用指定的数据来填充数组，数组必须为基本类型的数组。</p></li><li><p>格式arrayop vA, vB, vC：表示对 vB 寄存器指定的数组元素进行取值和赋值，其中 vC 寄存器指定数组元素索引，vA 寄存器指定用来存放读取或需要设置的数组元素的值。<code>arrayop</code>指<code>aget</code>和<code>aput</code>两大类指令，格式与字段操作指令的类似，这里不再举例。</p></li></ul><h2 id="实例操作指令"><a href="#实例操作指令" class="headerlink" title="实例操作指令"></a>实例操作指令</h2><p>与实例相关的操作包括实例的类型转换、检查、新建等。</p><ul><li>check-cast vA, type@xxx：表示将 vA 寄存器中的对象引用转换成指定的类型。</li><li>instance-of vA, vB, type@xxx：表示判断 vB 寄存器中的对象引用是否可以转成指定的类型，如果可以则给 vA 寄存器赋值为1，否则赋值为0。</li><li>new-instance vA, type@xxx：表示构造一个指定类型对象的新实例，并将对象引用赋值给 vA 寄存器，类型符 type 不能是数组类。</li></ul><p>以上指令都可以添加指令后缀<code>/jumbo</code>，功能不变，只是寄存器值与指令的索引取值范围更大。</p><h2 id="锁指令"><a href="#锁指令" class="headerlink" title="锁指令"></a>锁指令</h2><p>锁指令多用于多线程程序中对同一对象的操作。Dalvik 指令集中有两条锁指令：</p><ul><li>monitor-enter vA表示获取指定对象的锁。</li><li>monitor-exit vA表示释放指定对象的锁。</li></ul><h2 id="异常指令"><a href="#异常指令" class="headerlink" title="异常指令"></a>异常指令</h2><p>Dalvik指令集中有一条指令用于抛出异常：</p><ul><li>throw vA：表示抛出 vA 寄存器存放的异常。</li></ul><h2 id="空操作指令"><a href="#空操作指令" class="headerlink" title="空操作指令"></a>空操作指令</h2><p>空操作指令为 nop，他的机器码为 0x00（与PC端的nop(0x90)不同）。该指令不进行任何操作。</p><hr><p>参考：</p><p>《Android软件安全与逆向分析》</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>smali</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20230911日报</title>
    <link href="/2023/09/11/%E6%97%A5%E6%8A%A5/2023%E5%B9%B409%E6%9C%88/11%E6%97%A5%E6%8A%A5/"/>
    <url>/2023/09/11/%E6%97%A5%E6%8A%A5/2023%E5%B9%B409%E6%9C%88/11%E6%97%A5%E6%8A%A5/</url>
    
    <content type="html"><![CDATA[<p>啥也没干成的一天。</p><p>延续昨天的jeb工具的问题，换了好几个版本的jeb，但都没用，要么是附加界面都打不开（直接空白），要么就是显示出了寄存器，但是寄存器的值全为空，详见<a href="https://www.52pojie.cn/thread-1832424-1-1.html">jeb动调出现寄存器全为void情况 - 『移动安全讨论求助区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a>。真够折磨人的！</p><p>然后是科研，逆向微信的小程序搜索功能，我的方法是通过开发助手工具来定位搜索界面的搜索按钮，没想到是一个Textview控件。然后根据显示的资源id以及name定位代码，有混淆，很难受。</p>]]></content>
    
    
    <categories>
      
      <category>日报</category>
      
      <category>2023年09月</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日报</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20230910日报</title>
    <link href="/2023/09/10/%E6%97%A5%E6%8A%A5/2023%E5%B9%B409%E6%9C%88/10%E6%97%A5%E6%8A%A5/"/>
    <url>/2023/09/10/%E6%97%A5%E6%8A%A5/2023%E5%B9%B409%E6%9C%88/10%E6%97%A5%E6%8A%A5/</url>
    
    <content type="html"><![CDATA[<p>今天干的事情有点少，收工也比以往早点，毕竟是星期天，让自己放松一下。</p><p>回顾一下，还是在nssctf上写点mobile题，题目质量稍微好一丢丢，遇到一个有趣的事情，就是jadx工具分析某道题的apk，发现反编译出来的结果存在函数为空的情况，但是实际上并不是！用jeb工具分析apk就不存在这种情况。所以这是为什么呢，jadx工具比jeb工具拉？我们不讨论工具的原因，如果出现这种情况，也许需要靠dump内存提取方法。</p><p>另外，我的jeb工具动调有点问题啊，以寄存器存放的局部变量并没有显示出来，而是显示了一大堆奇奇怪怪的东西，而且还不能从里面搜索我想要的局部变量，他直接给退出程序了，我靠！</p><p>之后就是推进科研任务咯。在这过程中，发现了一个有趣的事情，两个不同的小程序，它们的部分界面是一致的，关键是它们的api除host以外，都是相同的！于是它们都存在相同的漏洞。当然，我还发现了另一个小程序的漏洞，是基于用户信息更新的漏洞，可以访问到用户的信息以及用于通信的关键参数。</p><p>测试机因为之前的缘故，又得重新买一个，不然都没法跟着学习视频往下走了。</p><p>唉！测试机有是有，但是这个是用来科研的，得另外再买一个。说实话，学Android得多买点测试机用。</p><p>ok，早点离开工作室，给自己多点时间放松放松！</p>]]></content>
    
    
    <categories>
      
      <category>日报</category>
      
      <category>2023年09月</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日报</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20230909日报</title>
    <link href="/2023/09/09/%E6%97%A5%E6%8A%A5/2023%E5%B9%B409%E6%9C%88/09%E6%97%A5%E6%8A%A5/"/>
    <url>/2023/09/09/%E6%97%A5%E6%8A%A5/2023%E5%B9%B409%E6%9C%88/09%E6%97%A5%E6%8A%A5/</url>
    
    <content type="html"><![CDATA[<p>今天上午帮同学搞个自动预约自习室座位的代码，等到晚上开抢时，效果不是很好，学校服务器太垃圾的，登录请求都需要好久！感觉连手动抢都比不过，确实需要进一步优化脚本。</p><p>下午写了些nssctf上的mobile专题，感觉上面的题目没啥质量啊，都是简单的题目，也就有一个题目提及到了加壳脱壳。apk的壳还没试过，这一点需要学习学习。</p><p>之后就是给科研打工，不过也好在发现了某小程序的越权行为，感觉只有挖到洞才是这孤单的科研上的唯一乐趣，目前来说至少是这样的。<del>（只有我一个人干活，麻了啊）</del></p>]]></content>
    
    
    <categories>
      
      <category>日报</category>
      
      <category>2023年09月</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日报</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20230908日报</title>
    <link href="/2023/09/08/%E6%97%A5%E6%8A%A5/2023%E5%B9%B409%E6%9C%88/08%E6%97%A5%E6%8A%A5/"/>
    <url>/2023/09/08/%E6%97%A5%E6%8A%A5/2023%E5%B9%B409%E6%9C%88/08%E6%97%A5%E6%8A%A5/</url>
    
    <content type="html"><![CDATA[<p>今天是跟着书籍学习了 JNI 原理，写了相应的学习笔记。有一点我不满意的是，每次写这种类型的博客，我都会花上非常久的时间来完成，每次写得都咬文嚼字，总担心哪里写的不太对，想根据自己的心得写，但又怕是错误的，很是痛苦！</p><p>我觉得这是一种病！作为初学者，写的学习笔记存在错误是可以理解的，等学习一段时间后，回过头来看，如果哪里写的不对，更改就行了，干嘛非得这样呢！</p><p>直接把原本用于科研的时间给占用了。唉！</p><p>你看，我写这篇的时候也是这么累！</p>]]></content>
    
    
    <categories>
      
      <category>日报</category>
      
      <category>2023年09月</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日报</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20230907日报</title>
    <link href="/2023/09/07/%E6%97%A5%E6%8A%A5/2023%E5%B9%B409%E6%9C%88/07%E6%97%A5%E6%8A%A5/"/>
    <url>/2023/09/07/%E6%97%A5%E6%8A%A5/2023%E5%B9%B409%E6%9C%88/07%E6%97%A5%E6%8A%A5/</url>
    
    <content type="html"><![CDATA[<p>今天在nssctf上写了一些mobile专栏的题目。都是一些比较简单的，有点意思的还得是<code>[羊城杯 2021]Ez_android</code>，因为这道题需要用到jadx动调，修改smali语言，这些知识虽然之前学过，但都差不多忘光了，因为那时连笔记都没有做（这个是需要反思的）。更有意思的是<code>[SWPU 2019]easyapp</code>这道题，native层实现加密函数， JNI动态注册该函数，无法动调（可能是手机版本问题），目前是没有写出来的。</p><p>之后想学习JNI静态注册函数和动态注册函数，浅看了一些文章。</p><p>没想到高中同学来这里，就陪他逛逛。</p><p>再之后就是推进科研工作。<del>（说是科研工作，单干的都是没有技术的）</del></p>]]></content>
    
    
    <categories>
      
      <category>日报</category>
      
      <category>2023年09月</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日报</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>nssctf-mobile专题(一)</title>
    <link href="/2023/09/07/nssctf-mobile%E4%B8%93%E9%A2%98(%E4%B8%80)/"/>
    <url>/2023/09/07/nssctf-mobile%E4%B8%93%E9%A2%98(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<h1 id="CISCN-2022-东北-crackme-Android"><a href="#CISCN-2022-东北-crackme-Android" class="headerlink" title="[CISCN 2022 东北]crackme_Android"></a>[CISCN 2022 东北]crackme_Android</h1><p>整个分析如下图所示：</p><p><img src="https://www.nssctf.cn/files/2023/9/7/18ebead836.jpg" alt="NSSIMAGE"></p><p>很简单。就是将38bytes的flag去掉格式后，每4bytes一组进行md5加密，得到的结果组成一个字符串，并于已知字符串比较。<br>所以我们只需要将已知字符串分好组拿到<a href="https://www.cmd5.org/%E4%B8%8A%E8%A7%A3%E5%AF%86%E5%8D%B3%E5%8F%AF%E3%80%82%E5%88%86%E7%BB%84%E4%BB%A3%E7%A0%81%E5%A6%82%E4%B8%8B%EF%BC%9A">https://www.cmd5.org/上解密即可。分组代码如下：</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">md5string = <span class="hljs-string">&#x27;8393931a16db5a00f464a24abe24b17a9040b57d9cb2cbfa6bdc61d12e9b51f2789e8a8ae9406c969118e75e9bc65c4327fbc7c3accdf2c54675b0ddf3e0a6099b1b81046d525495e3a14ff6eae76eddfa1740cd6bd483da0f7684b2e4ec84b371f07bf95f0113eefab12552181dd832af8d1eb220186400c494db7091e402b0&#x27;</span><br>flaglen = <span class="hljs-number">38</span> - <span class="hljs-number">6</span><br>group = flaglen / <span class="hljs-number">4</span><br>eachmd5len = <span class="hljs-built_in">len</span>(md5string) // <span class="hljs-number">8</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(md5string), eachmd5len):<br>    eachmd5 = md5string[i:i+eachmd5len]<br>    <span class="hljs-built_in">print</span>(eachmd5)<br></code></pre></td></tr></table></figure><h1 id="HGAME-2022-week1-flagchecker"><a href="#HGAME-2022-week1-flagchecker" class="headerlink" title="[HGAME 2022 week1]flagchecker"></a>[HGAME 2022 week1]flagchecker</h1><p>题目清晰明了，太简单了，就贴个脚本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> ARC4<br><br>base64cipher = <span class="hljs-string">&quot;mg6CITV6GEaFDTYnObFmENOAVjKcQmGncF90WhqvCFyhhsyqq1s=&quot;</span><br>RC4cipher = b64decode(base64cipher)<br><span class="hljs-built_in">print</span>(RC4cipher)<br>key = <span class="hljs-string">&quot;carol&quot;</span><br><br>rc4 = ARC4.new(key.encode())<br>plaintext = rc4.decrypt(RC4cipher)<br><span class="hljs-built_in">print</span>(plaintext)<br><br></code></pre></td></tr></table></figure><h1 id="羊城杯-2021-Ez-android"><a href="#羊城杯-2021-Ez-android" class="headerlink" title="[羊城杯 2021]Ez_android"></a>[羊城杯 2021]Ez_android</h1><p>利用<code>jadx</code>工具分析，<code>MainActivity</code>中主要是登录验证。真实的账号字符串可以文本搜索出来（当然也可以使用MT根据资源id搜索出来）：</p><p><img src="https://www.nssctf.cn/files/2023/9/7/4d60c4f531.jpg" alt="NSSIMAGE"></p><blockquote><p>同理其他字符串也可以通过这种方法搜索出来，后续不再提及。</p></blockquote><p>密码验证这一块进行了加密处理：</p><p><img src="https://www.nssctf.cn/files/2023/9/7/6924114160.jpg" alt="NSSIMAGE"></p><p>很容易逆出来，这里直接贴代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> hexlify, unhexlify<br><br>passwdCipher = <span class="hljs-string">&quot;c232666f1410b3f5010dc51cec341f58&quot;</span><br>bytePasswdCipher = unhexlify(passwdCipher.encode())<br>md5 = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> bytePasswdCipher:<br>    <span class="hljs-comment"># md5 += chr(each + 1).encode()#有的会变成两个字节？？？！</span><br>    md5 += <span class="hljs-built_in">hex</span>(each + <span class="hljs-number">1</span>)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(md5)<br></code></pre></td></tr></table></figure><blockquote><p>当然，直接修改smali语言也可以绕过登录验证，可以修改条件跳转指令，也可以修改checkUsername和checkPasswd方法的返回值（在return v2前面加一个赋值语句：const&#x2F;4 ,0x1）。有兴趣的可以试试。</p></blockquote><p>账号密码验证通过后，还会调用<code>getKeyAndRedirect</code>方法，主要是开辟线程，这个线程会调用<code>lambda$getKeyAndRedirect$0$MainActivity</code>方法远程获取<code>key</code>（需要注意的是，<strong>要在samil语言上修改<code>socket</code>的<code>ip</code>和<code>port</code>为nssctf给的</strong>），然后通过<code>Intent</code>开启<code>CheckFlagActivity</code>活动并传入<code>key</code>。</p><p>跟进<code>CheckFlagActivity</code>，该活动主要是通过Intent获取<code>key</code>参数，然后获取我们输入的flag，然后调用<code>checkFlag</code>方法验证 flag。</p><p><img src="https://www.nssctf.cn/files/2023/9/7/da0923e536.jpg" alt="NSSIMAGE"></p><p>这里调用了<code>EncodeUtils.encode</code>方法对 flag 进行了加密，再与<code>encodeFlag</code>字符串对比，该字符串通过搜索可知是<code>3lkHi9iZNK87qw0p6U391t92qlC5rwn5iFqyMFDl1t92qUnL6FQjqln76l-P</code>。</p><p>接下来查看<code>EncodeUtils.encode</code>方法：</p><p><img src="https://www.nssctf.cn/files/2023/9/7/896ff4ce5e.jpg" alt="NSSIMAGE"></p><p>其实就是一个base64加密，只不过base64表通过服务器给出。</p><p>整个过程理清楚之后，我们就需要动调来获取base64表，因此在<code>EncodeUtils.encode</code>方法被调用处下断点（当然你如果觉得不太靠谱，可以往前几步再下断点，因为smali语言的操作都是经过寄存器来进行的，过多执行几步的话里面的数据就可能被更改了）（jadx需要在smali语言中按<code>F2</code>下断点），然后进行动调。</p><blockquote><p>在转smail语言时，tab键好像不会定位到对应代码，不过我们可以通过方法名按ctrl+F定位</p></blockquote><p><img src="https://www.nssctf.cn/files/2023/9/7/d6b8e9a465.jpg" alt="NSSIMAGE"></p><p>获取到base64表后，就是解密了，对应脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> b64decode<br><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> ascii_uppercase, ascii_lowercase, digits<br><br>table1 = <span class="hljs-string">&#x27;TGtUnkaJD0frq61uCQYw3-FxMiRvNOB/EWjgVcpKSzbs8yHZ257X9LldIeh4APom&#x27;</span><br>table2 = ascii_uppercase  + ascii_lowercase + digits + <span class="hljs-string">&#x27;+/&#x27;</span><br>tarnstable = <span class="hljs-built_in">str</span>.maketrans(table1, table2)<br>cipher = <span class="hljs-string">&#x27;3lkHi9iZNK87qw0p6U391t92qlC5rwn5iFqyMFDl1t92qUnL6FQjqln76l-P&#x27;</span><br>plaintext = b64decode(cipher.translate(tarnstable))<br><span class="hljs-built_in">print</span>(plaintext)<br></code></pre></td></tr></table></figure><h1 id="鹏城杯-2022-baby-re"><a href="#鹏城杯-2022-baby-re" class="headerlink" title="[鹏城杯 2022]baby_re"></a>[鹏城杯 2022]baby_re</h1><p><code>jadx</code>分析，该应用调用<code>baby_xor</code>方法对我们输入的flag进行了加密，而该方法是通过<code>native</code>层实现的，对应的加载so文件代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> &#123;<br>        System.loadLibrary(<span class="hljs-string">&quot;createso&quot;</span>); <span class="hljs-comment">// 加载so文件！！！</span><br>    &#125;<br><br></code></pre></td></tr></table></figure><p>那么IDA分析so文件咯，直接找该函数名（<strong>对应的so函数名命名是有规则的</strong>）。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309072243587.png"></p><p>一个简简单单的异或。但是单单这样拿去解肯定解不出来，因为他还给密钥进行了加密：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309072243805.png"></p><p>后面那几个<code>dword_xxxx</code>其实就是<code>key[i]</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">cipher = [<span class="hljs-number">119</span>, <span class="hljs-number">9</span>, <span class="hljs-number">40</span>, <span class="hljs-number">44</span>, <span class="hljs-number">106</span>, <span class="hljs-number">83</span>, <span class="hljs-number">126</span>, <span class="hljs-number">123</span>, <span class="hljs-number">33</span>, <span class="hljs-number">87</span>, <span class="hljs-number">113</span>, <span class="hljs-number">123</span>, <span class="hljs-number">112</span>, <span class="hljs-number">93</span>, <span class="hljs-number">125</span>, <span class="hljs-number">127</span>, <span class="hljs-number">41</span>, <span class="hljs-number">82</span>, <span class="hljs-number">44</span>, <span class="hljs-number">127</span>, <span class="hljs-number">39</span>, <span class="hljs-number">3</span>, <span class="hljs-number">126</span>, <span class="hljs-number">125</span>, <span class="hljs-number">119</span>, <span class="hljs-number">87</span>, <span class="hljs-number">47</span>, <span class="hljs-number">125</span>, <span class="hljs-number">33</span>, <span class="hljs-number">6</span>, <span class="hljs-number">44</span>, <span class="hljs-number">127</span>, <span class="hljs-number">112</span>, <span class="hljs-number">0</span>, <span class="hljs-number">126</span>, <span class="hljs-number">123</span>, <span class="hljs-number">115</span>, <span class="hljs-number">24</span>]<br>key = [<span class="hljs-number">0x56</span>, <span class="hljs-number">0x57</span>, <span class="hljs-number">0x58</span>, <span class="hljs-number">0x59</span>]<br><br>key[<span class="hljs-number">0</span>] ^= <span class="hljs-number">0x47</span><br>key[<span class="hljs-number">1</span>] ^= <span class="hljs-number">0x32</span><br>key[<span class="hljs-number">2</span>] ^= <span class="hljs-number">0x11</span><br>key[<span class="hljs-number">3</span>] ^= <span class="hljs-number">0x12</span><br><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(cipher)):<br>    flag += <span class="hljs-built_in">chr</span>(cipher[i] ^ key[i % <span class="hljs-number">4</span>])<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Reverse</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>20230906日报</title>
    <link href="/2023/09/06/%E6%97%A5%E6%8A%A5/2023%E5%B9%B409%E6%9C%88/06%E6%97%A5%E6%8A%A5/"/>
    <url>/2023/09/06/%E6%97%A5%E6%8A%A5/2023%E5%B9%B409%E6%9C%88/06%E6%97%A5%E6%8A%A5/</url>
    
    <content type="html"><![CDATA[<p>刚到一部nexus6p手机，下了同样的版本刷机包，没刷机直接root，发现这手机有avb验证，在开机的时候会验证boot.img是否被修改，于是乎卡在启动界面进不去，fastboot半天，结果发现根本没进bootloader模式（本以为会向之前的手机一样直接在bootloader界面），还是靠汪佬发现的。后面尝试解avb锁，可惜连对应的文件都没有！索性放弃了。</p><p>之后就是将昨天晚上问汪佬的问题重新复现一遍，也就是写题目时的一些困惑，详见<a href="https://gal2xy.github.io/2023/09/04/%E5%AE%89%E6%B4%B5%E6%9D%AF2019-crakMe/">安洵杯2019-crackMe - gla2xy’s blog (gal2xy.github.io)</a>中的题外话。</p><p>再之后就是花点时间推进科研任务了。</p>]]></content>
    
    
    <categories>
      
      <category>日报</category>
      
      <category>2023年09月</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日报</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IDA动调SO文件</title>
    <link href="/2023/09/06/IDA%E5%8A%A8%E8%B0%83SO%E6%96%87%E4%BB%B6/"/>
    <url>/2023/09/06/IDA%E5%8A%A8%E8%B0%83SO%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h3 id="步骤一：将-android-server-文件-push-到手机中并执行"><a href="#步骤一：将-android-server-文件-push-到手机中并执行" class="headerlink" title="步骤一：将 android_server 文件 push 到手机中并执行"></a>步骤一：将 android_server 文件 push 到手机中并执行</h3><p>复制IDA目录下的<code>\dbgsrv</code>目录下的<code>android_server</code>和<code>android_server64</code>到真机中并执行：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>复制到真机中<br>adb push android_server <span class="hljs-regexp">/data/</span>local/tmp<br>adb push android_server64 <span class="hljs-regexp">/data/</span>local/tmp<br><span class="hljs-regexp">//</span>修改应用权限使其可执行<br>Cd <span class="hljs-regexp">/data/</span>local/tmp<br>chmod <span class="hljs-number">777</span> android_server android_server64<br><span class="hljs-regexp">//</span>执行所需要的版本<br>./android_server64<br></code></pre></td></tr></table></figure><p>默认启动端口为23946。</p><h3 id="步骤二：端口转发"><a href="#步骤二：端口转发" class="headerlink" title="步骤二：端口转发"></a>步骤二：端口转发</h3><p>另开一个cmd执行如下指令：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">adb</span> forward tcp:<span class="hljs-number">23946</span> tcp:<span class="hljs-number">23946</span><br></code></pre></td></tr></table></figure><p>第一个端口对应电脑端，第二个端口对应手机端。</p><p>执行后，将会通过电脑端的23946端口转发数据到手机端的23946端口。</p><h3 id="步骤三：am-启动要调试的应用程序"><a href="#步骤三：am-启动要调试的应用程序" class="headerlink" title="步骤三：am 启动要调试的应用程序"></a>步骤三：am 启动要调试的应用程序</h3><p>执行如下命令启动要调试的应用程序：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">adb <span class="hljs-keyword">shell</span> <span class="hljs-keyword">am</span> start -D -n 包名/活动名<br>//例如<br>//adb <span class="hljs-keyword">shell</span> <span class="hljs-keyword">am</span> start -D -n <span class="hljs-keyword">com</span>.example.ndktest2/.MainActivity<br></code></pre></td></tr></table></figure><p>成功后手机端会弹出如下界面：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309061952139.jpg"></p><h3 id="步骤四：使用IDA附加进程"><a href="#步骤四：使用IDA附加进程" class="headerlink" title="步骤四：使用IDA附加进程"></a>步骤四：使用IDA附加进程</h3><p>用IDA打开想要调试的so库，调试器选择<code>Remote ARM Linux/Android debugger</code>。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309061952959.png"></p><p>在菜单栏的Debugger -&gt; Debugger options中设置程序暂停的时机，按下图所示勾选选项框：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309061952630.png"></p><p>在菜单栏的Debugger -&gt; Process options中设置主机和端口：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309061952733.png"></p><p>在菜单栏的Debugger -&gt; Attach to Process中选择要调试的进程进行附加：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309061953206.png"></p><p>选择完后，IDA界面会进入到动调界面。按 F9 继续执行。</p><h3 id="步骤五：jdb连接"><a href="#步骤五：jdb连接" class="headerlink" title="步骤五：jdb连接"></a>步骤五：jdb连接</h3><p>运行以下命令：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">jdb -connect com.sun.jdi.SocketAttach:hostname=localhost,port=应用所在端口号<br></code></pre></td></tr></table></figure><p>应用所在端口号可通过DDMS工具来确定的（DDMS需要的jdk版本为1.8）：</p><blockquote><p>可能会出现<code>无法附加到目标 VM</code>。出现了就多试几次（可能是因为android版本太高）。</p></blockquote><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309061953001.png"></p><p>以上执行成功后，DDMS中的红色小虫子就会变成绿色。</p><h3 id="步骤九：继续执行程序"><a href="#步骤九：继续执行程序" class="headerlink" title="步骤九：继续执行程序"></a>步骤九：继续执行程序</h3><p>再IDA界面按F9使程序继续执行，在底部的窗口会显示已加载的so文件。当加载到。此后可以下断点进行调试。</p><h3 id="插曲"><a href="#插曲" class="headerlink" title="插曲"></a>插曲</h3><p>调试过程中出现了如下报错：</p><ol><li><code>Command &quot;ProcessStart&quot; failed</code>。</li><li><code>IDA could not create a temporary breakpoint for the next instruction.A temporary breakpoint is required in order to suspend the execution after a step.Please use F9 to continue the execution.If you have a breakpoint at the current address,please remove it before continuing.</code></li></ol><p>以上情况，F7、F8、F9均失效。</p><p>后面用另一个Android版本的手机才调试成功的。</p><hr><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/145383282">新手向总结：IDA动态调试So的一些坑 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/358496347">IDA动态调试so文件 - 知乎 (zhihu.com)</a></p><p><a href="https://blog.csdn.net/MarketAndTechnology/article/details/82116074">Android IDA 动态调试最完善攻略，跨过各种坑_ida调试_闽农的博客-CSDN博客</a></p><p>[<a href="https://bbs.kanxue.com/thread-268985.htm">求助]动态调试jdb无法附加到目标VM-Android安全-看雪-安全社区|安全招聘|kanxue.com</a></p>]]></content>
    
    
    <categories>
      
      <category>Reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WMCTF2020-easy_re</title>
    <link href="/2023/09/04/WMCTF2020-easy-re/"/>
    <url>/2023/09/04/WMCTF2020-easy-re/</url>
    
    <content type="html"><![CDATA[<p>运行程序有”please input the flag:”提示，但是使用IDA静态分析并没有发现该字符串，说明该字符串是动态生成的。那么就使用x64dbg动调一下。虽然找到了字符串，但是该字符串所在的汇编代码完全看不懂，就比如打印字符串的函数都没见着。<del>很明显，我不会！</del></p><p>看看别人的wp吧。原来这个名字是一种语言。这个题目利用perlapp将perl程序压缩放在资源里面了，执行的时候才会解压出来。</p><p>也就是说在程序打印出字符串的时候，perl程序已经被解压出来了。<del>那我们就只能从头开始单步执行下去，最后找到了对应的解压指令(麻烦)</del>。</p><p>直接字符搜索”script”，前几个随便找一个下断点，单步运行，最终结果如下：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042233784.png"></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl">$flag = \<span class="hljs-string">&quot;WMCTF&#123;&#123;I_WAnt_dynam1c_F1ag&#125;&#125;\&quot;;</span><br><span class="hljs-string">print \&quot;please input the flag:\&quot;;</span><br><span class="hljs-string">$line = &lt;STDIN&gt;;</span><br><span class="hljs-string">chomp($line);</span><br><span class="hljs-string">if($line eq $flag)&#123;&#123;</span><br><span class="hljs-string">print \&quot;congratulation!\&quot;</span><br><span class="hljs-string">&#125;&#125;</span><br><span class="hljs-string">else&#123;&#123;</span><br><span class="hljs-string">print \&quot;no,wrong\&quot;</span><br><span class="hljs-string">&#125;&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UTCTF2020-babymips</title>
    <link href="/2023/09/04/UTCTF2020babymips/"/>
    <url>/2023/09/04/UTCTF2020babymips/</url>
    
    <content type="html"><![CDATA[<p>整个程序是用C++编写的，但不难看出代码的意思，且逻辑简单，整个分析都在图中。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042230647.png"></p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042230341.png"></p><p>对应解题代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-comment">//len = 78</span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> a1[] =&#123;<br><span class="hljs-number">0x62</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x50</span>, <br><span class="hljs-number">0x52</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x40</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x47</span>, <span class="hljs-number">0x4D</span>, <br><span class="hljs-number">0x74</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x0A</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x7D</span>, <span class="hljs-number">0x69</span>, <br><span class="hljs-number">0x4F</span>, <span class="hljs-number">0x53</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x1E</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x03</span>, <br><span class="hljs-number">0x7C</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x62</span>, <br><span class="hljs-number">0x2C</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x0A</span>, <br><span class="hljs-number">0x6D</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x25</span>, <span class="hljs-number">0x39</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x2E</span>, <span class="hljs-number">0x1C</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0x78</span>, <br><span class="hljs-number">0x2B</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x19</span><br>&#125;;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> a2[<span class="hljs-number">78</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">78</span>;i++)&#123;<br>a2[i] = a1[i] ^ (i+<span class="hljs-number">23</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>,a2[i]);<br>&#125;<br><br>&#125;<br><span class="hljs-meta">#utflag&#123;mips_cpp_gang_5VDm:~`N]ze;\)5%vZ=C<span class="hljs-string">&#x27;C(r#$q=*efD&quot;ZNY_GX&gt;6&amp;sn.wF8$v*mvA@&#x27;</span>&#125;</span><br>#没错！这个乱七八糟的就是flag<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GUET-CTF2019-encrypt</title>
    <link href="/2023/09/04/GUETCTF2019-encrypt/"/>
    <url>/2023/09/04/GUETCTF2019-encrypt/</url>
    
    <content type="html"><![CDATA[<p>比对RC4加密算法（<a href="https://zhuanlan.zhihu.com/p/426345623">CRYPTO-RC4加密 - 知乎 (zhihu.com)</a>），可以确认是RC4加密。然后还有一个魔改base64，就是编码的时候给每位数 +61。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042224961.png"></p><p>题目难就难在初始识别RC4加密，解密过程是很简单，脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> ARC4<br><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> unhexlify<br><br>v12 = [<br>  <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x60</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x7A</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x66</span>,<br>  <span class="hljs-number">0x51</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x7C</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x6E</span>,<br>  <span class="hljs-number">0x65</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x6B</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x56</span>,<br>  <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0x4C</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x73</span>, <span class="hljs-number">0x4A</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x6F</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x70</span>,<br>  <span class="hljs-number">0x48</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x78</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x5C</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x5A</span>,<br>  <span class="hljs-number">0x45</span><br>]<span class="hljs-comment"># 0x3D</span><br><br>binstring = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(v12)):<br>    binstring += <span class="hljs-built_in">bin</span>(v12[i] - <span class="hljs-number">61</span>)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">6</span>)<br><br><span class="hljs-built_in">print</span>(binstring)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(binstring))<br>s = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(binstring), <span class="hljs-number">8</span>):<br>    s.append(<span class="hljs-built_in">int</span>(binstring[i:i+<span class="hljs-number">8</span>], <span class="hljs-number">2</span>))<br><br>RC4_cipher = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">hex</span>(i)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> s)<span class="hljs-comment">#zfill(2)补0，毕竟1byte等于两位</span><br><span class="hljs-built_in">print</span>(RC4_cipher)<br><br><span class="hljs-comment"># RC4 解密</span><br>key = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">hex</span>(i)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">2</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">16</span>, <span class="hljs-number">32</span>, <span class="hljs-number">48</span>, <span class="hljs-number">48</span>, <span class="hljs-number">32</span>, <span class="hljs-number">32</span>, <span class="hljs-number">16</span>, <span class="hljs-number">64</span>])<br>RC4_cipher = unhexlify(RC4_cipher.encode())<br>key = unhexlify(key.encode())<br>rc4 = ARC4.new(key)<br>flag = rc4.decrypt(RC4_cipher)<br><span class="hljs-built_in">print</span>(flag)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WUSTCTF2020-funnyre</title>
    <link href="/2023/09/04/WUSTCTF2020-funnyre/"/>
    <url>/2023/09/04/WUSTCTF2020-funnyre/</url>
    
    <content type="html"><![CDATA[<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>elf文件，<code>__libc_start_main</code>函数启动 main 函数，init 函数中执行了三个函数，但对我们要求解的flag无影响<del>，影响的是byte_603049，对应main函数中最后的 puts(s) 中的 s 变量。（废话咯）</del></p><p>直接来看 main 函数，发现存在花指令，如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042221346.png"></p><p>第一处很明显，两个跳转都几乎是零距离跳转且第二个指令永假（根本不会执行），nop掉这两个指令。然后是第二处的call指令，跳转地址很明显是错误的，将其转成data，将call的硬编码（E8）改成90（nop），然后将data转成code（一直转，直到没有代码区没有数据）。最终结果如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042221295.png"></p><p>花指令有五处，但都一样。修改完后，main函数如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042221689.png"></p><p>首先判断flag的格式和长度，然后一堆for循环进行异或、加、取反运算，最后与已知字符串相比较。</p><p>整个过程杂而不难。有两种比较推荐的方法。</p><h2 id="IDAPython根据指令去逆向"><a href="#IDAPython根据指令去逆向" class="headerlink" title="IDAPython根据指令去逆向"></a>IDAPython根据指令去逆向</h2><p>第一种是写代码识别指令来进行响应的逆操作，指令中的操作数都用统一的格式，即<code>byte ptr [rdx + rax +5]</code></p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042222761.png"></p><p>我们要做的就是在main函数范围内一行一行的读取汇编指令，通过<code>byte ptr [rdx + rax +5]</code>（因为这部分存储了flag）找到对flag进行加密的指令，然后识别操作码以区分不同运算，最后取出另一个操作数进行逆运算。代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">_add</span>(<span class="hljs-params">cipher, k</span>):<br>    <span class="hljs-keyword">return</span> [(each - k)&amp;<span class="hljs-number">0xff</span> <span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> cipher]<span class="hljs-comment">#&amp;0xff 防止 byte 溢出造成错误</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_xor</span>(<span class="hljs-params">cipher, k</span>):<br>    <span class="hljs-keyword">return</span> [each ^ k <span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> cipher]<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">_not</span>(<span class="hljs-params">cipher</span>):<br>    <span class="hljs-keyword">return</span> [~each <span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> cipher]<br><br>cipher = [<span class="hljs-number">0xD9</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xD6</span>, <span class="hljs-number">0xD8</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0xDD</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xDC</span>, <span class="hljs-number">0xDB</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xE1</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x2C</span>, <span class="hljs-number">0xDA</span>, <span class="hljs-number">0x2A</span>, <span class="hljs-number">0xD9</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x2A</span>]<br>end = <span class="hljs-number">0x401DA9</span><br>start = <span class="hljs-number">0x400605</span><br>i = PrevHead(end)<br><span class="hljs-keyword">while</span> i &gt; start:<br>    <span class="hljs-keyword">if</span> GetMnem(i) == <span class="hljs-string">&#x27;xor&#x27;</span> <span class="hljs-keyword">and</span> GetOpnd(i, <span class="hljs-number">0</span>) == <span class="hljs-string">&quot;byte ptr [rdx+rax+5]&quot;</span>:<br>        k = <span class="hljs-built_in">int</span>(GetOpnd(i, <span class="hljs-number">1</span>).rstrip(<span class="hljs-string">&#x27;h&#x27;</span>), <span class="hljs-number">16</span>)<br>        cipher = _xor(cipher, k)<br>    <span class="hljs-keyword">if</span> GetMnem(i) == <span class="hljs-string">&#x27;add&#x27;</span> <span class="hljs-keyword">and</span> GetOpnd(i, <span class="hljs-number">0</span>) == <span class="hljs-string">&quot;byte ptr [rdx+rax+5]&quot;</span>:<br>        k = <span class="hljs-built_in">int</span>(GetOpnd(i, <span class="hljs-number">1</span>).rstrip(<span class="hljs-string">&#x27;h&#x27;</span>), <span class="hljs-number">16</span>)<br>        cipher = _add(cipher, k)<br>    <span class="hljs-keyword">if</span> GetMnem(i) == <span class="hljs-string">&#x27;not&#x27;</span> <span class="hljs-keyword">and</span> GetOpnd(i, <span class="hljs-number">0</span>) == <span class="hljs-string">&quot;byte ptr [rdx+rax+5]&quot;</span>:<br>        cipher = _<span class="hljs-keyword">not</span>(cipher)<br>    i = PrevHead(i)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cipher))<br><span class="hljs-comment"># PrevHead(addr)用于获取指定地址之前一条指令的起始地址</span><br><span class="hljs-comment"># GetMnem(addr) 获取地址i处的操作指令</span><br><span class="hljs-comment"># GetOpnd(addr, n)获取某地址处的操作数(第一个参数是地址，第二个是操作数索引)</span><br></code></pre></td></tr></table></figure><p>然后再IDA界面中的菜单栏 File -&gt;Script file，执行该py文件。如果识别不出代码中用到的函数，请修改IDA所在目录下的\cfg\idapython.cfg文件，将AUTOIMPORT_COMPAT_IDA695的值修改为YES。（参考<a href="https://www.52pojie.cn/thread-1403005-1-1.html">关于IDA7.5 IDApython api差异问题及解决办法 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a>）</p><blockquote><p>其他指令参考：<a href="https://www.52pojie.cn/thread-1117330-1-1.html">总结idapython在逆向中的应用 - 『脱壳破解区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p></blockquote><h2 id="符号执行工具约束求解"><a href="#符号执行工具约束求解" class="headerlink" title="符号执行工具约束求解"></a>符号执行工具约束求解</h2><p>第二种是使用符号执行工具约束求解，简单来讲就是符号化待求解变量，并将这些加密过程等价为方程，然后解这些方程组。</p><p>linux下需要用到python的angr库，同时需要配置python虚拟环境。虚拟环境安装的指令如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>安装venv，venv是python管理虚拟环境的推荐工具<br>sudo apt install python3-venv<br><span class="hljs-regexp">//</span>在当前目录下创建一个虚拟环境的文件夹<br>python3 -m venv autoblue-env（文件名）<br><span class="hljs-regexp">//</span>激活虚拟环境<br>source autoblue-env<span class="hljs-regexp">/bin/</span>activate<br><span class="hljs-regexp">//</span>退出虚拟环境<br>deactivate<br></code></pre></td></tr></table></figure><p>在虚拟环境中下载angr即可正常使用。（参考[<a href="https://www.jianshu.com/p/569b51bac964">环境搭建][Python]Kali中使用venv - 简书 (jianshu.com)</a>）</p><p>然后是脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> claripy<br><span class="hljs-comment"># 加载二进制文件</span><br>p = angr.Project(<span class="hljs-string">&quot;./attachment&quot;</span>, load_options=&#123;<span class="hljs-string">&quot;auto_load_libs&quot;</span>: <span class="hljs-literal">False</span>&#125;)<br><span class="hljs-comment"># 获取factory接口，该接口提供重要分析对象，如 blocks（程序基本块） / state（实例镜像，模拟执行某个时刻的状态） / SimulationManager（管理 state，执行 运行、模拟等操作） 等</span><br>f = p.factory<br><span class="hljs-comment"># 模拟eip=0x400605时刻的状态</span><br>state = f.entry_state(addr=<span class="hljs-number">0x400605</span>)<br><span class="hljs-comment"># 创建符号变量</span><br>flag = claripy.BVS(<span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-number">8</span>*<span class="hljs-number">32</span>)<br><span class="hljs-comment"># 将符号变量存放到指定地址中</span><br>state.memory.store(<span class="hljs-number">0x603055</span>+<span class="hljs-number">0x300</span>+<span class="hljs-number">5</span>, flag)<br><span class="hljs-comment"># 指定所需使用到的寄存器的值。因为byte ptr [rdx + rax +5]指向flag，所以指定rdx和rax</span><br>state.regs.rdx = <span class="hljs-number">0x603055</span>+<span class="hljs-number">0x300</span><br>state.regs.rdi = <span class="hljs-number">0x603055</span>+<span class="hljs-number">0x300</span>+<span class="hljs-number">5</span><br><span class="hljs-comment"># 创建SM(Simulation Managers) 用于管理 state，执行 运行、模拟等操作</span><br>sm = p.factory.simulation_manager(state)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] init ok&quot;</span>)<br><span class="hljs-comment"># 调用 explore 方法，探索执行路径，可以设置 find 和 avoid 参数，以便找到符合我们预期的路径。</span><br><span class="hljs-comment"># 0x401DAE在程序中是puts(s)处，是我们所期望能执行到的路径。</span><br>sm.explore(find=<span class="hljs-number">0x401DAE</span>)<br><span class="hljs-keyword">if</span> sm.found:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] found!&quot;</span>)<br>    x = sm.found[<span class="hljs-number">0</span>].solver.<span class="hljs-built_in">eval</span>(flag, cast_to=<span class="hljs-built_in">bytes</span>)<span class="hljs-comment">#字节为单位转换</span><br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><p>angr中更多方法请参考<a href="https://xz.aliyun.com/t/7117">angr 系列教程(一）核心概念及模块解读 - 先知社区 (aliyun.com)</a>。</p><p>运行结果如下：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042223884.jpg"></p>]]></content>
    
    
    <categories>
      
      <category>Reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>安洵杯2019-crackMe</title>
    <link href="/2023/09/04/%E5%AE%89%E6%B4%B5%E6%9D%AF2019-crakMe/"/>
    <url>/2023/09/04/%E5%AE%89%E6%B4%B5%E6%9D%AF2019-crakMe/</url>
    
    <content type="html"><![CDATA[<h1 id="一、题解"><a href="#一、题解" class="headerlink" title="一、题解"></a>一、题解</h1><p>主函数的伪代码如下：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042213658.png"></p><p>可以看出整个流程是：先输入flag，然后弹出一个警告弹窗，之后有<code>sub_41100F</code>和<code>sub_411136</code>两个函数。第一个函数比较复杂，可能是一堆加密操作，在最后面会进行分析。第二个函数是最终是将两个字符串相比较，如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042215206.png"></p><p><code>Str2</code>已知，而<code>Str1</code>未知，但是可以发现它在另一处被引用了，如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042213535.png"></p><p>问题就来了，这个函数是怎么被调用的呢，目前来看是不可能执行这个函数的。所以我们下一步的目标就是分析它是如何被调用的。</p><p>在字符串窗口中，可以发现base64的对照表，跟随该字符串可以找到这样一个函数，如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042216104.png"></p><p>该函数首先是对base64对照表中的小写字母大写化，大写字母小写化，然后弹出提示hook成功的弹窗，最后执行<code>AddVectoredExceptionHandler</code>函数。</p><p>这应该说明了通过hook技术执行了原本不应该执行的函数。</p><p><code>AddVectoredExceptionHandler</code>函数用于注册异常处理程序，第二个参数Handler是要调用的处理程序的指针，详细介绍可见<a href="https://learn.microsoft.com/zh-cn/windows/win32/api/errhandlingapi/nf-errhandlingapi-addvectoredexceptionhandler">AddVectoredExceptionHandler 函数 (errhandlingapi.h) - Win32 apps | Microsoft Learn</a>。</p><p>那我们跟进这个<code>Handler</code>函数看一看，代码如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042217193.png"></p><p><code>0xC0000005</code>是一个访问冲突代码（<a href="https://learn.microsoft.com/zh-cn/shows/inside/c0000005">访问冲突 C0000005 | Microsoft Learn</a>），也间接说明了这是一个异常处理函数。整个代码的流程为：先判断是否是访问冲突错误，如果是，则将已知字符串的前16个字节复制给<code>v2</code>，然后调用<code>sub_411172</code>函数进行<code>SM4</code>密钥生成，<code>dword_41A218</code>（后面会提及）用于存储生成后的密钥，<code>v2</code>作为初始密钥传入。这个函数是靠<code>Findcrypt</code>插件识别出来的，具体加密代码如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042217636.png"></p><p>（这里我参考了<a href="https://zhuanlan.zhihu.com/p/363900323">（六）国密SM4算法 - 知乎 (zhihu.com)</a>进行比对）</p><p>回到<code>Handler</code>函数中，<code>SetUnhandledExceptionFilter</code>函数会在异常发生时，调用由<code>TopLevelExceptionFilter</code>参数指定的函数，详细见<a href="https://learn.microsoft.com/zh-cn/windows/win32/api/errhandlingapi/nf-errhandlingapi-setunhandledexceptionfilter">SetUnhandledExceptionFilter 函数 (errhandlingapi.h) - Win32 apps | Microsoft Learn</a>。</p><p>因此，我们需要进入到<code>TopLevelExceptionFilter</code>函数中查看，最终如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042217322.png"></p><p>首先是将<code>Str2</code>（最开始提及过）字符串两两对调。然后是<code>byte_41A180</code>字符串（待会还会提及到）进行非正常base64加密得到<code>Str1</code>（最开始提及过），之所以叫非正常base64加密，是因为它把表进行了循环右移24位，并且将 ‘&#x3D;’ 换成 ‘!’ 。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042217869.png"></p><p>到这里，hook的部分就结束了。</p><p>奇怪吧！做了这么多事情，但并没有对我们的输入做任何处理，而且也还存在未知的数据，例如用于base64加密的<code>byte_41A180</code>字符串。那么就看看这个字符串还在哪里被引用了。可以发现实是在<code>sub_41100F</code>函数中被引用了，如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042218308.png"></p><p>这些参数我们在上面都提及过，<code>dword_41A218</code>是生成的sm4密钥，<code>unk_41A1E4</code>是我们输入的字符串，<code>byte_41A180</code>为生成<code>Str1</code>的明文。</p><p><code>sub_411131</code>这个函数主要是进行SM4加密，<code>unk_41A1E4</code>作为明文，使用<code>dword_41A218</code>密钥，生成<code>byte_41A180</code>密文，具体代码如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042218990.png"></p><p>上图中<code>sub_411700</code>函数：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042219334.png"></p><p>上图中<code>sub_4111760</code>函数</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042219810.png"></p><p>上图中用到的 s 盒：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042219576.png"></p><p>总结一下整个过程。flag通过sm4加密，得到密文，密文进行base64加密（注意对照表被改变了，大小写字母互换，循环右移24位，’!’ 代替 ‘&#x3D;’），得到<code>Str1</code>，并且<code>Str1</code>与<code>Str2</code>（注意<code>Str2</code>两两交换了）相等。</p><p>所以解密脚本比较简单，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> hexlify, unhexlify<br><span class="hljs-keyword">from</span> string <span class="hljs-keyword">import</span> ascii_lowercase, ascii_uppercase, digits<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">from</span> pysm4 <span class="hljs-keyword">import</span> decrypt<br><br>Str1 = <span class="hljs-string">&#x27;&#x27;</span><br>Str2 = <span class="hljs-string">&#x27;1UTAOIkpyOSWGv/mOYFY4R!!&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(Str2), <span class="hljs-number">2</span>):<br>    Str1 += Str2[i:i+<span class="hljs-number">2</span>][::-<span class="hljs-number">1</span>]<br><span class="hljs-comment"># 大小写互换</span><br>table1 = ascii_lowercase + ascii_uppercase + digits + <span class="hljs-string">&#x27;+/&#x27;</span><br><span class="hljs-comment"># 正常base64表</span><br>table2 = <span class="hljs-string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span><br><span class="hljs-comment"># 循环右移</span><br>table1 = table1[<span class="hljs-number">24</span>:] + table1[:<span class="hljs-number">24</span>]<br>translatetable = <span class="hljs-built_in">str</span>.maketrans(table1, table2)<br><span class="hljs-comment"># ! -&gt; =</span><br>Str1 = Str1.replace(<span class="hljs-string">&#x27;!&#x27;</span>, <span class="hljs-string">&#x27;=&#x27;</span>)<br><span class="hljs-comment">#base64解密</span><br>sm4cipher = base64.b64decode(Str1.translate(translatetable))<br><span class="hljs-comment"># print(sm4cipher)</span><br><span class="hljs-comment">#sm4解密</span><br><span class="hljs-comment"># pysm4使用说明：https://pypi.org/project/pysm4/</span><br>key = <span class="hljs-string">&#x27;where_are_u_now?&#x27;</span><br>flag = decrypt(<span class="hljs-built_in">int</span>(hexlify(sm4cipher), <span class="hljs-number">16</span>), <span class="hljs-built_in">int</span>(hexlify(key.encode()), <span class="hljs-number">16</span>))<span class="hljs-comment">#参数得是数字</span><br><span class="hljs-built_in">print</span>(long_to_bytes(flag))<br></code></pre></td></tr></table></figure><h1 id="二、题外话"><a href="#二、题外话" class="headerlink" title="二、题外话"></a>二、题外话</h1><p>在写题过程中，我曾困惑于以下两个问题，后经询问汪佬才得知是怎么回事。</p><h2 id="2-1-MessageBoxw是怎么被hook的？"><a href="#2-1-MessageBoxw是怎么被hook的？" class="headerlink" title="2.1 MessageBoxw是怎么被hook的？"></a>2.1 MessageBoxw是怎么被hook的？</h2><p>我们回到这个hook后代替执行的函数中，对函数名按 <code>x</code> 追溯来源，结果如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309062123765.jpg"></p><p>我们有理由怀疑<code>GetModuleHandleW</code>函数是在获取<code>User32.dll</code>模块，然后再在该模块中寻找<code>MessageBoxw</code>函数地址的地址。最后修改函数地址达到hook目的。</p><p>这里我们进行动调试一试。结果如下图所示：</p><p>图1：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309062123844.jpg"></p><p>图2：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309062124360.jpg"></p><p>这里已经验证了一部分猜想。接下来我们就可以再次追溯<code>a3</code>的来源，因为它是作为参数传入的，所以相当于追溯函数调用。追溯结果如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309062124773.jpg"></p><p>同样也下断点进行动调，结果如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309062124926.jpg"></p><p>通过<code>LoadLibraryA</code>载入<code>User32.dll</code>库，然后再通过<code>GetProcAddress</code>获取<code>MessageBoxw</code>函数的地址，也就是<code>a3</code>的来源。</p><p>到这里我们就理清了<code>MessageBoxw</code>是如何被hook的了！</p><h2 id="2-2-明明只是赋值sub-41100F函数地址，它怎么就被调用了呢？"><a href="#2-2-明明只是赋值sub-41100F函数地址，它怎么就被调用了呢？" class="headerlink" title="2.2 明明只是赋值sub_41100F函数地址，它怎么就被调用了呢？"></a>2.2 明明只是赋值sub_41100F函数地址，它怎么就被调用了呢？</h2><p>在<code>main_0</code>函数中，跟<code>sub_41100F</code>函数有关就是那行赋值代码，显然不可能让它执行，但是我们来看它的汇编代码：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-keyword">push</span>    offset sub_5F100F//异常处理程序<br><span class="hljs-keyword">push</span>    large <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">fs</span>:<span class="hljs-number">0</span>//SEH Linked List头<br><span class="hljs-keyword">mov</span>     large <span class="hljs-built_in">fs</span>:<span class="hljs-number">0</span>, <span class="hljs-built_in">esp</span>//添加链表<br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">eax</span>, <span class="hljs-number">0</span><br><span class="hljs-keyword">mov</span>     <span class="hljs-built_in">dword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">eax</span>], <span class="hljs-number">1</span><br><span class="hljs-keyword">pop</span>     small [large <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">fs</span>:<span class="hljs-number">0</span>]<br><span class="hljs-keyword">add</span>     <span class="hljs-built_in">esp</span>, <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><p>这是一个SEH异常处理。而<code>sub_5F100F</code>正好作为异常处理程序被调用。</p><p>借用某网友的一句话：<code>FS常用于异常处理，这里是异常处理程序的指针入栈，以便STACK rewind。</code></p><p>也参考了[<a href="https://bbs.kanxue.com/thread-249592.htm">原创]windows-SEH详解-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a>。</p><p>至于具体的细节这里就不再展开了。<del>（因为我也不会）</del></p>]]></content>
    
    
    <categories>
      
      <category>Reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NPUCTF2020-你好sao啊</title>
    <link href="/2023/09/04/NPUCTF2020-%E4%BD%A0%E5%A5%BDsao%E5%95%8A/"/>
    <url>/2023/09/04/NPUCTF2020-%E4%BD%A0%E5%A5%BDsao%E5%95%8A/</url>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042211131.png"></p><p>代码意思很明确，让我们输入一个33bytes的字符串，进行加密后，跟已知字符串相比较，如果相等就成功，否则失败。</p><p>因为windows上数据存储是小端存储，所以已知字符串的顺序需要手动调整，当然也可以动态调试之后直接从内存中复制过来。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">unsigned char ida_chars[] =<br>&#123;<br>  <span class="hljs-number">0x9E</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0xD1</span>, <br>  <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xE7</span>, <br>  <span class="hljs-number">0x40</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span><br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>接下来是分析加密函数：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042211887.png"></p><p>大概可以猜测到这是一个base64解密函数，但是对照表发生了改变，进入到<code>find_posc()</code>函数中可以知道对照表：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234</span>&#123;&#125;<span class="hljs-number">789</span>+/=<br></code></pre></td></tr></table></figure><p>总的来说，就是一个变表base64解密，我们只要进行加密即可得到 flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">result = [<span class="hljs-number">0x9E</span>, <span class="hljs-number">0x9B</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0xB5</span>, <span class="hljs-number">0xFE</span>, <span class="hljs-number">0x70</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xB2</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0x9C</span>, <span class="hljs-number">0x02</span>, <span class="hljs-number">0x7F</span>, <span class="hljs-number">0xAB</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0x59</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x63</span>, <span class="hljs-number">0xE7</span>,  <span class="hljs-number">0x40</span>, <span class="hljs-number">0x9D</span>, <span class="hljs-number">0xCD</span>, <span class="hljs-number">0xFA</span>, <span class="hljs-number">0x04</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>,  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x00</span>]<br>table = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234&#123;&#125;789+/=&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(i),end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p>打印出来的字符串拿去解密（这个工具不能以16进制作为输入）</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042212964.png"></p>]]></content>
    
    
    <categories>
      
      <category>Reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GKCTF2021-QQQQT</title>
    <link href="/2023/09/04/GKCTF2021-QQQQT/"/>
    <url>/2023/09/04/GKCTF2021-QQQQT/</url>
    
    <content type="html"><![CDATA[<p><code>Exeinfo PE</code>查看<code>exe</code>信息，发现是<code>Enigma Virtual Box</code>。这是啥玩意，网上搜索到了相关信息：</p><blockquote><p>Enigma Virtual Box是软件虚拟化工具，它可以将多个文件封装到应用程序主文件，从而制作成为单执行文件exe</p></blockquote><p>也就是说这个<code>exe</code>文件是通过打包得到的，那么我们应该对其进行解包，工具下载链接如下：</p><p><a href="https://www.52pojie.cn/thread-1575691-1-1.html">EnigmaVBUnpacker v0.59（Enigma Virtual Box 解包工具） - 『逆向资源区』 - 吾爱破解 - LCG - LSG |安卓破解|病毒分析|www.52pojie.cn</a></p><p>对解包得到的<code>exe</code>文件用<code>IDA</code>分析。<code>shift+F12</code>找字符串，找<code>56fkoP8KhwCf3v7CEz</code>字符串（也许不是很明显，也可以左侧函数表中挨个找），上面的字符串是我们运行应用所看到的界面中的文本。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042209870.png"></p><p><a href="http://www.codebaoku.com/bcalg/bcalg-base58.html">base58 编码原理和实现方法 - 编程宝库 (codebaoku.com)</a></p><p><code>Base58</code>编码不同于<code>base64</code>编码中使用3个字符转4个字符的方法，而是采用辗转相除法。本质上，base64编码是64进制，base58是58进制。</p>]]></content>
    
    
    <categories>
      
      <category>Reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>QCTF2018-Xman-babymips</title>
    <link href="/2023/09/04/QCTF2018-Xman-babymips/"/>
    <url>/2023/09/04/QCTF2018-Xman-babymips/</url>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042207989.png"></p><p>可以看到上述代码不同于汇编代码，是<code>MIPS</code>指令，不过好在IDA有相应的插件反汇编这种代码。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042207283.png"></p><p>整个代码流程为：我们输入32bytes的字符串，先进行异或，然后比较前5bytes的字符是否相等，然后进入<code>sub_4007F0</code>函数。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042207942.png"></p><p>将后27bytes字符串进行移位运算，然后再与字符串比较。</p><p>相应的逆向比较简单，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#include &lt;stdio.h&gt;</span><br><br><span class="hljs-built_in">int</span> main()&#123;<br><br>char v5[<span class="hljs-number">32</span>] = &#123;<span class="hljs-string">&#x27;Q&#x27;</span>,<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-string">&#x27;j&#x27;</span>,<span class="hljs-string">&#x27;&#123;&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>&#125;;<br><br>unsigned char off_410D04[] =&#123;<br><span class="hljs-number">0x52</span>, <span class="hljs-number">0xFD</span>, <span class="hljs-number">0x16</span>, <span class="hljs-number">0xA4</span>, <span class="hljs-number">0x89</span>, <span class="hljs-number">0xBD</span>, <span class="hljs-number">0x92</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0x13</span>, <span class="hljs-number">0x41</span>, <br><span class="hljs-number">0x54</span>, <span class="hljs-number">0xA0</span>, <span class="hljs-number">0x8D</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x81</span>, <span class="hljs-number">0xDE</span>, <span class="hljs-number">0xFC</span>, <span class="hljs-number">0x95</span>, <span class="hljs-number">0xF0</span>, <br><span class="hljs-number">0x16</span>, <span class="hljs-number">0x79</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x5B</span>, <span class="hljs-number">0x75</span>, <span class="hljs-number">0x1F</span><br>&#125;;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">5</span>;i&lt;<span class="hljs-number">32</span>;i++)&#123;<br><span class="hljs-keyword">if</span> ( (i &amp; <span class="hljs-number">1</span>) != <span class="hljs-number">0</span> )&#123;<br>v5[i] = (off_410D04[i-<span class="hljs-number">5</span>] &gt;&gt; <span class="hljs-number">6</span>) | (off_410D04[i-<span class="hljs-number">5</span>] &lt;&lt; <span class="hljs-number">2</span>);<br>&#125;<br><span class="hljs-keyword">else</span>             <br>v5[i] = (off_410D04[i-<span class="hljs-number">5</span>] &lt;&lt; <span class="hljs-number">6</span>) | (off_410D04[i-<span class="hljs-number">5</span>] &gt;&gt; <span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">32</span>;i++)&#123;<br>v5[i] ^= <span class="hljs-number">32</span> - i;<br>printf(<span class="hljs-string">&quot;%c&quot;</span>,v5[i]);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>羊城杯2020-login</title>
    <link href="/2023/09/04/%E7%BE%8A%E5%9F%8E%E6%9D%AF2020login/"/>
    <url>/2023/09/04/%E7%BE%8A%E5%9F%8E%E6%9D%AF2020login/</url>
    
    <content type="html"><![CDATA[<p>附件是个python编写的exe程序（从图标中就可以看出来），先运行一下，给出了字符串<code>input somthing</code>，然后尝试用IDA分析，可惜不行，<code>shift+F12</code>也找不到相应的字符串。</p><p>因为python代码要通过打包才能变成exe文件，所以借助浏览器搜索python编写的exe如何反编译py文件，找到了相应的文章：</p><p><a href="https://zhuanlan.zhihu.com/p/394049570">Python解包及反编译: PyInstaller Extractor+uncompyle6 - 知乎 (zhihu.com)</a></p><p>步骤就不详述了，链接文章中都有。最终得到py文件如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># uncompyle6 version 3.9.0</span><br><span class="hljs-comment"># Python bytecode version base 3.6 (3379)</span><br><span class="hljs-comment"># Decompiled from: Python 3.7.0 (v3.7.0:1bf9cc5093, Jun 27 2018, 04:59:51) [MSC v.1914 64 bit (AMD64)]</span><br><span class="hljs-comment"># Embedded file name: login.py</span><br><span class="hljs-keyword">import</span> sys<br>input1 = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;input something:&#x27;</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(input1) != <span class="hljs-number">14</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Wrong length!&#x27;</span>)<br>    sys.exit()<br><span class="hljs-keyword">else</span>:<br>    code = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">13</span>):<br>        code.append(<span class="hljs-built_in">ord</span>(input1[i]) ^ <span class="hljs-built_in">ord</span>(input1[i + <span class="hljs-number">1</span>]))<br><br>    code.append(<span class="hljs-built_in">ord</span>(input1[<span class="hljs-number">13</span>]))<br>    a1 = code[<span class="hljs-number">2</span>]<br>    a2 = code[<span class="hljs-number">1</span>]<br>    a3 = code[<span class="hljs-number">0</span>]<br>    a4 = code[<span class="hljs-number">3</span>]<br>    a5 = code[<span class="hljs-number">4</span>]<br>    a6 = code[<span class="hljs-number">5</span>]<br>    a7 = code[<span class="hljs-number">6</span>]<br>    a8 = code[<span class="hljs-number">7</span>]<br>    a9 = code[<span class="hljs-number">9</span>]<br>    a10 = code[<span class="hljs-number">8</span>]<br>    a11 = code[<span class="hljs-number">10</span>]<br>    a12 = code[<span class="hljs-number">11</span>]<br>    a13 = code[<span class="hljs-number">12</span>]<br>    a14 = code[<span class="hljs-number">13</span>]<br>    <span class="hljs-keyword">if</span> (a1 * <span class="hljs-number">88</span> + a2 * <span class="hljs-number">67</span> + a3 * <span class="hljs-number">65</span> - a4 * <span class="hljs-number">5</span> + a5 * <span class="hljs-number">43</span> + a6 * <span class="hljs-number">89</span> + a7 * <span class="hljs-number">25</span> + a8 * <span class="hljs-number">13</span> - a9 * <span class="hljs-number">36</span> + a10 * <span class="hljs-number">15</span> + a11 * <span class="hljs-number">11</span> + a12 * <span class="hljs-number">47</span> - a13 * <span class="hljs-number">60</span> + a14 * <span class="hljs-number">29</span> == <span class="hljs-number">22748</span>) &amp; (a1 * <span class="hljs-number">89</span> + a2 * <span class="hljs-number">7</span> + a3 * <span class="hljs-number">12</span> - a4 * <span class="hljs-number">25</span> + a5 * <span class="hljs-number">41</span> + a6 * <span class="hljs-number">23</span> + a7 * <span class="hljs-number">20</span> - a8 * <span class="hljs-number">66</span> + a9 * <span class="hljs-number">31</span> + a10 * <span class="hljs-number">8</span> + a11 * <span class="hljs-number">2</span> - a12 * <span class="hljs-number">41</span> - a13 * <span class="hljs-number">39</span> + a14 * <span class="hljs-number">17</span> == <span class="hljs-number">7258</span>) &amp; (a1 * <span class="hljs-number">28</span> + a2 * <span class="hljs-number">35</span> + a3 * <span class="hljs-number">16</span> - a4 * <span class="hljs-number">65</span> + a5 * <span class="hljs-number">53</span> + a6 * <span class="hljs-number">39</span> + a7 * <span class="hljs-number">27</span> + a8 * <span class="hljs-number">15</span> - a9 * <span class="hljs-number">33</span> + a10 * <span class="hljs-number">13</span> + a11 * <span class="hljs-number">101</span> + a12 * <span class="hljs-number">90</span> - a13 * <span class="hljs-number">34</span> + a14 * <span class="hljs-number">23</span> == <span class="hljs-number">26190</span>) &amp; (a1 * <span class="hljs-number">23</span> + a2 * <span class="hljs-number">34</span> + a3 * <span class="hljs-number">35</span> - a4 * <span class="hljs-number">59</span> + a5 * <span class="hljs-number">49</span> + a6 * <span class="hljs-number">81</span> + a7 * <span class="hljs-number">25</span> + (a8 &lt;&lt; <span class="hljs-number">7</span>) - a9 * <span class="hljs-number">32</span> + a10 * <span class="hljs-number">75</span> + a11 * <span class="hljs-number">81</span> + a12 * <span class="hljs-number">47</span> - a13 * <span class="hljs-number">60</span> + a14 * <span class="hljs-number">29</span> == <span class="hljs-number">37136</span>) &amp; (a1 * <span class="hljs-number">38</span> + a2 * <span class="hljs-number">97</span> + a3 * <span class="hljs-number">35</span> - a4 * <span class="hljs-number">52</span> + a5 * <span class="hljs-number">42</span> + a6 * <span class="hljs-number">79</span> + a7 * <span class="hljs-number">90</span> + a8 * <span class="hljs-number">23</span> - a9 * <span class="hljs-number">36</span> + a10 * <span class="hljs-number">57</span> + a11 * <span class="hljs-number">81</span> + a12 * <span class="hljs-number">42</span> - a13 * <span class="hljs-number">62</span> - a14 * <span class="hljs-number">11</span> == <span class="hljs-number">27915</span>) &amp; (a1 * <span class="hljs-number">22</span> + a2 * <span class="hljs-number">27</span> + a3 * <span class="hljs-number">35</span> - a4 * <span class="hljs-number">45</span> + a5 * <span class="hljs-number">47</span> + a6 * <span class="hljs-number">49</span> + a7 * <span class="hljs-number">29</span> + a8 * <span class="hljs-number">18</span> - a9 * <span class="hljs-number">26</span> + a10 * <span class="hljs-number">35</span> + a11 * <span class="hljs-number">41</span> + a12 * <span class="hljs-number">40</span> - a13 * <span class="hljs-number">61</span> + a14 * <span class="hljs-number">28</span> == <span class="hljs-number">17298</span>) &amp; (a1 * <span class="hljs-number">12</span> + a2 * <span class="hljs-number">45</span> + a3 * <span class="hljs-number">35</span> - a4 * <span class="hljs-number">9</span> - a5 * <span class="hljs-number">42</span> + a6 * <span class="hljs-number">86</span> + a7 * <span class="hljs-number">23</span> + a8 * <span class="hljs-number">85</span> - a9 * <span class="hljs-number">47</span> + a10 * <span class="hljs-number">34</span> + a11 * <span class="hljs-number">76</span> + a12 * <span class="hljs-number">43</span> - a13 * <span class="hljs-number">44</span> + a14 * <span class="hljs-number">65</span> == <span class="hljs-number">19875</span>) &amp; (a1 * <span class="hljs-number">79</span> + a2 * <span class="hljs-number">62</span> + a3 * <span class="hljs-number">35</span> - a4 * <span class="hljs-number">85</span> + a5 * <span class="hljs-number">33</span> + a6 * <span class="hljs-number">79</span> + a7 * <span class="hljs-number">86</span> + a8 * <span class="hljs-number">14</span> - a9 * <span class="hljs-number">30</span> + a10 * <span class="hljs-number">25</span> + a11 * <span class="hljs-number">11</span> + a12 * <span class="hljs-number">57</span> - a13 * <span class="hljs-number">50</span> - a14 * <span class="hljs-number">9</span> == <span class="hljs-number">22784</span>) &amp; (a1 * <span class="hljs-number">8</span> + a2 * <span class="hljs-number">6</span> + a3 * <span class="hljs-number">64</span> - a4 * <span class="hljs-number">85</span> + a5 * <span class="hljs-number">73</span> + a6 * <span class="hljs-number">29</span> + a7 * <span class="hljs-number">2</span> + a8 * <span class="hljs-number">23</span> - a9 * <span class="hljs-number">36</span> + a10 * <span class="hljs-number">5</span> + a11 * <span class="hljs-number">2</span> + a12 * <span class="hljs-number">47</span> - a13 * <span class="hljs-number">64</span> + a14 * <span class="hljs-number">27</span> == <span class="hljs-number">9710</span>) &amp; (a1 * <span class="hljs-number">67</span> - a2 * <span class="hljs-number">68</span> + a3 * <span class="hljs-number">68</span> - a4 * <span class="hljs-number">51</span> - a5 * <span class="hljs-number">43</span> + a6 * <span class="hljs-number">81</span> + a7 * <span class="hljs-number">22</span> - a8 * <span class="hljs-number">12</span> - a9 * <span class="hljs-number">38</span> + a10 * <span class="hljs-number">75</span> + a11 * <span class="hljs-number">41</span> + a12 * <span class="hljs-number">27</span> - a13 * <span class="hljs-number">52</span> + a14 * <span class="hljs-number">31</span> == <span class="hljs-number">13376</span>) &amp; (a1 * <span class="hljs-number">85</span> + a2 * <span class="hljs-number">63</span> + a3 * <span class="hljs-number">5</span> - a4 * <span class="hljs-number">51</span> + a5 * <span class="hljs-number">44</span> + a6 * <span class="hljs-number">36</span> + a7 * <span class="hljs-number">28</span> + a8 * <span class="hljs-number">15</span> - a9 * <span class="hljs-number">6</span> + a10 * <span class="hljs-number">45</span> + a11 * <span class="hljs-number">31</span> + a12 * <span class="hljs-number">7</span> - a13 * <span class="hljs-number">67</span> + a14 * <span class="hljs-number">78</span> == <span class="hljs-number">24065</span>) &amp; (a1 * <span class="hljs-number">47</span> + a2 * <span class="hljs-number">64</span> + a3 * <span class="hljs-number">66</span> - a4 * <span class="hljs-number">5</span> + a5 * <span class="hljs-number">43</span> + a6 * <span class="hljs-number">112</span> + a7 * <span class="hljs-number">25</span> + a8 * <span class="hljs-number">13</span> - a9 * <span class="hljs-number">35</span> + a10 * <span class="hljs-number">95</span> + a11 * <span class="hljs-number">21</span> + a12 * <span class="hljs-number">43</span> - a13 * <span class="hljs-number">61</span> + a14 * <span class="hljs-number">20</span> == <span class="hljs-number">27687</span>) &amp; (a1 * <span class="hljs-number">89</span> + a2 * <span class="hljs-number">67</span> + a3 * <span class="hljs-number">85</span> - a4 * <span class="hljs-number">25</span> + a5 * <span class="hljs-number">49</span> + a6 * <span class="hljs-number">89</span> + a7 * <span class="hljs-number">23</span> + a8 * <span class="hljs-number">56</span> - a9 * <span class="hljs-number">92</span> + a10 * <span class="hljs-number">14</span> + a11 * <span class="hljs-number">89</span> + a12 * <span class="hljs-number">47</span> - a13 * <span class="hljs-number">61</span> - a14 * <span class="hljs-number">29</span> == <span class="hljs-number">29250</span>) &amp; (a1 * <span class="hljs-number">95</span> + a2 * <span class="hljs-number">34</span> + a3 * <span class="hljs-number">62</span> - a4 * <span class="hljs-number">9</span> - a5 * <span class="hljs-number">43</span> + a6 * <span class="hljs-number">83</span> + a7 * <span class="hljs-number">25</span> + a8 * <span class="hljs-number">12</span> - a9 * <span class="hljs-number">36</span> + a10 * <span class="hljs-number">16</span> + a11 * <span class="hljs-number">51</span> + a12 * <span class="hljs-number">47</span> - a13 * <span class="hljs-number">60</span> - a14 * <span class="hljs-number">24</span> == <span class="hljs-number">15317</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;flag is GWHT&#123;md5(your_input)&#125;&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Congratulations and have fun!&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Sorry,plz try again...&#x27;</span>)<br><span class="hljs-comment"># okay decompiling .\login.pyc</span><br></code></pre></td></tr></table></figure><p>整个代码思路挺清晰的，没啥好说的，解密代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><br><span class="hljs-comment"># z3解方程组</span><br>eqstr = <span class="hljs-string">&#x27;(a1 * 88 + a2 * 67 + a3 * 65 - a4 * 5 + a5 * 43 + a6 * 89 + a7 * 25 + a8 * 13 - a9 * 36 + a10 * 15 + a11 * 11 + a12 * 47 - a13 * 60 + a14 * 29 == 22748) &amp; (a1 * 89 + a2 * 7 + a3 * 12 - a4 * 25 + a5 * 41 + a6 * 23 + a7 * 20 - a8 * 66 + a9 * 31 + a10 * 8 + a11 * 2 - a12 * 41 - a13 * 39 + a14 * 17 == 7258) &amp; (a1 * 28 + a2 * 35 + a3 * 16 - a4 * 65 + a5 * 53 + a6 * 39 + a7 * 27 + a8 * 15 - a9 * 33 + a10 * 13 + a11 * 101 + a12 * 90 - a13 * 34 + a14 * 23 == 26190) &amp; (a1 * 23 + a2 * 34 + a3 * 35 - a4 * 59 + a5 * 49 + a6 * 81 + a7 * 25 + (a8*2**7) - a9 * 32 + a10 * 75 + a11 * 81 + a12 * 47 - a13 * 60 + a14 * 29 == 37136) &amp; (a1 * 38 + a2 * 97 + a3 * 35 - a4 * 52 + a5 * 42 + a6 * 79 + a7 * 90 + a8 * 23 - a9 * 36 + a10 * 57 + a11 * 81 + a12 * 42 - a13 * 62 - a14 * 11 == 27915) &amp; (a1 * 22 + a2 * 27 + a3 * 35 - a4 * 45 + a5 * 47 + a6 * 49 + a7 * 29 + a8 * 18 - a9 * 26 + a10 * 35 + a11 * 41 + a12 * 40 - a13 * 61 + a14 * 28 == 17298) &amp; (a1 * 12 + a2 * 45 + a3 * 35 - a4 * 9 - a5 * 42 + a6 * 86 + a7 * 23 + a8 * 85 - a9 * 47 + a10 * 34 + a11 * 76 + a12 * 43 - a13 * 44 + a14 * 65 == 19875) &amp; (a1 * 79 + a2 * 62 + a3 * 35 - a4 * 85 + a5 * 33 + a6 * 79 + a7 * 86 + a8 * 14 - a9 * 30 + a10 * 25 + a11 * 11 + a12 * 57 - a13 * 50 - a14 * 9 == 22784) &amp; (a1 * 8 + a2 * 6 + a3 * 64 - a4 * 85 + a5 * 73 + a6 * 29 + a7 * 2 + a8 * 23 - a9 * 36 + a10 * 5 + a11 * 2 + a12 * 47 - a13 * 64 + a14 * 27 == 9710) &amp; (a1 * 67 - a2 * 68 + a3 * 68 - a4 * 51 - a5 * 43 + a6 * 81 + a7 * 22 - a8 * 12 - a9 * 38 + a10 * 75 + a11 * 41 + a12 * 27 - a13 * 52 + a14 * 31 == 13376) &amp; (a1 * 85 + a2 * 63 + a3 * 5 - a4 * 51 + a5 * 44 + a6 * 36 + a7 * 28 + a8 * 15 - a9 * 6 + a10 * 45 + a11 * 31 + a12 * 7 - a13 * 67 + a14 * 78 == 24065) &amp; (a1 * 47 + a2 * 64 + a3 * 66 - a4 * 5 + a5 * 43 + a6 * 112 + a7 * 25 + a8 * 13 - a9 * 35 + a10 * 95 + a11 * 21 + a12 * 43 - a13 * 61 + a14 * 20 == 27687) &amp; (a1 * 89 + a2 * 67 + a3 * 85 - a4 * 25 + a5 * 49 + a6 * 89 + a7 * 23 + a8 * 56 - a9 * 92 + a10 * 14 + a11 * 89 + a12 * 47 - a13 * 61 - a14 * 29 == 29250) &amp; (a1 * 95 + a2 * 34 + a3 * 62 - a4 * 9 - a5 * 43 + a6 * 83 + a7 * 25 + a8 * 12 - a9 * 36 + a10 * 16 + a11 * 51 + a12 * 47 - a13 * 60 - a14 * 24 == 15317)&#x27;</span><br>eqstrlist = eqstr.split(<span class="hljs-string">&#x27;&amp;&#x27;</span>)<br><br>a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14 = Ints(<span class="hljs-string">&#x27;a1 a2 a3 a4 a5 a6 a7 a8 a9 a10 a11 a12 a13 a14&#x27;</span>)<br><br>s = Solver()<br><span class="hljs-keyword">for</span> eq <span class="hljs-keyword">in</span> eqstrlist:<br>    s.add(<span class="hljs-built_in">eval</span>(eq))<br><br><span class="hljs-keyword">if</span> s.check() == sat:<br>    result = s.model()<br><br><span class="hljs-built_in">print</span>(result)<br><br><span class="hljs-comment"># 恢复顺序</span><br>code = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">14</span>)]<br>code[<span class="hljs-number">2</span>] = result[a1].as_long()<br>code[<span class="hljs-number">1</span>] = result[a2].as_long()<br>code[<span class="hljs-number">0</span>] = result[a3].as_long()<br>code[<span class="hljs-number">3</span>] = result[a4].as_long()<br>code[<span class="hljs-number">4</span>] = result[a5].as_long()<br>code[<span class="hljs-number">5</span>] = result[a6].as_long()<br>code[<span class="hljs-number">6</span>] = result[a7].as_long()<br>code[<span class="hljs-number">7</span>] = result[a8].as_long()<br>code[<span class="hljs-number">9</span>] = result[a9].as_long()<br>code[<span class="hljs-number">8</span>] = result[a10].as_long()<br>code[<span class="hljs-number">10</span>] = result[a11].as_long()<br>code[<span class="hljs-number">11</span>] = result[a12].as_long()<br>code[<span class="hljs-number">12</span>] = result[a13].as_long()<br>code[<span class="hljs-number">13</span>] = result[a14].as_long()<br><br><span class="hljs-comment"># 恢复前后异或</span><br>input1 = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">14</span>)]<br>input1[<span class="hljs-number">13</span>] = code[<span class="hljs-number">13</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">12</span>,-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>):<br>    input1[i] = code[i] ^ input1[i+<span class="hljs-number">1</span>]<br><br><span class="hljs-comment">#获取md5</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">chr</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> input1)<br><span class="hljs-built_in">print</span>(md5(flag.encode()).hexdigest())<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SWPU2019-ReverseMe</title>
    <link href="/2023/09/04/SWPU2019ReverseMe/"/>
    <url>/2023/09/04/SWPU2019ReverseMe/</url>
    
    <content type="html"><![CDATA[<h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>IDA打开如下图所示（部分分析在图上）：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042159304.png"></p><p>基本可以确定，我们要让<code>v16=0</code>才是正确的，而能使<code>v16=0</code>有两条路径，第一条是伪代码中第89<del>103行的 <code>while</code> 循环，第二条是伪代码中第105</del>111行的<code>if</code>语句。显然，第二条路径是走不通的，因为不可能存在同时满足如下条件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c">v17 = v18 &lt; *((_BYTE *)v13 + <span class="hljs-number">1</span>), v18 == *((_BYTE *)v13 + <span class="hljs-number">1</span>)<br>v17 = v19 &lt; *((_BYTE *)v13 + <span class="hljs-number">2</span>), v19 == *((_BYTE *)v13 + <span class="hljs-number">2</span>)<br>v17 = v20 &lt; *((_BYTE *)v13 + <span class="hljs-number">3</span>), v20 == *((_BYTE *)v13 + <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>所以唯一能行的是通过<code>while</code>循环的路径使得<code>v16=0</code>。</p><p>现在我们从头开始分析伪代码。首先是让我们输入长度为32bytes的字符串，存放于<code>Block</code>中，然后将字符串”SWPU_2019_CTF”复制给<code>v33</code>，接着是一个<code>while</code>循环使<code>Block</code>循环异或<code>v33</code>。之后有一个比较重要的函数<code>sub_D625C0</code>（约第77行），稍后详细说明。在这之后，又是<code>while</code>循环，里面让<code>v12</code>与<code>v13</code>作比较，<code>v12</code>来自数组<code>v34</code>（已知）,<code>v13</code>来自数组<code>v28</code>，目前来看数组<code>v28</code>为0，显然<code>v12</code>与<code>v13</code>不可能相等，但在刚才的分析中，又必须是这里使得<code>v16=0</code>，所以极有可能是刚刚提到的函数<code>sub_D625C0</code>（约第77行）修改了数组<code>v28</code>。</p><p>这里使用动态调试来分析。首先在<code>jnz</code>处下断点，如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042159119.png"></p><p>随便输入长度为32的字符串。断点触发后，我们可以知道<code>eax</code>（数组<code>v12</code>）和<code>edx</code>（数组<code>v13</code>）的值，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> eax[] =<br>&#123;<br>  <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x5A</span>, <br>  <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x16</span>, <br>  <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x6B</span>, <br>  <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x67</span><br>&#125;;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> edx[] =<br>&#123;<br>  <span class="hljs-number">0xE4</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0x5F</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0xF6</span>, <span class="hljs-number">0xD4</span>, <span class="hljs-number">0xAF</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xEA</span>, <span class="hljs-number">0x19</span>, <br>  <span class="hljs-number">0x19</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x1D</span>, <span class="hljs-number">0xC3</span>, <span class="hljs-number">0x11</span>, <span class="hljs-number">0xD1</span>, <span class="hljs-number">0x0D</span>, <span class="hljs-number">0xFF</span>, <span class="hljs-number">0x34</span>, <span class="hljs-number">0x04</span>, <br>  <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xF1</span>, <span class="hljs-number">0x15</span>, <span class="hljs-number">0x42</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0x2D</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0xE7</span>, <span class="hljs-number">0x19</span>, <br>  <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x2B</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>由于数组<code>v12</code>已知，数组<code>v13</code>未知，所以我们需要跟踪<code>v13</code>是怎么产生的。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042200798.png"></p><p>显然应证了我们的猜测，<code>v13</code>是由函数<code>sub_D625C0</code>所产生的。</p><p>再进行新的动调，去除原先的断点，在<code>call</code>处下断点，运行后，再给<code>ebp+var_88</code>开始的32bytes的内存下内存断点（选中后按<code>F2</code>）。然后按<code>F9</code>，程序触发内存断点后会停下来。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042200851.png"></p><p>可以看到，这里将<code>ecx</code>移动到目标内存中，而<code>ecx</code>是<code>[esi+eax]</code>异或<code>[eax -4]</code>得到的，<code>esi+eax</code>和<code>eax -4</code>开始的内存中的值如下（因为触发断点的时候已经执行了一步，所以不要少了前面4bytes）:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> esi_eax[] =<br>&#123;<br>  <span class="hljs-number">0x86</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x77</span>, <br>  <span class="hljs-number">0x6B</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x05</span>, <br>  <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x7D</span>, <br>  <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x28</span><br>&#125;;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> eax_4[] =<br>&#123;<br>  <span class="hljs-number">0x62</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0x00</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x6E</span>, <br>  <span class="hljs-number">0x72</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x64</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x03</span>, <span class="hljs-number">0x01</span>, <br>  <span class="hljs-number">0x00</span>, <span class="hljs-number">0x08</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x66</span>, <span class="hljs-number">0x61</span>, <span class="hljs-number">0x64</span>, <br>  <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x03</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>当然，现在无法确定这些值是不是固定的。</p><p>还能利用的应该就是<code>Block</code>（输入字符串）跟<code>v33</code>（已知字符串）异或后的结果，毕竟我们最终就是获取输入，而跟输入有关的就是异或后的结果（没有的话干嘛要这么做呢？）。</p><p>重新下断点，在<code>cmp [ebp+var_8C],10h</code>处下断点（即do…while…一开始的地方），如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042200006.png"></p><p>执行后，<code>shift+F12</code>搜索我们输入的字符串，可能有多个，以<code>\0</code>结尾的才是，情况如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042200849.png"></p><p>依图所示，就是倒数第二个。给这片内存下内存断点，<code>F9</code>执行触发断点（多执行几次），可以发现输入字符串所在的内存发生改变，即进行了异或加密。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042200614.png"></p><p>在该部分汇编代码中，可以知道<code>edi</code>是字符串下表，<code>ecx</code>是输入字符串的起始地址，并且后面还将异或后的字符串复制到另一片内存中，即<code>ebp+var_64</code>开始的内存。</p><p>这一部分清楚后，我们清除原来的所有断点，然后给<code> call sub_D625C0</code>下断点（就是伪代码中第79行的函数），执行到该处后（此时已将异或后的字符串复制到了<code>ebp+var_64</code>开始的内存），再给<code>ebp+var_64</code>开始的内存下断点。之后再<code>F9</code>触发内存断点，</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042200864.png"></p><p>还是原来那个地方，<code>eax-4</code>开始的内存存储的就是之前异或得到的字符串。因此可以确定的是<code>esi+eax</code>开始的内存中的值是固定的，而<code>eax -4</code>开始的内存中的值是异或得到的字符串。</p><p>总结一下，整个过程就是，输入的字符串循环异或 “SWPU_2019_CTF” ，得到的结果再跟</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">unsigned char esi_eax[] =<br>&#123;<br>  <span class="hljs-number">0x86</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x77</span>, <br>  <span class="hljs-number">0x6B</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x05</span>, <br>  <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x7D</span>, <br>  <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x28</span><br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>异或，得到的结果为</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">unsigned char <span class="hljs-built_in">eax</span>[] =<br>&#123;<br>  <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x5A</span>, <br>  <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x16</span>, <br>  <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x6B</span>, <br>  <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x67</span><br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>整个伪代码很复杂，但是最终我们分析出来的加密过程却这么简单。脚本如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> esi_eax[] =<br>&#123;<br>  <span class="hljs-number">0x86</span>, <span class="hljs-number">0x0C</span>, <span class="hljs-number">0x3E</span>, <span class="hljs-number">0xCA</span>, <span class="hljs-number">0x98</span>, <span class="hljs-number">0xD7</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x19</span>, <span class="hljs-number">0xE2</span>, <span class="hljs-number">0x77</span>,<br>  <span class="hljs-number">0x6B</span>, <span class="hljs-number">0xA6</span>, <span class="hljs-number">0x6A</span>, <span class="hljs-number">0xA1</span>, <span class="hljs-number">0x77</span>, <span class="hljs-number">0xB0</span>, <span class="hljs-number">0x69</span>, <span class="hljs-number">0x91</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x05</span>,<br>  <span class="hljs-number">0x7A</span>, <span class="hljs-number">0xF9</span>, <span class="hljs-number">0x7B</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5A</span>, <span class="hljs-number">0x4B</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x7D</span>,<br>  <span class="hljs-number">0xD4</span>, <span class="hljs-number">0x28</span><br>&#125;;<br><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> eax[] =<br>&#123;<br>  <span class="hljs-number">0xB3</span>, <span class="hljs-number">0x37</span>, <span class="hljs-number">0x0F</span>, <span class="hljs-number">0xF8</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xBC</span>, <span class="hljs-number">0xAE</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x5A</span>,<br>  <span class="hljs-number">0x4D</span>, <span class="hljs-number">0x86</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x97</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0xD3</span>, <span class="hljs-number">0x4F</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x16</span>,<br>  <span class="hljs-number">0x0B</span>, <span class="hljs-number">0x9F</span>, <span class="hljs-number">0x72</span>, <span class="hljs-number">0x1A</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x68</span>, <span class="hljs-number">0x6D</span>, <span class="hljs-number">0x26</span>, <span class="hljs-number">0xBA</span>, <span class="hljs-number">0x6B</span>,<br>  <span class="hljs-number">0xC8</span>, <span class="hljs-number">0x67</span><br>&#125;;<br><br><span class="hljs-type">char</span> v33[] = <span class="hljs-string">&quot;SWPU_2019_CTF&quot;</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br><span class="hljs-type">char</span> c = (eax[i] ^ esi_eax[i]) ^ v33[i % <span class="hljs-number">13</span>];<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c&quot;</span>, c);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><p>使用 Ponce 插件，参考<a href="https://bbs.kanxue.com/thread-271393.htm">IDA插件Ponce的使用-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a>。</p><p>使用该插件，我们需要找到待求解字符串的地址和长度，以及距离正确路径最近的一个条件跳转。下面详细说明一下怎么使用。</p><p>首先搜索输入字符串，找到后，选中32bytes大小（不要合并成一个字符串），右键 -&gt; Symbolic -&gt; Symbolize memory。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042201728.png"></p><p>然后找到距离正确路径最近的一个条件跳转，经过我们前面的分析，可以确定的是伪代码中第94行，如图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042201053.png"></p><p><strong>按<code>F9</code>执行到该处后，右键该处分支断点 -&gt; SMT Solver -&gt; Negate &amp; Inject，然后就可以得到部分正确字符。</strong></p><p>重复粗体字的操作（F9，右键…）直至全部解出。最后在待求解字符串所在的内存中读取即可。</p>]]></content>
    
    
    <categories>
      
      <category>Reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2019红帽杯-childRE</title>
    <link href="/2023/09/04/2019%E7%BA%A2%E5%B8%BD%E6%9D%AFchidRE/"/>
    <url>/2023/09/04/2019%E7%BA%A2%E5%B8%BD%E6%9D%AFchidRE/</url>
    
    <content type="html"><![CDATA[<p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042156371.png"></p><p>部分分析如图所示。第29行的<code>sub_xxxx</code>是个复杂的函数，尝试分析过。第33~34行的这两个函数是二叉树的后序遍历</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202309042157471.png"></p><p>且遍历的结果存储到<code>name</code>中。</p><p>之后比较关键的函数是<code>UnDecorateSymbolName</code>函数，这个函数在官方文档上有介绍，但不是很详细，于是问了问chatgpt：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs c++">好的，让我们以 C++ 语言为例来说明 `unDecorateSymbolName` 函数的使用。<br>在 C++ 中，函数名称经过装饰后会包含参数类型、返回类型等信息。例如，`<span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>` 函数在装饰后可能会变成 `_Z3fooi`。而 `unDecorateSymbolName` 函数可以将这样的装饰后的符号名称还原成可读的形式。</span><br><span class="hljs-function">以下是一个简单的例子：</span><br><span class="hljs-function">```cpp</span><br><span class="hljs-function"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span></span><br><span class="hljs-function"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span></span><br><span class="hljs-function"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;dbghelp.h&gt;</span></span></span><br><span class="hljs-function"></span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span>* decorated = <span class="hljs-string">&quot;_Z3fooi&quot;</span>;  <span class="hljs-comment">// 装饰后的符号名称</span><br><br>    DWORD length = <span class="hljs-number">256</span>;<br>    <span class="hljs-type">char</span> buffer[<span class="hljs-number">256</span>];<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">UnDecorateSymbolName</span>(decorated, buffer, length, UNDNAME_COMPLETE)) &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Original symbol name: &quot;</span> &lt;&lt; buffer &lt;&lt; std::endl;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Failed to undecorate symbol name.&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>```<br>在上述代码中，我们使用了 Windows 平台下的 `UnDecorateSymbolName` 函数，并传入装饰后的符号名称 `_Z3fooi`。通过调用该函数，我们可以得到还原后的符号名称 `<span class="hljs-function"><span class="hljs-type">void</span> __cdecl <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>`。最终输出结果为：</span><br><span class="hljs-function">```</span><br><span class="hljs-function">Original symbol name: void __cdecl foo(int)</span><br><span class="hljs-function">```</span><br><span class="hljs-function">这个例子演示了如何使用 `unDecorateSymbolName` 函数将装饰后的符号名称还原成可读形式，以便更好地理解函数的定义。请注意，实际的函数调用可能会因编程语言和开发环境而有所不同，需要根据具体情况进行相应的调整。</span><br></code></pre></td></tr></table></figure><p>根据这个例子，可以知道<code>unDecorateSymbolName</code> 函数的功能是将装饰后的符号名称还原成可读形式，这里的<code>outputString</code>就是可读形式的函数名定义，我们要求的<code>name</code>就是该函数定义修饰后的结果。</p><p>那问题来了，函数修饰的规则是什么？</p><p>函数符号（函数的名字修饰）:在编译阶段生成的字符串，来指明函数的定义或原型。</p><p>参考：<a href="https://blog.csdn.net/Scl_Diligent/article/details/83990429">C&#x2F;C++函数符号生成规则（函数名的修饰）；C++ 函数重载_Scl_Diligent的博客-CSDN博客</a></p><p>根据上述规则可恢复<code>name</code>。</p><p>回到代码中，接下来比较关键的是50、52行，<code>v13</code>后面加的数据其实就是某些字符串的起始地址，所以根据这两行代码可以恢复<code>outputString</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># / 23</span><br>str1 = <span class="hljs-string">&#x27;55565653255552225565565555243466334653663544426565555525555222&#x27;</span><br><span class="hljs-comment"># % 23</span><br>str2 = <span class="hljs-string">&#x27;(_@4620!08!6_0*0442!@186%%0@3=66!!974*3234=&amp;0^3&amp;1@=&amp;0908!6_0*&amp;&#x27;</span><br>str3 = <span class="hljs-string">&#x27;1234567890-=!@#$%^&amp;*()_+qwertyuiop[]QWERTYUIOP&#123;&#125;asdfghjkl;\x27ASDFGHJKL:&quot;ZXCVBNM&lt;&gt;?zxcvbnm,./&#x27;</span><br>outputstring = <span class="hljs-string">&#x27;&#x27;</span><br>slen = <span class="hljs-number">62</span><br><span class="hljs-keyword">for</span> v13 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(slen):<br>    <span class="hljs-comment">#outputString[v13] / 23     outputString[v13] % 23</span><br>    data = str3.index(str1[v13])*<span class="hljs-number">23</span> + str3.index(str2[v13])<br>    outputstring += <span class="hljs-built_in">chr</span>(data)<br><span class="hljs-built_in">print</span>(outputstring)<br></code></pre></td></tr></table></figure><p>求出<code>outputString</code>之后，根据函数名修饰规则手动恢复出<code>name</code></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">?<span class="hljs-symbol">My_Aut0_PWN@</span><span class="hljs-symbol">R0Pxx@</span><span class="hljs-meta">@AAEPADPAE</span><span class="hljs-meta">@Z</span><br></code></pre></td></tr></table></figure><p>接下来就是逆二叉树后序遍历了。因为不知道二叉树结构而且只知道一种遍历结果，是无法恢复的。所以我们尝试IDA动调，随便输入符合条件的字符串，构造出一个对照表，然后替换内容得到源字符串（假设为Src）。在IDA动调过程中，是可以发现第29行的<code>sub_xxx</code>函数对我们的输入是没有影响的，那么我们求出的源字符串Src就是输入。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">name = <span class="hljs-string">&#x27;?My_Aut0_PWN@R0Pxx@@AAEPADPAE@Z&#x27;</span><br><br>table1 = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyzABCDE&#x27;</span> <span class="hljs-comment">#随机的输入</span><br>table2 = <span class="hljs-string">&#x27;pqhrsidtujvwkebxylzAmfBCnDEogca&#x27;</span> <span class="hljs-comment">#对应的后序遍历结果</span><br><br>plain = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(name)):<br>    pos = table2.index(table1[i])<br>    plain += name[pos]<br><span class="hljs-built_in">print</span>(md5(plain.encode()).hexdigest())<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AOSP源码编译</title>
    <link href="/2023/08/28/AOSP%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/"/>
    <url>/2023/08/28/AOSP%E6%BA%90%E7%A0%81%E7%BC%96%E8%AF%91/</url>
    
    <content type="html"><![CDATA[<h1 id="下载AOSP源码"><a href="#下载AOSP源码" class="headerlink" title="下载AOSP源码"></a>下载AOSP源码</h1><p>根据中科大的来：<a href="https://mirrors.ustc.edu.cn/help/aosp.html">AOSP 镜像使用帮助 — USTC Mirror Help 文档</a></p><p>这里我用的是第二种方法，虽然不推荐，但是必须得尝试一下。</p><p>首先是下载 repo 工具：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir ~/bin<br>PATH=~/bin:<span class="hljs-variable">$PATH</span><br>curl https:<span class="hljs-regexp">//</span>storage.googleapis.com<span class="hljs-regexp">/git-repo-downloads/</span>repo &gt; ~<span class="hljs-regexp">/bin/</span>repo<br>chmod a+x ~<span class="hljs-regexp">/bin/</span>repo<br></code></pre></td></tr></table></figure><p>如果 repo 已经下载好了，但是使用不了 repo 指令，需要重新加载环境，执行如下指令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">PATH=~/bin:<span class="hljs-variable">$PATH</span><br><span class="hljs-regexp">//</span>chmod a+x ~<span class="hljs-regexp">/bin/</span>repo(应该不需要)<br></code></pre></td></tr></table></figure><p>然后在桌面建一个文件夹（名称任意），并进入到该目录下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> AOSP_COMPILE<br><span class="hljs-built_in">cd</span> AOSP_COMPILE<br></code></pre></td></tr></table></figure><p>在该目录下初始化仓库（可以使用 -b 来指定Android版本，我这里直接指定了Android10版本的）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>指定Android10版本<br>repo init -u git:<span class="hljs-regexp">//mi</span>rrors.ustc.edu.cn<span class="hljs-regexp">/aosp/</span>platform/manifest -b android-<span class="hljs-number">4.0</span>.<span class="hljs-number">1</span>_r1<br></code></pre></td></tr></table></figure><p>最后同步源码树（以后只需执行这条命令来同步）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">repo <span class="hljs-built_in">sync</span><br></code></pre></td></tr></table></figure><p>如果在同步中失去连接，重新执行该命令即可，它会在之前下载断开的位置开始继续下载。</p><h1 id="编译AOSP"><a href="#编译AOSP" class="headerlink" title="编译AOSP"></a>编译AOSP</h1><h2 id="编译前的环境配置"><a href="#编译前的环境配置" class="headerlink" title="编译前的环境配置"></a>编译前的环境配置</h2><p>在开始编译AOSP之前，我们需要配置好编译环境。</p><h3 id="下载工具"><a href="#下载工具" class="headerlink" title="下载工具"></a>下载工具</h3><ol><li><p><strong>下载 libncurses5</strong></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">//32-bit 机器</span><br>sudo apt-<span class="hljs-keyword">get</span> install libncurses5:i386<br><span class="hljs-comment">//64-bit 机器</span><br>sudo apt-<span class="hljs-keyword">get</span> install libncurses5<br></code></pre></td></tr></table></figure><p>否则会出现如下错误：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">prebuilts<span class="hljs-regexp">/clang/</span>host<span class="hljs-regexp">/linux-x86/</span>clang-<span class="hljs-number">3289846</span><span class="hljs-regexp">/bin/</span>clang.real: <br>error <span class="hljs-keyword">while</span> loading shared libraries: libncurses.so.<span class="hljs-number">5</span>: <br>cannot open shared object file: No <span class="hljs-number">15</span>:<span class="hljs-number">44</span>:<span class="hljs-number">33</span> ninja failed with: <span class="hljs-keyword">exit</span> status <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>（参考<a href="https://juejin.cn/post/7204115174412894267">Android 源码 (AOSP) 下载与编译 - 掘金 (juejin.cn)</a>）</p></li><li><p><strong>安装 openjdk-8</strong></p><p>系统内置的 openjdk-11 太新了，会报错，装个官网要求的 openjdk-8 。</p><p><a href="https://mirrors.huaweicloud.com/java/jdk/">华为镜像源</a>中下载jdk，我这里下载的是 jdk-8u191-linux-x64.tar.gz。需要根据自己的虚拟机架构选择，通过以下命令可以查看虚拟机架构：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">uname</span> -m<br></code></pre></td></tr></table></figure><p>然后将其解压缩到 &#x2F;usr&#x2F;lib&#x2F;jvm 目录下（如果没有该目录就创建一下）：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>创建目录，存在该目录可忽略该命令<br>sudo mkdir <span class="hljs-regexp">/usr/</span>lib/jvm<br><span class="hljs-regexp">//</span>解压<br>tar -zxvf jdk-<span class="hljs-number">8</span>u191-linux-x64.tar.gz -C <span class="hljs-regexp">/usr/</span>lib/jvm<br></code></pre></td></tr></table></figure><p>之后要给jdk配置环境，将以下命令添加到 ~&#x2F;.zshrc中（普通用户目录下和root用户目录下尽量都添加） ：</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">export</span> JAVA_HOME=<span class="hljs-string">&quot;/usr/lib/jvm/jdk1.8.0_191&quot;</span>  <span class="hljs-comment">//你自己下载的jdk所在路径</span><br><span class="hljs-keyword">export</span> JRE_HOME=<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;JAVA_HOME&#125;</span>/jre&quot;</span>  <br><span class="hljs-keyword">export</span> CLASSPATH=<span class="hljs-string">&quot;.:<span class="hljs-subst">$&#123;JAVA_HOME&#125;</span>/lib:<span class="hljs-subst">$&#123;JRE_HOME&#125;</span>/lib&quot;</span> <br><span class="hljs-keyword">export</span> PATH=<span class="hljs-string">&quot;<span class="hljs-subst">$&#123;JAVA_HOME&#125;</span>/bin:<span class="hljs-subst">$PATH</span>&quot;</span><br></code></pre></td></tr></table></figure><p>最后使环境生效：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.zshrc<br><span class="hljs-built_in">exec</span> <span class="hljs-variable">$SHELL</span><br></code></pre></td></tr></table></figure><p>此外，如果你安装了多个版本的jdk，可以通过如下命令切换：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">sudo <span class="hljs-keyword">update</span><span class="hljs-operator">-</span>alternatives <span class="hljs-comment">--config java</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308282041983.jpg"></p><p>最前面带星号的就是当前正在使用的java版本，通过键入编号选择使用哪个版本。</p><p>（参考<a href="https://blog.csdn.net/zbj18314469395/article/details/86064849">Linux之Ubuntu18.04安装Java JDK8的三种方式_ubuntu安装jdk8_软测小生的博客-CSDN博客</a>中的第三种方法）</p></li><li><p><strong>下载 m4</strong></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo apt <span class="hljs-keyword">install</span> m4<br></code></pre></td></tr></table></figure><p>否则在编译的时候会报错，即找不到 m4 指令，如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308282040409.jpg"></p></li></ol><h3 id="增大交换空间"><a href="#增大交换空间" class="headerlink" title="增大交换空间"></a>增大交换空间</h3><p>执行如下指令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>创建一个名为 swapfile 的文件，并将文件大小设置为 <span class="hljs-number">10</span>GB<br>dd <span class="hljs-keyword">if</span>=<span class="hljs-regexp">/dev/</span>zero of=swapfile bs=<span class="hljs-number">1</span>M count=<span class="hljs-number">10240</span><br><span class="hljs-regexp">//</span>将 swapfile 格式化为交换分区，用于在物理内存不足时作为虚拟内存的扩展<br>mkswap swapfile<br><span class="hljs-regexp">//</span>启动交换空间<br>sudo swapon swapfile<br></code></pre></td></tr></table></figure><h3 id="增大内存"><a href="#增大内存" class="headerlink" title="增大内存"></a>增大内存</h3><p>我给虚拟机开了16G内存，在编译过程中，通过htop工具查看发现内存使用情况可以达到14G左右（没截图）。当然并不是要你给这么多，而是在合适的范围内尽量给虚拟机多一点内存。</p><h3 id="增大JVM虚拟机的堆内存"><a href="#增大JVM虚拟机的堆内存" class="headerlink" title="增大JVM虚拟机的堆内存"></a>增大JVM虚拟机的堆内存</h3><p>执行如下指令增大JVM的堆内存：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>增大堆内存，设置初始堆内存大小为<span class="hljs-number">512</span>MB，最大堆大小为 <span class="hljs-number">4</span>GB<br>export JAVA_TOOL_OPTIONS=<span class="hljs-string">&quot;-Xms512m -Xmx4g&quot;</span><br><span class="hljs-regexp">//</span>查看JVM的配置参数<br>java -XX:+PrintFlagsFinal -version | grep -iE <span class="hljs-string">&#x27;HeapSize|PermSize|ThreadStackSize&#x27;</span><br></code></pre></td></tr></table></figure><p>否则可能会跟我一样，在编译过程中出现如下情况：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308282040100.jpg"></p><p>不过没关系，这并不会导致你需要重头开始编译，解决玩这个问题之后，重新执行 make -jx 即可（x为线程数，与虚拟机的cpu核数一致就可以了，多了也没多余的核来处理）。</p><h2 id="开始编译AOSP"><a href="#开始编译AOSP" class="headerlink" title="开始编译AOSP"></a>开始编译AOSP</h2><p>打开终端控制台，进入到源码目录中，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> build/envsetup.sh<br></code></pre></td></tr></table></figure><p>然后在编译前执行如下命令，用于删除构建过程中生成的所有中间文件、目标文件以及生成的可执行文件等，以便重新开始编译：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">make clobber<br></code></pre></td></tr></table></figure><p>在这之后，执行如下命令，然后选择你所需要编译的版本（版本可详细参考<a href="https://source.android.google.cn/docs/setup/build/running?hl=zh-cn#selecting-device-build">刷写设备  | Android 开源项目  | Android Open Source Project (google.cn)</a>）：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">lunch</span><br></code></pre></td></tr></table></figure><p>最后开始编译：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-built_in">make</span> -j4<br></code></pre></td></tr></table></figure><p>当然，在100%的时候，他会执行 &#x2F;device&#x2F;generic&#x2F;goldfish&#x2F;tools&#x2F;目录下的 mk_combined_img.py 文件，然后会报如下错误：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308282040940.jpg"></p><p>显然是由于使用python3编译python2导致的，所以也很容易解决。首先确定你下载了python2，其次修改 mk_combined_img.py 文件中的首行，将<code>#!/usr/bin/python</code> 改成 <code>#!/usr/bin/python2</code>。</p><p>（参考<a href="https://cloud.tencent.com/developer/ask/sof/1023220">&#x2F;device&#x2F;generic&#x2F;goldfish&#x2F;tools&#x2F;mk_combined_img.py”，第48行打印”‘%s‘无法转换为整数“% lin[2]-腾讯云开发者社区-腾讯云 (tencent.com)</a>）</p><p>如果幸运的话，应该就可以得到如下结果，这意味着我们编译成功了！</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308282040907.jpg"></p><p>可在 &#x2F;out&#x2F;target&#x2F;product&#x2F;generic_x86_64 目录下查看到编译出的 img 文件（generic_x86_64 是我选择的编译版本）。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308282039742.jpg"></p><hr><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/68918808">死磕Android_AOSP编译过程 - 知乎 (zhihu.com)</a></p><p><a href="https://www.anquanke.com/post/id/199898#h3-6">2020年安卓源码编译指南及FART脱壳机谷歌全设备镜像发布-安全客 - 安全资讯平台 (anquanke.com)</a></p><p><a href="https://juejin.cn/post/7204115174412894267">Android 源码 (AOSP) 下载与编译 - 掘金 (juejin.cn)</a></p><p><a href="https://mirrors.ustc.edu.cn/help/aosp.html">AOSP 镜像使用帮助 — USTC Mirror Help 文档</a></p><p><a href="https://blog.csdn.net/zbj18314469395/article/details/86064849">Linux之Ubuntu18.04安装Java JDK8的三种方式_ubuntu安装jdk8_软测小生的博客-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Reverse</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>AOSP</tag>
      
      <tag>环境配置</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Frida开发环境搭建</title>
    <link href="/2023/08/24/Frida%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <url>/2023/08/24/Frida%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="pyenv环境配置"><a href="#pyenv环境配置" class="headerlink" title="pyenv环境配置"></a>pyenv环境配置</h1><p>科学上网：<a href="https://github.com/pyenv/pyenv">pyenv&#x2F;pyenv: Simple Python version management (github.com)</a></p><p>直连：<a href="https://gitee.com/jordanxu/pyenv-installer">pyenv-installer: pyenv(gitee的地址)</a></p><p>首先下载依赖包（参考：<a href="https://github.com/pyenv/pyenv/wiki/Common-build-problems">Common build problems · pyenv&#x2F;pyenv Wiki (github.com)</a>）：</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs q">sudo apt install libedit-<span class="hljs-built_in">dev</span><br>或者<br>apt-<span class="hljs-built_in">get</span> install -y make build-essential libssl-<span class="hljs-built_in">dev</span> zlib1g-<span class="hljs-built_in">dev</span> libbz2-<span class="hljs-built_in">dev</span> libreadline-<span class="hljs-built_in">dev</span> libsqlite3-<span class="hljs-built_in">dev</span> wget curl llvm libncurses5-<span class="hljs-built_in">dev</span> libncursesw5-<span class="hljs-built_in">dev</span> xz-utils tk-<span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure><p>在这之前，可能需要更新<code>apt-get</code>。</p><p>之后下载<code>pyenv</code>：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">curl -L https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/yyuu/</span>pyenv-installer<span class="hljs-regexp">/master/</span>bin/pyenv-installer | bash <br></code></pre></td></tr></table></figure><p>因为<code>raw.githubusercontent.com</code>域名被污染的原因，需要我们修改<code>/etc</code>下的<code>hosts</code>文件，指定域名跟ip的映射（ip通过<a href="https://www.ipaddress.com/">ipaddress.com</a>查询）：</p><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs accesslog"><span class="hljs-number">185.199.108.133</span> raw.githubusercontent.com//多加几条也没关系<br></code></pre></td></tr></table></figure><p>为了加快访问外网的速度，需要修改<code>/etc</code>下的<code>proxychains.conf</code>文件（我这里是<code>proxychains4.conf</code>），禁掉第一行，添加第二行（ip为宿主机ip，端口是宿主机开启的代理端口）</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment">#socks4 127.0.0.1 9050</span><br><span class="hljs-attribute">socks5</span>  ip port<br></code></pre></td></tr></table></figure><p>这样就将流量代理到宿主机上，从而实现虚拟机依靠宿主机的翻墙软件达到翻墙目的。</p><p>安装结束后，提示我们缺少<code>pyenv</code>的加载路径，如图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308241940810.jpg"></p><blockquote><p> 即我们需要将以下命令添加到<code>/root</code>下的<code>.bash_profile</code>文件中，如果没有该文件，则添加到<code>.profile</code>文件和<code>.bashrc</code>文件中。</p> <figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">PYENV_ROOT</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.pyenv&quot;</span><br>command -v pyenv &gt;/dev/<span class="hljs-literal">null</span> || <span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;<span class="hljs-variable">$PYENV_ROOT</span>/bin:<span class="hljs-variable">$PATH</span>&quot;</span><br>eval <span class="hljs-string">&quot;<span class="hljs-variable">$(pyenv init -)</span>&quot;</span><br></code></pre></td></tr></table></figure><p> 同时还需要将下面的命令添加到<code>.bashrc</code>文件中。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(pyenv virtualenv-init -)</span>&quot;</span><br></code></pre></td></tr></table></figure><p> 之后重新启动shell窗口，说是执行</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">source</span> ~/.bashrc<br></code></pre></td></tr></table></figure><p> 如果你这样做了，就会遇到很多麻烦，比如执行<code>source ~/.bashrc</code>时<code>找不到命令 “shopt”</code>，这个好说，可以执行以下指令解决：</p> <figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mel"><span class="hljs-keyword">exec</span> bash<span class="hljs-comment">//将命令行从zsh切换为bash</span><br><span class="hljs-keyword">source</span> ~/.bashrc<br><span class="hljs-keyword">exec</span> zsh<span class="hljs-comment">//重新运行zsh命令行工具</span><br></code></pre></td></tr></table></figure><p> 而且新开的shell窗口并不能识别<code>pyenv</code>指令，而且除pyenv所在用户以外的其他用户不能使用pyenv指令</p><p> 简而言之，不要按照提示来操作！！！</p></blockquote><p>正确的操作是，将以下指令写入root目录和<code>home/kali</code>目录下（kali是我的虚拟机的用户名）的<code>.zshrc</code>文件中：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> PYENV_ROOT=<span class="hljs-string">&quot;/home/kali/.pyenv&quot;</span>//pyenv的安装路径<br><span class="hljs-built_in">command</span> -v pyenv &gt;/dev/null || <span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$PYENV_ROOT</span>/bin:<span class="hljs-variable">$PATH</span>&quot;</span><br><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(pyenv init -)</span>&quot;</span><br><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(pyenv virtualenv-init -)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>分别对各自用户目录下的<code>.zshrc</code>文件执行<code>source /.zshrc</code>命令。最后执行<code>exec $SHELL</code>。这样随便启动shell窗口都可以识别<code>pyenv</code>指令。</p><p>（虽然写的这么简洁，但是费了好长时间才解决的，惨痛的教训）</p><p>然后是<code>pyenv</code>的基本用法：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">pyenv</span> install --list//查询目前所有的python版本<br><span class="hljs-attribute">pyenv</span> install <span class="hljs-number">2</span>.<span class="hljs-number">7</span>.//查询所有<span class="hljs-number">2</span>.<span class="hljs-number">7</span>.x版本<br><span class="hljs-attribute">pyenv</span> install <span class="hljs-number">2</span>.<span class="hljs-number">7</span>.<span class="hljs-number">10</span>//安装<span class="hljs-number">2</span>.<span class="hljs-number">7</span>.<span class="hljs-number">10</span>版本的python<br><span class="hljs-attribute">pyenv</span> uninstall <span class="hljs-number">2</span>.<span class="hljs-number">7</span>.<span class="hljs-number">10</span>//卸载<span class="hljs-number">2</span>.<span class="hljs-number">7</span>.<span class="hljs-number">10</span>版本的python<br><span class="hljs-attribute">pyenv</span> versions//查看当前系统中包含的Python版本<br><span class="hljs-attribute">pyenv</span> local <span class="hljs-number">2</span>.<span class="hljs-number">7</span>.<span class="hljs-number">10</span>//切换为pyenv中的python版本<br><span class="hljs-attribute">pyenv</span> local system //切换为系统的python<br></code></pre></td></tr></table></figure><p>下载时需要更改<code>/etc/proxychain4.conf</code>配置，注释掉<code>proxy_dns</code>。</p><h1 id="frida环境配置"><a href="#frida环境配置" class="headerlink" title="frida环境配置"></a>frida环境配置</h1><p>首先是给我们的虚拟机配置frida环境。选定好pyenv中的python版本后，执行如下指令来安装<code>frida</code>和<code>frida-tools</code>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install frida<br>pip install frida-tools<br></code></pre></td></tr></table></figure><p>建议使用<code>proxychain</code>代理。</p><p>安装完成后，在终端中输入frida-ps命令查看，如果能显示当前系统进程则证明安装成功</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308241940538.jpg"></p><p>然后是给我们的手机配置frida环境。在<a href="https://github.com/frida/frida/releases">Releases · frida&#x2F;frida (github.com)</a>中下载<code>frida-server</code>。需要注意版本！比如我的虚拟机下载的<code>frida</code>版本是<code>16.1.3</code>，Android手机是arm64架构，则应该下载<code>frida-server-16.1.3-android-arm64.xz </code>文件。</p><p>查看手机cpu架构的指令如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">./adb shell getprop ro<span class="hljs-selector-class">.product</span><span class="hljs-selector-class">.cpu</span>.abi<br></code></pre></td></tr></table></figure><p>下载后解压，可以将得到的文件重命名为frida-server，通过<code>adb push</code>传入手机里：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./adb push frida-server /data/local/tmp/<br></code></pre></td></tr></table></figure><p>执行<code>frida-server</code>使用如下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">./adb shell<br>su<br><span class="hljs-built_in">cd</span> /data/local/tmp/<br><span class="hljs-built_in">chmod</span> 777 frida-server<br>./frida-server<br></code></pre></td></tr></table></figure><p>正常启动后，另开一个终端，使用<code>frida-ps -U</code>命令检查<code>frida</code>是否正常运行，如果正常运行则会列出Android设备上当前正在运行的进程。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308241939948.jpg"></p><p>然后是<code>frida</code>的其他命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>修改启动端口并启动frida-server<br>./frida-server -l <span class="hljs-number">0.0</span>.<span class="hljs-number">0.0</span>:<span class="hljs-number">9999</span><br><span class="hljs-regexp">//</span>电脑端通过网络连接手机端的frida-server<br>frida-ps -H 手机ip:端口 （手机ip可在adb shell中使用ifconfig | grep <span class="hljs-string">&quot;inet addr&quot;</span>）<br><span class="hljs-regexp">//</span>电脑端通过USB连接手机端的frida-server<br>frida-ps -U<br><span class="hljs-regexp">//</span>-f 参数用于指定要运行的目标应用程序。这里是启动设置程序<br>frida -H 手机ip:端口 -f com.android.settings<br></code></pre></td></tr></table></figure><h1 id="objection配置"><a href="#objection配置" class="headerlink" title="objection配置"></a>objection配置</h1><p>执行如下指令代理下载<code>objection</code>：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">proxychains pip <span class="hljs-keyword">install</span> objection<br></code></pre></td></tr></table></figure><p>然后在使用的时候，会出错：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">ModuleNotFoundError:</span> No <span class="hljs-keyword">module</span> named <span class="hljs-comment">&#x27;_lzma&#x27;</span><br></code></pre></td></tr></table></figure><p>这时候需要安装相应的依赖：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-comment"># centos系统执行</span><br>yum <span class="hljs-keyword">install </span>xz-devel -y<br>yum <span class="hljs-keyword">install </span>python-<span class="hljs-keyword">backports-lzma </span>-y<br><br><span class="hljs-comment"># Debian/ubuntu系统执行</span><br>apt-get <span class="hljs-keyword">install </span>liblzma-dev -y<br></code></pre></td></tr></table></figure><p>执行完后需要重新编译安装python环境，也就是卸载重装python。</p><p>（参考<a href="https://zhuanlan.zhihu.com/p/404162713">ModuleNotFoundError: No module named ‘_lzma’ - 知乎 (zhihu.com)</a>）</p><p>使用<code>objection</code>来连接<code>frida-server</code>，成功的情况如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308241939395.jpg"></p><h1 id="frida脚本编写的环境配置"><a href="#frida脚本编写的环境配置" class="headerlink" title="frida脚本编写的环境配置"></a>frida脚本编写的环境配置</h1><p>下载vscode安装包，参考：<a href="https://blog.csdn.net/feinifi/article/details/127697851">vscode官方下载太慢解决办法_vscodeusersetup-x64-1.79.2.exe_luffy5459的博客-CSDN博客</a></p><p>下载完后，进入到所在目录，执行如下指令安装vscode：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">dpkg</span> -i code_1.<span class="hljs-number">81</span>.<span class="hljs-number">1</span>-<span class="hljs-number">1691620686</span>_amd64.deb<br></code></pre></td></tr></table></figure><p>之后代理下载<code>frida-agent-example</code>：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">proxychain git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/oleavr/</span>frida-agent-example<br></code></pre></td></tr></table></figure><p>如果文件图标加锁了，就需要修改权限：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">chmod</span> -R <span class="hljs-number">777</span> frida-agent-example<br></code></pre></td></tr></table></figure><p>为了获取代码提示，下载Node.js：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -<br>sudo apt-get install -y nodejs<br></code></pre></td></tr></table></figure><p>（不过下不了版本10.x的，直接给下最新的了）</p><p>然后是到<code>frida-agent-example</code>目录下执行<code>npm install</code>，可惜报错：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs awk">Error: compilation failed<br>    at Module.build (file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/home/</span>kali<span class="hljs-regexp">/%E6%A1%8C%E9%9D%A2/</span>frida-agent-example<span class="hljs-regexp">/node_modules/</span>frida-compile<span class="hljs-regexp">/dist/</span>compiler.js:<span class="hljs-number">35</span>:<span class="hljs-number">15</span>)                          <br>    at main (file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/home/</span>kali<span class="hljs-regexp">/%E6%A1%8C%E9%9D%A2/</span>frida-agent-example<span class="hljs-regexp">/node_modules/</span>frida-compile<span class="hljs-regexp">/dist/</span>cli.js:<span class="hljs-number">37</span>:<span class="hljs-number">39</span>)<br>    at file:<span class="hljs-regexp">//</span><span class="hljs-regexp">/home/</span>kali<span class="hljs-regexp">/%E6%A1%8C%E9%9D%A2/</span>frida-agent-example<span class="hljs-regexp">/node_modules/</span>frida-compile<span class="hljs-regexp">/dist/</span>cli.js:<span class="hljs-number">56</span>:<span class="hljs-number">1</span><br>    at ModuleJob.run (node:internal<span class="hljs-regexp">/modules/</span>esm/module_job:<span class="hljs-number">194</span>:<span class="hljs-number">25</span>)<br>npm ERR! code <span class="hljs-number">1</span><br>npm ERR! path <span class="hljs-regexp">/home/</span>kali<span class="hljs-regexp">/桌面/</span>frida-agent-example<br>npm ERR! command failed<br>npm ERR! command sh -c npm run build<br></code></pre></td></tr></table></figure><p>但是在vscode中仍然可以有代码提示！！！</p><p>环境配置好了。接下来就写个脚本试一试。</p><p>使用vscode打开<code>frida-agent-example</code>目录下的<code>agent</code>目录，创建一个js脚本，代码如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"># <span class="hljs-attr">filename</span>: ts1.<span class="hljs-property">js</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-title class_">Java</span>.<span class="hljs-title function_">perform</span>(<span class="hljs-keyword">function</span>  <span class="hljs-title function_">x</span>(<span class="hljs-params"></span>)&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;nihao123&quot;</span>)<br>    &#125;)<br>&#125;<br><span class="hljs-title function_">setImmediate</span>(main)<br></code></pre></td></tr></table></figure><p>然后在vscode中开启Terminal，执行指令</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">frida -H <span class="hljs-number">192.168</span>.<span class="hljs-number">0.101</span>:<span class="hljs-number">9999</span> -f com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.settings</span> -l ts1<span class="hljs-selector-class">.js</span> <span class="hljs-attr">--no-pause</span><br></code></pre></td></tr></table></figure><p>可是报错：</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">frida: <span class="hljs-keyword">error</span>: unrecognized arguments: --<span class="hljs-keyword">no</span>-<span class="hljs-keyword">pause</span><br></code></pre></td></tr></table></figure><p>去掉<code>--no-pause</code>就可以执行了(原因参考<a href="https://github.com/frida/frida/issues/2277">frida: error: unrecognized arguments: –no-pause · Issue #2277 · frida&#x2F;frida (github.com)</a>)</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308241939143.jpg"></p><p>（这可不是我加上去的）</p><p>接下来就利用python的firda库尝试批量化处理。（python的firda没有代码提示！！），创建一个python脚本，代码如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># filename: loader.py</span><br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> frida<br><br>device = frida.get_device_manager().add_remote_device(<span class="hljs-string">&quot;192.168.0.101:9999&quot;</span>)<br>pid = device.spawn([<span class="hljs-string">&#x27;com.android.settings&#x27;</span>])<br>device.resume(pid)<br>session = device.attach(pid)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;ts1.js&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    script = session.create_script(f.read())<br>script.load()<br>imput()<br></code></pre></td></tr></table></figure><p>在控制台中输入<code>python loader.py</code>，成功了！</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308241939153.jpg"></p><p>如果没有成功，则可能是<code>pyenv</code>环境没有配置对。</p>]]></content>
    
    
    <categories>
      
      <category>Reverse</category>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>环境配置</tag>
      
      <tag>Frida</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android开发学习笔记(八) —— 探究ContentProvider</title>
    <link href="/2023/08/12/Android%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%85%AB)%20%E2%80%94%E2%80%94%20%E6%8E%A2%E7%A9%B6ContentProvider/"/>
    <url>/2023/08/12/Android%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%85%AB)%20%E2%80%94%E2%80%94%20%E6%8E%A2%E7%A9%B6ContentProvider/</url>
    
    <content type="html"><![CDATA[<h1 id="一、什么是ContentProvider"><a href="#一、什么是ContentProvider" class="headerlink" title="一、什么是ContentProvider"></a>一、什么是ContentProvider</h1><h2 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h2><p>内容提供器(Content Provider)是Android四大组件之一，主要用于在不同的应用程序之间实现数据共享的功能，它提供了一套完整的机制，允许一个程序访问另一个程序中的数据，同时还能保证被访数据的安全性。使用时需要在<code>AndroidManifest..xml</code>文件中进行声明。</p><p>不同于文件存储和SharedPreferences存储中的两种全局可读写操作模式，内容提供器可以选择只对哪一部分数据进行共享，从而保证我们程序中的隐私数据不会有泄漏的风险。</p><p>不过在正式开始学习内容提供器之前，我们需要先掌握另外一个非常重要的知识Android运行时权限，因为待会的内容提供器示例中会使用到运行时权限的功能。</p><h1 id="二、运行时权限"><a href="#二、运行时权限" class="headerlink" title="二、运行时权限"></a>二、运行时权限</h1><h3 id="2-1-Android权限机制详解"><a href="#2-1-Android权限机制详解" class="headerlink" title="2.1 Android权限机制详解"></a>2.1 Android权限机制详解</h3><p>在之前的学习过程中，我们接触过一些权限。例如，BroadcastTest项目的时候第一次接触了Android权限相关的内容，当时为了要访问系统的网络状态以及监听开机广播，于是在<code>AndroidManifest..xml</code>文件中添加了这样两句权限声明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">manifest</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">package</span>=<span class="hljs-string">&quot;com.example.broadcasttest&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.ACCESS NETWORK STATE&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.RECEIVE BOOT COMPLETED&quot;</span>/&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br></code></pre></td></tr></table></figure><p>因为访问系统的网络状态以及监听开机广播涉及了用户设备的安全性，因此必须在<code>AndroidManifest.xml</code>中加入权限声明，否则我们的程序就会崩溃。</p><p>那么现在问题来了，加入了这两句权限声明后，对于用户来说到底有什么影响呢？为什么这样就可以保护用户设备的安全性了呢？其实用户主要在以下两个方面得到了保护，一方面，用户在安装程序的时候会在安装界面显示应用所需要的权限；另一方面，用户可以随时在应用程序管理界面查看任意一个程序的权限申请情况，以保证应用程序不会出现各种滥用权限的情况。</p><p>然而大多数应用存在滥用权限的情况，不管到底用不用得到，反正先把权限申请了再说。Android开发团队当然也意识到了这个问题，于是在6.0系统中加入了运行时权限功能。也就是说，用户不需要在安装软件的时候一次性授权所有申请的权限，而是可以在软件的使用过程中再对某一项权限申请进行授权。比如说一款相机应用在运行时申请了地理位置定位权限，就算我拒绝了这个权限，但是我应该仍然可以使用这个应用的其他功能，而不是像之前那样直接无法安装它。</p><p>当然，并不是所有权限都需要在运行时申请，对于用户来说，不停地授权也很烦琐。Android现在将所有的权限归成了两类，一类是普通权限，一类是危险权限。普通权限指的是那些不会直接威胁到用户的安全和隐私的权限，对于这部分权限申请，系统会自动帮我们进行授权，而不需要用户再去手动操作了，比如在BroadcastTest项目中申请的两个权限就是普通权限。危险权限则表示那些可能会触及用户隐私，或者对设备安全性造成影响的权限，如获取设备联系人信息、定位设备的地理位置等，对于这部分权限申请，必须要由用户手动点击授权才可以，否则程序就无法使用相应的功能。</p><p>但是Android中有一共有上百种权限，我们怎么从中区分哪些是普通权限，哪些是危险权限呢？其实并没有那么难，因为危险权限总共就那么几个，除了危险权限之外，剩余的就都是普通权限了。下表列出了Android中所有的危险权限，一共是9组24个权限。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308131927870.png"></p><p>我们并不需要记住这些权限，只要把它当成一个参照表来查阅就行了。每当要使用一个权限时，可以先到这张表中来查一下，如果是属于这张表中的权限，那么就需要进行运行时权限处理，如果不在这张表中，那么只需要在<code>AndroidManifest.xml</code>文件中添加一下权限声明就可以了。另外注意一下，表格中每个危险权限都属于一个权限组，我们在进行运行时权限处理时使用的是权限名，但是用户一旦同意授权了，那么该权限所对应的权限组中所有的其他权限也会同时被授权。</p><p>Android系统中完整的权限列表可以访问<a href="http://developer..android.com/reference/android/.Manifest.permission.html">http:&#x2F;developer..android.com&#x2F;reference&#x2F;android&#x2F;.Manifest.permission.html</a>。</p><h3 id="2-2-在程序运行时申请权限"><a href="#2-2-在程序运行时申请权限" class="headerlink" title="2.2 在程序运行时申请权限"></a>2.2 在程序运行时申请权限</h3><p>我们通过一个例子来学习运行时权限的使用方法。假设应用在运行时需要申请CALL_PHONE这个权限，这里我们就用一个按钮来触发权限申请，所以修改<code>activity_main.xml</code>布局文件如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span></span><br><span class="hljs-tag">       <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;申请权限&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">android:onClick</span>=<span class="hljs-string">&quot;ClicktoAccess&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对应的MainActivity代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>   ......<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ClicktoAccess</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(Intent.ACTION_CALL);<br>            intent.setData(Uri.parse(<span class="hljs-string">&quot;tel:10086&quot;</span>));<br>            startActivity(intent);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ClicktoAccess()</code>方法为按钮的点击方法，在该方法中，我们构建了一个隐式Intent，Intent的action指定为<code>Intent.ACTION_CALL</code>，这是一个系统内置的打电话的动作，data部分指定了协议是tel，号码是10086。另外为了防止程序崩溃，我们将所有操作都放在了异常捕获代码块当中。</p><blockquote><p><code>Intent.ACTION_CALL</code>与<code>Intent.ACTION_DIAL</code>不同，<code>Intent.ACTION_DIAL</code>表示打开拨号界面，这个是不需要声明权限的，而<code>Intent.ACTION_CALL</code>则可以直接拨打电话，因此必须声明权限。</p></blockquote><p>接下来就是在<code>AndroidManifest.xml</code>文件中声明该权限：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">manifest</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.CALL_PHONE&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">application</span></span><br><span class="hljs-tag">       <span class="hljs-attr">...</span></span><br><span class="hljs-tag">    &lt;/<span class="hljs-attr">application</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这样我们就将拨打电话的功能成功实现了，并且在低于Android6.0系统的手机上都是可以正常运行的，但是如果我们在6.0或者更高版本系统的手机上运行，点击Make Call按钮就没有任何效果，这时观察logcat中的打印日志，你会看到如下警告信息。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.SecurityException</span>: Permission Denial: starting Intent &#123; act=android<span class="hljs-selector-class">.intent</span><span class="hljs-selector-class">.action</span><span class="hljs-selector-class">.CALL</span>...<br></code></pre></td></tr></table></figure><p>警告信息中提醒我们<code>Permission Denial</code>，很明显，是由于权限被禁止所导致的，因为6.0及以上系统在使用危险权限时都必须进行运行时权限处理。</p><p>那么下面我们就来尝试修复这个问题，修改MainActivity中的代码，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ClicktoAccess</span><span class="hljs-params">(View view)</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (ContextCompat.checkSelfPermission(MainActivity.<span class="hljs-built_in">this</span>, android.Manifest.permission.CALL_PHONE)<br>            != PackageManager.PERMISSION_GRANTED)&#123;<br>            ActivityCompat.requestPermissions(MainActivity.<span class="hljs-built_in">this</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;android.Manifest.permission.CALL_PHONE&#125;,<span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            call();<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">call</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(Intent.ACTION_CALL);<br>            intent.setData(Uri.parse(<span class="hljs-string">&quot;tel:10086&quot;</span>));<br>            startActivity(intent);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onRequestPermissionsResult</span><span class="hljs-params">(<span class="hljs-type">int</span> requestCode, <span class="hljs-meta">@NonNull</span> String[] permissions, <span class="hljs-meta">@NonNull</span> <span class="hljs-type">int</span>[] grantResults)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);<br>        <span class="hljs-keyword">switch</span> (requestCode) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">if</span> (grantResults.length &gt; <span class="hljs-number">0</span> &amp;&amp; grantResults[<span class="hljs-number">0</span>] == PackageManager.PERMISSION_GRANTED)&#123;<br>                    call();<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    Toast.makeText(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;你拒绝了此权限申请&quot;</span>, Toast.LENGTH_SHORT).show();<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>说白了，运行时权限的核心就是在程序运行过程中由用户授权去执行某些危险操作，程序是不可以擅自做主去执行这些危险操作的。</p><p>上面的代码将运行时权限的完整流程都覆盖了，具体如下所示：</p><ol><li>首先通过<code>ContextCompat.checkSelfPermission()</code>方法判断用户是不是已经给过授权，该方法参数如下：<ul><li>第一个参数是Context</li><li>第二个参数是具体的权限名，比如打电话的权限名就是<code>android.Manifest.permission.CALL_PHONE</code>。</li></ul></li><li>然后将<code>ContextCompat.checkSelfPermission()</code>方法的返回值和<code>PackageManager.PERMISSION_GRANTED</code>做比较，相等就说明用户已经授权，不等就表示用户没有授权。<ul><li>如果已经授权的话就简单了，直接去执行拨打电话的逻辑操作就可以了，这里我们把拨打电话的逻辑封装到了<code>call()</code>方法中。</li><li>如果没有授权的话，则需要调用<code>ActivityCompat.requestPermissions()</code>方法来向用户申请授权，该方法方法接收3个参数：<ul><li>第一个参数要求是Activity的实例</li><li>第二个参数是一个String数组，我们把要申请的权限名放在数组中即可</li><li>第三个参数是请求码，只要是唯一值就可以了。</li></ul></li></ul></li><li>调用完了<code>requestPermissions()</code>方法之后，系统会弹出一个权限申请的对话框，然后用户可以选择同意或拒绝权限申请，不论是哪种结果，最终都会回调到<code>onRequestPermissionsResult()</code>方法中，而授权的结果则会封装在<code>grantResults</code>参数当中。这里我们只需要判断一下最后的授权结果，如果用户同意的话就调用<code>call()</code>方法来拨打电话，如果用户拒绝的话我们只能放弃操作，并且弹出一条失败提示。</li></ol><p>现在重新运行一下程序，并点击按钮，会出现权限申请的弹窗，用户可以选择同意或拒绝。如果选择拒绝，则会弹出提示，下次再点击按钮仍会出现权限申请弹窗。如果选择同意，则会跳转到拨打电话界面，并且拨打了10086，并且由于用户已经完成了授权操作，之后再点击按钮就不会再弹出权限申请对话框了，而是直接拨打电话（想要需要授权可以在应用管理中进行权限关闭）。</p><h1 id="三、访问其他程序中的数据"><a href="#三、访问其他程序中的数据" class="headerlink" title="三、访问其他程序中的数据"></a>三、访问其他程序中的数据</h1><p>内容提供器的用法一般有两种，一种是使用现有的内容提供器来读取和操作相应程序中的数据，另一种是创建自己的内容提供器给我们程序的数据提供外部访问接口。</p><p>如果一个应用程序通过内容提供器对其数据提供了外部访问接口，那么任何其他的应用程序就都可以对这部分数据进行访问。Android系统中自带的电话簿、短信、媒体库等程序都提供了类似的访问接口，这使得第三方应用程序可以充分地利用这部分数据来实现更好的功能。</p><h2 id="3-1-contentResolver的基本用法"><a href="#3-1-contentResolver的基本用法" class="headerlink" title="3.1 contentResolver的基本用法"></a>3.1 contentResolver的基本用法</h2><p>对于每一个应用程序来说，如果想要访问内容提供器中共享的数据，就一定要借助<code>ContentResolver</code>类，可以通过<code>Context</code>中的<code>getContentResolver()</code>方法获取到该类的实例。<code>ContentResolver</code>中提供了一系列的方法用于对数据进行增删改查（CRUD）操作，其中<code>insert()</code>方法用于添加数据，<code>update()</code>方法用于更新数据，<code>delete()</code>方法用于删除数据，<code>query()</code>方法用于查询数据。</p><p>与SQLiteDatabase不同，ContentResolver中的增删改查方法都是不接收表名参数的，而是使用一个Uri参数代替，这个参数被称为<strong>内容URI</strong>。内容URI给内容提供器中的数据建立了唯一标识符，它主要由两部分组成：**<code>authority</code><strong>和</strong><code>path</code>**。<code>authority</code>是用于对不同的应用程序做区分的，一般为了避免冲突，都会采用程序包名的方式来进行命名，比如某个程序的包名是<code>com.example.app</code>，那么该程序对应的<code>authority</code>就可以命名为<code>com.example.app.provider</code>。<code>path</code>则是用于对同一应用程序中不同的表做区分的，通常都会添加到<code>authority</code>的后面。比如某个程序的数据库里存在两张表：table1和table2，这时就可以将<code>path</code>分别命名为<code>/table1</code>和<code>/table2</code>，然后把<code>authority</code>和<code>path</code>进行组合，内容URI就变成了<code>com.example.app.provider/table1</code>和<code>com.example.app.provider/table2</code>。不过，目前还很难辨认出这两个字符串就是两个内容URI，我们还需要在字符串的头部加上协议声明。因此，内容URI 最标准的格式写法如下：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">content:</span>//<span class="hljs-keyword">com</span>.example.app.provider/tablel<br><span class="hljs-symbol">content:</span>//<span class="hljs-keyword">com</span>.example.app.provider/table2<br></code></pre></td></tr></table></figure><p>内容URI可以非常清楚地表达出我们想要访问哪个程序中哪张表里的数据。也正是因此，ContentResolver中的增删改查方法才都接收Uri对象作为参数，因为如果使用表名的话，系统将无法得知我们期望访问的是哪个应用程序里的表。</p><p>在得到了内容URI字符串之后，我们还需要将它解析成 Uri 对象才可以作为参数传人。解析的方法也相当简单，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Uri</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> Uri.parse(<span class="hljs-string">&quot;content://com.example.app.provider/table1&quot;</span>)<br></code></pre></td></tr></table></figure><p>只需要调用<code>Uri.parse()</code>方法，就可以将内容URI字符串解析成Uri对象了。</p><p>接下来就是增删改查操作了，这部分与SQLiteDatabase的操作大同小异，只不过是多了一个uri。</p><h3 id="3-1-1-查询"><a href="#3-1-1-查询" class="headerlink" title="3.1.1 查询"></a>3.1.1 查询</h3><p>示例代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Cursor</span> <span class="hljs-variable">cursor</span> <span class="hljs-operator">=</span> getContentResolver().query(<br>    uri,<br>    projection,<br>    selection,<br>    selectionArgs,<br>    sortorder);<br></code></pre></td></tr></table></figure><p>这些参数可以与SQLiteDatabase中<code>query()</code>方法的参数进行类比，以便我们更容易理解。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308131928561.jpg"></p><p>查询完成后返回的仍然是一个Cursor对象，这时我们就可以将数据从Cursor对象中逐个读取出来了。读取的思路仍然是通过移动游标的位置来遍历Cursor的所有行，然后再取出每一行中相应列的数据，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(cursor != <span class="hljs-literal">null</span>)&#123;<br>    <span class="hljs-keyword">while</span> (cursor.moveToNext())&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">column1</span> <span class="hljs-operator">=</span> cursor.getstring(cursor.getColumnIndex(<span class="hljs-string">&quot;column1&quot;</span>));<br>        <span class="hljs-type">int</span> <span class="hljs-variable">column2</span> <span class="hljs-operator">=</span> cursor.getInt(cursor.getColumnIndex(<span class="hljs-string">&quot;column2&quot;</span>));<br>    &#125;<br>     cursor.close();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-1-2-添加"><a href="#3-1-2-添加" class="headerlink" title="3.1.2 添加"></a>3.1.2 添加</h3><p>示例代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ContentValues</span> <span class="hljs-variable">values</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContentValues</span>();<br>values.put(<span class="hljs-string">&quot;columnl&quot;</span>,<span class="hljs-string">&quot;text&quot;</span>);<br>values.put(<span class="hljs-string">&quot;column2&quot;</span>,<span class="hljs-number">1</span>);<br>getContentResolver().insert(uri,values);<br></code></pre></td></tr></table></figure><p>与SQLiteDatabase的操作相似，仍然是将待添加的数据组装到ContentValues中，然后调用ContentResolver的<code>insert()</code>方法，将Uri和ContentValues作为参数传入即可。</p><h3 id="3-1-3-更新"><a href="#3-1-3-更新" class="headerlink" title="3.1.3 更新"></a>3.1.3 更新</h3><p>示例代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ContentValues</span> <span class="hljs-variable">values</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContentValues</span>();<br>values.put(<span class="hljs-string">&quot;column1&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)<br>getContentResolver().update(uri,values,<span class="hljs-string">&quot;column1 = ? and column2 = ?&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;text&quot;</span>,<span class="hljs-string">&quot;1&quot;</span>&#125;);<br></code></pre></td></tr></table></figure><p>上述代码通过selection和selectionArgs参数来指定符合条件的数据进行更新。</p><h3 id="3-1-4-删除"><a href="#3-1-4-删除" class="headerlink" title="3.1.4 删除"></a>3.1.4 删除</h3><p>调用ContentResolver的delete()方法将这条数据删除掉，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">getContentResolver().delete(uri,<span class="hljs-string">&quot;column2 = ?&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;1&quot;</span>&#125;);<br></code></pre></td></tr></table></figure><p>到这里为止，我们就把ContentResolver中的增删改查方法全部学完了。因为这些知识在学习SQLiteDatabase的时候就已经学习过了，所需特别注意的就只有uri这个参数而已。所以接下来直接进行实操演练一下。</p><h2 id="3-2-实操-—-读取通讯录的联系人"><a href="#3-2-实操-—-读取通讯录的联系人" class="headerlink" title="3.2 实操 — 读取通讯录的联系人"></a>3.2 实操 — 读取通讯录的联系人</h2><p>为了方便展示联系人信息，使用<code>ListView</code>控件，同时为了省略无关代码，使用项目给定的item，这样我们就不用构建Adapter类。因此，修改<code>activity_main.xml</code>中的代码，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">ListView</span></span><br><span class="hljs-tag">       <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/contacts_view&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span>&gt;</span><br><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">ListView</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后是MainActivity代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br>    <span class="hljs-comment">//ListView的适配器</span><br>    <span class="hljs-keyword">private</span> ArrayAdapter&lt;String&gt; adapter;<br>    <span class="hljs-comment">//存放获取到的联系人信息</span><br>    List&lt;String&gt; contactList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        initListView();<br>        PermissionCheck();<br>    &#125;<br>    <span class="hljs-comment">//获取ListView并绑定适配器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initListView</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">ListView</span> <span class="hljs-variable">contactView</span> <span class="hljs-operator">=</span> findViewById(R.id.contacts_view);<br>        <span class="hljs-comment">//使用自带的item</span><br>        adapter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayAdapter</span>&lt;String&gt;(<span class="hljs-built_in">this</span>, android.R.layout.simple_list_item_1,contactList);<br>        contactView.setAdapter(adapter);<br>    &#125;<br>    <span class="hljs-comment">//检查权限是否已被授权</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">PermissionCheck</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">if</span> (ContextCompat.checkSelfPermission(MainActivity.<span class="hljs-built_in">this</span>, android.Manifest.permission.READ_CONTACTS)<br>                != PackageManager.PERMISSION_GRANTED)&#123;<br>            <span class="hljs-comment">//未授权则弹窗申请授权</span><br>            ActivityCompat.requestPermissions(MainActivity.<span class="hljs-built_in">this</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;android.Manifest.permission.READ_CONTACTS&#125;,<span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//已授权则读取联系人</span><br>            readContacts();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//读取通讯录的联系人信息</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readContacts</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Cursor</span> <span class="hljs-variable">cursor</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            cursor = getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<br>            <span class="hljs-keyword">if</span> (cursor != <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">while</span> (cursor.moveToNext())&#123;<br>                    <span class="hljs-comment">//获取联系人姓名</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME));<br>                    <span class="hljs-comment">//获取联系人手机号</span><br>                    <span class="hljs-type">String</span> <span class="hljs-variable">phonenumber</span> <span class="hljs-operator">=</span> cursor.getString(cursor.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));<br>                    contactList.add(name + <span class="hljs-string">&quot;\n&quot;</span> + phonenumber);<br>                &#125;<br>                <span class="hljs-comment">//通知刷新ListView</span><br>                adapter.notifyDataSetChanged();<br>            &#125;<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125; <span class="hljs-keyword">finally</span> &#123;<br>          <span class="hljs-keyword">if</span> (cursor != <span class="hljs-literal">null</span>)&#123;<br>              cursor.close();<br>          &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//用户做出选择后的回调函数</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onRequestPermissionsResult</span><span class="hljs-params">(<span class="hljs-type">int</span> requestCode, <span class="hljs-meta">@NonNull</span> String[] permissions, <span class="hljs-meta">@NonNull</span> <span class="hljs-type">int</span>[] grantResults)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onRequestPermissionsResult(requestCode, permissions, grantResults);<br>        <span class="hljs-keyword">switch</span> (requestCode) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">if</span> (grantResults.length &gt; <span class="hljs-number">0</span> &amp;&amp; grantResults[<span class="hljs-number">0</span>] == PackageManager.PERMISSION_GRANTED)&#123;<br>                    readContacts();<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    Toast.makeText(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;你拒绝了此权限申请&quot;</span>, Toast.LENGTH_SHORT).show();<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>onCreate()</code>方法中，我们首先调用<code>initListView()</code>方法获取ListView实例并绑定适配器，然后调用<code>PermissionCheck()</code>方法来进行运行时权限的处理逻辑，这一部分刚才我们已经分析过了。</p><p>下面重点看一下<code>readContacts()</code>方法，可以看到，这里使用了ContentResolver的<code>query()</code>方法来查询系统的联系人数据，不过传入的uri 参数怎么有些奇怪啊？为什么没有调用<code>Uri.parse()</code>方法去解析一个内容URI字符串呢？这是因为<code>ContactsContract.CommonData Kinds.Phone</code>类已经帮我们做好了封装，提供了一个<code>CONTENT_URI</code>常量，而这个常量就是使用<code>Uri.parse()</code>方法解析出来的结果。接着我们对Cursor对象进行遍历，将联系人姓名和手机号这些数据逐个取出，联系人姓名这一列对应的常量是<code>ContactsContract.CommonDataKinds.Phone.DISPLAY_NAME</code>，联系人手机号这一列对应的常量是<code>ContactsContract.CommonData Kinds.Phone.NUMBER</code>。两个数据都取出之后，将它们进行拼接，并且在中间加上换行符，然后将拼接后的数据添加到ListView的数据源里，并通知刷新一下ListView。最后将Cursor对象关闭。</p><p>最后还需要声明读取通讯录联系人的权限。在<code>AndroidManifest.xml</code>中添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.READ_CONTACTS&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h1 id="四、创建自己的ContentProvider"><a href="#四、创建自己的ContentProvider" class="headerlink" title="四、创建自己的ContentProvider"></a>四、创建自己的ContentProvider</h1><p>在上一节当中，我们学习了如何在自己的程序中访问其他应用程序的数据。总体来说思路还是非常简单的，只需要获取到该应用程序的内容URI，然后借助ContentResolver进行CRUD操作就可以了。可是，那些提供外部访问接口的应用程序都是如何实现这种功能的呢？它们又是怎样保证数据的安全性？接下来我们就具体学习一下。</p><h2 id="4-1-创建ContentProvider的步骤"><a href="#4-1-创建ContentProvider的步骤" class="headerlink" title="4.1 创建ContentProvider的步骤"></a>4.1 创建ContentProvider的步骤</h2><p>要想创建自己的ContentProvider，可以通过新建一个类去继承ContentProvider的方式来创建。</p><p>ContentProvider类中有6个抽象方法，我们在使用子类继承它的时候，需要将这6个方法全部重写。新建MyContentProvider继承自ContentProvider，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyContentProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ContentProvider</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Cursor <span class="hljs-title function_">query</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Uri uri, <span class="hljs-meta">@Nullable</span> String[] strings, <span class="hljs-meta">@Nullable</span> String s, <span class="hljs-meta">@Nullable</span> String[] strings1, <span class="hljs-meta">@Nullable</span> String s1)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Uri uri)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Uri <span class="hljs-title function_">insert</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Uri uri, <span class="hljs-meta">@Nullable</span> ContentValues contentValues)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Uri uri, <span class="hljs-meta">@Nullable</span> String s, <span class="hljs-meta">@Nullable</span> String[] strings)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Uri uri, <span class="hljs-meta">@Nullable</span> ContentValues contentValues, <span class="hljs-meta">@Nullable</span> String s, <span class="hljs-meta">@Nullable</span> String[] strings)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol><li><strong>onCreate()</strong><br>初始化内容提供器的时候调用。通常会在这里完成对数据库的创建和升级等操作，返回true表示内容提供器初始化成功，返回false则表示失败。注意，只有当存在ContentResolver尝试访问我们程序中的数据时，内容提供器才会被初始化。</li><li><strong>query()</strong><br>从内容提供器中查询数据。使用uri参数来确定查询哪张表，projection参数用于确定查询哪些列，selection和selectionArgs参数用于约束查询哪些行，sortOrder参数用于对结果进行排序，查询的结果存放在Cursor对象中返回。</li><li><strong>insert()</strong><br>向内容提供器中添加一条数据。使用uri参数来确定要添加到的表，待添加的数据保存在values参数中。添加完成后，返回一个用于表示这条新记录的URI。</li><li><strong>update()</strong><br>更新内容提供器中已有的数据。使用uri参数来确定更新哪一张表中的数据，新数据保存在values参数中，selection和selectionArgs参数用于约束更新哪些行，受影响的行数将作为返回值返回。</li><li><strong>delete()</strong><br>从内容提供器中删除数据。使用uri参数来确定删除哪一张表中的数据，selection和selectionArgs参数用于约束删除哪些行，被删除的行数将作为返回值返回。</li><li><strong>getType()</strong><br>根据传入的内容URI来返回相应的MIME类型。</li></ol><p>在上一节中，我们提及到了标准uri的格式为：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">content:</span>//<span class="hljs-keyword">com</span>.example.app.provider/tablel<br></code></pre></td></tr></table></figure><p>这就表示调用方期望访问的是<code>com.example.app</code>这个应用的table1表中的数据。除此之外，我们还可以在这个内容URI的后面加上一个id，如下所示：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">content:<span class="hljs-regexp">//</span>com.example.app.provider<span class="hljs-regexp">/tablel/</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>这就表示调用方期望访问的是<code>com.example.app</code>这个应用的table1表中id为1的数据。</p><p>内容URI的格式主要就只有以上两种，以路径结尾就表示期望访问该表中所有的数据，以id结尾就表示期望访问该表中拥有相应id的数据。因此我们可以使用通配符的方式来分别匹配这两种格式的内容URI，规则如下：</p><ul><li>*****：表示匹配任意长度的任意字符。</li><li>**#**：表示匹配任意长度的数字。</li></ul><p>所以，一个能够匹配任意表的内容URI格式就可以写成：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">content:</span>//<span class="hljs-keyword">com</span>.example.app.provider<span class="hljs-comment">/*</span><br></code></pre></td></tr></table></figure><p>而一个能够匹配table1表中任意一行数据的内容URI格式就可以写成：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">content:<span class="hljs-regexp">//</span>com.example.app.provider<span class="hljs-regexp">/tablel/</span><span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p>接着，我们再借助<code>UriMatcher</code>这个类就可以轻松地实现匹配内容URI的功能。<code>UriMatcher</code>中提供了一个<code>addURI()</code>方法，这个方法接收3个参数，可以分别把authority、path和一个自定义代码传进去。这样，当调用<code>UriMatcher</code>的<code>match()</code>方法时，就可以将一个Uri对象传入，返回值是某个能够匹配这个U对象所对应的自定义代码，利用这个代码，我们就可以判断出调用方期望访问的是哪张表中的数据了。修改MyContentProvider中的代码，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyContentProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ContentProvider</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TABLE1_DIR</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TABLE1_ITEM</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TABLE2_DIR</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TABLE2_ITEM</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> UriMatcher uriMatcher;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        uriMatcher = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UriMatcher</span>(UriMatcher.NO_MATCH);<br>        uriMatcher.addURI(<span class="hljs-string">&quot;com.example.app.provider&quot;</span>,<span class="hljs-string">&quot;table1&quot;</span>,TABLE1_DIR);<br>        uriMatcher.addURI(<span class="hljs-string">&quot;com.example.app.provider&quot;</span>,<span class="hljs-string">&quot;table1/#&quot;</span>,TABLE1_ITEM);<br>        uriMatcher.addURI(<span class="hljs-string">&quot;com.example.app.provider&quot;</span>,<span class="hljs-string">&quot;table2&quot;</span>,TABLE2_DIR);<br>        uriMatcher.addURI(<span class="hljs-string">&quot;com.example.app.provider&quot;</span>,<span class="hljs-string">&quot;table/#&quot;</span>,TABLE2_ITEM);<br>    &#125;<br>......<br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Cursor <span class="hljs-title function_">query</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Uri uri, <span class="hljs-meta">@Nullable</span> String[] projection, <span class="hljs-meta">@Nullable</span> String selection, <span class="hljs-meta">@Nullable</span> String[] selectionArgs, <span class="hljs-meta">@Nullable</span> String sortOrder, <span class="hljs-meta">@Nullable</span> CancellationSignal cancellationSignal)</span> &#123;<br><br>        <span class="hljs-keyword">switch</span> (uriMatcher.match(uri))&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                <span class="hljs-comment">//查询table1表中的所用数据</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                <span class="hljs-comment">//查询table1表中的单条数据</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                <span class="hljs-comment">//查询table2表中的所用数据</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                <span class="hljs-comment">//查询table1表中的单条数据</span><br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.query(uri, projection, selection, selectionArgs, sortOrder, cancellationSignal);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，MyContentProvider中新增了4个整型常量，其中TABLE1_DIR表示访问table1表中的所有数据，TABLE1_ITEM表示访问table1表中的单条数据，TABLE2_DIR表示访问table2表中的所有数据，TABLE2_ITEM表示访问table2表中的单条数据。</p><p>接着在静态代码块里我们创建了UriMatcher的实例，并调用<code>addURI()</code>方法，将期望匹配的内容URI格式传递进去，注意这里传入的路径参数是可以使用通配符的。然后当<code>query()</code>方法被调用的时候，就会通过UriMatcher的<code>match()</code>方法对传入的Uri对象进行匹配，如果发现UriMatcher中某个内容URI格式成功匹配了该Uri对象，则会返回相应的自定义代码，然后我们就可以判断出调用方期望访问的到底是什么数据了。</p><p>上述代码只是以query()方法为例做了个示范，其实insert()、update()、delete()这几个方法的实现也是差不多的，它们都会携带Uri这个参数，然后同样利用UriMatcher的match()方法判断出调用方期望访问的是哪张表，再对该表中的数据进行相应的操作就可以了。</p><p>除此之外，还有一个方法我们会比较陌生，即getType()方法。它是所有的内容提供器都必须提供的一个方法，用于获取Uri对象所对应的MIME类型。一个内容URI所对应的MIME字符串主要由3部分组成，Android对这3个部分做了如下格式规定：</p><ul><li>必须以<code>vnd</code>开头。</li><li>如果内容URI以路径结尾，则后接 <code>android.cursor.dir/</code>，如果内容URI以id结尾，则后接<code> android.cursor.item/</code> 。</li><li>最后接上<code>vnd.&lt;authority&gt;.&lt;path&gt;</code>。</li></ul><p>所以，对于content:&#x2F;&#x2F;com.example.app.provider&#x2F;table1这个内容URI，它所对应的MIME类型就可以写成：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">vnd<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.cursor</span>.dir/vnd<span class="hljs-selector-class">.com</span><span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.provider</span>.table1<br></code></pre></td></tr></table></figure><p>对于content:&#x2F;&#x2F;com.example.app.provider&#x2F;table1&#x2F;1这个内容URI，它所对应的MME类型就可以写成：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">vnd<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.cursor</span>.item/vnd<span class="hljs-selector-class">.com</span><span class="hljs-selector-class">.example</span><span class="hljs-selector-class">.app</span><span class="hljs-selector-class">.provider</span>.tablel<br></code></pre></td></tr></table></figure><p>现在我们可以继续完善MyContentProvider中的内容了，这次来实现<code>getType()</code>方法中的逻辑，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyContentProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ContentProvider</span> &#123;<br><br>    ......<br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Uri uri)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (uriMatcher.match(uri))&#123;<br>            <span class="hljs-keyword">case</span> TABLE1_DIR:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;vnd.android.cursor.dir/vnd.com.example.app.provider.table1&quot;</span>;<br>            <span class="hljs-keyword">case</span> TABLE1_ITEM:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;vnd.android.cursor.item/vnd.com.example.app.provider.table1&quot;</span>;<br>            <span class="hljs-keyword">case</span> TABLE2_DIR:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;vnd.android.cursor.dir/vnd.com.example.app.provider.table2&quot;</span>;<br>            <span class="hljs-keyword">case</span> TABLE2_ITEM:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;vnd.android.cursor.item/vnd.com.example.app.provider.table2&quot;</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>......<br>&#125;<br></code></pre></td></tr></table></figure><p>到这里，一个完整的内容提供器就创建完成了，现在任何一个应用程序都可以使用ContentResolver来访问我们程序中的数据。至于前面所提到的保证隐私数据安全的功能，因为所有的CRUD操作都一定要匹配到相应的内容URI格式才能进行的，而我们当然不可能向UriMatcher中添加隐私数据的URI，所以这部分数据根本无法被外部程序访问到，安全问题也就不存在了。好了，接下来就来实战一下，真正体验一下跨程序数据共享的功能。</p><h2 id="4-2-实现跨程序数据共享"><a href="#4-2-实现跨程序数据共享" class="headerlink" title="4.2 实现跨程序数据共享"></a>4.2 实现跨程序数据共享</h2><p>为了突出重点，我们直接在上一章中SQLite数据库存储的项目的基础上继续开发，通过内容提供器来给它加入外部访问接口。为此我们需要给项目创建一个内容提供器，右击包名→New→Other→Content Provider，在弹出的窗口中，我们将内容提供器命名为<code>DatabaseProvider</code>，authority指定为<code>com.example.databasetest.provider</code>，<code>Exported</code>属性表示是否允许外部程序访问我们的内容提供器，<code>Enabled</code>属性表示是否启用这个内容提供器。将两个属性都勾中，点击Finish完成创建。</p><p>接着我们修改DatabaseProvider中的代码，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DatabaseProvider</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ContentProvider</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">BOOK_DIR</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">BOOK_ITEM</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CATEGORY_DIR</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CATEGORY_ITEM</span> <span class="hljs-operator">=</span> <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">AUTHORITY</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.example.databasetest.provider&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> UriMatcher uriMatcher;<br>    <span class="hljs-keyword">private</span> MyDatabaseHelper dbHelper;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        uriMatcher = <span class="hljs-keyword">new</span> <span class="hljs-title class_">UriMatcher</span>(UriMatcher.NO_MATCH);<br>        uriMatcher.addURI(AUTHORITY,<span class="hljs-string">&quot;book&quot;</span>,BOOK_DIR);<br>        uriMatcher.addURI(AUTHORITY,<span class="hljs-string">&quot;book/#&quot;</span>,BOOK_ITEM);<br>        uriMatcher.addURI(AUTHORITY,<span class="hljs-string">&quot;category&quot;</span>,CATEGORY_DIR);<br>        uriMatcher.addURI(AUTHORITY,<span class="hljs-string">&quot;category/#&quot;</span>,CATEGORY_ITEM);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">DatabaseProvider</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">()</span> &#123;<br>        dbHelper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDatabaseHelper</span>(getContext(),<span class="hljs-string">&quot;BookStore.db&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Cursor <span class="hljs-title function_">query</span><span class="hljs-params">(Uri uri, String[] projection, String selection,</span><br><span class="hljs-params">                        String[] selectionArgs, String sortOrder)</span> &#123;<br>        <span class="hljs-type">SQLiteDatabase</span> <span class="hljs-variable">db</span> <span class="hljs-operator">=</span> dbHelper.getReadableDatabase();<br>        <span class="hljs-type">Cursor</span> <span class="hljs-variable">cursor</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">switch</span> (uriMatcher.match(uri))&#123;<br>            <span class="hljs-keyword">case</span> BOOK_DIR:<br>                cursor = db.query(<span class="hljs-string">&quot;Book&quot;</span>,projection,selection,selectionArgs,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,sortOrder);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> BOOK_ITEM:<br>                <span class="hljs-type">String</span> <span class="hljs-variable">bookId</span> <span class="hljs-operator">=</span> uri.getPathSegments().get(<span class="hljs-number">1</span>);<br>                cursor = db.query(<span class="hljs-string">&quot;Book&quot;</span>,projection,<span class="hljs-string">&quot;id = ?&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;bookId&#125;,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,sortOrder);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> CATEGORY_DIR:<br>                cursor = db.query(<span class="hljs-string">&quot;Category&quot;</span>,projection,selection,selectionArgs,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,sortOrder);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> CATEGORY_ITEM:<br>                <span class="hljs-type">String</span> <span class="hljs-variable">categoryId</span> <span class="hljs-operator">=</span> uri.getPathSegments().get(<span class="hljs-number">1</span>);<br>                cursor = db.query(<span class="hljs-string">&quot;Category&quot;</span>,projection,<span class="hljs-string">&quot;id = ?&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;categoryId&#125;,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,sortOrder);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cursor;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Uri <span class="hljs-title function_">insert</span><span class="hljs-params">(Uri uri, ContentValues values)</span> &#123;<br>        <span class="hljs-type">SQLiteDatabase</span> <span class="hljs-variable">db</span> <span class="hljs-operator">=</span> dbHelper.getWritableDatabase();<br>        <span class="hljs-type">Uri</span> <span class="hljs-variable">uriReturn</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">switch</span> (uriMatcher.match(uri))&#123;<br>            <span class="hljs-keyword">case</span> BOOK_DIR:<br>            <span class="hljs-keyword">case</span> BOOK_ITEM:<br>                <span class="hljs-type">long</span> <span class="hljs-variable">newBookId</span> <span class="hljs-operator">=</span> db.insert(<span class="hljs-string">&quot;Book&quot;</span>,<span class="hljs-literal">null</span>,values);<br>                uriReturn = Uri.parse(<span class="hljs-string">&quot;content://&quot;</span> + AUTHORITY + <span class="hljs-string">&quot;/book/&quot;</span> + newBookId);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> CATEGORY_DIR:<br>            <span class="hljs-keyword">case</span> CATEGORY_ITEM:<br>                <span class="hljs-type">long</span> <span class="hljs-variable">newCategoryId</span> <span class="hljs-operator">=</span> db.insert(<span class="hljs-string">&quot;Category&quot;</span>,<span class="hljs-literal">null</span>,values);<br>                uriReturn = Uri.parse(<span class="hljs-string">&quot;content://&quot;</span> + AUTHORITY + <span class="hljs-string">&quot;/Category/&quot;</span> + newCategoryId);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> uriReturn;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">update</span><span class="hljs-params">(Uri uri, ContentValues values, String selection,</span><br><span class="hljs-params">                      String[] selectionArgs)</span> &#123;<br>        <span class="hljs-type">SQLiteDatabase</span> <span class="hljs-variable">db</span> <span class="hljs-operator">=</span> dbHelper.getWritableDatabase();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">updatedRows</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">switch</span> (uriMatcher.match(uri))&#123;<br>            <span class="hljs-keyword">case</span> BOOK_DIR:<br>                updatedRows = db.update(<span class="hljs-string">&quot;Book&quot;</span>,values,selection,selectionArgs);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> BOOK_ITEM:<br>                <span class="hljs-type">String</span> <span class="hljs-variable">bookId</span> <span class="hljs-operator">=</span> uri.getPathSegments().get(<span class="hljs-number">1</span>);<br>                updatedRows = db.update(<span class="hljs-string">&quot;Book&quot;</span>,values,selection,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;bookId&#125;);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> CATEGORY_DIR:<br>                updatedRows = db.update(<span class="hljs-string">&quot;Category&quot;</span>,values,selection,selectionArgs);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> CATEGORY_ITEM:<br>                <span class="hljs-type">String</span> <span class="hljs-variable">categoryId</span> <span class="hljs-operator">=</span> uri.getPathSegments().get(<span class="hljs-number">1</span>);<br>                updatedRows = db.update(<span class="hljs-string">&quot;Category&quot;</span>,values,selection,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;categoryId&#125;);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> updatedRows;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(Uri uri, String selection, String[] selectionArgs)</span> &#123;<br>        <span class="hljs-type">SQLiteDatabase</span> <span class="hljs-variable">db</span> <span class="hljs-operator">=</span> dbHelper.getWritableDatabase();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">deletedRows</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">switch</span> (uriMatcher.match(uri))&#123;<br>            <span class="hljs-keyword">case</span> BOOK_DIR:<br>                deletedRows = db.delete(<span class="hljs-string">&quot;Book&quot;</span>,selection,selectionArgs);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> BOOK_ITEM:<br>                <span class="hljs-type">String</span> <span class="hljs-variable">bookId</span> <span class="hljs-operator">=</span> uri.getPathSegments().get(<span class="hljs-number">1</span>);<br>                deletedRows = db.delete(<span class="hljs-string">&quot;Book&quot;</span>,<span class="hljs-string">&quot;id = ?&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;bookId&#125;);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> CATEGORY_DIR:<br>                deletedRows = db.delete(<span class="hljs-string">&quot;Category&quot;</span>,selection,selectionArgs);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> CATEGORY_ITEM:<br>                <span class="hljs-type">String</span> <span class="hljs-variable">categoryId</span> <span class="hljs-operator">=</span> uri.getPathSegments().get(<span class="hljs-number">1</span>);<br>                deletedRows = db.delete(<span class="hljs-string">&quot;Category&quot;</span>,<span class="hljs-string">&quot;id = ?&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;categoryId&#125;);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> deletedRows;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getType</span><span class="hljs-params">(Uri uri)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (uriMatcher.match(uri))&#123;<br>            <span class="hljs-keyword">case</span> BOOK_DIR:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;vnd.android.cursor.dir/vnd.com.example.databasetest.provider.book&quot;</span>;<br>            <span class="hljs-keyword">case</span> BOOK_ITEM:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;vnd.android.cursor.item/vnd.com.example.databasetest.provider.book&quot;</span>;<br>            <span class="hljs-keyword">case</span> CATEGORY_DIR:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;vnd.android.cursor.dir/vnd.com.example.databasetest.provider.category&quot;</span>;<br>            <span class="hljs-keyword">case</span> CATEGORY_ITEM:<br>                <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;vnd.android.cursor.item/vnd.com.example.databasetest.provider.category&quot;</span>;<br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>首先在类的一开始，同样是定义了4个常量，分别用于表示访问Book表中的所有数据、访问Book表中的单条数据、访问Category表中的所有数据和访问Category表中的单条数据。然后在静态代码块里对UriMatcher进行了初始化操作，将期望匹配的几种URI格式添加了进去。</p><p>因为我们这里是对外部应用提供访问该应用数据的接口，而数据的来源是数据库，所以我们需要先在onCreate()方法中创建一个MyDatabaseHelper实例，返回true表示内容提供器初始化成功，这时数据库就已经完成了创建或升级操作。</p><p>接下来是CRUD操作的方法，格式都差不多，都是先根据操作获取读&#x2F;写的数据库实例，然后根据Uri判断用户访问哪张表以及是全表数据还是单条数据。注意当访问单条数据的时候，需要调用了Uri对象的<code>getPathSegments()</code>方法，它会将内容URI权限之后的部分以 “&#x2F;” 符号进行分割，并把分割后的结果放入到一个字符串列表中，那这个列表的第0个位置存放的就是路径，第1个位置存放的就是id了。得到了id之后，再通过selection和selectionArgs参数进行约束，就实现了查询单条数据的功能。四种方法的具体差异如下：</p><ul><li><strong>query()方法</strong>：因为是访问数据，所以需要将查询到的数据以Cursor对象返回。</li><li><strong>insert()方法</strong>：需要返回一个能够表示这条新增数据的URI，所以需要调用<code>Uri.parse()</code>方法来将一个内容URI解析成Uri对象，当然这个内容URI是以新增数据的id结尾的。</li><li><strong>update()方法</strong>：需要返回受影响的行数。</li><li><strong>delete()方法</strong>：需要返回受影响的行数。</li></ul><p>最后是getType()方法，这个方法中的代码完全是按照上一节中介绍的格式规则编写的，没有必要再解释了。</p><p>到此，我们就将内容提供器中的代码全部编写完了。</p><p>另外还有一点需要注意，内容提供器一定要在<code>AndroidManifest.xml</code>文件中注册才可以使用。不过由于我们是使用Android Studio的快捷方式创建的内容提供器，因此注册这一步已经被自动完成了。具体代码如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">manifest</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">application</span></span><br><span class="hljs-tag">        <span class="hljs-attr">......</span></span><br><span class="hljs-tag">        &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">provider</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.DatabaseProvider&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:authorities</span>=<span class="hljs-string">&quot;com.example.databasetest.provider&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:enabled</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">provider</span>&gt;</span><br><br>        ......<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">application</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到，<code>&lt;application&gt;</code>标签内出现了一个新的标签<code>&lt;provider&gt;</code>，我们使用它来对DatabaseProvider这个内容提供器进行注册。<code>android:name</code>属性指定了DatabaseProvider的类名，<code>android:authorities</code>属性指定了DatabaseProvider的authority，而<code>enabled</code>和<code>exported</code>属性则是根据我们刚才勾选的状态自动生成的，这里表示允许DatabaseProvider被其他应用程序进行访问。</p><p>现在这个项目就已经拥有了跨程序共享数据的功能了。为了验证一下，我们需要另外创建一个新项目ProviderTest来访问刚才编写好的项目中的数据。</p><p>新项目ProviderTest布局文件如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;Add To Book&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:onClick</span>=<span class="hljs-string">&quot;AddToBook&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;Query From Book&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:onClick</span>=<span class="hljs-string">&quot;QueryFromBook&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;Update Book&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:onClick</span>=<span class="hljs-string">&quot;UpdateBook&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;Delete From Book&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:onClick</span>=<span class="hljs-string">&quot;DeleteFromBook&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>简简单单的4个按钮，分别用于添加、查询、修改和删除数据。然后修改MainActivity中的代码，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String newId;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">AddToBook</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-type">Uri</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> Uri.parse(<span class="hljs-string">&quot;content://com.example.databasetest.provider/book&quot;</span>);<br>        <span class="hljs-type">ContentValues</span> <span class="hljs-variable">values</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContentValues</span>();<br>        values.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;A Clash of Kings&quot;</span>);<br>        values.put(<span class="hljs-string">&quot;author&quot;</span>,<span class="hljs-string">&quot;George Martin&quot;</span>);<br>        values.put(<span class="hljs-string">&quot;pages&quot;</span>,<span class="hljs-number">1024</span>);<br>        values.put(<span class="hljs-string">&quot;price&quot;</span>,<span class="hljs-number">22.45</span>);<br>        <span class="hljs-type">Uri</span> <span class="hljs-variable">newUri</span> <span class="hljs-operator">=</span> getContentResolver().insert(uri,values);<br>        newId = newUri.getPathSegments().get(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">UpdateBook</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-type">Uri</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> Uri.parse(<span class="hljs-string">&quot;content://com.example.databasetest.provider/book&quot;</span> + newId);<br>        <span class="hljs-type">ContentValues</span> <span class="hljs-variable">values</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContentValues</span>();<br>        values.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;A Storm of Swords&quot;</span>);<br>        getContentResolver().update(uri,values,<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">QueryFromBook</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-type">Uri</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> Uri.parse(<span class="hljs-string">&quot;content://com.example.databasetest.provider/book&quot;</span>);<br>        <span class="hljs-type">Cursor</span> <span class="hljs-variable">cursor</span> <span class="hljs-operator">=</span> getContentResolver().query(uri, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">if</span> (cursor != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">while</span> (cursor.moveToNext())&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> cursor.getString(cursor.getColumnIndex(<span class="hljs-string">&quot;name&quot;</span>));<br>                <span class="hljs-type">String</span> <span class="hljs-variable">author</span> <span class="hljs-operator">=</span> cursor.getString(cursor.getColumnIndex(<span class="hljs-string">&quot;author&quot;</span>));<br>                <span class="hljs-type">int</span> <span class="hljs-variable">pages</span> <span class="hljs-operator">=</span> cursor.getInt(cursor.getColumnIndex(<span class="hljs-string">&quot;pages&quot;</span>));<br>                <span class="hljs-type">double</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> cursor.getDouble(cursor.getColumnIndex(<span class="hljs-string">&quot;price&quot;</span>));<br>                Log.d(<span class="hljs-string">&quot;MainActivity&quot;</span>, <span class="hljs-string">&quot;name: &quot;</span> + name);<br>                Log.d(<span class="hljs-string">&quot;MainActivity&quot;</span>, <span class="hljs-string">&quot;author: &quot;</span> + author);<br>                Log.d(<span class="hljs-string">&quot;MainActivity&quot;</span>, <span class="hljs-string">&quot;pages: &quot;</span> + pages);<br>                Log.d(<span class="hljs-string">&quot;MainActivity&quot;</span>, <span class="hljs-string">&quot;price: &quot;</span> + price);<br>            &#125;<br>            cursor.close();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">DeleteFromBook</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-type">Uri</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> Uri.parse(<span class="hljs-string">&quot;content://com.example.databasetest.provider/book&quot;</span> + newId);<br>        getContentResolver().delete(uri, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，我们分别在这4个按钮的点击事件里面处理了增删改查的逻辑，分别对接ContentProvider中的增删改查方法。</p><p>添加数据的时候，首先调用了<code>Uri.parse()</code>方法将一个内容URI解析成Uri对象，然后把要添加的数据都存放到ContentValues对象中，接着调用ContentResolver的<code>insert()</code>方法执行添加操作就可以了，该方法会返回一个Uri对象，这个对象中包含了新增数据的id，我们通过getPathSegments()方法将这个id取出。</p><p>查询数据的时候，同样是调用了<code>Uri.parse()</code>方法将一个内容URI解析成Uri对象，然后调用ContentResolver的<code>query()</code>方法去查询数据，查询的结果存放在Cursor对象中的。之后对Cursor进行遍历，从中取出查询结果，并一一打印出来。</p><p>更新数据的时候，也是先将内容URI解析成Uri对象，这里我们指定了id，那么表中其他数据就不会受影响了。然后把想要更新的数据存放到ContentValues对象中，再调用ContentResolver的<code>update()</code>方法执行更新操作就可以了。</p><p>删除数据的时候，也是使用同样的方法解析了一个以id结尾的内容URI，然后调用ContentResolver的<code>delete()</code>方法执行删除操作就可以了。</p><p>到此，我们就可以尝试运行程序了。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android开发学习笔记(七) —— 详解数据存储全方案</title>
    <link href="/2023/08/12/Android%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%83)%20%E2%80%94%E2%80%94%20%E8%AF%A6%E8%A7%A3%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E5%85%A8%E6%96%B9%E6%A1%88/"/>
    <url>/2023/08/12/Android%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%83)%20%E2%80%94%E2%80%94%20%E8%AF%A6%E8%A7%A3%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E5%85%A8%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="一、什么是数据持久化"><a href="#一、什么是数据持久化" class="headerlink" title="一、什么是数据持久化"></a>一、什么是数据持久化</h1><p>数据持久化就是指将那些内存中的瞬时数据保存到存储设备中，保证即使在手机或电脑关机的情况下，这些数据仍然不会丢失。保存在内存中的数据是处于瞬时状态的，而保存在存储设备中的数据是处于持久状态的，持久化技术则提供了一种机制可以让数据在瞬时状态和持久状态之间进行转换。<br>Android系统中主要提供了3种方式用于简单地实现数据持久化功能，即文件存储、SharedPreference存储以及数据库存储。</p><h1 id="二、文件存储"><a href="#二、文件存储" class="headerlink" title="二、文件存储"></a>二、文件存储</h1><h2 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h2><p>文件存储是Android中最基本的一种数据存储方式，它不对存储的内容进行任何的格式化处理，所有数据都是原封不动地保存到文件当中的，因而它比较适合用于存储一些简单的文本数据或二进制数据。</p><h2 id="2-2-将数据存储到文件中"><a href="#2-2-将数据存储到文件中" class="headerlink" title="2.2 将数据存储到文件中"></a>2.2 将数据存储到文件中</h2><p>Context类中提供了一个<code>openFileOutput()</code>方法，可以用于将数据存储到指定的文件中。这个方法接收两个参数，第一个参数是文件名，这里指定的文件名不可以包含路径，因为所有的文件都是默认存储到<code>/data/data/&lt;package name&gt;/fles/</code>目录下的。第二个参数是文件的操作模式，主要有两种模式可选：</p><ul><li><code>MODE_PRIVATE</code>：默认操作模式，表示当指定同样文件名的时候，所写入的内容将会覆盖原文件中的内容。</li><li><code>MODE_APPEND</code>：表示如果该文件已存在，就往文件里面追加内容，不存在就创建新文件。</li><li><code>MODE WORLD READABLE</code>和<code>MODE WORLD WRITEABLE</code>：这两种模式表示允许其他的应用程序对我们程序中的文件进行读写操作，不过由于这两种模式过于危险，很容易引起应用的安全性漏洞，已在Android4.2版本中被废弃。</li></ul><p>实现小案例：活动销毁时，将输入框中的数据存储到文件中。</p><p>首先主活动的布局，一个输入框即可。在输入框中输入的数据只是瞬时数据，在活动被销毁后就会被回收。我们需要做的就是在数据被回收之前，将它存储到文件当中。</p><p>修改 MainActivity 中的代码，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-keyword">private</span> EditText edittext;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">FileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;account&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        initView();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> edittext.getText().toString();<br>        saveData(s);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initView</span><span class="hljs-params">()</span> &#123;<br>        edittext = findViewById(R.id.id_edittext);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">saveData</span><span class="hljs-params">(String string)</span>&#123;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">out</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            out = openFileOutput(FileName, Context.MODE_PRIVATE);<br>            writer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(out));<br>            writer.write(string);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (writer != <span class="hljs-literal">null</span>)&#123;<br>                    writer.close();<br>                &#125;<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><code>saveData()</code>方法主要是文件流写入的基本操作，然后重写了<code>onDestroy()</code>方法，这样就可以保证在活动销毁之前一定会调用<code>saveData()</code>方法。</p><p>然后关闭程序，这时我们输入的内容就已经保存到文件中了。那么如何才能证实数据确实已经保存成功了呢？我们可以借助<code>Device File Explorer</code>工具来查看一下。点击Android Studio导航栏中的Tools →Tool Windows →Device File Explorer，然后找到相应目录即可。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308131922376.jpg"></p><h2 id="2-3-从文件中读取数据"><a href="#2-3-从文件中读取数据" class="headerlink" title="2.3 从文件中读取数据"></a>2.3 从文件中读取数据</h2><p>既然存储了数据，那肯定在某个时间段需要拿出来使用。因此我们来学习一下如何从文件中读取数据。</p><p>同样的，Context类中也提供了一个<code>openFileInput()</code>方法，用于从文件中读取数据。该方法只接收一个参数，即要读取的文件名，然后系统会自动到<code>/data/data/&lt;package name&gt;/files/</code>目录下去加载这个文件。</p><p>实现小案例：基于 2.2 的案例，活动创建时，从文件中读取数据到输入框。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-keyword">private</span> EditText edittext;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">FileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;account&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        initView();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> loadData();<br>        <span class="hljs-keyword">if</span> (!TextUtils.isEmpty(content))&#123;<br>            edittext.setText(content);<br>        &#125;<br>    &#125;<br><br>......<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">loadData</span><span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">content</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            in = openFileInput(FileName);<br>            reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(in));<br>            <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>            <span class="hljs-keyword">while</span>((line = reader.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>                content.append(line);<br>            &#125;<br><br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (reader != <span class="hljs-literal">null</span>)&#123;<br>                    reader.close();<br>                &#125;<br>            &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> content.toString();<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><code>loadData()</code>方法主要是文件流读取的基本操作，然后重写了<code>onCreate()</code>方法，这样就可以保证在活动创建时一定会调用<code>loadData()</code>方法。在<code>onCreate()</code>方法中调用了<code>TextUtils,isEmpty()</code>方法来对读取到的字符串进行非空判断。<code>TextUtils,isEmpty()</code>方法可以一次性进行两种空值的判断。当传入的字符串等于null或者等于空字符串的时候，这个方法都会返回true，从而使得我们不需要先单独判断这两种空值再使用逻辑运算符连接起来了。</p><h1 id="三、SharedPreferences存储"><a href="#三、SharedPreferences存储" class="headerlink" title="三、SharedPreferences存储"></a>三、SharedPreferences存储</h1><p>不同于文件的存储方式，SharedPreferences 是使用键值对的方式来存储数据的。也就是说，当保存一条数据的时候，需要给这条数据提供一个对应的键，这样在读取数据的时候就可以通过这个键把相应的值取出来。而且SharedPreferences还支持多种不同的数据类型存储。</p><h2 id="3-1-将数据存储到SharedPreferences中"><a href="#3-1-将数据存储到SharedPreferences中" class="headerlink" title="3.1 将数据存储到SharedPreferences中"></a>3.1 将数据存储到SharedPreferences中</h2><p>要想使用SharedPreferences来存储数据，首先需要获取到SharedPreferences对象。Android中主要提供了3种方法用于得到SharedPreferences对象。</p><ol><li><p>Context类中的<code>getSharedPreferences()</code>方法</p><p>此方法接收两个参数：</p><ul><li>第一个参数用于指定SharedPreferences文件的名称，如果指定的文件不存在则会创建一个，SharedPreferences文件都是存放在<code>/data/data/&lt;package name&gt;/shared prefs/</code>目录下的。</li><li>第二个参数用于指定操作模式，目前只有<code>MODE PRIVATE</code>这一种模式可选，它是默认的操作模式，和直接传入0效果是相同的，表示只有当前的应用程序才可以对这个SharedPreferences文件进行读写。其他几种操作模式均已被废弃。</li></ul></li><li><p>Activity类中的<code>getPreferences()</code>方法</p><p>这个方法和Context中的<code>getSharedPreferences()</code>方法很相似，不过它只接收一个操作模式参数，因为使用这个方法时会自动将当前活动的类名作为SharedPreferences的文件名。</p></li><li><p>PreferenceManager类中的<code>getDefaultSharedPreferences()</code>方法</p><p>这是一个静态方法，它接收一个Context参数，并自动使用当前应用程序的包名作为前缀来命名SharedPreferences文件。</p></li></ol><p>得到了SharedPreferences对象之后，就可以开始向SharedPreferences文件中存储数据了，主要可以分为3步实现。</p><ol><li>调用SharedPreferences对象的<code>edit()</code>方法来获取一个SharedPreferences.Editor对象。</li><li>使用<code>putXXX()</code>方法向SharedPreferences.Editor对象中添加数据，比如添加字符串使用<code>putString()</code>方法。</li><li>调用<code>apply()</code>方法将添加的数据提交，从而完成数据存储操作。</li></ol><p>了解完之后，开始实操。</p><p><del>和文件存储的案例一样，只不过使用的是不同的存储方法。</del>（试了一下，并不可以！）</p><p>主活动布局改成一个按钮就行。</p><p> MainActivity 的代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">FileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;account&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>    &#125;<br><span class="hljs-comment">//按钮的点击事件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ClicktosaveData</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-type">SharedPreferences</span> <span class="hljs-variable">sharedPreferences</span> <span class="hljs-operator">=</span> getSharedPreferences(FileName, Context.MODE_PRIVATE);<br>        SharedPreferences.<span class="hljs-type">Editor</span> <span class="hljs-variable">edit</span> <span class="hljs-operator">=</span> sharedPreferences.edit();<br>        edit.putString(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;Jack&quot;</span>);<br>        edit.putInt(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">28</span>);<br>        edit.putBoolean(<span class="hljs-string">&quot;married&quot;</span>,<span class="hljs-literal">true</span>);<br>        edit.apply();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们同样依靠<code>Device File Explorer</code>进行查看，情况如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308131923336.jpg"></p><h2 id="3-2-从SharedPreferences中读取数据"><a href="#3-2-从SharedPreferences中读取数据" class="headerlink" title="3.2 从SharedPreferences中读取数据"></a>3.2 从SharedPreferences中读取数据</h2><p>在3.1中，我们通过一系列put方法将数据存储到SharedPreferences中，类似的，我们也可以通过一系列的get方法读取存储的数据。这些get方法都接收两个参数，第一个参数是键，传入存储数据时使用的键就可以得到相应的值了；第二个参数是默认值，即表示当传入的键找不到对应的值时会以什么样的默认值进行返回。</p><p>与存储数据不同，读取数据不需要获取SharedPreferences.Editor对象，只需要SharedPreferences对象即可，步骤如下：</p><ol><li>获取SharedPreferences对象</li><li>通过get方法获取存储的数据</li></ol><p>开始实操，将我们刚刚存入的数据读取出来。</p><p>主活动布局不变，只不过按钮功能从存储数据变成了还原数据。</p><p>主要修改的是MainActivity的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">FileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;account&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ClicktoRestoreData</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-type">SharedPreferences</span> <span class="hljs-variable">sharedPreferences</span> <span class="hljs-operator">=</span> getSharedPreferences(FileName, MODE_PRIVATE);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> sharedPreferences.getString(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> sharedPreferences.getInt(<span class="hljs-string">&quot;age&quot;</span>,<span class="hljs-number">0</span>);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">married</span> <span class="hljs-operator">=</span> sharedPreferences.getBoolean(<span class="hljs-string">&quot;married&quot;</span>,<span class="hljs-literal">false</span>);<br>        Log.d(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;name: &quot;</span> + name);<br>        Log.d(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;age: &quot;</span> + age);<br>        Log.d(<span class="hljs-string">&quot;aaa&quot;</span>,<span class="hljs-string">&quot;married: &quot;</span> + married);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-3-实现记住密码功能"><a href="#3-3-实现记住密码功能" class="headerlink" title="3.3 实现记住密码功能"></a>3.3 实现记住密码功能</h2><p>首先我们需要实现一个登陆界面的布局（activity_login.xml）以及活动（LoginActivity.java）。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EditText</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;50dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:hint</span>=<span class="hljs-string">&quot;账号&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/zhanghao&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EditText</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;50dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:hint</span>=<span class="hljs-string">&quot;密码&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/mima&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">CheckBox</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/remeber&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;记住密码&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;登入&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:onClick</span>=<span class="hljs-string">&quot;ClicktoLogin&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里需要使用到CheckBox控件，以代表用户是否需要记住密码。</p><p>然后是LoginActivity.java代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LoginActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-keyword">private</span> EditText accountEdit;<br>    <span class="hljs-keyword">private</span> EditText passwordEdit;<br>    <span class="hljs-keyword">private</span> CheckBox remeberCheckBox;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">FileName</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;loginData&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">Arg1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;account&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">Arg2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;password&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">Arg3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;isRemeber&quot;</span>;<br>    <br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_login);<br>        initView();<br>        <br>        isRestoreData();<br>        <br>    &#125;<br><span class="hljs-comment">//获取控件对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initView</span><span class="hljs-params">()</span> &#123;<br>        accountEdit = findViewById(R.id.zhanghao);<br>        passwordEdit = findViewById(R.id.mima);<br>        remeberCheckBox = findViewById(R.id.remeber);<br>    &#125;<br><span class="hljs-comment">//登入按钮的点击事件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ClicktoLogin</span><span class="hljs-params">(View view)</span>&#123;<br>        <br>        isSaveData();<br>        <br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>, MainActivity.class);<br>        startActivity(intent);<br>        finish();<br>    &#125;<br><span class="hljs-comment">//存储数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">isSaveData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SharedPreferences</span> <span class="hljs-variable">loginData</span> <span class="hljs-operator">=</span> getSharedPreferences(FileName, MODE_PRIVATE);<br>        SharedPreferences.<span class="hljs-type">Editor</span> <span class="hljs-variable">loginEdit</span> <span class="hljs-operator">=</span> loginData.edit();<br>        <span class="hljs-comment">//如果点击了记住密码的选框</span><br>        <span class="hljs-keyword">if</span> (remeberCheckBox.isChecked())&#123;<br>            loginEdit.putString(Arg1, accountEdit.getText().toString());<br>            loginEdit.putString(Arg2, passwordEdit.getText().toString());<br>            loginEdit.putBoolean(Arg3, remeberCheckBox.isChecked());<br>        &#125;<span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//没有记住密码，就将存储的数据擦除</span><br>            loginEdit.clear();<br>        &#125;<br>        loginEdit.apply();<br>    &#125;<br><span class="hljs-comment">//恢复数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">isRestoreData</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">SharedPreferences</span> <span class="hljs-variable">sharedPreferences</span> <span class="hljs-operator">=</span> getSharedPreferences(FileName, MODE_PRIVATE);<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">isremeber</span> <span class="hljs-operator">=</span> sharedPreferences.getBoolean(Arg3, <span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">if</span> (isremeber)&#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> sharedPreferences.getString(Arg1,<span class="hljs-string">&quot;&quot;</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> sharedPreferences.getString(Arg2, <span class="hljs-string">&quot;&quot;</span>);<br>            accountEdit.setText(account);<br>            passwordEdit.setText(password);<br>            remeberCheckBox.setChecked(isremeber);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先在<code>ClicktoLogin()</code>方法中调用<code>isSaveData()</code>方法，在里面判断是否要保存密码，如果CheckBox被选中，则表示用户想要记住密码，那么就把account和password以及CheckBox的选择状态的值都存入到SharedPreferences文件当中并提交。如果没有被选中，就简单地调用一下clear()方法，将SharedPreferences文件中之前存储的数据全部清除掉。</p><p>当用户选中了记住密码复选框，并成功登录一次之后，这个时候如果再重新启动登录界面，就会从SharedPreferences文件中将保存的账号和密码都读取出来，并填充到文本输入框中，然后把记住密码复选框选中，这样就完成记住密码的功能了。</p><p>当然，这功能还是有缺陷的，因为不记住密码并不意味着账号也跟着清楚掉，总之还可以在这个基础上进行扩展。</p><p>MainActivity的代码和布局这里就不放出来，就是一个退出按钮，点击回到登入界面，可以说是很简单的功能。</p><h1 id="四、SQLite数据库存储"><a href="#四、SQLite数据库存储" class="headerlink" title="四、SQLite数据库存储"></a>四、SQLite数据库存储</h1><p>论谁的数据存储的功能强大，那我只能说还得是数据库更厉害，前两者与之比较简直是相形见绌！Android系统内置了SQLite数据库，它是一款轻量级的关系型数据库，运算速度非常快，占用资源很少，通常只需要几百KB的内存就足够了，因而特别适合在移动设备上使用。</p><h2 id="4-1-创建数据库"><a href="#4-1-创建数据库" class="headerlink" title="4.1 创建数据库"></a>4.1 创建数据库</h2><p>Android提供了SQLiteOpenHelper帮助类，它让我们能够更加方便地管理数据库，借助这个类就可以非常简单地对数据库进行创建和升级。</p><p>我们需要创建一个类来继承SQLiteOpenHelper帮助类，它有两个抽象方法，分别是<code>onCreate()</code>和<code>onUpgrade()</code>，我们必须在自己的类里面重写这两个方法，然后分别在这两个方法中去实现创建、升级数据库的逻辑。</p><p>SQLiteOpenHelper中还有两个非常重要的实例方法：<code>getReadableDatabase()</code>和<code>getWritableDatabase()</code>。这两个方法都可以创建或打开一个现有的数据库（如果数据库已存在则直接打开，否则创建一个新的数据库)，并返回一个可对数据库进行读写操作的对象。不同的是，当数据库不可写人的时候（如磁盘空间已满），<code>getReadableDatabase()</code>方法返回的对象将以只读的方式去打开数据库，而<code>getWritableDatabase()</code>方法则将出现异常。</p><p>SQLiteOpenHelper中有两个构造方法可供重写，一般使用参数少一点的那个构造方法即可。这个构造方法中接收4个参数：</p><ul><li>第一个参数是Context，必须要有它才能对数据库进行操作。</li><li>第二个参数是数据库名，创建数据库时使用的就是这里指定的名称。</li><li>第三个参数允许我们在查询数据的时候返回一个自定义的Cursor，一般都是传人nulL。</li><li>第四个参数表示当前数据库的版本号，可用于对数据库进行升级操作。</li></ul><p><strong>构建出SQLiteOpenHelper的实例之后，再调用它的<code>getReadableDatabase()</code>或<code>getWritableDatabase()</code>方法就能够创建数据库了</strong>，数据库文件会存放在<code>/data/data/&lt;package name&gt;/databases/</code>目录下。<strong>此时，重写的<code>onCreate()</code>方法也会得到执行</strong>，所以通常会在这里去处理一些创建表的逻辑。</p><p>下面我们例子来学会如何使用SQLiteOpenHelper。</p><p>假设我们要创建一个名为BookStore的数据库，并在里面创建一个名为Book的表，那么如果学过SQL的话，建表语句应该是这样的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> Book(<br>id <span class="hljs-type">integer</span> <span class="hljs-keyword">primary</span> key autoincrement,<br>    author text,<br>    price <span class="hljs-type">real</span>,<br>    pages <span class="hljs-type">integer</span>,<br>    name text<br>)<br></code></pre></td></tr></table></figure><p>该表包含有关书的属性，如作者、价格、页数、书名，id作为主键存在（唯一性）。</p><p>接下来我们应该利用SQLiteOpenHelper类来创建数据库并建表，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDatabaseHelper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SQLiteOpenHelper</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span>  <span class="hljs-variable">CreateBookTable</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;create table Book(\n&quot;</span> +<br>            <span class="hljs-string">&quot;   id integer primary key autoincrement,\n&quot;</span> +<br>            <span class="hljs-string">&quot;   author text,\n&quot;</span> +<br>            <span class="hljs-string">&quot;   price real,\n&quot;</span> +<br>            <span class="hljs-string">&quot;   pages integer,\n&quot;</span> +<br>            <span class="hljs-string">&quot;   name text\n&quot;</span> +<br>            <span class="hljs-string">&quot;)&quot;</span>;<br>    <span class="hljs-keyword">private</span> Context mContext;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyDatabaseHelper</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Context context, <span class="hljs-meta">@Nullable</span> String name, <span class="hljs-meta">@Nullable</span> SQLiteDatabase.CursorFactory factory, <span class="hljs-type">int</span> version)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, name, factory, version);<br>        mContext= context;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(SQLiteDatabase sqLiteDatabase)</span> &#123;<br>        <span class="hljs-comment">//执行建表语句</span><br>        sqLiteDatabase.execSQL(CreateBookTable);<br>        Toast.makeText(mContext, <span class="hljs-string">&quot;create table succeeded&quot;</span>, Toast.LENGTH_SHORT).show();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onUpgrade</span><span class="hljs-params">(SQLiteDatabase sqLiteDatabase, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> i1)</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后是主活动的布局和代码。布局的话，一个按钮就足够了，然后是代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ClicktoCreateDataBase</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-type">MyDatabaseHelper</span> <span class="hljs-variable">myDatabaseHelper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDatabaseHelper</span>(<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;BookStore.db&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">1</span>);<br>        myDatabaseHelper.getWritableDatabase();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>很简单是不是？只需要创建一个MyDatabaseHelper对象，通过构造函数的参数将数据库名指定为BookStore.db，版本号指定为1，然后调用了<code>getWritableDatabase()</code>方法来创建数据库。</p><p>好！那我们怎么验证确实创建成功了呢？尝试使用Device File Explorer进行查看，发现只能看到databases目录下出现了一个<br>BookStore.db文件，Book表是无法通过File Explorer看到的。因此我们需要换另一种方式查看，使用adb shell来对数据库和表的创建情况进行检查。相关指令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">//打开数据库<br>sqlite3 BookStore.db<br>//查看所有表<br>.table<br>//查看建表语句<br>.schema<br>//退出编辑<br>.exit或.quit<br></code></pre></td></tr></table></figure><h2 id="4-2-升级数据库"><a href="#4-2-升级数据库" class="headerlink" title="4.2 升级数据库"></a>4.2 升级数据库</h2><p>如果我们之后又想创建一个Category表用于记录图书的分类，那应该怎么办呢？</p><p>我们先来试试将写入onCreate()方法中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDatabaseHelper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SQLiteOpenHelper</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span>  <span class="hljs-variable">CreateBookTable</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;create table Book(\n&quot;</span> +<br>            <span class="hljs-string">&quot;   id integer primary key autoincrement,\n&quot;</span> +<br>            <span class="hljs-string">&quot;   author text,\n&quot;</span> +<br>            <span class="hljs-string">&quot;   price real,\n&quot;</span> +<br>            <span class="hljs-string">&quot;   pages integer,\n&quot;</span> +<br>            <span class="hljs-string">&quot;   name text\n&quot;</span> +<br>            <span class="hljs-string">&quot;)&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">CreateCategoryTable</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;create table Category(\n&quot;</span> +<br>            <span class="hljs-string">&quot;\tid integer primary key autoincrement,\n&quot;</span> +<br>            <span class="hljs-string">&quot;    category_name text,\n&quot;</span> +<br>            <span class="hljs-string">&quot;    category_code integer\n&quot;</span> +<br>            <span class="hljs-string">&quot;)&quot;</span>;<br><br>    <span class="hljs-keyword">private</span> Context mContext;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyDatabaseHelper</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Context context, <span class="hljs-meta">@Nullable</span> String name, <span class="hljs-meta">@Nullable</span> SQLiteDatabase.CursorFactory factory, <span class="hljs-type">int</span> version)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, name, factory, version);<br>        mContext= context;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(SQLiteDatabase sqLiteDatabase)</span> &#123;<br>        <span class="hljs-comment">//执行建表语句</span><br>        sqLiteDatabase.execSQL(CreateBookTable);<br>        sqLiteDatabase.execSQL(CreateCategoryTable);<br>        Toast.makeText(mContext, <span class="hljs-string">&quot;create table succeeded&quot;</span>, Toast.LENGTH_SHORT).show();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onUpgrade</span><span class="hljs-params">(SQLiteDatabase sqLiteDatabase, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> i1)</span> &#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>尝试了一下，发现并没有成功创建Category表，原因是BookStore.db已经存在，之后不管我们怎么点击创建按钮（即执行<code>getWritableDatabase()</code>方法），MyDatabaseHelper中的<code>onCreate()</code>方法都不会再次执行，因此也就无法新增表。</p><p>但是我们可以重写<code>onUpgrade()</code>方法来实现添加新表！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDatabaseHelper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">SQLiteOpenHelper</span> &#123;<br><br> ......<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onUpgrade</span><span class="hljs-params">(SQLiteDatabase sqLiteDatabase, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> i1)</span> &#123;<br>        sqLiteDatabase.execSQL(<span class="hljs-string">&quot;drop table if exists Book&quot;</span>);<br>        sqLiteDatabase.execSQL(<span class="hljs-string">&quot;drop table if exists Category&quot;</span>);<br>        onCreate(sqLiteDatabase);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，我们在<code>onUpgrade()</code>方法中执行了两条drop语句，如果发现数据库中已经存在Book表或Category表了，就将这两张表删除掉，然后再调用onCreate()方法重新创建。这里先将已经存在的表删除掉，因为如果在创建表时发现这张表已经存在了，就会直接报错。</p><p>接下来的问题就是如何让<code>onUpgrade()</code>方法能够执行了，还记得SQLiteOpenHelper的构造方法里接收的第四个参数吗？它表示当前数据库的版本号，之前我们传入的是1，现在只要传入一个比1大的数，就可以让<code>onUpgrade()</code>方法得到执行了。修改MainActivity中的代码，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ClicktoCreateDataBase</span><span class="hljs-params">(View view)</span> &#123;<br>    <span class="hljs-comment">//版本改为2</span><br>        <span class="hljs-type">MyDatabaseHelper</span> <span class="hljs-variable">myDatabaseHelper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDatabaseHelper</span>(<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;BookStore.db&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">2</span>);<br>        myDatabaseHelper.getWritableDatabase();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>现在重新运行程序，并点击创建按钮，这时就会再次弹出创建成功的提示。当然，我们也可以通过adb shell来验证。</p><p>（但是这有个问题，这把之前的数据库给删了，那数据岂不是丢失了！！！）</p><h2 id="4-3-添加数据"><a href="#4-3-添加数据" class="headerlink" title="4.3 添加数据"></a>4.3 添加数据</h2><p>在数据库中，我们对数据进行的操作无非就是增删改查这四种。相比于在学习数据库时不断编写insert、delete、update、select语句，Android提供了一系列的辅助性方法，使得在Android中即使不去编写SQL语句，也能轻松完成所有的增删改查操作。</p><p>在前面有一点我们没有注意到，就是SQLiteOpenHelper的<code>getReadableDatabase()</code>和<code>getwritableDatabase()</code>方法都会返回一个SQLiteDatabase对象，借助这个对象就可以对数据进行增删改查操作了。</p><p>那我们先来学习一下如何添加数据。SQLiteDatabase中提供了一个<code>insert()</code>方法，这个方法就是专门用于添加数据的。它接收3个参数：</p><ol><li>第一个参数是表名。</li><li>第二个参数用于在未指定添加数据的情况下给某些可为空的列自动赋值NULL,一般我们用不到这个功能，直接传入null即可。</li><li>第三个参数是一个ContentValues对象，它提供了一系列的put()方法重载，用于向ContentValues中添加数据，只需要将表中的每个列名以及相应的待添加数据传入即可。</li></ol><p>那么就开始实操吧。同样还是一个按钮实现添加数据，那么它的布局就不多说了。</p><p>MainActivity中的代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ClicktoInsertData</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-type">MyDatabaseHelper</span> <span class="hljs-variable">myDatabaseHelper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDatabaseHelper</span>(<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;BookStore.db&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">2</span>);<br>        <span class="hljs-type">SQLiteDatabase</span> <span class="hljs-variable">BookDatabase</span> <span class="hljs-operator">=</span> myDatabaseHelper.getWritableDatabase();<br>        <span class="hljs-type">ContentValues</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContentValues</span>();<br>        <span class="hljs-comment">//组装第一条记录</span><br>        book.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;The Da Vinci Code&quot;</span>);<br>        book.put(<span class="hljs-string">&quot;author&quot;</span>,<span class="hljs-string">&quot;Dan Brown&quot;</span>);<br>        book.put(<span class="hljs-string">&quot;pages&quot;</span>,<span class="hljs-number">454</span>);<br>        book.put(<span class="hljs-string">&quot;price&quot;</span>,<span class="hljs-number">16.53</span>);<br>        BookDatabase.insert(<span class="hljs-string">&quot;Book&quot;</span>,<span class="hljs-literal">null</span>,book);<br>        book.clear();<br>        <span class="hljs-comment">//组装第二条记录</span><br>        book.put(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;The Lost Symbol&quot;</span>);<br>        book.put(<span class="hljs-string">&quot;author&quot;</span>,<span class="hljs-string">&quot;Dan Brown&quot;</span>);<br>        book.put(<span class="hljs-string">&quot;pages&quot;</span>,<span class="hljs-number">510</span>);<br>        book.put(<span class="hljs-string">&quot;price&quot;</span>,<span class="hljs-number">17.16</span>);<br>        BookDatabase.insert(<span class="hljs-string">&quot;Book&quot;</span>,<span class="hljs-literal">null</span>,book);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将上面的操作转成SQL语句就是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> Book(name, author, pages, price) <span class="hljs-keyword">values</span>(&quot;The Da Vinci Code&quot;, &quot;Dan Brown&quot;, <span class="hljs-number">454</span>, <span class="hljs-number">16.53</span>);<br>......<br></code></pre></td></tr></table></figure><p>由于id被指定为自增长，所以不需要设置id的值。然后我们可以打开BookStore数据库，执行<code>select * from Book; </code>语句（<strong>不要忘记最后添加分号</strong>）来验证是否添加成功。</p><h2 id="4-4-更新数据"><a href="#4-4-更新数据" class="headerlink" title="4.4 更新数据"></a>4.4 更新数据</h2><p>更新数据使用<code>update()</code>方法，该方法接收4个参数：</p><ol><li>第一个参数是表名。</li><li>第三个参数是一个ContentValues对象，把要更新的数据在这里组装进去。</li><li>第三、第四个参数用于约束更新某一行或某几行中的数据，不指定的话默认更新所有行。</li></ol><p>只需要稍微修改MainActivity中的代码就行了，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br>......<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ClicktoUpDate</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-type">MyDatabaseHelper</span> <span class="hljs-variable">myDatabaseHelper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDatabaseHelper</span>(<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;BookStore.db&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">2</span>);<br>        <span class="hljs-type">SQLiteDatabase</span> <span class="hljs-variable">BookDatabase</span> <span class="hljs-operator">=</span> myDatabaseHelper.getWritableDatabase();<br><br>        <span class="hljs-type">ContentValues</span> <span class="hljs-variable">values</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ContentValues</span>();<br>        values.put(<span class="hljs-string">&quot;price&quot;</span>,<span class="hljs-number">9.99</span>);<br>        <br>        BookDatabase.update(<span class="hljs-string">&quot;Book&quot;</span>,values,<span class="hljs-string">&quot;name = ?&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;The Da Vinci Code&quot;</span>&#125;);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>从这里可以看出SQLiteDatabase的<code>update()</code>的第三、第四个参数的具体作用。第三个参数对应的是SQL语句的where部分，表示更新有name等于？的行，而？是一个占位符，可以通过第四个参数提供的一个字符串数组为第三个参数中的每个占位符指定相应的内容，相当于SQL代码：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">update</span> Book <span class="hljs-keyword">set</span> price <span class="hljs-operator">=</span> <span class="hljs-number">9.99</span> <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> &quot;The Da Vinci Code&quot;;<br></code></pre></td></tr></table></figure><h2 id="4-5-删除数据"><a href="#4-5-删除数据" class="headerlink" title="4.5 删除数据"></a>4.5 删除数据</h2><p>更新数据使用<code>delete()</code>方法，该方法接收3个参数：</p><ol><li>第一个参数是表名。</li><li>第二、三个参数用于约束删除某一行或某几行中的数据，不指定的话默认删除所有行。</li></ol><p>同样的，只需要把MainActivity中的操作换成删除操作就行了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br>......<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ClicktoCreateupDate</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-type">MyDatabaseHelper</span> <span class="hljs-variable">myDatabaseHelper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDatabaseHelper</span>(<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;BookStore.db&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">2</span>);<br>        <span class="hljs-type">SQLiteDatabase</span> <span class="hljs-variable">BookDatabase</span> <span class="hljs-operator">=</span> myDatabaseHelper.getWritableDatabase();<br>        BookDatabase.delete(<span class="hljs-string">&quot;Book&quot;</span>,<span class="hljs-string">&quot;pages &gt; ?&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;500&quot;</span>&#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应的SQL语句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> Book <span class="hljs-keyword">where</span> pages <span class="hljs-operator">&gt;</span> <span class="hljs-number">500</span>;<br></code></pre></td></tr></table></figure><h2 id="4-6-查询语句"><a href="#4-6-查询语句" class="headerlink" title="4.6 查询语句"></a>4.6 查询语句</h2><p>学过数据库的都知道，查询语句是最复杂的一种操作，因为它往往会伴随一些复杂的限制条件，以及多个表结合查询等等。</p><p>查询语句使用<code>query()</code>方法，因为它的复杂性，所以参数有很多。最短的一个方法也需要传入7个参数，分别如下：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308131923945.jpg"></p><p>拿个简单的例子试试手。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br>    ......<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ClicktoCreateupDate</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-type">MyDatabaseHelper</span> <span class="hljs-variable">myDatabaseHelper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDatabaseHelper</span>(<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;BookStore.db&quot;</span>,<span class="hljs-literal">null</span>,<span class="hljs-number">3</span>);<br>        <span class="hljs-type">SQLiteDatabase</span> <span class="hljs-variable">BookDatabase</span> <span class="hljs-operator">=</span> myDatabaseHelper.getWritableDatabase();<br>        <span class="hljs-type">Cursor</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> BookDatabase.query(<span class="hljs-string">&quot;Book&quot;</span>, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;author = ?&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;Dan Brown&quot;</span>&#125;, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>        <span class="hljs-keyword">if</span> (book.moveToFirst())&#123;<br>            <span class="hljs-keyword">do</span> &#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> book.getString(book.getColumnIndex(<span class="hljs-string">&quot;name&quot;</span>));<br>                <span class="hljs-type">String</span> <span class="hljs-variable">author</span> <span class="hljs-operator">=</span> book.getString(book.getColumnIndex(<span class="hljs-string">&quot;author&quot;</span>));<br>                <span class="hljs-type">int</span> <span class="hljs-variable">pages</span> <span class="hljs-operator">=</span> book.getInt(book.getColumnIndex(<span class="hljs-string">&quot;pages&quot;</span>));<br>                <span class="hljs-type">double</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> book.getDouble(book.getColumnIndex(<span class="hljs-string">&quot;price&quot;</span>));<br>                Log.d(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;name: &quot;</span> + name);<br>                Log.d(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;author: &quot;</span> + author);<br>                Log.d(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;pages: &quot;</span> + pages);<br>                Log.d(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;price: &quot;</span> + price);<br>            &#125;<span class="hljs-keyword">while</span> (book.moveToNext());<br>        &#125;<br>        book.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>相当于SQL语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> Book <span class="hljs-keyword">where</span> author <span class="hljs-operator">=</span> &quot;Dan Brown&quot;;<br></code></pre></td></tr></table></figure><p><code>moveToFirst()</code>方法将数据的指针移动到第一行的位置，然后进入了一个循环当中，去遍历查询到的每一行数据。在这个循环中可以<br>通过Cursor的<code>getColumnIndex()</code>方法获取到某一列在表中对应的位置索引，然后将这个索引传入到相应的取值方法中，就可以得到从数据库中读取到的数据了。</p><h2 id="4-7-使用SQL操作数据库"><a href="#4-7-使用SQL操作数据库" class="headerlink" title="4.7 使用SQL操作数据库"></a>4.7 使用SQL操作数据库</h2><p>如果我们不习惯使用Android提供的方法来对数据进行操作时，我们也可以直接执行SQL语句来实现对数据的操作。</p><p>现在对这四种操作举一些例子来理解如何使用（假定数据库对象为db）。</p><ul><li><p>添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.execSQL(&quot;insert into Book (name,author,pages,price) values(?,?,?,?)&quot;, <span class="hljs-keyword">new</span> String[]&#123;&quot;The Da Vinci Code&quot;,&quot;Dan Brown&quot;,&quot;454&quot;,&quot;16.96&quot;&#125;)<br></code></pre></td></tr></table></figure></li><li><p>跟新数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.execSQL(&quot;update Book set price = ? where name = ?&quot;, <span class="hljs-keyword">new</span> string[]&#123;&quot;10.99&quot;, &quot;The Da Vinci Code&quot;&#125;);<br></code></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.execSQL(&quot;delete from Book where pages &gt; ?&quot;, <span class="hljs-keyword">new</span> String[]&#123;&quot;500&quot;&#125;);<br></code></pre></td></tr></table></figure></li><li><p>查询数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">db.rawQuery(&quot;select * from Book&quot;,<span class="hljs-keyword">null</span>);<br>rawQuery(&quot;select * from Book where author = ?&quot;, <span class="hljs-keyword">new</span> String[]&#123;&quot;Dan Brown&quot;&#125;)<br></code></pre></td></tr></table></figure></li></ul><p>简而言之，第一个参数是通配SQL语句，第二个参数是填充通配符的值（按顺序填写）。</p><h1 id="五、使用LitePal操作数据库"><a href="#五、使用LitePal操作数据库" class="headerlink" title="五、使用LitePal操作数据库"></a>五、使用LitePal操作数据库</h1><p>LitePal是一款开源的Android数据库框架，它采用了对象关系映射（ORM）的模式，并将我们平时开发最常用到的一些数据库功能进行了封装，使得不用编写一行SQL语句就可以完成各种建表和增删改查的操作。LitePal的项目主页上也有详细的使用文档，地址是：<a href="https://github.com/guolindev/LitePal">https://github.com/guolindev/LitePal</a>。</p><h2 id="5-1-配置LitePal"><a href="#5-1-配置LitePal" class="headerlink" title="5.1 配置LitePal"></a>5.1 配置LitePal</h2><p>那么怎样才能在项目中使用开源库呢？过去的方式比较复杂，通常需要下载开源库的 Jar 包或者源码，然后再集成到我们的项目当中。而现在就简单得多了，大多数的开源项目都会将版本提交到 jcenter 上，我们只需要在 <code>app/build.gradle </code>文件中声明该开源库的引用就可以了。</p><p>因此，要使用LitePal的第一步，就是编辑<code>app/build.gradle</code>文件，在dependencies闭包中添加如下内容：</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs clean">dependencies &#123;<br>    <span class="hljs-keyword">implementation</span> <span class="hljs-string">&#x27;org.litepal.guolindev:core:3.2.3&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>添加的这一行声明中，前面部分是固定的，最后的3.2.3是版本号的意思，最新的版本号可以到LitePal的项目主页上去查看。</p><p>接下来就可以开始build了。但是会报错：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs awk">Execution failed <span class="hljs-keyword">for</span> task <span class="hljs-string">&#x27;:app:mergeDebugNativeLibs&#x27;</span>.<br>&gt; Could not resolve all files <span class="hljs-keyword">for</span> configuration <span class="hljs-string">&#x27;:app:debugRuntimeClasspath&#x27;</span>.<br>   &gt; Could not find org.litepal.guolindev:core:<span class="hljs-number">3.2</span>.<span class="hljs-number">3</span>.<br>     Searched <span class="hljs-keyword">in</span> the following locations:<br>       - https:<span class="hljs-regexp">//</span>dl.google.com<span class="hljs-regexp">/dl/</span>android<span class="hljs-regexp">/maven2/</span>org<span class="hljs-regexp">/litepal/gu</span>olindev<span class="hljs-regexp">/core/</span><span class="hljs-number">3.2</span>.<span class="hljs-number">3</span>/core-<span class="hljs-number">3.2</span>.<span class="hljs-number">3</span>.pom<br>       - https:<span class="hljs-regexp">//</span>repo.maven.apache.org<span class="hljs-regexp">/maven2/</span>org<span class="hljs-regexp">/litepal/gu</span>olindev<span class="hljs-regexp">/core/</span><span class="hljs-number">3.2</span>.<span class="hljs-number">3</span>/core-<span class="hljs-number">3.2</span>.<span class="hljs-number">3</span>.pom<br>     Required by:<br>         project :app<br></code></pre></td></tr></table></figure><p>这个报错告诉我们在<a href="https://dl.google.com/dl/android/maven2%E5%92%8Chttps://repo.maven.apache.org/maven2%E7%BD%91%E7%AB%99%E4%B8%8A%E6%89%BE%E4%B8%8D%E5%88%B0LitePal%E3%80%82%E4%BD%86%E9%97%AE%E9%A2%98%E6%98%AF%E6%88%91%E4%BB%AC%E6%98%8E%E6%98%8E%E7%9F%A5%E9%81%93LitePal%E5%9C%A8Github%E4%B8%8A%EF%BC%8C%E4%BD%86%E5%AE%83%E5%8D%B4%E5%9C%A8%E8%BF%99%E4%B8%A4%E4%B8%AA%E7%BD%91%E7%AB%99%E4%B8%8A%E6%9F%A5%E6%89%BE%E3%80%82%E4%B8%BA%E4%BA%86%E4%BF%AE%E6%94%B9%E5%AE%83%E7%9A%84%E4%B8%8B%E8%BD%BD%E8%B7%AF%E5%BE%84%EF%BC%8C%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E5%9C%A8%E5%A4%96%E5%B1%82%E7%9B%AE%E5%BD%95%E4%B8%8B%E7%9A%84%60settings.gradle%60%E6%96%87%E4%BB%B6%E4%B8%AD%E7%9A%84">https://dl.google.com/dl/android/maven2和https://repo.maven.apache.org/maven2网站上找不到LitePal。但问题是我们明明知道LitePal在Github上，但它却在这两个网站上查找。为了修改它的下载路径，我们需要在外层目录下的`settings.gradle`文件中的</a> <code>repositories</code> 块中添加以下代码：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">jcenter</span><span class="hljs-params">()</span></span><br>maven &#123; url <span class="hljs-string">&#x27;https://jitpack.io&#x27;</span> &#125;<br></code></pre></td></tr></table></figure><p>再次build就把LitePal成功引入到当前项目中了，接下来需要配置litepal.xml文件。在<code>app/src/main</code>目录下创建一个assets目录，然后在assets目录下再新建一个<code>litepal.xml</code>文件（选择File，命名的时候加文件后缀），接着编辑<code>litepal.xml</code>文件中的内容，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">litepal</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    Define the database name of your application.</span><br><span class="hljs-comment">    By default each database name should be end with .db.</span><br><span class="hljs-comment">    If you didn&#x27;t name your database end with .db,</span><br><span class="hljs-comment">    LitePal would plus the suffix automatically for you.</span><br><span class="hljs-comment">    For example:</span><br><span class="hljs-comment">    &lt;dbname value=&quot;demo&quot; /&gt;</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dbname</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;BookStore&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    Define the version of your database. Each time you want</span><br><span class="hljs-comment">    to upgrade your database, the version tag would helps.</span><br><span class="hljs-comment">    Modify the models you defined in the mapping tag, and just</span><br><span class="hljs-comment">    make the version value plus one, the upgrade of database</span><br><span class="hljs-comment">    will be processed automatically without concern.</span><br><span class="hljs-comment">For example:</span><br><span class="hljs-comment">    &lt;version value=&quot;1&quot; /&gt;</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span> /&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">    Define your models in the list with mapping tag, LitePal will</span><br><span class="hljs-comment">    create tables for each mapping class. The supported fields</span><br><span class="hljs-comment">    defined in models will be mapped into columns.</span><br><span class="hljs-comment">    For example:</span><br><span class="hljs-comment">    &lt;list&gt;</span><br><span class="hljs-comment">    &lt;mapping class=&quot;com.test.model.Reader&quot; /&gt;</span><br><span class="hljs-comment">    &lt;mapping class=&quot;com.test.model.Magazine&quot; /&gt;</span><br><span class="hljs-comment">    &lt;/list&gt;</span><br><span class="hljs-comment">    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--</span><br><span class="hljs-comment">        Define where the .db file should be. &quot;internal&quot; means the .db file</span><br><span class="hljs-comment">        will be stored in the database folder of internal storage which no</span><br><span class="hljs-comment">        one can access. &quot;external&quot; means the .db file will be stored in the</span><br><span class="hljs-comment">        path to the directory on the primary external storage device where</span><br><span class="hljs-comment">        the application can place persistent files it owns which everyone</span><br><span class="hljs-comment">        can access. &quot;internal&quot; will act as default.</span><br><span class="hljs-comment">        For example:</span><br><span class="hljs-comment">        &lt;storage value=&quot;external&quot; /&gt;</span><br><span class="hljs-comment">    --&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">litepal</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中，<code>&lt;dbname&gt;</code>标签用于指定数据库名，<code>&lt;version&gt;</code>标签用于指定数据库版本号，<code>&lt;List&gt;</code>标签用于指定所有的映射模型，我们稍后就会用到。</p><p>最后在<code>AndroidManifest.xml</code>文件中添加：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">manifest</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">application</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;org.litepal.LitePalApplication&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">...</span></span><br><span class="hljs-tag">    &gt;</span><br>        ...<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">application</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br></code></pre></td></tr></table></figure><p>至此，我们就完成了LitePal的环境搭建！</p><h2 id="5-2-创建和升级数据库"><a href="#5-2-创建和升级数据库" class="headerlink" title="5.2 创建和升级数据库"></a>5.2 创建和升级数据库</h2><p>刚才在介绍的时候已经说过，LitePal采取的是对象关系映射（ORM)的模式，那么什么是对象关系映射呢？简单点说，我们使用的编程语言是面向对象语言，而使用的数据库则是关系型数据库，那么将面向对象的语言和面向关系的数据库之间建立一种映射关系，这就是对象关系映射了。</p><p>之前为了创建一张Book表，需要先分析表中应该包含哪些列，然后再编写出一条建表语句，最后在自定义的SQLiteOpenHelper中去执行这条建表语句。但是使用LitePal就可以用面向对象的思维来实现同样的功能了，定义一个Book类，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LitePalSupport</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String author;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> pages;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">(<span class="hljs-type">int</span> id, String author, <span class="hljs-type">double</span> price, <span class="hljs-type">int</span> pages, String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.author = author;<br>        <span class="hljs-built_in">this</span>.price = price;<br>        <span class="hljs-built_in">this</span>.pages = pages;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Book</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getAuthor</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> author;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAuthor</span><span class="hljs-params">(String author)</span> &#123;<br>        <span class="hljs-built_in">this</span>.author = author;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrice</span><span class="hljs-params">(<span class="hljs-type">double</span> price)</span> &#123;<br>        <span class="hljs-built_in">this</span>.price = price;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getPages</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> pages;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPages</span><span class="hljs-params">(<span class="hljs-type">int</span> pages)</span> &#123;<br>        <span class="hljs-built_in">this</span>.pages = pages;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是一个典型的Java bean，在Book类中我们定义了id、author、price、pages、name这几个字段，并生成了相应的getter和setter方法。学过java web的应该知道，Book类对应的是数据库中的Book表，而类中的每一个字段分别对应了表中的每一个列，这就是对象关系映射最直观的体验。</p><p>接下来我们还需要将Book类添加到映射模型列表当中，修改<code>litepal.xml</code>中的代码，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">litepal</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dbname</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;BookStore&quot;</span> /&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span> /&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.testlitepal.Book&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">litepal</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里使用<code>&lt;mapping/&gt;</code>标签来声明我们要配置的映射模型类，<strong>注意一定要使用完整的类名</strong>。不管有多少模型类需要映射，都使用同样的方式配置在<code>&lt;list&gt;</code>标签下即可。<br>到这里我们就已经把所有工作都完成了，现在只要进行任意一次数据库的操作，BookStore.db数据库应该就会自动创建出来。那么我们修改MainActivity中的代码，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ClicktoCreateDataBase</span><span class="hljs-params">(View view)</span> &#123;<br>        LitePal.getDatabase();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Connector.getDatabase()</code>方法是一次最简单的数据库操作，只要点击一下按钮，数据库就会自动创建完成了。运行一下程序，然后点击Create database按钮，通过adb shell查看，如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308131924801.jpg"></p><p>（一直在查看BookStore文件，以为没创建出表，最后才发现应该查看BookStore.db文件！！！）</p><h2 id="5-3-升级数据库"><a href="#5-3-升级数据库" class="headerlink" title="5.3 升级数据库"></a>5.3 升级数据库</h2><p>在 4.2 的最后，我留了个疑问，就是删除之前的数据库可能会造成数据丢失的问题。然而在LitePal中，我们并不需要担心这个问题，我们只需要添加或者修改目标内容，然后将版本号 +1 就行了。</p><p>比如我们想要向Book表中添加一个press（出版社）列，那么直接在Book类中添加一个press字段即可并设置好get和set方法即可（如果有带参的构造函数，记得在参数中添加新属性），代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LitePalSupport</span> &#123;<br><br>......<br>    <span class="hljs-keyword">private</span> String press;<br><br>......<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPress</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> press;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPress</span><span class="hljs-params">(String press)</span> &#123;<br>        <span class="hljs-built_in">this</span>.press = press;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>与此同时，我们再添加一张Category表，那么只需要创建一个Category类即可，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Category</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LitePalSupport</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">private</span> String categoryName;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> categoryCode;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getCategoryName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> categoryName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCategoryName</span><span class="hljs-params">(String categoryName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.categoryName = categoryName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCategoryCode</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> categoryCode;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setCategoryCode</span><span class="hljs-params">(<span class="hljs-type">int</span> categoryCode)</span> &#123;<br>        <span class="hljs-built_in">this</span>.categoryCode = categoryCode;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>改完了所有我们想改的东西，只需要记得将版本号 +1 就行了。当然由于这里还添加了一个新的模型类，因此也需要将它添加到映射模型列表中。修改litepal.xml中的代码，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">litepal</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dbname</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;BookStore&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">list</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.testlitepal.Book&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapping</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;com.example.testlitepal.Category&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">list</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">litepal</span>&gt;</span><br></code></pre></td></tr></table></figure><p>重新运行程序，点击按钮，通过查看可以确认成功了。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308131924266.jpg"></p><p>（这里是安装了一个插件，感觉更加方便，可以查看表的结构和数据。双击文件的时候会有弹窗，然后那个插件就在里面，专门用来打开数据库的）</p><h2 id="5-4-添加数据"><a href="#5-4-添加数据" class="headerlink" title="5.4 添加数据"></a>5.4 添加数据</h2><p><strong>对于增删改操作，模型类必须要继承LitePalSupport类才行。</strong>之后我们只需要创建出模型类的实例，再将所有要存储的数据设置好，最后调用一下<code>save()</code>方法就可以了。</p><p>好在我们写的代码已经继承了，所以代码直接复用就行。因此我们只需要修改MainActivity代码，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br>......<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ClicktoAddData</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-comment">//创建实体类</span><br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>        <span class="hljs-comment">//设置属性值</span><br>        book.setName(<span class="hljs-string">&quot;The Da Vinci Code&quot;</span>);<br>        book.setAuthor(<span class="hljs-string">&quot;Dan Brown&quot;</span>);<br>        book.setPages(<span class="hljs-number">454</span>);<br>        book.setPrice(<span class="hljs-number">16.92</span>);<br>        book.setPress(<span class="hljs-string">&quot;Unknow&quot;</span>);<br>        <span class="hljs-comment">//向Book表中添加数据</span><br>        book.save();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然也可以直接使用构造函数设置属性值。重新运行程序，可以发现数据添加成功。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308131925366.jpg"></p><h2 id="5-5-更新数据"><a href="#5-5-更新数据" class="headerlink" title="5.5 更新数据"></a>5.5 更新数据</h2><p>更新数据要比添加数据稍微复杂一点，因为它的API接口比较多，这里我们只介绍最常用的几种更新方式。</p><p>首先，最简单的一种更新方式就是对数据库中<strong>已存储的对象</strong>重新设值，然后重新调用<code>save()</code>方法即可。例子如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ClicktoUpData</span><span class="hljs-params">(View view)</span> &#123;<br><span class="hljs-comment">//在Book表中找到id为1的记录</span><br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> LitePal.find(Book.class,<span class="hljs-number">1</span>)<br><span class="hljs-comment">//设置要修改的值</span><br>        book.setPrice(<span class="hljs-number">10.99</span>);<br>    <span class="hljs-comment">//提交</span><br>        book.save();<br>&#125;<br></code></pre></td></tr></table></figure><p>其中<code>LitePal.find(model.class,id)</code>方法的第一个参数为表对应的类，第二个为要更新的记录的id。</p><p>第二种方法是使用<code>model.update(id)</code>或<code>model.updateAll(conditions)</code>方法，示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ClicktoUpData</span><span class="hljs-params">(View view)</span> &#123;<br><br>        <span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br><br>        book.setPrice(<span class="hljs-number">9.99</span>);<br>        book.setPress(<span class="hljs-string">&quot;Anchor&quot;</span>);<br><span class="hljs-comment">//更新id=1的记录</span><br>        book.update(<span class="hljs-number">1</span>);<br><span class="hljs-comment">//更新页数为510页的记录</span><br>book.updateAll(<span class="hljs-string">&quot;pages = ?&quot;</span>,<span class="hljs-string">&quot;510&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>其中<code>update()</code>方法指定id即可，<code>updateAll()</code>方法可以指定一个或多个约束条件，如果不指定条件语句的话，就表示更新所有数据。</p><p>当你想把一个字段的值更新成默认值时，是不可以使用上面的方式来设置数据的。在Java中任何一种数据类型的字段都会有默认值，当我们new出一个Book对象时，其实所有字段都已经被初识化成默认值了，比如pages默认为0，因此，如果我们想把数据库表中的pages列更新成0，直接调用<code>book.setPages(0)</code>是不可以的，因为即使不调用这行代码，pages字段本身也是0，LitePal此时是不会对这个列进行更新的。</p><p>对于将数据更新成默认值的操作，LitePal统一提供了一个<code>setToDefault()</code>方法，然后传入相应的列名就可以了实现了。<br>比如我们可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>book.setToDefault(<span class="hljs-string">&quot;pages&quot;</span>);<br>book.updateAll();<br></code></pre></td></tr></table></figure><p>这段代码的意思是，将所有书的页数都更新为0，因为<code>updateAll()</code>方法中没有指定约束条件，因此更新操作对所有数据都生效了。</p><h2 id="5-6-删除数据"><a href="#5-6-删除数据" class="headerlink" title="5.6 删除数据"></a>5.6 删除数据</h2><p>删除数据有两种方法：<code>LitePal.delete(model.class,id)</code>方法和<code>LitePal.deleteAll(model.class,conditions)</code>方法。示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ClicktoCreateDataBase</span><span class="hljs-params">(View view)</span> &#123;<br><span class="hljs-comment">//删除Book表中id=1的记录</span><br>    LitePal.delete(Book.class, <span class="hljs-number">1</span>);<br>    <span class="hljs-comment">//删除Book表中name = &quot;Dan Brown&quot;的记录</span><br>    LitePal.deleteAll(Book.class, <span class="hljs-string">&quot;name = ?&quot;</span> , <span class="hljs-string">&quot;Dan Brown&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-7查询数据"><a href="#5-7查询数据" class="headerlink" title="5.7查询数据"></a>5.7查询数据</h2><p>对于查询数据，LitePal提供了<code>find()</code>、<code>findAll()</code>、<code>select()</code>、<code>where()</code>、<code>order()</code>、<code>limit()</code>、<code>offset()</code>方法进行组合查询，</p><ul><li><p><code>select()</code>：用于指定查询哪几列的数据，对应了SQL当中的select关键字。比如只查name和author这两列的数据，就可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Book&gt; books = LitePal.select(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;author&quot;</span>).find(Book.class); <br></code></pre></td></tr></table></figure></li><li><p><code>where()</code>方法：用于指定查询的约束条件，对应了SQL当中的where关键字。比如只查页数大于400的数据，就可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Book&gt; books = LitePal.where(<span class="hljs-string">&quot;pages &gt; ?&quot;</span>,<span class="hljs-string">&quot;400&quot;</span>).find(Book.class);<br></code></pre></td></tr></table></figure></li><li><p><code>order()</code>方法：用于指定结果的排序方式，对应了SQL当中的order by关键字。比如将查询结果按照书价从高到低排序，就可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Book&gt; books = LitePal.order(<span class="hljs-string">&quot;price desc&quot;</span>).find(Book.class);<br></code></pre></td></tr></table></figure><p>其中<code>desc</code>表示降序排列，<code>asc</code>或者不写表示升序排列。</p></li><li><p><code>limit()</code>方法：用于指定查询结果的数量，比如只查表中的前3条数据，就可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Book&gt; books = LitePal.limit(<span class="hljs-number">3</span>).find(Book.class);<br></code></pre></td></tr></table></figure></li><li><p><code>offset()</code>方法：用于指定查询结果的偏移量，比如查询表中的第2条、第3条、第4条数据，就可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Book&gt; books = LitePal.limit(<span class="hljs-number">3</span>).offset(<span class="hljs-number">1</span>).find(Book.class);<br></code></pre></td></tr></table></figure><p>由于<code>limit(3)</code>查询到的是前3条数据，这里我们再加上<code>offset(1)</code>进行一个位置的偏移，就能实现查询第2条、第3条、第4条数据的功能了。<code>limit()</code>和<code>offset()</code>方法共同对应了SQL当中的limit关键字。</p></li></ul><p>当然，我们还可以对这5个方法进行任意的连缀组合，来完成一个比较复杂的查询操作，示例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//查找单条记录</span><br><span class="hljs-type">Book</span> <span class="hljs-variable">book</span> <span class="hljs-operator">=</span> LitePal.find(Book.class, <span class="hljs-number">1</span>);<br><span class="hljs-comment">//查找所有记录</span><br>List&lt;Book&gt; booklist = LitePal.findAll(Book.class);<br><span class="hljs-comment">//查询Book表中第11~20条满足页数大于400这个条件的name、author和pages这3列数据，并将查询结果按照页数升序排列。</span><br>List&lt;Book&gt; booklist = LitePal.select(<span class="hljs-string">&quot;name&quot;</span>,<span class="hljs-string">&quot;author&quot;</span>,<span class="hljs-string">&quot;pages&quot;</span>)<br>    .where(<span class="hljs-string">&quot;pages &gt; ?&quot;</span>, <span class="hljs-string">&quot;400&quot;</span>)<br>                    .order(<span class="hljs-string">&quot;pages&quot;</span>)<br>                    .limit(<span class="hljs-number">10</span>)<br>           .offset(<span class="hljs-number">10</span>)<br>           .find(Book.class);<br></code></pre></td></tr></table></figure><p>除此之外，LitePal仍然支持使用原生的SQL来进行查询：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Cursor</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> LitePal.findBySQL(<span class="hljs-string">&quot;select * from Book where pages &gt; ? and price &lt; ?&quot;</span>,<span class="hljs-string">&quot;400&quot;</span>,<span class="hljs-string">&quot;20&quot;</span>）;<br></code></pre></td></tr></table></figure><p>其中<code>LitePal.findBySQL()</code>方法的第一个参数用于指定SQL语句，后面的参数用于指定占位符的值。注意<code>findBySQL()</code>方法返回的是一个Cursor对象，接下来还需要通过之前所学的老方式将数据一一取出才行。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android开发学习笔记(六) —— 重温BroadcastReceiver</title>
    <link href="/2023/08/12/Android%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%85%AD)%20%E2%80%94%E2%80%94%20%E9%87%8D%E6%B8%A9BroadcastReceiver/"/>
    <url>/2023/08/12/Android%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%85%AD)%20%E2%80%94%E2%80%94%20%E9%87%8D%E6%B8%A9BroadcastReceiver/</url>
    
    <content type="html"><![CDATA[<h1 id="一、什么是BroadcastReceiver"><a href="#一、什么是BroadcastReceiver" class="headerlink" title="一、什么是BroadcastReceiver"></a>一、什么是BroadcastReceiver</h1><p>广播（Broadcast）是一种广泛运用的在应用程序之间传输信息的机制。而广播接收器（BroadcastReceiver）是Android四大组件之一，用于对发送出来的广播进行过滤接受并响应的一类组件。它允许应用程序在某些事件发生时作出响应，无论应用是否在前台运行。它的工作原理是基于发布-订阅模式。应用程序可以选择注册感兴趣的广播消息，并在消息到达时进行响应。这种机制使得不同的应用程序之间能够实现通信和协作，同时也提供了一种系统级别的事件通知机制。广播接收器在 Android 开发中非常有用，可以用于实现很多功能，如接收来电或短信提醒、处理网络状态变化、监听系统事件等。</p><h2 id="1-1-标准广播和有序广播"><a href="#1-1-标准广播和有序广播" class="headerlink" title="1.1 标准广播和有序广播"></a>1.1 标准广播和有序广播</h2><ol><li><p><strong>标准广播</strong></p><p>完全异步执行的广播，所有的接收者几乎同时接收到广播消息。这种广播不保证接收者能够同时处理广播，也不能保证接收者按照特定的顺序接收到广播。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308131921764.jpg"></p></li><li><p><strong>有序广播</strong></p><p>同步执行的一种广播，发出广播后，同一时间只有一个广播接收者能收到，当这个广播接收者的逻辑执行完后，广播才会继续传递。当然，前面的接受者还可以截断广播的继续传递，那么后续接受者就无法收到广播信息了。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308131921064.jpg"></p></li></ol><h2 id="静态注册和动态注册"><a href="#静态注册和动态注册" class="headerlink" title="静态注册和动态注册"></a>静态注册和动态注册</h2><p>不同于其他三大组件，广播接收器既可以在<code>AndroidManifest.xml</code>中进行静态注册，也可以在代码中进行动态注册。</p><ol><li><p>静态注册</p><p>在<code>AndroidManifest.xml</code>文件中进行注册。</p><p>静态注册的广播接收器与设备共存亡，可以让应用在未运行时也能接收到广播消息。</p></li><li><p>动态注册</p><p>在代码中使用<code>registerReceiver()</code>进行注册，并在适当的时候调用 <code>unregisterReceiver()</code> 方法进行解注册。</p><p>动态注册的广播接收器与注册它的Activity共存亡，只有当应用处于运行状态时，接收器才会接收到广播消息。</p></li></ol><h1 id="二、BroadcastReceiver的基本使用"><a href="#二、BroadcastReceiver的基本使用" class="headerlink" title="二、BroadcastReceiver的基本使用"></a>二、BroadcastReceiver的基本使用</h1><h2 id="2-1-静态注册接收开机广播"><a href="#2-1-静态注册接收开机广播" class="headerlink" title="2.1 静态注册接收开机广播"></a>2.1 静态注册接收开机广播</h2><p>首先创建一个<code>BootCompleteReceiver</code>类，重写<code>onReceive()</code>方法，进行简单的弹窗提示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BootCompleteReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BroadcastReceiver</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ACTION_BOOT</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;android.intent.action.BOOT_COMPLETED&quot;</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>        <span class="hljs-keyword">if</span> (ACTION_BOOT.equals(intent.getAction()))<br>            Toast.makeText(context, <span class="hljs-string">&quot;开机完毕~&quot;</span>, Toast.LENGTH_LONG).show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为是静态注册，所以需要在<code>AndroidManifest.xml</code>文件中进行注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">receiver</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.BootCompleteReceiver&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span> = <span class="hljs-string">&quot;android.intent.cation.BOOT_COMPLETED&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">receiver</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当设备启动完成后，广播接收器就会收到名为 <code>android.intent.action.BOOT_COMPLETED</code> 的广播，并执行相应的逻辑操作。</p><p>除此之外，还要给应用添加权限。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>主活动中不需要添加任何代码。</p><h2 id="2-2-动态注册监听网络状态变化"><a href="#2-2-动态注册监听网络状态变化" class="headerlink" title="2.2 动态注册监听网络状态变化"></a>2.2 动态注册监听网络状态变化</h2><p>以监听网络变化为例，讲解如何动态注册广播接收者。</p><p>首先我们需要创建一个<code>BroadcastReceiver</code>类，重写父类的<code>onReceive()</code>方法来实现网络变化后动作（比如弹窗提示啥的）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NetworkReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BroadcastReceiver</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>        Toast.makeText(context, <span class="hljs-string">&quot;网络状态发生改变&quot;</span>, Toast.LENGTH_SHORT).show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后再主活动中动态注册该广播接收者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-keyword">private</span> NetworkReceiver networkReceiver;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><span class="hljs-comment">//实例化广播接收者</span><br>        networkReceiver = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NetworkReceiver</span>();<br>        <span class="hljs-comment">//添加意图为网络状态改变</span><br>        <span class="hljs-type">IntentFilter</span> <span class="hljs-variable">intentFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntentFilter</span>();<br>        intentFilter.addAction(<span class="hljs-string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span>);<br><span class="hljs-comment">//使用registerReceiver()动态注册广播接收者</span><br>        registerReceiver(networkReceiver, intentFilter);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>        unregisterReceiver(networkReceiver);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当网络状态发生变化时，系统会发出一条值为<code>android.net.conn.CONNECTIVITY_CHANGE</code>的广播，因为我们的广播接收器需要监听这个广播，所以action就设置此值。</p><p>最后，不要忘记将广播接收器取消注册。动态注册的广播接收器与活动共存亡，所以重写活动的<code>onDestroy()</code>方法，调用<code>unregisterReceiver()</code>方法来实现。</p><h2 id="2-3-发送自定义广播"><a href="#2-3-发送自定义广播" class="headerlink" title="2.3 发送自定义广播"></a>2.3 发送自定义广播</h2><p>上面两个案例都是讲如何接收广播，接下来我们来学习如何发送广播。在前面已经介绍过，广播主要分为两种类型：标准广播和有序广播。那么这两种广播如何发送呢？</p><h3 id="2-3-1-发送标准广播"><a href="#2-3-1-发送标准广播" class="headerlink" title="2.3.1 发送标准广播"></a>2.3.1 发送标准广播</h3><p>在发送广播前，我们仍然要定义一个广播接收器来接收我们发送的广播。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBroadcastReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BroadcastReceiver</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>        Log.d(<span class="hljs-string">&quot;MyBroadcastReceiver&quot;</span>, <span class="hljs-string">&quot;Received&quot;</span>);<br>        Toast.makeText(context, <span class="hljs-string">&quot;MyBroadcastReceiver received&quot;</span>, Toast.LENGTH_SHORT).show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>AndroidManifest.xml</code>中进行注册。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">receiver</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.MyBroadcastReceiver&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">android:enabled</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--自定义一个动作--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">receiver</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在主活动的xml中定义一个按钮，用来发送广播。最后是<code>MainActivity.java</code>代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-keyword">private</span> NetworkReceiver networkReceiver;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendBroadcast</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-string">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span>);<br>        <span class="hljs-comment">//SDK版本 &gt; 26需要添加</span><br>        <span class="hljs-comment">//intent.addFlags(0x01000000);</span><br>        sendBroadcast(intent);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>原本到这里就可以实现功能了。但是我这里出了点小插曲。点击按钮后，没有反应，而且Logcat中提示：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Background execution <span class="hljs-keyword">not</span> allowed: receiving Intent &#123; <span class="hljs-attribute">act</span>=com.example.broadcasttest.MY_BROADCAST <span class="hljs-attribute">flg</span>=0x2010 &#125; <span class="hljs-keyword">to</span> com.example.testbroadcastreceiver/.MyBroadcastReceiver<br></code></pre></td></tr></table></figure><p>原因是自 Android 8.0（API 级别 26）起，Android 引入了后台执行限制，以提高设备性能和安全性。这意味着在后台运行的应用程序将无法接收到大多数隐式广播，除非应用程序处于前台或具有前台服务。</p><p>解决方法：</p><ol><li><p>仍然使用静态注册广播，给Intent添加<code>FLAG_RECEIVER_INCLUDE_BACKGROUND</code>的Flag，不过这个标志位在源码中被hide掉了，但是可以直接使用这个属性值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">intent.addFlags(<span class="hljs-number">0x01000000</span>);<br></code></pre></td></tr></table></figure></li><li><p>仍然使用静态注册广播，但将原来的隐式Intent变成显式Intent，即指定包名。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>,MyBroadcastReceiver.class);<br>sendBroadcast(intent);<br></code></pre></td></tr></table></figure></li><li><p>仍然使用静态注册广播，但将广播接收器改为前台服务。</p></li><li><p>降低SDK版本。</p></li><li><p>在<code>AndroidManifest.xml</code>中删除注册，使用动态注册广播接收器，发送广播的代码不变。</p></li></ol><h3 id="2-3-2-发送有序广播"><a href="#2-3-2-发送有序广播" class="headerlink" title="2.3.2 发送有序广播"></a>2.3.2 发送有序广播</h3><p>另外创建一个项目，同样接收<code>com.example.broadcasttest.MY_BROADCAST</code>的广播消息，同样弹窗显示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BroadcastReceiver</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>        Toast.makeText(context, <span class="hljs-string">&quot;另一个应用的静态广播接收器收到该广播&quot;</span>, Toast.LENGTH_SHORT).show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>记得在<code>AndroidManifest.xml</code>中注册：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">receiver</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.example.testanotherbroadcastreceiver.MyReceiver&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">receiver</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后将其安装到测试机上。</p><p>发送有序广播的代码在上 2.3.1 的基础上，只需要将<code>sendBroadcast(intnet)</code>方法改为<code>sendOrderedBroadcast(intent,receiverPermission )</code>方法即可。其中参数<code>receiverPermission </code>是一个与权限有关的字符串，这里传入 null 就行了。</p><p>点击发送按钮可以看到依次出现两个弹窗。</p><h4 id="a-设置广播接收器的优先级"><a href="#a-设置广播接收器的优先级" class="headerlink" title="a. 设置广播接收器的优先级"></a>a. 设置广播接收器的优先级</h4><p>既然有序广播在接收时是有先后顺序的，那么就我们可以设置广播接收器的先后顺序。在<code>AndroidManifest.xml</code>的<code>&lt;intent-filter&gt;</code>中，使用属性<code>android:priority</code>来设置优先级，值越大优先级越高，优先级越高的广播接收器就越先接收到广播。</p><h4 id="b-截断广播传递"><a href="#b-截断广播传递" class="headerlink" title="b. 截断广播传递"></a>b. 截断广播传递</h4><p>既然已经获得了接收广播的优先权，那么我们就可以对这条广播进行截断了。操作起来比较容易，只需要在自定义的<code>BroadcastReceiver</code>类的<code>onReceive()</code>方法中添加<code>abortBroadcast()</code>方法即可，相关代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBroadcastReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BroadcastReceiver</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>        Log.d(<span class="hljs-string">&quot;MyBroadcastReceiver&quot;</span>, <span class="hljs-string">&quot;Received&quot;</span>);<br>        Toast.makeText(context, <span class="hljs-string">&quot;MyBroadcastReceiver received&quot;</span>, Toast.LENGTH_SHORT).show();<br>        abortBroadcast();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-4-使用本地广播"><a href="#2-4-使用本地广播" class="headerlink" title="2.4 使用本地广播"></a>2.4 使用本地广播</h2><p>在前面的代码中，我们发送和接收的广播全部属于系统全局广播，即发出的广播可以被其他任何应用程序接收到，并且我们也可以接收来自于其他任何应用程序的广播。</p><p>但这样就很容易引起安全性的问题，比如说我们发送的一些携带关键性数据的广播有可能被其他的应用程序截获，或者其他的程序不停地向我们的广播接收器里发送各种垃圾广播。因此Android引入了一套本地广播机制来解决这些安全性问题，使用这个机制发出的广播只能够在应用程序的内部进行传递，并且广播接收器也只能接收来自本应用程序发出的广播。</p><p>本地广播的用法并不复杂，主要就是使用了一个<code>LocalBroadcastManager</code>来对广播进行管理，并提供了发送广播和注册广播接收器的方法。</p><p>在使用前，我们需要注意一些事项：</p><ol><li>本地广播无法通过静态注册来接收。因为发送本地广播时，程序肯定已经启动了，没有必要用静态注册。况且静态注册的话，会接收到来自非自生应用程序的广播。</li><li>在广播中启动Activity的话，需要Intent中添加<code>FLAG_ACTIVITY_NEW_TASK</code>的Flag，不然会报错，因为需要一个栈来存放新打开的Activity。</li><li>如果通过广播来弹出AlertDialog，需要设置对话框的类型为<code>TYPE_SYSTEM_ALERT</code>。</li></ol><p>下面我们就通过具体的实例来尝试一下它的用法。首先自定义的<code>BroadcastReceiver</code>类，代码同上：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBroadcastReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BroadcastReceiver</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>        Log.d(<span class="hljs-string">&quot;MyBroadcastReceiver&quot;</span>, <span class="hljs-string">&quot;Received&quot;</span>);<br>        Toast.makeText(context, <span class="hljs-string">&quot;MyBroadcastReceiver received&quot;</span>, Toast.LENGTH_SHORT).show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最关键的是<code>MainActivity.java</code>：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ACTION_MY_BROADCAST</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.example.broadcasttest.MY_BROADCAST&quot;</span>;<br>    <span class="hljs-keyword">private</span> LocalBroadcastManager localBroadcastManager;<br>    <span class="hljs-keyword">private</span> MyBroadcastReceiver MyBroadcastReceiver;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        <span class="hljs-comment">//获取实例</span><br>        localBroadcastManager = LocalBroadcastManager.getInstance(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-comment">//注册本地广播接收器</span><br>        <span class="hljs-type">IntentFilter</span> <span class="hljs-variable">intentFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntentFilter</span>(ACTION_MY_BROADCAST);<br>        MyBroadcastReceiver = <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyBroadcastReceiver</span>();<br>        localBroadcastManager.registerReceiver(MyBroadcastReceiver, intentFilter);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendBroadcast</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(ACTION_MY_BROADCAST);<br>        <span class="hljs-comment">//intent.addFlags(0x01000000);</span><br>        <span class="hljs-comment">//发送本地广播</span><br>        localBroadcastManager.sendBroadcast(intent);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>        <span class="hljs-comment">//记得要取消注册</span><br>        localBroadcastManager.unregisterReceiver(MyBroadcastReceiver);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>跟动态注册的代码没有很大的区别，只不过是通过<code>localBroadcastManager</code>来注册和销毁广播接收器。</p><h1 id="三、广播的最佳实战-——-实现强制下线功能"><a href="#三、广播的最佳实战-——-实现强制下线功能" class="headerlink" title="三、广播的最佳实战 —— 实现强制下线功能"></a>三、广播的最佳实战 —— 实现强制下线功能</h1><p>强制下线功能应该算是比较常见的了，很多的应用程序都具备这个功能，比如你的QQ号在别处登录了，就会将你强制挤下线。其实实现强制下线功能的思路也比较简单，只需要在界面上弹出一个对话框，让用户无法进行任何其他操作，必须要点击对话框中的确定按钮，然后回到登录界面即可。可是这样就存在着一个问题，因为当我们被通知需要强制下线时可能正处于任何一个界面，难道需要在每个界面上都编写一个弹出对话框的逻辑？其实并不这么做，我们完全可以借助本章中所学的广播知识，来非常轻松地实现这一功能。</p><p>强制下线功能需要先关闭掉所有的活动，然后回到登录界面。因此我们可以利用在Activity章节学到的创建一个活动管理类。</p><p>首先创建一个ActivityCollector类用于管理所有的活动，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActivityCollector</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Activity&gt; activityList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addActivity</span><span class="hljs-params">(Activity activity)</span>&#123;<br>        activityList.add(activity);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeActivity</span><span class="hljs-params">(Activity activity)</span>&#123;<br>        activityList.remove(activity);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finishAll</span><span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-keyword">for</span> (Activity each:activityList) &#123;<br>            <span class="hljs-keyword">if</span> (!each.isFinishing())&#123;<br>                each.finish();<br>            &#125;<br>        &#125;<br>        activityList.clear();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>然后创建BaseActivity类作为所有活动的父类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        ActivityCollector.addActivity(<span class="hljs-built_in">this</span>);<br>    &#125;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>        ActivityCollector.removeActivity(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>接着开始实现我们所需要的功能，首先是创建一个登陆界面的活动。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">loginActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseActivity</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_login);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ClicktoLogin</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>, MainActivity.class);<br>        startActivity(intent);<br>        finish();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>极致的简陋，就一个登入按钮和它的点击事件，账号密码都不想要了（对于这个案例来讲并不重要）。</p><p>记得注册这个活动，并将其设置为主活动而不是MainActivity。</p><p>然后是强制下线界面的活动，这里写在<code>MainActivity.java</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseActivity</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ClicktoFinishAllActivities</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-comment">//自定义action，随便就行</span><br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-string">&quot;LOGIN_OTHER&quot;</span>);<br>        sendBroadcast(intent);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>同样还是一个按钮和它的点击事件，用于强制下线。随便定义一个广播动作即可，只要与广播接收器的动作一致就行。</p><p>现在功能都写好了，接下来我们就需要创建一个广播接收器来接收这条强制下线广播，唯一的问题就是，应该在哪里创建呢？</p><p>首先不可能时静态注册，因为静态注册没有办法在<code>onReceive()</code>方法里弹出对话框这样的UI控件的。其次，我们不可能在每个具体活动中都注册一个动态广播接收器，这显然不合理。但是我们写的每个活动都必须保证能够相应广播，也就是有广播接收器。那么我们将注册广播接收器的代码写到他们的父类BaseActivity中不就行了？这样一来确确实实每个活动都有广播接收器了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-keyword">public</span> ForceOffLineReceiver forceOffLineReceiver;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        ActivityCollector.addActivity(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResume</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onResume();<br>        <span class="hljs-comment">//注册广播接收器</span><br>        forceOffLineReceiver = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ForceOffLineReceiver</span>();<br>        <span class="hljs-type">IntentFilter</span> <span class="hljs-variable">intentFilter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IntentFilter</span>(<span class="hljs-string">&quot;LOGIN_OTHER&quot;</span>);<br>        registerReceiver(forceOffLineReceiver,intentFilter);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPause</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onPause();<br>        <span class="hljs-keyword">if</span> (forceOffLineReceiver != <span class="hljs-literal">null</span>)&#123;<br>unregisterReceiver(forceOffLineReceiver);<br>            forceOffLineReceiver = <span class="hljs-literal">null</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>        ActivityCollector.removeActivity(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">ForceOffLineReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BroadcastReceiver</span> &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br>            Log.d(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;onReceive: &quot;</span>);<br>            <span class="hljs-comment">//实现弹窗警告</span><br>            AlertDialog.<span class="hljs-type">Builder</span> <span class="hljs-variable">dialogBuilder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlertDialog</span>.Builder(context);<br>            dialogBuilder.setTitle(<span class="hljs-string">&quot;警告：&quot;</span>)<br>                    .setMessage(<span class="hljs-string">&quot;您的账号在别处登录，请重新登陆&quot;</span>)<br>                    .setCancelable(<span class="hljs-literal">false</span>)<br>                    .setPositiveButton(<span class="hljs-string">&quot;确认&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DialogInterface</span>.OnClickListener() &#123;<br>                        <span class="hljs-meta">@Override</span><br>                        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(DialogInterface dialogInterface, <span class="hljs-type">int</span> i)</span> &#123;<br>                            Log.d(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;onClick: &quot;</span>);<br>                            <span class="hljs-comment">//关闭所有活动</span><br>                            ActivityCollector.finishAll();<br>                            <span class="hljs-comment">//返回登录界面</span><br>                            <span class="hljs-type">Intent</span> <span class="hljs-variable">backintent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(context, loginActivity.class);<br>                            backintent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);<br>                            context.startActivity(backintent);<br>                        &#125;<br>                    &#125;);<br>            dialogBuilder.show();<br>            <span class="hljs-comment">//AlertDialog alertDialog = dialogBuilder.create();</span><br>            <span class="hljs-comment">//alertDialog.show();</span><br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>我们额外重写了<code>onResume()</code>和<code>onPause()</code>这两个生命周期函数，然后分别在这两个方法里注册和取消注册了<code>ForceOfflineReceiver</code>.那么为什么要这样写呢？</p><p>因为我们只需要保证应用的Activity栈中栈顶活动能够接收这条强制下线广播就足够了，非栈顶活动没有必要去接收这条广播，所以写在<code>onResume()</code>和<code>onPause()</code>方法里就可以很好地解决这个问题，当一个活动失去栈顶位置时就会自动取消广播接收器的注册。</p><p><strong>注意事项：</strong></p><p><strong>不能使用<code>localBroadcastManager</code>来注册广播，不然程序异常退出！！！</strong></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android开发学习笔记(五) —— 温习Service</title>
    <link href="/2023/08/12/Android%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%94)%20%E2%80%94%E2%80%94%20%E6%B8%A9%E4%B9%A0Service/"/>
    <url>/2023/08/12/Android%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%94)%20%E2%80%94%E2%80%94%20%E6%B8%A9%E4%B9%A0Service/</url>
    
    <content type="html"><![CDATA[<h1 id="一、什么是Service"><a href="#一、什么是Service" class="headerlink" title="一、什么是Service"></a>一、什么是Service</h1><p>服务（Service）是Android四大组件之一（因此需要在<code>AndroidManifest.xml</code>中进行注册，否则系统无法识别该Service），是Android中实现程序后台运行的解决方案，非常适合去执行那些不需要和用户交互（因而也不需要UI界面）而且还要求长期运行的任务，例如播放音乐、下载文件、上传数据等。服务的运行不依赖于任何用户界面，即使程序被切换到后台，或者用户打开了另外一个应用程序，服务仍然能够保持正常运行。</p><p>但是，服务并不是运行在一个独立的进程当中的，而是依赖于创建服务时所在的应用程序进程。当某个应用程序进程被杀掉时，所有依赖于该进程的服务也会停止运行。</p><p>另外，服务并不会自动开启线程，所有的代码都是默认运行在主线程当中的。也就是说，我们需要在服务的内部手动创建子线程，并在这里执行具体的任务，否则就有可能出现主线程被阻塞住的情况。</p><h1 id="二、Android多线程编程"><a href="#二、Android多线程编程" class="headerlink" title="二、Android多线程编程"></a>二、Android多线程编程</h1><h2 id="2-1-线程的基本用法"><a href="#2-1-线程的基本用法" class="headerlink" title="2.1 线程的基本用法"></a>2.1 线程的基本用法</h2><p>定义一个线程只需要新建一个类继承自Thread，然后重写父类的<code>run()</code>方法，并在里面编写我们想要处理的事务的逻辑即可，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//处理事务的具体逻辑</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么该如何启动这个线程呢？其实也很简单，只需要new出MyThread的实例，然后调用它的<code>start()</code>方法，这样<code>run()</code>方法中的代码就会在子线程当中运行了，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>().start();<br></code></pre></td></tr></table></figure><p>当然，更多的时候我们都会选择使用实现Runnable接口（Thread类也实现该接口）的方式来定义一个线程，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//处理事务的具体逻辑</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果使用了这种写法，启动线程的方法也需要进行相应的改变，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>()).start();<br></code></pre></td></tr></table></figure><p>可以看到，Thread的构造函数接收一个Runnable参数（只是其中一个构造方法），而我们new出的MyThread正是一个实现了Runnable接口的对象，所以可以直接将它传入到Thread的构造函数里。接着调用Thread的<code>start()</code>方法，<code>run()</code>方法中的代码就会在子线程当中运行了。</p><p>当然，更常见的写法时使用匿名类的方式，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//处理事务的具体逻辑</span><br>    &#125;<br>&#125;).start();<br></code></pre></td></tr></table></figure><h2 id="2-2-在子线程中更新UI"><a href="#2-2-在子线程中更新UI" class="headerlink" title="2.2 在子线程中更新UI"></a>2.2 在子线程中更新UI</h2><p>和许多其他的GUI库一样，Android的UI也是线程不安全的。也就是说，如果想要更新应用程序里的UI元素，则必须在主线程中进行，否则就会出现异常。</p><p>我们通过一个具例子来验证一下。新建一个项目，然后修改<code>activity_main.xml</code>中的代码，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;change text&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:onClick</span>=<span class="hljs-string">&quot;ClickChangeUI&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;Hello World!&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_marginTop</span>=<span class="hljs-string">&quot;40dp&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>布局中定义了一个TextView控件，用于显示字符串，然后还有一个按钮，用于改变TextView显示的内容。</p><p>接下来是MainActivity中的代码，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ClickChangeUI</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">TextView</span> <span class="hljs-variable">textView</span> <span class="hljs-operator">=</span> findViewById(R.id.id_text);<br>                textView.setText(<span class="hljs-string">&quot;aaaaaaaaaaa&quot;</span>);<br>            &#125;<br>        &#125;).start();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，我们在按钮的点击事件里面开启了一个子线程，然后在子线程中修改TextView控件的字符串。现在运行程序并点击按钮，我们会发现程序崩溃，错误信息如下所示。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">FATAL <span class="hljs-keyword">EXCEPTION</span>: Thread<span class="hljs-number">-2</span><br>android.<span class="hljs-keyword">view</span>.ViewRootImpl$CalledFromWrongThreadException: <span class="hljs-keyword">Only</span> the original thread that created a <span class="hljs-keyword">view</span> hierarchy can touch its views.<br></code></pre></td></tr></table></figure><p>由此证实了Android确实是不允许在子线程中进行UI操作的。但是有些时候，我们必须在子线程里去执行一些耗时任务，然后根据任务的执行结果来更新相应的UI控件，那这该怎么办呢？</p><p>对于这种情况，Android提供了一套异步消息处理机制，完美地解决了在子线程中进行UI操作的问题。我们先来学习一下异步消息处理的使用方法。</p><p>修改MainActivity中的代码，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">UPDATE_TEXT</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Handler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Handler</span>()&#123;<br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(Message msg)</span>&#123;<br>          <span class="hljs-keyword">switch</span> (msg.what)&#123;<br>              <span class="hljs-keyword">case</span> UPDATE_TEXT:<br>                  <span class="hljs-type">TextView</span> <span class="hljs-variable">textView</span> <span class="hljs-operator">=</span> findViewById(R.id.id_text);<br>                  textView.setText(<span class="hljs-string">&quot;aaaaaaaaaaa&quot;</span>);<br>                  <span class="hljs-keyword">break</span>;<br>              <span class="hljs-keyword">default</span>:<br>                  <span class="hljs-keyword">break</span>;<br>          &#125;<br>      &#125;<br>    &#125;;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ClickChangeUI</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-type">Message</span> <span class="hljs-variable">message</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Message</span>();<br>                message.what = UPDATE_TEXT;<br>                handler.sendMessage(message);<br>            &#125;<br>        &#125;).start();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们先是定义了一个整型常量<code>UPDATE_TEXT</code>，用于表示更新TextView这个动作。然后新增一个Handler对象，并重写父类的<code>handleMessage()</code>方法，在这里对具体的Message进行处理。如果发现Message的what字段的值等于<code>UPDATE_TEXT</code>，就更改TextView的内容。</p><p>接下来是按钮的点击事件中的代码。可以看到，这次我们并没有在子线程里直接进行UI操作，而是创建了一个<code>Message</code>（<code>android.os.Message</code>）对象，并将它的what字段的值指定为<code>UPDATE_TEXT</code>，然后调用Handler的<code>sendMessage()</code>方法将这条Message发送出去。很快，Handler就会收到这条Message，并在<code>handleMessage()</code>方法中对它进行处理。注意<strong>此时<code>handleMessage()</code>方法中的代码就是在主线程当中运行的了</strong>，所以我们可以放心地在这里进行UI操作。</p><p>现在重新运行程序并点击按钮，发现程序并没有崩溃，而且TextView中的内容更改了。</p><p>现在可以说我们了解了Android异步消息处理的基本用法，但是我们并不了解它的工作原理，因此下面我们就来分析一下Android异步消息处理机制到底是如何工作的。</p><h2 id="2-3-解析异步消息处理机制"><a href="#2-3-解析异步消息处理机制" class="headerlink" title="2.3 解析异步消息处理机制"></a>2.3 解析异步消息处理机制</h2><p>Android中的异步消息处理主要由4个部分组成：Message、Handler、MessageQueue和Looper。</p><ol><li>Message<br>Message是在<strong>线程之间传递的消息</strong>，它可以在内部携带少量的信息，用于在不同线程之间交换数据。上一小节中我们使用到了Message的what字段，除此之外还可以使用arg1和arg2字段来携带一些整型数据，使用obj字段携带一个Object对象。</li><li>Handler<br>Handler顾名思义也就是处理者的意思，它主要是用于发送和处理消息的。发送消息一般是使用Handler的<code>sendMessage()</code>方法，而发出的消息经过一系列地辗转处理后，最终会传递到Handler的<code>handleMessage()</code>方法中。</li><li>MessageQueue<br>MessageQueue是消息队列的意思，它主要用于存放所有通过Handler发送的消息。这部分消息会一直存在于消息队列中，等待被处理。<strong>每个线程中只会有一个MessageQueue对象</strong>。</li><li>Looper<br>Looper是每个线程中的MessageQueue的管家，调用Looper的<code>Loop()</code>方法后，就会进入到一个无限循环当中，然后每当发现MessageQueue中存在一条消息，就会将它取出，并传递到Handler的<code>handleMessage()</code>方法中。<strong>每个线程中也只会有一个Looper对象</strong>。</li></ol><p>了解了Message、Handler、MessageQueue以及Looper的基本概念后，我们再来把异步消息处理的整个流程梳理一遍。首先需要在主线程当中创建一个Handler对象，并重写<code>handleMessage()</code>方法。然后当子线程中需要进行UI操作时，就创建一个Message对象，并通<br>过Handler将这条消息发送出去。之后这条消息会被添加到MessageQueue的队列中等待被处理，而Looper则会一直尝试从MessageQueue中取出待处理消息，最后分发回Handler的<code>handleMessage()</code>方法中。由于Handler是在主线程中创建的，所以此时<code>handleMessage()</code>方法中的代码也会在主线程中运行，于是我们在这里就可以安心地进行UI操作了。整个异步消息处理机制的流程示意图如图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308131920173.jpg"></p><p>一条Message经过这样一个流程的辗转调用后，也就从子线程进入到了主线程，从不能更新UI变成了可以更新UI，整个异步消息处理的核心思想也就是如此。</p><h2 id="2-4-使用AsyncTask"><a href="#2-4-使用AsyncTask" class="headerlink" title="2.4 使用AsyncTask"></a>2.4 使用AsyncTask</h2><p>不过为了更加方便我们在子线程中对UI进行操作，Android还提供了另外一些好用的工具，比如AsyncTask。借助AsyncTask，即使你对异步消息处理机制完全不了解，也可以十分简单地从子线程切换到主线程。当然，AsyncTask背后的实现原理也是基于异步消息处理机制的，只是Android帮我们做了很好的封装而已。</p><p>首先来看一下AsyncTask的基本用法，由于AsyncTask是一个抽象类，所以如果我们想使用它，就必须要创建一个子类去继承它。在继承时我们可以为AsyncTask类指定3个泛型参数，这3个参数的用途如下：</p><ul><li><p>Params</p><p>在执行AsyncTask时需要传入的参数，可用于在后台任务中使用。</p></li><li><p>Progress</p><p>后台任务执行时，如果需要在界面上显示当前的进度，则使用这里指定的泛型作为进度单位。</p></li><li><p>Result</p><p>当任务执行完毕后，如果需要对结果进行返回，则使用这里指定的泛型作为返回值类型。</p></li></ul><p>因此，一个最简单的自定义AsyncTask就可以写成如下方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AsyncTask</span>&lt;Void, Integer, Boolean&gt;&#123;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们把AsyncTask的第一个泛型参数指定为Void，表示在执行AsyncTask的时候不需要传入参数给后台任务。第二个泛型参数指定为Integer，表示使用整型数据来作为进度显示单位。第三个泛型参数指定为Boolean，则表示使用布尔型数据来反馈执行结果。</p><p>当然，目前我们自定义的DownloadTask还是一个空任务，并不能进行任何实际的操作，我们还需要去重写AsyncTask中的几个方法才能完成对任务的定制。经常需要去重写的方法有以下4个：</p><ol><li><strong>onPreExecute()</strong><br>这个方法会在后台任务开始执行之前调用，用于进行一些界面上的初始化操作，比如显示一个进度条对话框等。</li><li><strong>doInBackground (Params…)</strong><br><strong>这个方法中的所有代码都会在子线程中运行</strong>，我们应该<strong>在这里去处理所有的耗时任务</strong>。任务一旦完成就可以通过return语句来将任务的执行结果返回，如果AsyncTask的第三个泛型参数指定的是Void,就可以不返回任务执行结果。注意，在这个方法中是<strong>不可以进行UI操作的</strong>，如果需要更新UI元素，比如说反馈当前任务的执行进度，可以调用<code>publishProgress(Progress...)</code>方法来完成。</li><li><strong>onProgressUpdate(Progress…)</strong><br>当在后台任务中调用了<code>publishProgress(Progress...)</code>方法后，<code>onProgressUpdate(Progress...)</code>方法就会很快被调用，该方法中携带的参数就是在后台任务中传递过来的。在这个方法中<strong>可以对UI进行操作</strong>，利用参数中的数值就可以对界面元素进行相应的更新。</li><li><strong>onPostExecute(Result)</strong><br>当后台任务执行完毕并通过return语句进行返回时，这个方法就很快会被调用。返回的数据会作为参数传递到此方法中，可以利用返回的数据来进行一些UI操作，比如说提醒任务执行的结果，以及关闭掉进度条对话框等。</li></ol><p>因此，一个比较完整的自定义AsyncTask就可以写成如下方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadTask</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AsyncTask</span>&lt;Void, Integer, Boolean&gt; &#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPreExecute</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//显示进度对话框</span><br>        progressDialog.show();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> Boolean <span class="hljs-title function_">doInBackground</span><span class="hljs-params">(Void... params)</span> &#123;<br>        <span class="hljs-comment">//任务处理</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>)&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">downloadPercent</span> <span class="hljs-operator">=</span> doDownload();<span class="hljs-comment">//虚构方法</span><br>                publishProgress(downloadPercent);<br>                <span class="hljs-keyword">if</span> (downloadPercent &gt;= <span class="hljs-number">100</span>)&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onProgressUpdate</span><span class="hljs-params">(Integer... values)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onProgressUpdate(values);<br>        <span class="hljs-comment">//UI跟新，即更新下载进度</span><br>        progressDialog.setMessage(<span class="hljs-string">&quot;Downloaded &quot;</span> + values[<span class="hljs-number">0</span>] + <span class="hljs-string">&quot;%&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPostExecute</span><span class="hljs-params">(Boolean result)</span> &#123;<span class="hljs-comment">//任务执行完后被调用</span><br>        <span class="hljs-built_in">super</span>.onPostExecute(result);<br>        <span class="hljs-comment">//关闭进度对话框</span><br>        progressDialog.dismiss();<br>        <span class="hljs-comment">//提示下载结果</span><br>        <span class="hljs-keyword">if</span> (result)&#123;<br>            Toast.makeText(context, <span class="hljs-string">&quot;Download succeeded&quot;</span>, Toast.LENGTH_SHORT).show();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Toast.makeText(context, <span class="hljs-string">&quot;Download failed&quot;</span>, Toast.LENGTH_SHORT).show();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这个DownloadTask中，我们在<code>doInBackground()</code>方法里去执行具体的下载任务。这个方法里的代码都是在子线程中运行的，因而不会影响到主线程的运行。注意这里虚构了一个<code>doDownload()</code>方法，这个方法用于计算当前的下载进度并返回，我们假设这个方法已经存在了。在得到了当前的下载进度后，下面就该考虑如何把它显示到界面上了，由于<code>doInBackground()</code>方法是在子线程中运行的，在这里肯定不能进行UI操作，所以我们可以调用<code>publishProgress()</code>方法并将当前的下载进度传进来，这样<code>onProgressUpdate()</code>方法就会很快被调用，在这里就可以进行UI操作了。当下载完成后，<code>doInBackground()</code>方法会返回一个布尔型变量，这样<code>onPostExecute()</code>方法就会很快被调用，这个方法也是在主线程中运行的。然后在这里我们会根据下载的结果来弹出相应的Toast提示，从而完成整个DownloadTask任务。</p><p>简单来说，使用AsyncTask的诀窍就是，在<code>doInBackground()</code>方法中执行具体的耗时任务，在<code>onProgressUpdate()</code>方法中进行UI操作，在<code>onPostExecute()</code>方法中执行一些任务的收尾工作。</p><p>如果想要启动这个任务，只需编写以下代码即可：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">new</span> <span class="hljs-title class_">DownloadTask</span>().execute();<br></code></pre></td></tr></table></figure><p>以上就是AsyncTask的基本用法。从上面这个例子中，可以看出，我们并不需要去考虑什么异步消息处理机制，也不需要专门使用一个Handler来发送和接收消息，只需要调用一下<code>publishProgress()</code>方法，就可以轻松地从子线程切换到UI线程了。</p><h1 id="三、Service的生命周期"><a href="#三、Service的生命周期" class="headerlink" title="三、Service的生命周期"></a>三、Service的生命周期</h1><h2 id="3-1-生命周期方法"><a href="#3-1-生命周期方法" class="headerlink" title="3.1 生命周期方法"></a>3.1 生命周期方法</h2><ul><li>**onCreate()**：当Service第一次被创建后立即回调该方法，该方法在整个生命周期中只会调用一次！</li><li>**onDestory()**：当Service被关闭时会回调该方法，该方法只会回调一次！</li><li><strong>onStartCommand(intent,flag,startId)<strong>：可多次调用StartService方法， 但不会再创建新的Service对象，而是继续复用前面产生的Service对象，</strong>但会继续回调 onStartCommand()方法</strong>。</li><li><strong>onbind(intent)<strong>：该方法是Service都必须实现的方法，该方法会返回一个 IBinder对象，</strong>app通过该对象与Service组件进行通信</strong>！</li><li><strong>onUnbind(intent)<strong>：当该Service上绑定的</strong>所有客户端都断开</strong>时会回调该方法！</li><li>**stopSelf()**：Service自身调用，用于关闭服务。</li></ul><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308131920190.png"></p><h2 id="3-2-两种启动方式的区别"><a href="#3-2-两种启动方式的区别" class="headerlink" title="3.2 两种启动方式的区别"></a>3.2 两种启动方式的区别</h2><ol><li><strong>StartService</strong><ul><li>系统对同一个Service只会创建一个Service实例。如果Service实例不存在，调用<code>startService()</code>方法则会实例化一个Service对象，否则复用之前创建的Service实例。</li><li>通过<code>StopService()</code>关闭Service。</li><li>如果调用者直接退出而没有调用<code>StopService()</code>方法，Service会一直在后台运行。该Service的调用者再启动起来后可以通过<code>StopService()</code>关闭Service。</li></ul></li><li><strong>BindService</strong><ul><li>系统对同一个Service只会创建一个Service实例。如果Service实例不存在，调用bindService则会实例化一个Service对象，否则复用之前创建的Service实例。</li><li>当Service只与一个客户端绑定时，调用<code>unbindService()</code>或者调用者退出，Service会被销毁。当Service与多个客户端绑定时，只有与所有客户端取消绑定后，Service才会被销毁。</li></ul></li></ol><h2 id="3-3-体验Service的生命周期"><a href="#3-3-体验Service的生命周期" class="headerlink" title="3.3 体验Service的生命周期"></a>3.3 体验Service的生命周期</h2><h3 id="3-3-1-非绑定启动"><a href="#3-3-1-非绑定启动" class="headerlink" title="3.3.1 非绑定启动"></a>3.3.1 非绑定启动</h3><p>创建一个服务类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Service</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;aaa&quot;</span>;<br><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> IBinder <span class="hljs-title function_">onBind</span><span class="hljs-params">(Intent intent)</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;onBind: &quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onUnbind</span><span class="hljs-params">(Intent intent)</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;onUnbind: &quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.onUnbind(intent);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">()</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;onCreate: &quot;</span>);<br>        <span class="hljs-built_in">super</span>.onCreate();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">onStartCommand</span><span class="hljs-params">(Intent intent, <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> startId)</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;onStartCommand: &quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.onStartCommand(intent, flags, startId);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;onDestroy: &quot;</span>);<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不要忘记在<code>AndroidManifest.xml</code>中注册该服务！</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">service</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.MyService&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>另外<code>activity_main.xml</code>中的配置就两个按钮，绑定启动服务和销毁服务的功能，<code>MainActivity.java</code>如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">StartService</span><span class="hljs-params">(View view)</span> &#123;<br>        startService(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>, MyService.class));<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">StopService</span><span class="hljs-params">(View view)</span> &#123;<br>        stopService(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>, MyService.class));<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>主要使用到的方法是<code>startService()</code>启动服务和<code>stopService()</code>关闭服务。</p><p>通过上面代码，可以观察到非绑定服务的生命周期为：onCreate() -&gt; onStartCommand() -&gt; onDestroy()。</p><h3 id="3-3-2-绑定启动"><a href="#3-3-2-绑定启动" class="headerlink" title="3.3.2 绑定启动"></a>3.3.2 绑定启动</h3><p>在 3.1.1的例子上，额外添加两个按钮，用于绑定和解绑服务，并额外创建一个<code>ServiceConnection</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">BindService</span><span class="hljs-params">(View view)</span> &#123;<br>    bindService(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>, MyService.class),conn, Context.BIND_AUTO_CREATE);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">UnbindService</span><span class="hljs-params">(View view)</span> &#123;<br>    unbindService(conn);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-type">ServiceConnection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceConnection</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onServiceConnected</span><span class="hljs-params">(ComponentName componentName, IBinder iBinder)</span> &#123;<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onServiceDisconnected</span><span class="hljs-params">(ComponentName componentName)</span> &#123;<br><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>主要使用到的方法是<code>bindService()</code>绑定并启动服务和<code>unbindService()</code>解绑并关闭服务。</p><p>通过上面代码，可以观察到非绑定服务的生命周期为：onCreate() -&gt; onBind() -&gt; onUnbind() -&gt; onDestroy()。</p><h1 id="四、Service的基本用法"><a href="#四、Service的基本用法" class="headerlink" title="四、Service的基本用法"></a>四、Service的基本用法</h1><h2 id="4-1-创建一个服务"><a href="#4-1-创建一个服务" class="headerlink" title="4.1 创建一个服务"></a>4.1 创建一个服务</h2><p>在项目中右键包名 → New → Service → Service，在弹出的对话框中，需要我们给服务命名，同时还有两个属性，Exported属性表示是否允许除了当前程序之外的其他程序访问这个服务，Enabled属性表示是否启用这个服务。将两个属性都勾中，点击Finish完成创建。这样创建的服务，会自动在<code>AndroidManifest.xml</code>中进行声明，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">manifest</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">application</span></span><br><span class="hljs-tag">        <span class="hljs-attr">......</span></span><br><span class="hljs-tag">        &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">service</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.MyService&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:enabled</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">service</span>&gt;</span><br>......<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">application</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">manifest</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-2-Activity与Service通信"><a href="#4-2-Activity与Service通信" class="headerlink" title="4.2 Activity与Service通信"></a>4.2 Activity与Service通信</h2><p>Activity与Service之间的交流媒介是Service中的<code>onBind()</code>方法，它带有Intent参数，并且返回值为 IBinder，也就是说，可以通过IBinder来传递数据。</p><p>实现步骤如下：</p><ol><li>在自定义Service类中，自定义一个Binder类，将要暴露的方法写到该类中，同时实例化这个类。</li><li>然后重写onBind()方法，将这个Binder对象返回。</li><li>在调用该Service的Activity中，实例化一个ServiceConnection对象，重写<code>onServiceConnected()</code>方法来获取Binder对象，之后调用相关方法即可！</li></ol><p>以模拟下载为例。首先主活动的xml文件如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;点击下载&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:onClick</span>=<span class="hljs-string">&quot;ClickDownload&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;获取下载进度&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:onClick</span>=<span class="hljs-string">&quot;getDownloadProgress&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>一个用于模拟下载，一个用于获取下载进度。</p><p>创建MyService类，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Service</span> &#123;<br><br>    <span class="hljs-comment">//实例化自定义Binder类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">MyBinder</span> <span class="hljs-variable">myBinder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyBinder</span>();<br>    <span class="hljs-comment">//在onBind方法中返回binder类对象</span><br>    <span class="hljs-keyword">public</span> IBinder <span class="hljs-title function_">onBind</span><span class="hljs-params">(Intent intent)</span> &#123;<br>        <span class="hljs-keyword">return</span> myBinder;<br>    &#125;<br>    <span class="hljs-comment">//内部类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyBinder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Binder</span>&#123;<br>        <span class="hljs-comment">//进度条最大值</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MaxProgress</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>        <span class="hljs-comment">//当前的进度</span><br>        <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">currentProgress</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//获取当前进度</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCurrentProgress</span><span class="hljs-params">()</span> &#123;<br>            <span class="hljs-keyword">return</span> currentProgress;<br>        &#125;<br>        <span class="hljs-comment">//模拟下载,实现进度条的移动</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">StartDownload</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                    <span class="hljs-keyword">while</span>(currentProgress &lt; MaxProgress)&#123;<br>                        currentProgress += <span class="hljs-number">1</span>;<br>                        <span class="hljs-keyword">try</span>&#123;<br>                            Thread.sleep(<span class="hljs-number">500</span>);<br>                        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>                            e.printStackTrace();<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;).start();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>在其内部定义了MyBinder类，实现了获取下载进度和模拟下载的功能。</p><p>主活动的java代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><span class="hljs-comment">//Service内部类对象</span><br>    <span class="hljs-keyword">private</span> MyService.MyBinder myBinder;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><span class="hljs-comment">//绑定启动服务</span><br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>, MyService.class);<br>        bindService(intent,conn, Context.BIND_AUTO_CREATE);<br><br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ServiceConnection</span> <span class="hljs-variable">conn</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ServiceConnection</span>() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onServiceConnected</span><span class="hljs-params">(ComponentName componentName, IBinder iBinder)</span> &#123;<br>            <span class="hljs-comment">//获取返回的binder对象 </span><br>            myBinder = (MyService.MyBinder)iBinder;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onServiceDisconnected</span><span class="hljs-params">(ComponentName componentName)</span> &#123;<br><br>        &#125;<br>    &#125;;<br><span class="hljs-comment">//获取下载进度并弹窗显示</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDownloadProgress</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">currentProgress</span> <span class="hljs-operator">=</span> myBinder.getCurrentProgress();<br>        Toast.makeText(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;当前下载进度为: &quot;</span> + Integer.toString(currentProgress), Toast.LENGTH_SHORT).show();<br>    &#125;<br><span class="hljs-comment">//模拟下载</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ClickDownload</span><span class="hljs-params">(View view)</span> &#123;<br>        myBinder.StartDownload();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-3-简单的前台服务"><a href="#4-3-简单的前台服务" class="headerlink" title="4.3 简单的前台服务"></a>4.3 简单的前台服务</h2><p>通常情况下，Service都是运行在后台的。但是Service的系统优先级比较低，如果系统内存不足，就有可能回收正在后台运行的Service。</p><p>那如何解决上述情况呢？我们可以使用前台服务，从而让Service被杀死的可能性降低，所谓的前台服务就是状态栏显示的Notification。</p><p>实现方法：在自定义的Service类中重写<code>onCreate()</code>，根据自己的需求定制Notification，最后调用<code>startForeground(id,notification)</code>即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Service</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate();<br>        <span class="hljs-comment">//获取通知管理服务</span><br>        <span class="hljs-type">NotificationManager</span> <span class="hljs-variable">notificationSystem</span> <span class="hljs-operator">=</span> (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);<br>        <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O)&#123;<br>            <span class="hljs-comment">//创建通知渠道对象</span><br>            <span class="hljs-type">NotificationChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotificationChannel</span>(<span class="hljs-string">&quot;nid001&quot;</span>, <span class="hljs-string">&quot;随便&quot;</span>,NotificationManager.IMPORTANCE_LOW);<br>            <span class="hljs-comment">//通知渠道对象与通知管理服务对象绑定</span><br>            notificationSystem.createNotificationChannel(channel);<br>        &#125;<br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>, MainActivity.class);<br>        <span class="hljs-type">PendingIntent</span> <span class="hljs-variable">pendingIntent</span> <span class="hljs-operator">=</span> PendingIntent.getActivity(<span class="hljs-built_in">this</span>, <span class="hljs-number">0</span>, intent, PendingIntent.FLAG_MUTABLE);<br><br>        Notification.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Notification</span>.Builder(<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;nid001&quot;</span>);<br>        builder.setContentIntent(pendingIntent)<br>                .setAutoCancel(<span class="hljs-literal">false</span>)<br>                .setSmallIcon(R.mipmap.ic_launcher)<br>                .setContentTitle(<span class="hljs-string">&quot;应用宝&quot;</span>)<br>                .setContentText(<span class="hljs-string">&quot;正在下载XXX...&quot;</span>);<br>        <span class="hljs-type">Notification</span> <span class="hljs-variable">notification</span> <span class="hljs-operator">=</span> builder.build();<br>        startForeground(<span class="hljs-number">1</span>,notification);<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> IBinder <span class="hljs-title function_">onBind</span><span class="hljs-params">(Intent intent)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>除此之外，还需要给应用<code>android.permission.FOREGROUND_SERVICE</code>权限，在<code>AndroidManifest.xml</code>中的<code>&lt;manifest&gt;</code>标签中声明：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">uses-permission</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.permission.FOREGROUND_SERVICE&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4-4-执行定时任务"><a href="#4-4-执行定时任务" class="headerlink" title="4.4 执行定时任务"></a>4.4 执行定时任务</h2><p>在实际开发中，Service也常用来执行定时任务，比如轮询，就是每间隔一段时间就请求一次服务器，确认客户端状态或者进行信息更新等。上述功能的实现需要依靠Android提供的定时方式：Timer类或Alarm机制。</p><p>Timer类不适合于需要长期在后台运行的定时任务，CPU一旦休眠，Timer中的定时任务就无法运行。而由于Alarm机制具有唤醒CPU的功能，所以不存在这种情况。</p><p>实现方法：</p><ol><li>定义一个Service类并进行注册。重写Service的<code>onStartCommand()</code>方法。具体为：<ul><li>开辟线程处理事务</li><li>通过<code>getSystemService(ALARM_SERVICE)</code>获得AlarmManager对象</li><li>通过PendingIntent设置唤醒对象和唤醒方式</li><li>通过<code>AlarmManager.set()</code>方法设置定时任务</li></ul></li><li>定义一个Broadcast类并进行注册，通过<code>context.startService()</code>来唤醒服务。</li><li>在主活动中通过<code>startService()</code>方法来启动服务。</li></ol><p>以一个例子来进行详细说明。</p><p>首先自定义BroadcastReceiver类，并在<code>AndroidManifest.xml</code>注册！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyAlarmReceiver</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BroadcastReceiver</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onReceive</span><span class="hljs-params">(Context context, Intent intent)</span> &#123;<br><span class="hljs-comment">//发送广播来启动服务</span><br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(context, MyService.class);<br>        context.startService(intent1);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过广播来启动MyService，这个MyAlarmReceiver类则通过Alarm机制来启动。</p><p>接下来是自定义Service类，同样在<code>AndroidManifest.xml</code>注册：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Service</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">onStartCommand</span><span class="hljs-params">(Intent intent, <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> startId)</span> &#123;<br>        <span class="hljs-comment">//开辟线程来进行想要的操作</span><br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                Log.d(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>().toString());<br>            &#125;<br>        &#125;).start();<br>        <span class="hljs-comment">//获取AlarmManager</span><br>        <span class="hljs-type">AlarmManager</span> <span class="hljs-variable">alarmmanager</span> <span class="hljs-operator">=</span> (AlarmManager)getSystemService(ALARM_SERVICE);<br>        <span class="hljs-comment">//设置时间间隔，这里是每2s唤醒一次Service</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">anHour</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> * <span class="hljs-number">1000</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">triggerAtTime</span> <span class="hljs-operator">=</span> SystemClock.elapsedRealtime() + anHour;<br>        <span class="hljs-comment">//通过Intent设置唤醒的BroadcastReceiver</span><br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">alarmIntent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>, MyAlarmReceiver.class);<br>        <span class="hljs-comment">//设置唤醒方式为Broadcast唤醒</span><br>        <span class="hljs-type">PendingIntent</span> <span class="hljs-variable">pendingIntent</span> <span class="hljs-operator">=</span> PendingIntent.getBroadcast(<span class="hljs-built_in">this</span>, <span class="hljs-number">0</span>, alarmIntent, PendingIntent.FLAG_IMMUTABLE);<br>        <span class="hljs-comment">//提交给AlarmManager完成</span><br>        alarmmanager.set(AlarmManager.ELAPSED_REALTIME_WAKEUP, triggerAtTime,pendingIntent);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.onStartCommand(intent, flags, startId);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> IBinder <span class="hljs-title function_">onBind</span><span class="hljs-params">(Intent intent)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后是主活动：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>, MyService.class);<br>        startService(intent);<br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意！！！不能使用bindService()方法启动服务！！！因为bindService()方法不会执行生命周期的onStartCommand()方法！！！</strong></p><h2 id="4-5-使用IntentService"><a href="#4-5-使用IntentService" class="headerlink" title="4.5 使用IntentService"></a>4.5 使用IntentService</h2><p>服务中的代码都是默认运行在主线程当中的，如果直接在服务里去处理一些耗时的逻辑，就很容易出现<code>ANR(Application Not Responding)</code>的情况。</p><p>所以这个时候就需要用到Android多线程编程的技术了，我们应该在服务的每个具体的方法里开启一个子线程，然后在这里去处理那些耗时的逻辑。因此，一个比较标准的服务就可以写成如下形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Service</span> &#123;<br><br>    ......<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">onStartCommand</span><span class="hljs-params">(Intent intent, <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> startId)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-comment">//处理具体的逻辑</span><br>            &#125;<br>        &#125;).start();<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.onStartCommand(intent, flags, startId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是，这种服务一旦启动之后，就会一直处于运行状态，必须调用<code>stopService()</code>或者<code>stopSelf()</code>方法才能让服务停止下来。所以，如果想要实现让一个服务在执行完毕后自动停止的功能，就可以这样写：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Service</span> &#123;<br><br>    ......<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">onStartCommand</span><span class="hljs-params">(Intent intent, <span class="hljs-type">int</span> flags, <span class="hljs-type">int</span> startId)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Runnable</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>                <span class="hljs-comment">//处理具体的逻辑</span><br>            stopSelf();<br>            &#125;<br>        &#125;).start();<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.onStartCommand(intent, flags, startId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>虽说这种写法并不复杂，但是总会有一些程序员忘记开启线程，或者忘记调用<code>stopSelf()</code>方法。为了可以简单地创建一个异步的、会自动停止的服务，Android专门提供了一个IntentService类，这个类就很好地解决了前面所提到的两种尴尬，下面我们就来看一下它的用法。</p><p>手动建一个MyIntentService类继承自IntentService，代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyIntentService</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">IntentService</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyIntentService</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>(<span class="hljs-string">&quot;MyIntentService&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyIntentService</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">super</span>(name);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onHandleIntent</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Intent intent)</span> &#123;<br>        <span class="hljs-comment">//打印当前线程id</span><br>        Log.d(<span class="hljs-string">&quot;MyIntentService&quot;</span>, <span class="hljs-string">&quot;Thread id is &quot;</span> + Thread.currentThread().getId());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>        Log.d(<span class="hljs-string">&quot;MyIntentService&quot;</span>, <span class="hljs-string">&quot;Destroyed&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>这里首先要提供一个无参的构造函数，并且必须在其内部调用父类的有参构造函数</strong>。然后要在子类中去实现<code>onHandleIntent()</code>这个抽象方法，在这个方法中可以去处理一些具体的逻辑，而且不用担心<code>ANR</code>的问题，因为这个方法已经是在子线程中运行的了。这里为了证实一下，我们在<code>onHandleIntent()</code>方法中打印了当前线程的id。另外根据IntentService的特性，这个服务在运行结束后应该是会自动停止的，所以我们又重写了onDestroy()方法，在这里也打印了一行日志，以证实服务是不是停止掉了。</p><p>虽然MyIntentService继承于IntentService，但IntentService是继承于Service的，所以MyIntentService仍然是个服务，因此不要忘记在<code>AndroidManifest.xml</code>中进行注册。</p><p>接下来修改<code>activity_main.xml</code>中的代码，加入一个用于启动MyIntentService这个服务的按钮，如下所示：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> </span><br><span class="hljs-tag">    <span class="hljs-attr">......</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;Start IntentService&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:onClick</span>=<span class="hljs-string">&quot;StartIntentService&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后修改MainActivity中的代码，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">StartIntentService</span><span class="hljs-params">(View view)</span> &#123;<br>        Log.d(<span class="hljs-string">&quot;MainActivity&quot;</span>, <span class="hljs-string">&quot;Thread id is &quot;</span> + Thread.currentThread().getId());<br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>, MyIntentService.class);<br>        startService(intent);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>我们在按钮的点击事件里面去启动MyIntentService这个服务，并在这里打印了一下主线程的id，用于和IntentService进行比对。其实我们可以发现IntentService的启动和普通服务的启动代码没有区别。</p><p>之后运行程序并点击按钮，观察logcat中的打印日志。可以看到，不仅MyIntentService和MainActivity所在的线程id不一样，而且<code>onDestroy()</code>方法也得到了执行，说明MyIntentService在运行完毕后确实自动停止了。</p><p>经过这个例子，我们应该可以知道IntentService其实就是集成了开启线程和自动停止的服务。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android开发学习笔记(四) —— 重拾Activity</title>
    <link href="/2023/08/12/Android%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%9B%9B)%20%E2%80%94%E2%80%94%20%E9%87%8D%E6%8B%BEActivity/"/>
    <url>/2023/08/12/Android%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E5%9B%9B)%20%E2%80%94%E2%80%94%20%E9%87%8D%E6%8B%BEActivity/</url>
    
    <content type="html"><![CDATA[<h1 id="一、什么是Activity"><a href="#一、什么是Activity" class="headerlink" title="一、什么是Activity"></a>一、什么是Activity</h1><p>Activity是Android四大组件之一，用于显示用户界面，能够让我们进行相关操作，比如打电话、发短信等。Activity需要在<code>AndroidManifest.xml</code>配置文件中进行注册，否则系统无法识别该Activity。</p><p>Activity在代码中的体现是：继承<code>AppCompatActivity</code>才叫Activity。</p><h1 id="二、Activity的生命周期"><a href="#二、Activity的生命周期" class="headerlink" title="二、Activity的生命周期"></a>二、Activity的生命周期</h1><h2 id="2-1-Activity的生命周期方法"><a href="#2-1-Activity的生命周期方法" class="headerlink" title="2.1 Activity的生命周期方法"></a>2.1 Activity的生命周期方法</h2><ul><li><strong>onCreate()<strong>：在Activity创建时调用，通常做一些初始化设置，</strong>不可见</strong>。</li><li><strong>onStart()<strong>：在Activity由不可见变为可见时调用，</strong>可见</strong>，此时用户可以看到界面，但没有获取到焦点，用户不能进行操作。</li><li><strong>onResume()<strong>：此时Activity获取到焦点，能够与用户交互，</strong>可见</strong>。此方法是在与用户进行交互时调用。</li><li><strong>onPause()<strong>：在当前Activity被其它Activity覆盖或锁屏时调用，</strong>可见</strong>，但失去焦点。此时会对状态信息和数据进行保存。</li><li><strong>onStop()<strong>：在Activity不可见时调用，</strong>不可见</strong>，Activity进入到了后台，且Activity对象仍在内存中。</li><li>**onDestroy()**：在Activity销毁时调用。</li><li>**onRestart()**：当处于Stopped状态的活动需要再次展现给用户时调用。</li></ul><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308131918363.jpg"></p><p>在上述图片中，可以将内容归纳为三个周期：</p><ol><li>完整生命周期：onCreate() → onStart() → onResume() → Activity running → onPause() → onStop() → onDestory()</li><li>可见生命周期：onStart() → onResume() → Activity running → onPause() → onStop() → onRestart()</li><li>前台生命周期：onResume() → Activity running → onPause()</li></ol><h2 id="2-2-体验Activity的生命周期"><a href="#2-2-体验Activity的生命周期" class="headerlink" title="2.2 体验Activity的生命周期"></a>2.2 体验Activity的生命周期</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;aaa&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        Log.d(TAG, <span class="hljs-string">&quot;onCreate: &quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStart</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onStart();<br>        Log.d(TAG, <span class="hljs-string">&quot;onStart: &quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResume</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onResume();<br>        Log.d(TAG, <span class="hljs-string">&quot;onResume: &quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPause</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onPause();<br>        Log.d(TAG, <span class="hljs-string">&quot;onPause: &quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onStop();<br>        Log.d(TAG, <span class="hljs-string">&quot;onStop: &quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>        Log.d(TAG, <span class="hljs-string">&quot;onDestroy: &quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">//启动另一个Activity</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startAnotherActivity</span><span class="hljs-params">(View view)</span> &#123;<br>        startActivity(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>,SecondaryActivity.class));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>根据<code>Logcat</code>中的信息，我们可以知道：</p><ol><li>启动Activity：onCreate() -&gt; onStart() -&gt; onResume()</li><li>基于1，按下home键：onPause() -&gt; onStop()</li><li>基于2，再次让Activity占据屏幕：onRestart() -&gt; onStart() -&gt; onResume()</li><li>被其他Activity完全覆盖：onPause() -&gt; onStop()</li><li>直接退出应用：onPause() -&gt; onStop() -&gt; onDestroy()</li></ol><h1 id="三、Activity的基本用法"><a href="#三、Activity的基本用法" class="headerlink" title="三、Activity的基本用法"></a>三、Activity的基本用法</h1><h2 id="3-1-手动创建Activity"><a href="#3-1-手动创建Activity" class="headerlink" title="3.1 手动创建Activity"></a>3.1 手动创建Activity</h2><p>在工程中，其实我们可以直接new出一套Activity（即对应的类、xml文件并在<code>AndroidManifest.xml</code>中注册），但在这里，我们手动创建一下来体会Activity的创建过程。</p><p>首先需要创建Activity对应的布局文件，随便写一写就行.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--activity_secondary.xml--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">    &gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;我将原来的主页面变成另一个页面了&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后需要编写继承<code>AppCompatActivity</code>的Activity类，只需要重写<code>onCreate()</code>方法就行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecondaryActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_secondary);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接下来最为关键，就是<strong>要在<code>AndroidManifest.xml</code>中声明</strong>，将下面这段加入到<code>&lt;application&gt;</code>标签中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--自己编写的Activity--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">activity</span></span><br><span class="hljs-tag"><span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.SecondaryActivity&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">android:exported</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中<code>&lt;activity&gt;</code>标签中的<code>android:name</code>指定要被注册的活动（内容是我们编写的Acitivity类所在的全限定类名的缩写）。<code>android:exported</code>指示该Activity是否可以被其它应用程序的组件启动。 <code>&lt;action&gt;</code>和<code>&lt;category&gt;</code>这两个标签的内容共同指定了该活动为应用运行后启动的第一个活动。</p><h2 id="3-2-Activity跳转"><a href="#3-2-Activity跳转" class="headerlink" title="3.2 Activity跳转"></a>3.2 Activity跳转</h2><p>案例：基于2.1，实现通过按钮来跳转到另一个Activity。</p><p>首先在<code>activity_main.xml</code>中编写按钮来实现点击按钮跳转Activity，随便写一写就行：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><br><span class="hljs-comment">&lt;!--activity_main.xml--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;start another activity&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:onClick</span>=<span class="hljs-string">&quot;startAnotherActivity&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在<code>MainActivity.java</code>中实现该点击事件处理方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startAnotherActivity</span><span class="hljs-params">(View view)</span> &#123;<br>    <span class="hljs-comment">//通过startActivity启动另一个Activity</span><br>    startActivity(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>,SecondaryActivity.class));<br>&#125;<br></code></pre></td></tr></table></figure><p>启动的是我们手动创建的活动，但需要将该活动在<code>AndroidManifest.xml</code>中的配置改为：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">activity</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;.SecondaryActivity&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-2-启动外部应用"><a href="#3-2-启动外部应用" class="headerlink" title="3.2 启动外部应用"></a>3.2 启动外部应用</h2><p>在应用程序A启动应用程序B，可以使用显示Intent和隐式Intent，两者的区别在于前者指定了ComponentName，可以直接启动目标程序，而后者没有。后者通过 Action、Category 或 Data 等信息来筛选出合适的应用程序，再由使用者挑选（如果存在多个的话）。</p><p>详细Intent介绍可见[Android Intent](<a href="https://gal2xy.github.io/2023/07/04/Android">https://gal2xy.github.io/2023/07/04/Android</a> Intent&#x2F;)。</p><h3 id="3-2-1-显示Intent启动"><a href="#3-2-1-显示Intent启动" class="headerlink" title="3.2.1 显示Intent启动"></a>3.2.1 显示Intent启动</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startAnotherActivity</span><span class="hljs-params">(View view)</span> &#123;<br>    <span class="hljs-comment">//显式Intent</span><br>    <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();<br>    intent.setComponent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ComponentName</span>(<span class="hljs-string">&quot;com.example.myapplication&quot;</span>,<span class="hljs-string">&quot;com.example.myapplication.MainActivity&quot;</span>));<br>    startActivity(intent);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里通过<code>ComponentName</code>指定了要打开的应用的主Activity。</p><h3 id="3-2-2-隐式Intent启动"><a href="#3-2-2-隐式Intent启动" class="headerlink" title="3.2.2 隐式Intent启动"></a>3.2.2 隐式Intent启动</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startAnotherActivity</span><span class="hljs-params">(View view)</span> &#123;<br>    <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();<br>    intent.setData(Uri.parse(<span class="hljs-string">&quot;https://baidu.com&quot;</span>));<br>    intent.setAction(Intent.ACTION_VIEW);<br>    intent.addCategory(Intent.CATEGORY_BROWSABLE);<br>    startActivity(intent);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里使用隐式Intent来打开一个链接，其中<code>Intent.ACTION_VIEW</code>表示查看指定数据（如打开网址、显示地图等）。<code>Intent.CATEGORY_BROWSABLE</code>表示用浏览器来查看。</p><h2 id="3-3-Activity的状态保存"><a href="#3-3-Activity的状态保存" class="headerlink" title="3.3 Activity的状态保存"></a>3.3 Activity的状态保存</h2><p>当系统资源不足时，处于onPause状态的Activity可能会被系统销毁，或者当设备发生横竖屏切换时，系统也会销毁当前Activity。此时系统调用 <code>onSaveInstanceState()</code> 方法来保存该Activity 的状态，等到该Activity重新创建时（即调用<code>onCreate()</code>方法）会进行状态的恢复。当然状态保存和恢复的代码需要我们重写来实现。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onSaveInstanceState</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Bundle outState)</span> &#123;<br>    <span class="hljs-built_in">super</span>.onSaveInstanceState(outState);<br>    outState.putString(<span class="hljs-string">&quot;key&quot;</span>, <span class="hljs-string">&quot;data_temp&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>    <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>    setContentView(R.layout.activity_main);<br><br>    <span class="hljs-keyword">if</span> (savedInstanceState != <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">msg1</span> <span class="hljs-operator">=</span> savedInstanceState.getString(<span class="hljs-string">&quot;key&quot;</span>);<br>        Log.d(TAG, <span class="hljs-string">&quot;onCreate&quot;</span> + msg1);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-4-手动销毁Activity"><a href="#3-4-手动销毁Activity" class="headerlink" title="3.4 手动销毁Activity"></a>3.4 手动销毁Activity</h2><p>使用<code>finish()</code>方法，触发的生命周期方法为onPause() -&gt; onStop() -&gt; onDestroy()。</p><p>比如在跳转到另一个Activity并销毁当前Activity，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">startActivity(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>,SecondaryActivity.class));<br>finish();<br></code></pre></td></tr></table></figure><h2 id="3-5-随时关闭所有Activity"><a href="#3-5-随时关闭所有Activity" class="headerlink" title="3.5 随时关闭所有Activity"></a>3.5 随时关闭所有Activity</h2><p>其实创建一个Activity管理类来管理这些Activity的create和destory。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ActivityCollector</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;Activity&gt; activityList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addActivity</span><span class="hljs-params">(Activity activity)</span>&#123;<br>        activityList.add(activity);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeActivity</span><span class="hljs-params">(Activity activity)</span>&#123;<br>        activityList.remove(activity);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">finishAll</span><span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-keyword">for</span> (Activity each:activityList) &#123;<br>            <span class="hljs-keyword">if</span> (!each.isFinishing())&#123;<br>                each.finish();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>然后在编写一个BaseActivity类作为所有Activity的父类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        ActivityCollector.addActivity(<span class="hljs-built_in">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>        ActivityCollector.removeActivity(<span class="hljs-built_in">this</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样一来，只需要让Activity的创建都继承BaseActivity就可以实现自动添加和移除了。如果要关闭所有活动，使用<code>removeAllActivity()</code>方法即可。</p><h2 id="3-6-完全退出App"><a href="#3-6-完全退出App" class="headerlink" title="3.6 完全退出App"></a>3.6 完全退出App</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/** </span><br><span class="hljs-comment"> * 退出应用程序 </span><br><span class="hljs-comment"> */</span>  <br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">AppExit</span><span class="hljs-params">(Context context)</span> &#123;  <br>    <span class="hljs-keyword">try</span> &#123;   <br>        <span class="hljs-type">ActivityManager</span> <span class="hljs-variable">activityMgr</span> <span class="hljs-operator">=</span> (ActivityManager) context  <br>                .getSystemService(Context.ACTIVITY_SERVICE);  <br>        activityMgr.killBackgroundProcesses(context.getPackageName());  <br>        System.exit(<span class="hljs-number">0</span>);  <br>    &#125; <span class="hljs-keyword">catch</span> (Exception ignored) &#123;&#125;  <br>&#125;  <br><br></code></pre></td></tr></table></figure><h2 id="3-7-双击back键退出App"><a href="#3-7-双击back键退出App" class="headerlink" title="3.7 双击back键退出App"></a>3.7 双击back键退出App</h2><p>像有的App中，按下一次back键并不会退出App，而是会提醒你再按一次退出，接下来及时按下第二次back键就会退出App。</p><p>实现这种情况只需要重写Activity的<code>onKeyDown()</code>方法，通过两次点击back键的时间差来决定是否退出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onKeyDown</span><span class="hljs-params">(<span class="hljs-type">int</span> keyCode, KeyEvent event)</span> &#123;<br>        <span class="hljs-comment">//是否按下返回键</span><br>        <span class="hljs-keyword">if</span> (keyCode == KeyEvent.KEYCODE_BACK)&#123;<br>            <span class="hljs-comment">//时差大于2s就不断提示</span><br>            <span class="hljs-keyword">if</span>(System.currentTimeMillis() - exitTime &gt; <span class="hljs-number">2000</span>)&#123;<br>                Toast.makeText(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;再按一次退出程序&quot;</span>, Toast.LENGTH_SHORT).show();<br>                exitTime = System.currentTimeMillis();<br>                Log.d(<span class="hljs-string">&quot;aaa&quot;</span>, <span class="hljs-string">&quot;onKeyDown: &quot;</span> + exitTime);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<span class="hljs-comment">//时差小于2s就退出</span><br>                exit(<span class="hljs-number">0</span>);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.onKeyDown(keyCode, event);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="3-8-知晓当前是在哪一个活动"><a href="#3-8-知晓当前是在哪一个活动" class="headerlink" title="3.8 知晓当前是在哪一个活动"></a>3.8 知晓当前是在哪一个活动</h2><p>在别人的代码上添加自己的功能时，比如修改某个界面，那么知道该界面所属哪个Activity是很有必要的。</p><p>其实实现上述想法很简单，我们让所有Activity都继承自己写的BaseActivity类，在该类的<code>onCreate()</code>方法中实现打印当前Activity的名字。当然BaseActivity类必然是继承于AppCompatActivity类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BaseActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        Log.d(<span class="hljs-string">&quot;BaseActivity&quot;</span>, getClass().getSimpleName());<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-9-启动活动的最佳写法"><a href="#3-9-启动活动的最佳写法" class="headerlink" title="3.9 启动活动的最佳写法"></a>3.9 启动活动的最佳写法</h2><p>在以上所有案例中，我们启动Activity的方法基本上都是在调用者活动中写下如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>, xxxActivity.class);<br>Intent.putExtra(<span class="hljs-string">&quot;key1&quot;</span>, data1);<br>Intent.putExtra(<span class="hljs-string">&quot;key2&quot;</span>, data2);<br>startActivity(intent);<br></code></pre></td></tr></table></figure><p>以上写法当然没问题。但是如果我们不知道启动这个Activity要传递哪些数据呢（负责别人的项目时），那么只能问问相关人员或者自己看源码咯。那如果我们将启动Activity的代码<u>包装成方法</u>，参数就是启动这个Activity所需要的数据，那之后不就很清楚的知道这个Activity需要哪些参数以及类型分别是什么了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">StartxxxActivity</span><span class="hljs-params">(Context context, String data1, String data2)</span>&#123;<br>    <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(context, xxxActivity.class);<br>    Intent.putExtra(<span class="hljs-string">&quot;key1&quot;</span>, data1);<br>    Intent.putExtra(<span class="hljs-string">&quot;key2&quot;</span>, data2);<br>    context.startActivity(intent);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="四、Activity之间的数据传递"><a href="#四、Activity之间的数据传递" class="headerlink" title="四、Activity之间的数据传递"></a>四、Activity之间的数据传递</h1><h2 id="4-1-向下一个Activity传递数据"><a href="#4-1-向下一个Activity传递数据" class="headerlink" title="4.1 向下一个Activity传递数据"></a>4.1 向下一个Activity传递数据</h2><p>Intent不仅可以用来启动Activity，也可以用来传递数据，因为Intent有Extra属性。通过<code>putExtra()</code>或<code>putExtras()</code>方法来存储要传递的数据，然后在另一个活动中通过<code>getIntent()</code>获得传递过来的Intent，继而进行相关get操作。具体使用可参考下图（来自菜鸟教程）：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308131918681.jpg"></p><p>案例：登入界面，登入成功后提示”欢迎您，XXX“。</p><p>xml的配置过于简单就不展示了，直接展示java代码。</p><p>登入界面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-keyword">private</span> TextView AccountText;<br>    <span class="hljs-keyword">private</span> TextView PasswordText;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        <span class="hljs-comment">//获取两个输入框控件</span><br>        initView();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initView</span><span class="hljs-params">()</span> &#123;<br>        AccountText = findViewById(R.id.id_account);<br>        PasswordText = findViewById(R.id.id_password);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">login</span><span class="hljs-params">(View view)</span> &#123;<br><br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>,SecondaryActivity.class);<br>        <span class="hljs-type">Bundle</span> <span class="hljs-variable">bundle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bundle</span>();<br>        bundle.putString(<span class="hljs-string">&quot;account&quot;</span>,AccountText.getText().toString());<br>        bundle.putString(<span class="hljs-string">&quot;password&quot;</span>,PasswordText.getText().toString());<br>        intent.putExtras(bundle);<br>        startActivity(intent);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>响应界面：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecondaryActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_secondary);<br>        initView();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initView</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">TextView</span> <span class="hljs-variable">loginText</span> <span class="hljs-operator">=</span> findViewById(R.id.id_login_success);<br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> getIntent();<br>        <span class="hljs-type">Bundle</span> <span class="hljs-variable">extras</span> <span class="hljs-operator">=</span> intent.getExtras();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> extras.getString(<span class="hljs-string">&quot;account&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> extras.getString(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-keyword">if</span>(account.equals(<span class="hljs-string">&quot;admin&quot;</span>) &amp;&amp; password.equals(<span class="hljs-string">&quot;123456&quot;</span>))&#123;<br>            loginText.setText(<span class="hljs-string">&quot;欢迎您，用户&quot;</span> + account);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            loginText.setText(<span class="hljs-string">&quot;密码或账号错误&quot;</span>);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2-向上一个Activity传递数据（数据回传）"><a href="#4-2-向上一个Activity传递数据（数据回传）" class="headerlink" title="4.2 向上一个Activity传递数据（数据回传）"></a>4.2 向上一个Activity传递数据（数据回传）</h2><p>这个情况比较特殊。因为如果我们要返回上一个Activity，按back键就可以了，但是这样的话，数据是不会传递过来的，因为back键只是让Activity栈栈顶活动发生变化，并没有进行数据的传递（如Intent, bundle等通信）。</p><p>其实Activity提供了另一种启动其他Activity的方法：<code>startActivityForResult(Intent intent, int requestCode)</code>。具体使用方法如下图所示（来自菜鸟教程）：</p><ol><li>在活动A使用<code>startActivityForResult()</code>方法来启动另一个活动B。</li><li>在活动A中重写<code>onActivityResult()</code>方法来对传回的数据进行处理。</li><li>在活动B中通过<code>setResult()</code>方法设置回传的数据，之后<strong>必须调用<code>finish()</code>方法来结束当前活动</strong>，否则无法进行数据回传。</li></ol><p>在这些方法中，<code>requestCode</code>是请求码，可以自己设定，用于区分<code>onActivityResult()</code>方法是被谁触发的。<code>resultCode</code>是结果码，也可以自己设定，用于区分结果（比如成功和失败等）。</p><p>数据回传的情况多出现在充值场景，我们拿这个做个简单实操。</p><p>首先是xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--现有金额显示界面--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/id_money&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;0&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:padding</span>=<span class="hljs-string">&quot;20dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textAlignment</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#FF00FFFF&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/id_recharge&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:padding</span>=<span class="hljs-string">&quot;20dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;充值&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:onClick</span>=<span class="hljs-string">&quot;recharge&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><span class="hljs-comment">&lt;!--充值金额界面--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EditText</span> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/id_edt_rechargeMoney&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:padding</span>=<span class="hljs-string">&quot;20dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;0&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/id_recharge_success&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:padding</span>=<span class="hljs-string">&quot;20dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;确认&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:onClick</span>=<span class="hljs-string">&quot;rechargesuccess&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span> <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/id_recharge_fail&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:padding</span>=<span class="hljs-string">&quot;20dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;取消&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:onClick</span>=<span class="hljs-string">&quot;rechargefail&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>对于现有金额显示界面，一个文本框显示金额，一个充值按钮就够了。</p><p>对于充值金额界面，一个输入框输入充值金额数，一个确认按钮，一个取消按钮就够了。</p><p>以上所有按钮均绑定了点击事件处理方法。</p><p>然后就是现有金额显示界面的Activity代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-keyword">private</span> TextView MoneyText;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        <span class="hljs-comment">//获取控件</span><br>        initView();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initView</span><span class="hljs-params">()</span> &#123;<br>        MoneyText = findViewById(R.id.id_money);<br>    &#125;<br><span class="hljs-comment">//充值按钮的点击方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">recharge</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>, SecondaryActivity.class);<br>        <span class="hljs-comment">//使用startActivityForResult来启动另一个活动</span><br>        startActivityForResult(intent,<span class="hljs-number">1</span>);<br>    &#125;<br><span class="hljs-comment">//重写onActivityResult方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onActivityResult</span><span class="hljs-params">(<span class="hljs-type">int</span> requestCode, <span class="hljs-type">int</span> resultCode, <span class="hljs-meta">@Nullable</span> Intent data)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onActivityResult(requestCode, resultCode, data);<br>        <span class="hljs-comment">//根据请求码判断是不是按钮触发的充值事件</span><br>        <span class="hljs-keyword">if</span> (requestCode == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-comment">//根据结果码判断是否充值成功</span><br>            <span class="hljs-keyword">if</span> (resultCode == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">if</span> (data != <span class="hljs-literal">null</span>) &#123;<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">rechargemoney</span> <span class="hljs-operator">=</span> data.getStringExtra(<span class="hljs-string">&quot;rechargemoney&quot;</span>);<br>                    <span class="hljs-type">String</span> <span class="hljs-variable">nowmoney</span> <span class="hljs-operator">=</span> MoneyText.getText().toString();<br>                    <span class="hljs-type">Integer</span> <span class="hljs-variable">total</span> <span class="hljs-operator">=</span> Integer.parseInt(nowmoney) + Integer.parseInt(rechargemoney);<br>                    MoneyText.setText(total.toString());<br>                    Toast.makeText(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;充值成功&quot;</span>, Toast.LENGTH_SHORT).show();<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                Toast.makeText(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;充值取消&quot;</span>, Toast.LENGTH_SHORT).show();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着是充值金额界面的Activity代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecondaryActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-keyword">private</span> EditText rechargeMoneyText;<br>    <span class="hljs-keyword">private</span> Button successButton;<br>    <span class="hljs-keyword">private</span> Button failButton;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_secondary);<br>        <span class="hljs-comment">//获取控件</span><br>        initView();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initView</span><span class="hljs-params">()</span> &#123;<br>        rechargeMoneyText = findViewById(R.id.id_edt_rechargeMoney);<br>        successButton = findViewById(R.id.id_recharge_success);<br>        failButton = findViewById(R.id.id_recharge_fail);<br>    &#125;<br><span class="hljs-comment">//确认按钮的点击方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rechargesuccess</span><span class="hljs-params">(View view)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">money</span> <span class="hljs-operator">=</span> rechargeMoneyText.getText().toString();<br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>, MainActivity.class);<br>        intent.putExtra(<span class="hljs-string">&quot;rechargemoney&quot;</span>,money);<br>        setResult(<span class="hljs-number">1</span>,intent);<br>        finish();<br>    &#125;<br><span class="hljs-comment">//取消按钮的点击方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rechargefail</span><span class="hljs-params">(View view)</span>&#123;<br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>, MainActivity.class);<br>        setResult(<span class="hljs-number">0</span>,intent);<br>        finish();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>通过设置不同的结果码来区分是否充值成功。</p><p>如果也想让back键也有这样的效果，只需要重写<code>onBackPressed()</code>方法即可。</p><h1 id="五、Activity回退栈和Task"><a href="#五、Activity回退栈和Task" class="headerlink" title="五、Activity回退栈和Task"></a>五、Activity回退栈和Task</h1><h2 id="5-1-Task"><a href="#5-1-Task" class="headerlink" title="5.1 Task"></a>5.1 Task</h2><p>Task是Activity的集合，是一个概念，实际使用的Activity回退栈来存储Activity。</p><p>举个例子，应用A尝试开启摄像头，那么从这个应用启动到摄像头被开启的过程中，所有被启动的Activity组成一个Task，他们的管理由该应用的Activity回退栈管理。</p><p>一般来说每个应用的启动都会创建一个Task（具体情况视Activity启动模式决定）。因此系统中可以有多个Task，但是同一时刻只有一个Task在前台（能与之交互的），其他的都在后台。</p><h2 id="5-2-Activity回退栈"><a href="#5-2-Activity回退栈" class="headerlink" title="5.2 Activity回退栈"></a>5.2 Activity回退栈</h2><p>Android系统采用<strong>栈结构</strong>来管理应用程序运行过程中所启动的Activity，即Activity回退栈。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308131919648.png"></p><p>如上图所示，一开始是Activity1处于栈顶，当Activity2被启动后，该Activity会被压入栈中，成为栈顶。同理Activity3类似。当Activity3被销毁后（也就是出栈），那么紧随其后的Activity2就会成为新的栈顶。</p><h1 id="六、Activity的启动模式"><a href="#六、Activity的启动模式" class="headerlink" title="六、Activity的启动模式"></a>六、Activity的启动模式</h1><ol><li><p><strong>Standard</strong>标准模式 </p><p>Activity的默认启动模式。在该模式下，同一个Activity可以被多次实例化（即使存在且位于栈顶）。</p></li><li><p><strong>singleTop</strong>栈顶单例模式 </p><p>如果需要启动的Activity存在且位于栈顶，则不会重新创建，而是使用栈顶的Activity。但是，如果需要启动的Activity存在但不位于栈顶，那么仍创建新的Activity。</p></li><li><p><strong>singleTask</strong>栈内单例模式</p><p>只允许同一个Activity在同一个Task中拥有一个Activity实例。如果系统中已经有了一个实例但不在栈顶，则会移除该Activity上的其他Activity，从而让其位于栈顶。 如果没有，则会创建一个新的Activity并将其压入栈顶。</p></li><li><p><strong>singleInstance</strong>全局单例模式 </p><p>只允许同一个Activity在系统中拥有一个Activity实例。如果启动的Activity不存在，会先创建一个新的Task，然后在创建Activity实例加入栈顶。如果已经存在，则将其移至栈顶。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android开发学习笔记(三) —— 探究Fragment</title>
    <link href="/2023/08/12/Android%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%89)%20%E2%80%94%E2%80%94%20%E6%8E%A2%E7%A9%B6Fragment/"/>
    <url>/2023/08/12/Android%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%89)%20%E2%80%94%E2%80%94%20%E6%8E%A2%E7%A9%B6Fragment/</url>
    
    <content type="html"><![CDATA[<h1 id="一、什么是Fragment"><a href="#一、什么是Fragment" class="headerlink" title="一、什么是Fragment"></a>一、什么是Fragment</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p>Fragment是Android3.0后引入的一个新的API，它出现的初衷是为了适应大屏幕的平板电脑。开发者可以利用Fragment框架构建更灵活的界面，并在不同的设备上实现统一的用户体验。</p><p>Fragment可以看作是一个子Activity，它具有自己的生命周期，但必须寄生在Activity中才能运行，受Activity生命周期影响。</p><h2 id="1-2-为什么会有Fragment"><a href="#1-2-为什么会有Fragment" class="headerlink" title="1.2 为什么会有Fragment?"></a>1.2 为什么会有Fragment?</h2><p>拿新闻板块举例。下图是使用平板和手机使用Fragment针对新闻板块的不同处理情况。</p><p>（来自菜鸟教程的图片）</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308131916189.jpg"></p><p>显然对于平板来说，这么大的屏幕只放新闻简介就有点太浪费了，UI设计也不好看。但是利用两个Fragment，一个展示新闻简介，一个展示新闻具体内容，同时展现在屏幕上，那这样就合理利用了整个屏幕，UI设计也就好看多了。</p><p>同样的UI设计方案应用到手机上就不太行了，因为手机屏幕太小了。所以更合理的设计是展示新闻简介的Fragment先占据整个屏幕，当触发点击事件后，被展示新闻具体内容的Fragment覆盖。</p><h1 id="二、Fragment的基本使用"><a href="#二、Fragment的基本使用" class="headerlink" title="二、Fragment的基本使用"></a>二、Fragment的基本使用</h1><h2 id="2-1-静态加载Fragment"><a href="#2-1-静态加载Fragment" class="headerlink" title="2.1 静态加载Fragment"></a>2.1 静态加载Fragment</h2><p>步骤如下：</p><ol><li>通过 <code>getSupportFragmentManager() </code>方法获取<code>FragmentManager</code>对象。</li><li>通过 <code>FragmentManager.beginTransaction()</code>方法获取<code>FragmentTransaction</code>对象。</li><li>调用<code>add()</code>方法或这<code>replace()</code>方法加载 <code>Fragment</code>。</li><li>最后调用<code>commit()</code>方法提交事务。</li></ol><p>创建的fragmentone.xml、fragmenttwo.xml如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- fragmentone.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">    &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/fragmentone_tv&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;今天星期四，懂？&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;32sp&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><span class="hljs-comment">&lt;!-- fragmenttwo.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">    &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/fragmenttwo_btn&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;200dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;120dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;点击改变文字&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;32sp&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后在activity_main.xml中使用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/ll&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;horizontal&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fragment</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.example.myapplication.FragmentOne&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/fragmentone&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fragment</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.example.myapplication.FragmentTwo&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/fragmenttwo&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>需要注意的是<code>&lt;fragment&gt;</code>标签中必须设置<code>id</code>和<code>name</code>（对应的自己创建的继承于<code>Fragment</code>的子类）</p><p>其中<code>FragmentOne</code>类和<code>FragmentTwo</code>类的实现如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//FragmentOne.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FragmentOne</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fragment</span> &#123;<br>    <span class="hljs-keyword">public</span> View <span class="hljs-title function_">onCreateView</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> LayoutInflater inflater, <span class="hljs-meta">@Nullable</span> ViewGroup container, <span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-comment">//加载fragment，尽量写全局，然后判断是否已经创建</span><br>        <span class="hljs-type">View</span> <span class="hljs-variable">FragmentOne</span> <span class="hljs-operator">=</span> inflater.inflate(R.layout.fragmentone, container, <span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">return</span> FragmentOne;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//FragmentTwo.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FragmentTwo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fragment</span> &#123;<br>    <span class="hljs-keyword">public</span> View <span class="hljs-title function_">onCreateView</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> LayoutInflater inflater, <span class="hljs-meta">@Nullable</span> ViewGroup container, <span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-comment">//加载fragment</span><br>        <span class="hljs-type">View</span> <span class="hljs-variable">FragmentTwo</span> <span class="hljs-operator">=</span> inflater.inflate(R.layout.fragmenttwo, container, <span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">return</span> FragmentTwo;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>先不设置两个Fragment的关联。</p><p>MainActivity.java中不需要任何代码设置。</p><h2 id="2-2-动态加载Fragment"><a href="#2-2-动态加载Fragment" class="headerlink" title="2.2 动态加载Fragment"></a>2.2 动态加载Fragment</h2><p>两个fragment的xml文件和fragment子类同上。只不过 activity_main.xml 中需要修改，不是使用<code>&lt;fragment&gt;</code>标签，而是<code>&lt;FrameLayout&gt;</code>标签，需要定义<code>id</code>，没有<code>name</code>属性。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/ll&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/changefragmentbtn&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;change&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">FrameLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/framelayout&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;@drawable/wallhaven&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>通过点击按钮来更换fragment。</p><p>MainActivity.java需要做修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">View</span>.OnClickListener&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><br>        <span class="hljs-type">Button</span> <span class="hljs-variable">btn</span> <span class="hljs-operator">=</span> findViewById(R.id.changefragmentbtn);<br>        btn.setOnClickListener(<span class="hljs-built_in">this</span>);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br><br>        <span class="hljs-keyword">if</span> (flag)&#123;<br>            replaceFragment(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FragmentTwo</span>());<br>            flag = <span class="hljs-literal">false</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            replaceFragment(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FragmentOne</span>());<br>            flag = <span class="hljs-literal">true</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//动态切换fragment</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">replaceFragment</span><span class="hljs-params">(Fragment fragment)</span> &#123;<br>        <span class="hljs-comment">//获取fragmentManager</span><br>        <span class="hljs-type">FragmentManager</span> <span class="hljs-variable">supportFragmentManager</span> <span class="hljs-operator">=</span> getSupportFragmentManager();<br>        <span class="hljs-comment">//获取transaction</span><br>        <span class="hljs-type">FragmentTransaction</span> <span class="hljs-variable">fragmentTransaction</span> <span class="hljs-operator">=</span> supportFragmentManager.beginTransaction();<br>        <span class="hljs-comment">//替换fragment，第一个参数为被替换的fragment所在的FrameLayout容器id，第二个参数是所要展示的fragment</span><br>        fragmentTransaction.replace(R.id.framelayout, fragment);<br>        <span class="hljs-comment">//提交修改请求</span><br>        fragmentTransaction.commit();<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>当然也可以不选择实现View.OnClickListener接口来实现点击事件处理方法，选择写成匿名函数也是可以。</p><h2 id="2-3-Fragment回退栈"><a href="#2-3-Fragment回退栈" class="headerlink" title="2.3 Fragment回退栈"></a>2.3 Fragment回退栈</h2><p>在2.2的例子中，如果我们点击back键，则会直接退出应用。如果我们要实现一层一层的退出 fragment 的话，需要使用到<code>addToBackStack()</code>方法。拿2.2的例子来讲，只需稍微修改<code>replaceFragment()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">replaceFragment</span><span class="hljs-params">(Fragment fragment)</span> &#123;<br>    <span class="hljs-comment">//获取fragmentManager</span><br>    <span class="hljs-type">FragmentManager</span> <span class="hljs-variable">supportFragmentManager</span> <span class="hljs-operator">=</span> getSupportFragmentManager();<br>    <span class="hljs-comment">//获取transaction</span><br>    <span class="hljs-type">FragmentTransaction</span> <span class="hljs-variable">fragmentTransaction</span> <span class="hljs-operator">=</span> supportFragmentManager.beginTransaction();<br>    <span class="hljs-comment">//替换fragment，第一个参数为被替换的fragment所在的FrameLayout容器id，第二个参数是所要展示的fragment</span><br>    fragmentTransaction.replace(R.id.framelayout, fragment);<br>    <span class="hljs-comment">//将被替换的fragment添加到栈中</span><br>    fragmentTransaction.addToBackStack(<span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">//提交修改请求</span><br>    fragmentTransaction.commit();<br>&#125;<br></code></pre></td></tr></table></figure><p>这样当我们点击back键后，最上面的 fragment 事务会从堆栈中弹出。如果堆栈上没有 fragment 事务，则返回事件会向上传递到 Activity。</p><h2 id="2-4-Fragment与Activity的交互"><a href="#2-4-Fragment与Activity的交互" class="headerlink" title="2.4 Fragment与Activity的交互"></a>2.4 Fragment与Activity的交互</h2><h3 id="2-4-1-组件获取"><a href="#2-4-1-组件获取" class="headerlink" title="2.4.1 组件获取"></a>2.4.1 组件获取</h3><ul><li>Fragment通过getActivity().findViewById(R.id.list)获得Activity中的组件。</li><li>Activity通过getSupportFragmentManager().findFragmentByid获得Fragment中的组件（id和tag都行）。</li></ul><h3 id="2-4-2-数据传递"><a href="#2-4-2-数据传递" class="headerlink" title="2.4.2 数据传递"></a>2.4.2 数据传递</h3><h4 id="2-4-2-1-Fragment传递数据给Activity"><a href="#2-4-2-1-Fragment传递数据给Activity" class="headerlink" title="2.4.2.1 Fragment传递数据给Activity"></a>2.4.2.1 Fragment传递数据给Activity</h4><p>步骤如下：</p><ol><li>在Fragment定义一个接口,接口中定义抽象方法,你要传什么类型的数据参数就设置为什么类型</li><li>接着还有写一个调用接口中的抽象方法,把要传递的数据传过去</li><li>再接着就是Activity了,调用Fragment提供的那个方法,然后重写抽象方法的时候进行数据 的读取就可以了</li></ol><p>（有点像UI开发笔记中的RecyclerView的item监听设置。）</p><p>案例还是使用2.2的代码，只进行一点点修改。</p><p>首先在fragment对应的类中，添加以下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> FragmentToActivity fta;<br><span class="hljs-comment">//定义接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">FragmentToActivity</span>&#123;<br>    <span class="hljs-comment">//例如发送字符串</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">sentDataToActivity</span><span class="hljs-params">(String string)</span>;<br>&#125;<br><span class="hljs-comment">//让Activity能够实现该接口的同时并调用方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">getDataFromFragment</span><span class="hljs-params">(FragmentToActivity fta)</span> &#123;<br>    <span class="hljs-built_in">this</span>.fta = fta;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;Hello! I&#x27;m from Fragment&quot;</span>;<br>    fta.sentDataToActivity(msg);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在MainActivity.java中的onClick方法中添加以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">fragmentOne.getDataFromFragment(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FragmentOne</span>.FragmentToActivity() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sentDataToActivity</span><span class="hljs-params">(String string)</span> &#123;<br>        Toast.makeText(MainActivity.<span class="hljs-built_in">this</span>, string, Toast.LENGTH_SHORT).show();<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h4 id="2-4-2-1-Activity传递数据给Fragment"><a href="#2-4-2-1-Activity传递数据给Fragment" class="headerlink" title="2.4.2.1  Activity传递数据给Fragment"></a>2.4.2.1  Activity传递数据给Fragment</h4><p>步骤如下：</p><ol><li>在Activity中创建Bundle数据包，将数据放入Bundle中。</li><li>调用Fragment实例的setArguments(bundle) 从而将Bundle数据包传给Fragment。</li><li>然后Fragment中调用getArguments获得 Bundle对象,，然后进行解析就可以了。</li></ol><p>仍然以 2.2 的代码为例，我们来尝试修改fragment的内容。</p><p>在MainActivity.java中，需要稍微修改一下代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>    <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>    setContentView(R.layout.activity_main);<br><br>    <span class="hljs-type">Button</span> <span class="hljs-variable">btn</span> <span class="hljs-operator">=</span> findViewById(R.id.changefragmentbtn);<br>    btn.setOnClickListener(<span class="hljs-built_in">this</span>);<br><span class="hljs-comment">//改为公共对象</span><br>    fragmentOne = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FragmentOne</span>();<br>    fragmentTwo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FragmentTwo</span>();<br><span class="hljs-comment">//创建用于通信的bundle</span><br>    bundleone = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bundle</span>();<br>    bundletwo = <span class="hljs-keyword">new</span>  <span class="hljs-title class_">Bundle</span>();<br><span class="hljs-comment">//设置消息的键值对</span><br>    bundleone.putString(<span class="hljs-string">&quot;message&quot;</span>,<span class="hljs-string">&quot;我是秦始皇，打钱！&quot;</span>);<br>    bundletwo.putString(<span class="hljs-string">&quot;message&quot;</span>,<span class="hljs-string">&quot;封我做大将军嘞&quot;</span>);<br><span class="hljs-comment">//将bundle传给fragment</span><br>    fragmentOne.setArguments(bundleone);<br>    fragmentTwo.setArguments(bundletwo);<br>&#125;<br></code></pre></td></tr></table></figure><p>主要改变的是onCreate方法，onClick方法就不需要在创建新的fragment对象，而是使用创建的公共对象。</p><blockquote><p><strong>补充！</strong></p><p>不建议将new FragmentOne()出的对象作为公共对象作为fragmentTransaction.add()的参数，这样会导致应用切换出问题。但replace()不会。</p></blockquote><p>然后只需要在fragment子类中的onCreateView方法中额外添加以下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">textview = FragmentOne.findViewById(R.id.fragmentone_tv);<br><span class="hljs-comment">//获取传过来的bunlde</span><br><span class="hljs-type">Bundle</span> <span class="hljs-variable">bunlde</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getArguments();<br><span class="hljs-comment">//通过key获得传过来的字符串</span><br>message = bunlde.getString(<span class="hljs-string">&quot;message&quot;</span>);<br>textview.setText(message);<br></code></pre></td></tr></table></figure><h4 id="2-4-2-1-Fragment传递数据给Fragment"><a href="#2-4-2-1-Fragment传递数据给Fragment" class="headerlink" title="2.4.2.1  Fragment传递数据给Fragment"></a>2.4.2.1  Fragment传递数据给Fragment</h4><p>如果 是一个Fragment 跳转到另一个Fragment，那么可以使用Bundle通信，因为涉及到Fragment的添加，所以还需要FragmentManager。示例代码如下（来自菜鸟教程）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FragmentManager</span> <span class="hljs-variable">fManager</span> <span class="hljs-operator">=</span> getSupportFragmentManager( );<br><span class="hljs-type">FragmentTransaction</span> <span class="hljs-variable">fTransaction</span> <span class="hljs-operator">=</span> fManager.beginTransaction();<br><span class="hljs-type">Fragmentthree</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fragmentthree</span>();<br><span class="hljs-type">Fragmenttwo</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fragmenttwo</span>();<br><span class="hljs-type">Bundle</span> <span class="hljs-variable">bundle</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bundle</span>();<br>bundle.putString(<span class="hljs-string">&quot;key&quot;</span>,id);<br>t2.setArguments(bundle); <br>fTransaction.add(R.id.fragmentRoot, t2, <span class="hljs-string">&quot;~~~&quot;</span>);  <br>fTransaction.addToBackStack(t1);  <br>fTransaction.commit(); <br></code></pre></td></tr></table></figure><p>如果是两个Fragment需要即时传数据，而非跳转的话，就需要以Activity为媒介，即先在Activity获得fragment1传过来的数据，再传到fragment2中。</p><p>这个实现的话感觉是将 2.4.2.1 和 2.4.2.2 中的方法拼接一下。</p><h1 id="三、Fragment生命周期"><a href="#三、Fragment生命周期" class="headerlink" title="三、Fragment生命周期"></a>三、Fragment生命周期</h1><h2 id="3-1-Fragment生命周期的方法"><a href="#3-1-Fragment生命周期的方法" class="headerlink" title="3.1 Fragment生命周期的方法"></a>3.1 Fragment生命周期的方法</h2><p>部分方法解释如下：</p><ul><li>onAttach()：因为Fragment必须依托Activity才能运行，所以该方法的功能是将Fragment与Activity绑定。</li><li>onCreate()：创建Fragment。</li><li>onCreateView()：因为Fragment是有UI界面的，所以该方法的功能是绘制Fragment的UI界面。</li><li>onActivityCreate()：Fragment所在的Activity启动完成后才会被调用。</li><li>onDestroyView()：销毁Fragment的UI视图</li><li>onDestroy() ：销毁Fragment。</li><li>onDetach()：Fragment与Activity解绑。</li></ul><p>（来自菜鸟教程的图片）</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308131917005.jpg"></p><p>由此可见，Fragment的运行必须在onAttach()和onDetach()之间，因为Fragment不能独立运行，必须依赖Activity。</p><h2 id="3-2-体验Fragment的生命周期"><a href="#3-2-体验Fragment的生命周期" class="headerlink" title="3.2 体验Fragment的生命周期"></a>3.2 体验Fragment的生命周期</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FragmentOne</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fragment</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lll&quot;</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAttach</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> Context context)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onAttach(context);<br>        Log.d(TAG, <span class="hljs-string">&quot;onAttach: &quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        Log.d(TAG, <span class="hljs-string">&quot;onCreate: &quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Nullable</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> View <span class="hljs-title function_">onCreateView</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> LayoutInflater inflater, <span class="hljs-meta">@Nullable</span> ViewGroup container, <span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-comment">//加载fragment</span><br>        <span class="hljs-type">View</span> <span class="hljs-variable">FragmentOne</span> <span class="hljs-operator">=</span> inflater.inflate(R.layout.fragmentone, container, <span class="hljs-literal">false</span>);<br>        Log.d(TAG, <span class="hljs-string">&quot;onCreateView: &quot;</span>);<br>        <span class="hljs-keyword">return</span> FragmentOne;<br>        <br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onActivityCreated</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onActivityCreated(savedInstanceState);<br>        Log.d(TAG, <span class="hljs-string">&quot;onActivityCreated: &quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStart</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onStart();<br>        Log.d(TAG, <span class="hljs-string">&quot;onStart: &quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onResume</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onResume();<br>        Log.d(TAG, <span class="hljs-string">&quot;onResume: &quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPause</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onPause();<br>        Log.d(TAG, <span class="hljs-string">&quot;onPause: &quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onStop</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onStop();<br>        Log.d(TAG, <span class="hljs-string">&quot;onStop: &quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroyView</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroyView();<br>        Log.d(TAG, <span class="hljs-string">&quot;onDestroyView: &quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDestroy</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDestroy();<br>        Log.d(TAG, <span class="hljs-string">&quot;onDestroy: &quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onDetach</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-built_in">super</span>.onDetach();<br>        Log.d(TAG, <span class="hljs-string">&quot;onDetach: &quot;</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>通过观察Logcat中的信息，可以知道：</p><ol><li>从无到有显示Fragment：onAttach() -&gt; onCreate() -&gt; onCreateView() -&gt; onActivityCreated() -&gt; onStart() -&gt; onResume()</li><li>基于1，之后按下home键：onPause() -&gt; onStop()</li><li>基于2，重新进入：onStart() -&gt; onResume()</li><li>基于3，按回退键：onPause() -&gt; onStop() -&gt; onDestroyView() -&gt; onDestroy() -&gt; onDetach()</li><li>被另一个UI完全替换：onPause() -&gt; onStop() -&gt; onDestroyView()</li><li>基于5，直接退出应用：onDestroy() -&gt; onDetach()</li><li>基于5，再次替换回来：onCreateView() -&gt; onActivityCreated() -&gt; onStart() -&gt; onResume()</li></ol><h1 id="四、Fragment-ViewPager实现简单点的微信程序页面"><a href="#四、Fragment-ViewPager实现简单点的微信程序页面" class="headerlink" title="四、Fragment + ViewPager实现简单点的微信程序页面"></a>四、Fragment + ViewPager实现简单点的微信程序页面</h1><p>实现页面滑动能够与底部导航栏进行同步。</p><p>当然，<strong>BottomNavigationView</strong>已经实现了这一功能，以后使用这个组件即可，就不需要那么麻烦了。</p><p>话不多说，开始实操！</p><p>首先编写activity_main.xml的内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.MainActivity&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">androidx.viewpager2.widget.ViewPager2</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/id_viewpager&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;0dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;horizontal&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">        &gt;</span><br>        <span class="hljs-comment">&lt;!-- 第一个按钮--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/id_chatlayout&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">            &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ImageView</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/id_chatimage&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:src</span>=<span class="hljs-string">&quot;@drawable/baseline_message_24&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">app:tint</span>=<span class="hljs-string">&quot;@color/buttoncolorchange&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;微信&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;24sp&quot;</span></span><br><span class="hljs-tag">                /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 第二个按钮--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/id_contactlayout&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">            &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ImageView</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/id_contactimage&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:src</span>=<span class="hljs-string">&quot;@drawable/baseline_contacts_24&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">app:tint</span>=<span class="hljs-string">&quot;@color/buttoncolorchange&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;联系人&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;24sp&quot;</span></span><br><span class="hljs-tag">                /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 第三个按钮--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/id_findlayout&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">            &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ImageView</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/id_findimage&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:src</span>=<span class="hljs-string">&quot;@drawable/baseline_compass_calibration_24&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">app:tint</span>=<span class="hljs-string">&quot;@color/buttoncolorchange&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;发现&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;24sp&quot;</span></span><br><span class="hljs-tag">                /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!-- 第四个按钮--&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/id_melayout&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_weight</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">            &gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">ImageView</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/id_meimage&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:src</span>=<span class="hljs-string">&quot;@drawable/baseline_account_box_24&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">app:tint</span>=<span class="hljs-string">&quot;@color/buttoncolorchange&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;我&quot;</span></span><br><span class="hljs-tag">                <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;24sp&quot;</span></span><br><span class="hljs-tag">                /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br>        <br>    <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>整体布局为：底部为导航栏，其余空间给viewpager2。导航栏分四个按钮（跟微信一样），其中ImageView的tint属性可以实现图片颜色的变化，这样就不需要用到两张图来切换了，buttoncolorchange.xml 的内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">selector</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:color</span>=<span class="hljs-string">&quot;#5cd849&quot;</span> <span class="hljs-attr">android:state_selected</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:color</span>=<span class="hljs-string">&quot;#ffffff&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">selector</span>&gt;</span><br></code></pre></td></tr></table></figure><p>底部导航栏的四个按钮分别有对应的四个页面（fragment），它们通过FragmentAdapter以及Fragment来实现，对应的xml文件我写的比较简陋，就一个TextView。（这个文件通过创建Fragment类会自动生成，不需要自己再创建）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">FrameLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">tools:context</span>=<span class="hljs-string">&quot;.WechatFragment&quot;</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/id_textView&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;32sp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#FFFF00&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br>    <br><span class="hljs-tag">&lt;/<span class="hljs-name">FrameLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>既然使用了Viewpager2和Fragment，那么就要编写对应的FragmentAdapter和Fragment类。其中Viewpage的Adapter编写如下（<strong>需要注意继承的是FragmentStateAdapter</strong>）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WechatViewAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">FragmentStateAdapter</span> &#123;<br><span class="hljs-comment">//用于存储四个页面(fragment)</span><br>    <span class="hljs-keyword">private</span> List&lt;Fragment&gt; fragmentList;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">WechatViewAdapter</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> FragmentManager fragmentManager, <span class="hljs-meta">@NonNull</span> Lifecycle lifecycle, List&lt;Fragment&gt; fragmentList)</span> &#123;<br>        <span class="hljs-built_in">super</span>(fragmentManager, lifecycle);<br>        <span class="hljs-built_in">this</span>.fragmentList = fragmentList;<br>    &#125;<br><br>    <span class="hljs-meta">@NonNull</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Fragment <span class="hljs-title function_">createFragment</span><span class="hljs-params">(<span class="hljs-type">int</span> position)</span> &#123;<br>        <span class="hljs-keyword">return</span> fragmentList.get(position);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getItemCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> fragmentList == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span> : fragmentList.size();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>Fragment对应的Fragment类编写如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WechatFragment</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fragment</span> &#123;<br><br>    <span class="hljs-comment">//bundle的key</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ARG_PARAM1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;key1&quot;</span>;<br>    <span class="hljs-comment">//fragment对应的视图</span><br>    <span class="hljs-keyword">private</span> View rootView;<br>    <span class="hljs-comment">//通过key获取的消息</span><br>    <span class="hljs-keyword">private</span> String mParam1;<br><br>    <span class="hljs-comment">//创建fragment的实例对象</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> WechatFragment <span class="hljs-title function_">newInstance</span><span class="hljs-params">(String param1)</span> &#123;<br>        <span class="hljs-type">WechatFragment</span> <span class="hljs-variable">fragment</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WechatFragment</span>();<br>        <span class="hljs-type">Bundle</span> <span class="hljs-variable">args</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Bundle</span>();<br>        args.putString(ARG_PARAM1, param1);<br>        fragment.setArguments(args);<br>        <span class="hljs-keyword">return</span> fragment;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        <span class="hljs-keyword">if</span> (getArguments() != <span class="hljs-literal">null</span>) &#123;<br>            mParam1 = getArguments().getString(ARG_PARAM1);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> View <span class="hljs-title function_">onCreateView</span><span class="hljs-params">(LayoutInflater inflater, ViewGroup container,</span><br><span class="hljs-params">                             Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-keyword">if</span> (rootView == <span class="hljs-literal">null</span>)&#123;<br>            rootView = inflater.inflate(R.layout.fragment_wechat, container, <span class="hljs-literal">false</span>);<br>        &#125;<br>        <span class="hljs-comment">//对组件做一些初始化</span><br>        initView();<br>        <span class="hljs-keyword">return</span> rootView;<br>    &#125;<br><span class="hljs-comment">//设置页面要展示的内容</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initView</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-type">TextView</span> <span class="hljs-variable">textView</span> <span class="hljs-operator">=</span> rootView.findViewById(R.id.id_textView);<br>        textView.setText(mParam1);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>当然，对于这个实战来讲，其实可以不用写那么复杂。</p><p>因为四个页面我使用的都是相同的fragment的xml文件，所以这里创建一个fragment类即可。</p><p>最主要的是MainActivity.java，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">View</span>.OnClickListener&#123;<br><span class="hljs-comment">//存放四个页面对应的实例化对象</span><br>    <span class="hljs-keyword">private</span> List&lt;Fragment&gt; fragmentList;<br>    <span class="hljs-comment">//存放viewpager组件对应的实例化对象</span><br>    <span class="hljs-keyword">private</span> ViewPager2 viewpager;<br><span class="hljs-comment">//存放底部导航栏的四个&quot;按钮&quot;对应的实例化对象</span><br>    <span class="hljs-keyword">private</span> ArrayList&lt;LinearLayout&gt; linearLayoutArrayList;<br><span class="hljs-comment">//存放底部导航栏的四个&quot;按钮&quot;的图片的实例化对象</span><br>    <span class="hljs-keyword">private</span> ArrayList&lt;ImageView&gt; imageViewArrayList;<br>    <span class="hljs-comment">//存放当前页面对应的&quot;按钮&quot;的图片（当页面进行切换时，旧的当前页面对应的按钮图片的选中状态需要改变，通过这个对象来进行操作）。</span><br>    <span class="hljs-keyword">private</span> ImageView currentImageView;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><span class="hljs-comment">//进行viewpager的初始化，即四个fragment的初始化</span><br>        initPager();<br>        <span class="hljs-comment">//进行底部导航栏的初始化</span><br>        initBottomNavigation();<br><br>    &#125;<br>    <br>    <span class="hljs-comment">//初始化viewpager</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initPager</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//常规操作......</span><br>        <span class="hljs-comment">//找到viewpager控件，以便后续设置adapter</span><br>        viewpager = findViewById(R.id.id_viewpager);<br><span class="hljs-comment">//实例化四个页面的fragment</span><br>        fragmentList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        fragmentList.add(WechatFragment.newInstance(<span class="hljs-string">&quot;聊天&quot;</span>));<br>        fragmentList.add(WechatFragment.newInstance(<span class="hljs-string">&quot;通讯录&quot;</span>));<br>        fragmentList.add(WechatFragment.newInstance(<span class="hljs-string">&quot;发现&quot;</span>));<br>        fragmentList.add(WechatFragment.newInstance(<span class="hljs-string">&quot;我的&quot;</span>));<br><br>        <span class="hljs-type">WechatViewAdapter</span> <span class="hljs-variable">wechatViewAdapter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WechatViewAdapter</span>(getSupportFragmentManager(), getLifecycle(), fragmentList);<br>        viewpager.setAdapter(wechatViewAdapter);<br><br>        <span class="hljs-comment">//设置viewpager的滑动监听，以便在滑动页面的时候，底部导航栏的按钮颜色也能跟着改变</span><br>        viewpager.registerOnPageChangeCallback(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ViewPager2</span>.OnPageChangeCallback() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-comment">//页面被选中，通过实现该方法来与导航栏关联</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onPageSelected</span><span class="hljs-params">(<span class="hljs-type">int</span> position)</span> &#123;<br>                <span class="hljs-built_in">super</span>.onPageSelected(position);<br>                <span class="hljs-comment">//告诉底部导航栏使用哪个page,然后对应item变色</span><br>                chageBottomNavigationItem(position);<br>            &#125;<br><br>        &#125;);<br><br>    &#125;<br><span class="hljs-comment">//初始化底部导航栏，即获取四个&quot;按钮&quot;，然后设置监听，最后默认</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">initBottomNavigation</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-comment">//获取四个&quot;按钮&quot;</span><br>        linearLayoutArrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        linearLayoutArrayList.add(findViewById(R.id.id_chatlayout));<br>        linearLayoutArrayList.add(findViewById(R.id.id_contactlayout));<br>        linearLayoutArrayList.add(findViewById(R.id.id_findlayout));<br>        linearLayoutArrayList.add(findViewById(R.id.id_melayout));<br><span class="hljs-comment">//循环设置监听</span><br>        <span class="hljs-keyword">for</span> (LinearLayout each : linearLayoutArrayList) &#123;<br>            each.setOnClickListener(<span class="hljs-built_in">this</span>);<br>        &#125;<br><span class="hljs-comment">//获取四个&quot;按钮&quot;的图片</span><br>        imageViewArrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        imageViewArrayList.add(findViewById(R.id.id_chatimage));<br>        imageViewArrayList.add(findViewById(R.id.id_contactimage));<br>        imageViewArrayList.add(findViewById(R.id.id_findimage));<br>        imageViewArrayList.add(findViewById(R.id.id_meimage));<br><br>        <span class="hljs-comment">//ViewPager首先展示的是第一个页面，所以对应的&quot;按钮&quot;图片为选中状态</span><br>        currentImageView = imageViewArrayList.get(<span class="hljs-number">0</span>);<br>        currentImageView.setSelected(<span class="hljs-literal">true</span>);<br><br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-comment">//点击底部导航栏触发页面切换</span><br>        chageBottomNavigationItem(view.getId());<br>    &#125;<br>    <br><span class="hljs-comment">//实现滑动和&quot;按钮&quot;点击带来的页面切换和&quot;按钮&quot;图片改变</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">chageBottomNavigationItem</span><span class="hljs-params">(<span class="hljs-type">int</span> positon)</span> &#123;<br>        <span class="hljs-comment">//因为不能使用switch-case，所以if不太好写</span><br>        currentImageView.setSelected(<span class="hljs-literal">false</span>);<br>        <span class="hljs-keyword">if</span> (positon == R.id.id_chatlayout) &#123;<span class="hljs-comment">//点击导航栏的item来切换页面</span><br>            <span class="hljs-comment">//真正进行页面切换</span><br>            viewpager.setCurrentItem(<span class="hljs-number">0</span>);<br>            <span class="hljs-comment">//对应的新页面的&quot;按钮&quot;图片设置为当前页面的&quot;按钮&quot;图片</span><br>            currentImageView = imageViewArrayList.get(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (positon == <span class="hljs-number">0</span>) &#123;<span class="hljs-comment">//通过滑动来切换页面</span><br>            currentImageView = imageViewArrayList.get(<span class="hljs-number">0</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (positon == R.id.id_contactlayout) &#123;<br>            viewpager.setCurrentItem(<span class="hljs-number">1</span>);<br>            currentImageView = imageViewArrayList.get(<span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (positon == <span class="hljs-number">1</span>) &#123;<br>            currentImageView = imageViewArrayList.get(<span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (positon == R.id.id_findlayout) &#123;<br>            viewpager.setCurrentItem(<span class="hljs-number">2</span>);<br>            currentImageView = imageViewArrayList.get(<span class="hljs-number">2</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (positon == <span class="hljs-number">2</span>) &#123;<br>            currentImageView = imageViewArrayList.get(<span class="hljs-number">2</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (positon == R.id.id_melayout) &#123;<br>            viewpager.setCurrentItem(<span class="hljs-number">3</span>);<br>            currentImageView = imageViewArrayList.get(<span class="hljs-number">3</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (positon == <span class="hljs-number">3</span>) &#123;<br>            currentImageView = imageViewArrayList.get(<span class="hljs-number">3</span>);<br>        &#125;<br>        <span class="hljs-comment">//新的页面对应的item的选中状态先设置为true</span><br>        currentImageView.setSelected(<span class="hljs-literal">true</span>);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android开发学习笔记(二) —— 了解UI控件</title>
    <link href="/2023/08/12/Android%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)%20%E2%80%94%E2%80%94%20%E4%BA%86%E8%A7%A3UI%E6%8E%A7%E4%BB%B6/"/>
    <url>/2023/08/12/Android%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%BA%8C)%20%E2%80%94%E2%80%94%20%E4%BA%86%E8%A7%A3UI%E6%8E%A7%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>Android的UI开发一般采用XML代码编写和可视化编辑器（更方便）。这一部分就好比是html+css+js三剑客。</p><h1 id="二、控件"><a href="#二、控件" class="headerlink" title="二、控件"></a>二、控件</h1><h2 id="2-1-TextView"><a href="#2-1-TextView" class="headerlink" title="2.1 TextView"></a>2.1 TextView</h2><p>文本框</p><h3 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>layout_width</td><td>设置控件的宽度，常用的有”wrap_content”(根据控件内容适配)、”match_parent”(与父容器同宽)，以及确切数字，如200<strong>dp</strong></td></tr><tr><td>layout_height</td><td>设置控件的高度，同上。</td></tr><tr><td>id</td><td>格式为”@+id&#x2F;xxx”用于在代码中获取该对象，比如java代码通过findViewById()方法获取</td></tr><tr><td>text</td><td>设置文字内容</td></tr><tr><td>textColor</td><td>设置文字颜色，格式可以为”#xxxxxxxx”，前两位代表颜色的透明度（00透明，FF不透明），后面代表RGB</td></tr><tr><td>textStyle</td><td>设置文字风格，如normal(无效果)，bold(加粗)，italic(斜体)</td></tr><tr><td>textSize</td><td>设置文字大小，单位<strong>sp</strong></td></tr><tr><td>background</td><td>设置控件背景颜色，”#xxxxxxxx”的格式同textColor一样，也可以是图片背景</td></tr><tr><td>gravity</td><td>设置控件中内容的对齐方向，如center、left、right、bottom、top等</td></tr><tr><td>autoLink</td><td>当文字内容出现URL，E-Mail，电话号码等，通过设置autoLink属性，可以使其成为链接，常用类别有 web、email、phone、map等</td></tr></tbody></table><p>其中 text、textColor、background 属性的内容在开发中并不直接在控件中写明，而是写在res\values\目录下的 colors.xml、strings.xml中，然后被控件调用。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml">//在strings.xml中声明:<br><span class="hljs-tag">&lt;<span class="hljs-name">string</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;aaa&quot;</span>&gt;</span>我被调用了<span class="hljs-tag">&lt;/<span class="hljs-name">string</span>&gt;</span><br>//在控件中引用:<br><span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">          <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;@String/aaa&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><h3 id="跑马灯案例"><a href="#跑马灯案例" class="headerlink" title="跑马灯案例"></a>跑马灯案例</h3><p>涉及到的属性</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>singleLine</td><td>内容是否单行显示</td></tr><tr><td>focusable</td><td>控件是否可以获取焦点</td></tr><tr><td>focusableInTouchMode</td><td>用于控件在触摸模式下是否可以获取焦点</td></tr><tr><td>ellipsize</td><td>省略文本的模式</td></tr><tr><td>marqueeRepeatLimit</td><td>字母动画重复的次数</td></tr><tr><td>clickable</td><td>控件是否可以被点击</td></tr></tbody></table><p>上述属性设置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml">android:singleLine=&quot;true&quot;<br>android:ellipsize=&quot;marquee&quot;<br>android:marqueeRepeatLimit=&quot;marquee_forever&quot;<br>android:focusable=&quot;true&quot;<br></code></pre></td></tr></table></figure><p>实现跑马灯有以下方式：</p><ol><li><p>额外设置属性值</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">android:</span>focusableInTouchMode=<span class="hljs-string">&quot;true&quot;</span><br><span class="hljs-symbol">android:</span>clickable=<span class="hljs-string">&quot;true&quot;</span><br></code></pre></td></tr></table></figure><p>点击TextView后，获得焦点，开始跑马灯效果。</p></li><li><p>添加额外属型值</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">android:</span>focusableInTouchMode=<span class="hljs-string">&quot;true&quot;</span><br></code></pre></td></tr></table></figure><p>并且在同一个<code>LinearLayout</code>下添加</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;requestFocus/&gt;</span><br></code></pre></td></tr></table></figure><p>它用于请求将焦点设置到指定的元素上。</p></li><li><p>创建类继承TextView类，重写<code>isFocused</code>方法，使其永远返回<code>true</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTextView</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">TextView</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyTextView</span><span class="hljs-params">(Context context)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyTextView</span><span class="hljs-params">(Context context, <span class="hljs-meta">@Nullable</span> AttributeSet attrs)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, attrs);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyTextView</span><span class="hljs-params">(Context context, <span class="hljs-meta">@Nullable</span> AttributeSet attrs, <span class="hljs-type">int</span> defStyleAttr)</span> &#123;<br>        <span class="hljs-built_in">super</span>(context, attrs, defStyleAttr);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFocused</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h2 id="2-2-Button"><a href="#2-2-Button" class="headerlink" title="2.2 Button"></a>2.2 Button</h2><p>按钮。Button继承于TextView，所以TextView上很多属性也可以应用到Button 上。</p><h3 id="基本属性-1"><a href="#基本属性-1" class="headerlink" title="基本属性"></a>基本属性</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>drawable</td><td>引用的Drawable位图</td></tr><tr><td>state_focused</td><td>是否获得焦点</td></tr><tr><td>state_window_focused</td><td>是否获得窗口焦点</td></tr><tr><td>state_enabled</td><td>控件是否可用</td></tr><tr><td>state_checkable</td><td>控件可否被勾选</td></tr><tr><td>state_checked</td><td>控件是否被勾选</td></tr><tr><td>state_selected</td><td>控件是否被选择,针对有滚轮的情况</td></tr><tr><td>state_pressed</td><td>控件是否被按下</td></tr><tr><td>state_active</td><td>控件是否处于活动状态</td></tr><tr><td>state_single</td><td>控件包含多个子控件时,确定是否只显示一个子控件</td></tr><tr><td>state_first、state_middle、state_last</td><td>控件包含多个子控件时,确定哪个子控件是否处于显示状态</td></tr></tbody></table><p>以上这些属性并不是在<code>&lt;button&gt;</code>或<code>&lt;android.widget.Button&gt;</code>下声明的，而是在<code>\res\drawable\</code>和<code>\res\color\</code>目录下创建xml文件进行声明（color这个目录自己创建，名字只能是color，因为<code>&lt;selector&gt;</code>只能在<code>animator\</code>，<code>drawable\</code>，<code>color\</code>下的xml文件中使用）。</p><h3 id="按钮点击转化案例"><a href="#按钮点击转化案例" class="headerlink" title="按钮点击转化案例"></a>按钮点击转化案例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;200dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;我是按钮&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textColor</span>=<span class="hljs-string">&quot;#FF00FF00&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;32dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;@drawable/bt_image&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:backgroundTint</span>=<span class="hljs-string">&quot;@color/btn_color&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br></code></pre></td></tr></table></figure><p>如果使用<code>&lt;Button/&gt;</code>标签，则<code>background</code>和<code>backgroundTint</code>属性设置颜色无效！推荐使用**<code>&lt;android.widget.Button/&gt;</code>**来解决这些问题。其中<code>background</code>属性设置的<code>@drawable/bt_image</code>和<code>backgroundTint</code>属性设置的<code>@color/btn_color</code>均是自己创建的。</p><p>drawable&#x2F;bt_image.xml如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">selector</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@drawable/baseline_airplanemode_active_24&quot;</span> <span class="hljs-attr">android:state_pressed</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@drawable/baseline_airplanemode_inactive_24&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">selector</span>&gt;</span><br></code></pre></td></tr></table></figure><p>第一<code>&lt;item/&gt;</code>设置了<code>state_pressed=&quot;true&quot;</code>，表示Button被点击的状态对应的图案，那么显然第二个<code>&lt;item/&gt;</code>则表示的是没有被点击状态下的图案。至于这些drawable的属性值，则是一些矢量图。</p><p>color&#x2F;btn_color.xml如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">selector</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:color</span>=<span class="hljs-string">&quot;@color/black&quot;</span> <span class="hljs-attr">android:state_pressed</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:color</span>=<span class="hljs-string">&quot;#FFFF0000&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">selector</span>&gt;</span><br></code></pre></td></tr></table></figure><p>跟<code>drawable/bt_image.xml</code>的解释类似，不过颜色设置的是图标的。</p><h3 id="Button的事件处理"><a href="#Button的事件处理" class="headerlink" title="Button的事件处理"></a>Button的事件处理</h3><p>点击事件、长按事件、触摸事件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Button</span> <span class="hljs-variable">btn1</span> <span class="hljs-operator">=</span> findViewById(R.id.btn1);<br><br><span class="hljs-comment">//点击事件</span><br>btn1.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;onClick: &quot;</span>);;<br>    &#125;<br>&#125;);<br><span class="hljs-comment">//长按事件</span><br>btn1.setOnLongClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnLongClickListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onLongClick</span><span class="hljs-params">(View view)</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;onLongClick: &quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;);<br><span class="hljs-comment">//触摸事件</span><br>btn1.setOnTouchListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnTouchListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onTouch</span><span class="hljs-params">(View view, MotionEvent motionEvent)</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;onTouch: &quot;</span> + motionEvent.getAction());<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>长按按钮并松开（不移动），测试结果如下</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">onTouch:</span> <span class="hljs-number">0</span>  <br><span class="hljs-symbol">onLongClick:</span> <br><span class="hljs-symbol">onTouch:</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">onClick:</span> <br></code></pre></td></tr></table></figure><p>Touch事件触发了两次。分别是按下动作<code>ACTION_DOWN (0)</code>、松开动作<code>ACTION_UP (1)</code>。如果按住不松开并且移动，则会触发移动动作<code>ACTION_MOVE (2)</code>。</p><p>从上面的结果可以看出，这三个事件触发的顺序依次Touch、LongClick、Click。</p><p>在这些回调函数中，返回值为false表示不拦截点击事件消息（click动作在最后触发，没有返回值）。倘若将返回值修改为true，表示拦截点击事件消息，那么其他监听器就不会收到这个消息，因此也就不会执行相应回调函数。（从这三个事件的触发顺序是可以猜测出修改返回值后的触发情况）</p><p>onclick事件的处理函数可以在button的onClick属性处绑定。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:onClick</span>=<span class="hljs-string">&quot;dealClick&quot;</span>/&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dealClick</span><span class="hljs-params">(View view)</span> &#123;<br>    Toast.makeText(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;可以的&quot;</span>, Toast.LENGTH_SHORT).show();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><p>计数器，如果长按则提示信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//点击事件</span><br>btn1.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;onClick: &quot;</span>);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span>  Integer.parseInt(btn1.getText().toString());<br>        cnt++;<br>        btn1.setText(cnt.toString());<br>    &#125;<br>&#125;);<br><span class="hljs-comment">//长按事件</span><br>btn1.setOnLongClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnLongClickListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">onLongClick</span><span class="hljs-params">(View view)</span> &#123;<br>        Log.d(TAG, <span class="hljs-string">&quot;onLongClick: &quot;</span>);<br>        Toast.makeText(MainActivity.<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;请不要长按按钮&quot;</span>, Toast.LENGTH_SHORT).show();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h2 id="2-3-EditText"><a href="#2-3-EditText" class="headerlink" title="2.3 EditText"></a>2.3 EditText</h2><p>输入框。EditText继承与TextView。</p><h3 id="基本属性-2"><a href="#基本属性-2" class="headerlink" title="基本属性"></a>基本属性</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>hint</td><td>提示信息</td></tr><tr><td>textColorHint</td><td>提示文字的颜色</td></tr><tr><td>inputType</td><td>输入类型，如日期、电话、邮件等</td></tr><tr><td>drawableLeft, drawableRight等</td><td>在输入框的指定位置添加图片</td></tr><tr><td>drawablePadding</td><td>设置图片和输入内容的间距</td></tr><tr><td>paddingLeft, paddingRight等</td><td>设置内容与边框的间距</td></tr><tr><td>selectAllOnFocus</td><td>获得焦点后全选组件内所有文本内容</td></tr><tr><td>minLines, maxLines</td><td>设置最小、最大的行数，当输入内容超过最大行数，文字会自动向上滚动</td></tr></tbody></table><h3 id="登录案例"><a href="#登录案例" class="headerlink" title="登录案例"></a>登录案例</h3><p>xml的声明如下，声明了账号框、密码框、登录按钮。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EditText</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/zhanghao&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;200dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:inputType</span>=<span class="hljs-string">&quot;text&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:hint</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textColorHint</span>=<span class="hljs-string">&quot;#89827f&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:drawableLeft</span>=<span class="hljs-string">&quot;@drawable/baseline_account_box_24&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:drawablePadding</span>=<span class="hljs-string">&quot;20dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:padding</span>=<span class="hljs-string">&quot;20dp&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">EditText</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/mima&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;200dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:inputType</span>=<span class="hljs-string">&quot;textPassword&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:hint</span>=<span class="hljs-string">&quot;请输入密码&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textColorHint</span>=<span class="hljs-string">&quot;#89827f&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:drawableLeft</span>=<span class="hljs-string">&quot;@drawable/baseline_password_24&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:drawablePadding</span>=<span class="hljs-string">&quot;20dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:padding</span>=<span class="hljs-string">&quot;20dp&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;50dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/btn&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;登录&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>按钮设置click监听，然后获取账号密码，对比从而进行不同操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>    <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>    setContentView(R.layout.activity_main);<br>    <span class="hljs-type">Button</span> <span class="hljs-variable">btn</span> <span class="hljs-operator">=</span> findViewById(R.id.btn);<br>    <span class="hljs-type">EditText</span> <span class="hljs-variable">account</span> <span class="hljs-operator">=</span> findViewById(R.id.zhanghao);<br>    <span class="hljs-type">EditText</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> findViewById(R.id.mima);<br><br>    btn.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">ac</span> <span class="hljs-operator">=</span> account.getText().toString();<br>            <span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> password.getText().toString();<br>            <span class="hljs-keyword">if</span> (ac.equals(<span class="hljs-string">&quot;admin&quot;</span>) &amp;&amp; pwd.equals(<span class="hljs-string">&quot;123456&quot;</span>))&#123;<br>                Toast.makeText(MainActivity.<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;管理员，欢迎你&quot;</span>, Toast.LENGTH_SHORT).show();<br>            &#125;<br>            <span class="hljs-keyword">else</span> &#123;<br>                Toast.makeText(MainActivity.<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;账号或密码错误&quot;</span>, Toast.LENGTH_SHORT).show();<br>                account.setText(<span class="hljs-string">&quot;&quot;</span>);<br>                password.setText(<span class="hljs-string">&quot;&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-4-ImageView"><a href="#2-4-ImageView" class="headerlink" title="2.4 ImageView"></a>2.4 ImageView</h2><p>图片视图。</p><h3 id="基本属性-3"><a href="#基本属性-3" class="headerlink" title="基本属性"></a>基本属性</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>src</td><td>设置图片资源</td></tr><tr><td>scaleType</td><td>设置图片缩放类型，如fitStart, fitCenter, fitEnd（等比缩放，位置放置不同）等</td></tr><tr><td>maxHeight</td><td>最大高度</td></tr><tr><td>maxWidth</td><td>最大宽度</td></tr><tr><td>adjustViewBounds</td><td>调整View的界限</td></tr></tbody></table><p>maxHeight、maxWidth需要和adjustViewBounds一起使用，等比缩放直到一边达到最大值。</p><h2 id="2-5-RadioButton"><a href="#2-5-RadioButton" class="headerlink" title="2.5 RadioButton"></a>2.5 RadioButton</h2><p>单选框。需要创建<code>&lt;RadioGroup&gt;</code>标签将多个<code>&lt;RadioButton&gt;</code>聚集为一组，确保一次只选择一个单选按钮。</p><p><strong>要为每个RadioButton添加一个id，不然单选功能会生效！</strong></p><h3 id="基本属性-4"><a href="#基本属性-4" class="headerlink" title="基本属性"></a>基本属性</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>checked</td><td>默认是否勾选</td></tr><tr><td>drawableXXX(Left, Right)</td><td>文字与选择框的相对位置。需要与button&#x3D;”@null”一起使用。</td></tr><tr><td>paddingXxx</td><td>文字与选择框的距离</td></tr><tr><td>button</td><td>设置为@null表示不使用默认的选择框</td></tr></tbody></table><h3 id="案例-1"><a href="#案例-1" class="headerlink" title="案例"></a>案例</h3><p>性别选择，通过提交按钮显示你选择的性别或者在改变时提示选择的性别。</p><p>xml配置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">       <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;请选择你的性别:&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;24dp&quot;</span>/&gt;</span><br><br>   <span class="hljs-tag">&lt;<span class="hljs-name">RadioGroup</span></span><br><span class="hljs-tag">       <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/radiogroup&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">       &gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">RadioButton</span></span><br><span class="hljs-tag">           <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/rbtnman&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;man&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;24dp&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">android:checked</span>=<span class="hljs-string">&quot;true&quot;</span>/&gt;</span><br>       <span class="hljs-tag">&lt;<span class="hljs-name">RadioButton</span></span><br><span class="hljs-tag">           <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/rbtnwoman&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;woman&quot;</span></span><br><span class="hljs-tag">           <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;24dp&quot;</span>/&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">RadioGroup</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">       <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/btnpost&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;50dp&quot;</span></span><br><span class="hljs-tag">       <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;提交&quot;</span></span><br><span class="hljs-tag">       /&gt;</span><br></code></pre></td></tr></table></figure><p>MainActivity如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span>&#123;<br>    <br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><br>        <span class="hljs-comment">//方法一：为RadioGroup设置一个事件监听器setOnCheckChangeListener</span><br>        <span class="hljs-comment">//改动的时候会弹出提示</span><br><span class="hljs-comment">//        RadioGroup rg = findViewById(R.id.radiogroup);</span><br><span class="hljs-comment">//        rg.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() &#123;</span><br><span class="hljs-comment">//            @Override</span><br><span class="hljs-comment">//            public void onCheckedChanged(RadioGroup radioGroup, int i) &#123;</span><br><span class="hljs-comment">//                RadioButton rbtn = findViewById(i);</span><br><span class="hljs-comment">//                Toast.makeText(MainActivity.this, &quot;你选者了&quot; + rbtn.getText().toString(), Toast.LENGTH_SHORT).show();</span><br><span class="hljs-comment">//            &#125;</span><br><span class="hljs-comment">//        &#125;);</span><br>        <span class="hljs-comment">//方法二：通过单击其他按钮获取选中单选按钮的值</span><br>        <span class="hljs-type">RadioGroup</span> <span class="hljs-variable">rg</span> <span class="hljs-operator">=</span> findViewById(R.id.radiogroup);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">btnpost</span> <span class="hljs-operator">=</span> findViewById(R.id.btnpost);<br>        btnpost.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i&lt;rg.getChildCount(); i++)&#123;<br>                    <span class="hljs-type">RadioButton</span> <span class="hljs-variable">childbtn</span> <span class="hljs-operator">=</span> (RadioButton) rg.getChildAt(i);<br>                    <span class="hljs-keyword">if</span> (childbtn.isChecked())&#123;<br>                        Toast.makeText(MainActivity.<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;你选者了&quot;</span> + childbtn.getText().toString(), Toast.LENGTH_SHORT).show();<br>                    &#125;<br><br>                &#125;<br>            &#125;<br>        &#125;);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>方法一是通过给RadioGroup设置CheckedChange监听，直接获取被选择的RadioButton的id，通过id找到该控件。</p><p>方法二是通过给按钮设置Click监听，遍历RadioGroup下的RadioButton，查看RadioButton是否被选择。</p><h2 id="2-6-CheckBox"><a href="#2-6-CheckBox" class="headerlink" title="2.6 CheckBox"></a>2.6 CheckBox</h2><p>复选框。对于每一个复选框，使用<code>&lt;CheckBox&gt;</code>单独创建即可。</p><h3 id="基本属性-5"><a href="#基本属性-5" class="headerlink" title="基本属性"></a>基本属性</h3><p>属性同RadioButton。</p><h3 id="案例-2"><a href="#案例-2" class="headerlink" title="案例"></a>案例</h3><p>同RadioButton。</p><p>一种方法是给所有CheckBox设置CheckedChanged监听，使用isChecked()方法判断是否被选中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCheckedChanged</span><span class="hljs-params">(CompoundButton compoundButton, <span class="hljs-type">boolean</span> b)</span> &#123;<br>    <span class="hljs-keyword">if</span>(compoundButton.isChecked()) <br>        Toast.makeText(<span class="hljs-built_in">this</span>,compoundButton.getText().toString(),Toast.LENGTH_SHORT).show();<br>&#125;<br></code></pre></td></tr></table></figure><p>另一种方法是给提交按钮设置click监听，然后遍历所有CheckBox，使用<code>isChecked()</code>方法判断是否被选中。由于CheckBox是独立存在的，并不像RadioButton一样有父标签RadioGroup，所以不能直接使用for循环判断。</p><h2 id="2-7-ProgressBar"><a href="#2-7-ProgressBar" class="headerlink" title="2.7 ProgressBar"></a>2.7 ProgressBar</h2><p>进度条。</p><h3 id="基本属性-6"><a href="#基本属性-6" class="headerlink" title="基本属性"></a>基本属性</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>max</td><td>进度条最大值</td></tr><tr><td>progress</td><td>进度条已经完成进度值</td></tr><tr><td>indeterminate</td><td>如果设置成true，则进度条不精确显示进度</td></tr><tr><td>progressDrawable</td><td>设置轨道对应的Drawable对象</td></tr><tr><td>secondaryProgress</td><td>二级进度条，类似于视频播放的一条是当前播放进度，一条是缓冲进度，前者通过progress属性进行设置</td></tr><tr><td>style</td><td>进度条样式</td></tr></tbody></table><h3 id="案例-3"><a href="#案例-3" class="headerlink" title="案例"></a>案例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--系统提供的圆形进度条--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ProgressBar</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br><span class="hljs-comment">&lt;!--系统提供的水平进度条--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ProgressBar</span></span><br><span class="hljs-tag">    <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;?android:attr/progressBarStyleHorizontal&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;300dp&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">/&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">ProgressBar</span></span><br><span class="hljs-tag">    <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;?android:attr/progressBarStyleHorizontal&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;300dp&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:indeterminate</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">    /&gt;</span><br></code></pre></td></tr></table></figure><p>其中条形进度条设置indeterminate为true后，和圆形进度条类似，在不断地流动。</p><p>由于系统提供的比较简陋，在开发中一般都用动画（Animation）来代替或者自定义进度条（继承ProgressBar或者view）。</p><h2 id="2-8-Notification"><a href="#2-8-Notification" class="headerlink" title="2.8 Notification"></a>2.8 Notification</h2><p>状态栏通知。</p><p>要想实现通知，需要获得两个对象：</p><ul><li><p>NotificationMannager</p><p>NotificationManager类是一个通知管理器类，这个对象是由系统维护的服务，是以单例模式的方式获得，所以一般并不直接实例化这个对象。在Activity中，可以使用<code>Activity.getSystemService(String)</code>方法获取NotificationManager对象，这里传递<code>Context.NOTIFICATION_SERVICE</code>即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">NotificationManager</span> <span class="hljs-variable">notification_manager</span> <span class="hljs-operator">=</span> (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);<br></code></pre></td></tr></table></figure></li><li><p>Notification</p><p>使用NotificationCompat类的Builder构造器来创建Notification对象，可以保证程序在所有的版本上都能正常工作。Android8.0新增了<strong>通知渠道</strong>这个概念，如果没有设置，则通知无法在Android8.0的机<br>器上显示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建builder对象</span><br>NotificationCompat.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotificationCompat</span>.Builder(<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;nid001&quot;</span>);<br><span class="hljs-comment">//builder的成员设置，如setContentTitle(&quot;xxx&quot;)等</span><br>......<br><span class="hljs-comment">//创建notification对象</span><br><span class="hljs-type">Notification</span> <span class="hljs-variable">notification</span> <span class="hljs-operator">=</span> builder.build();<br></code></pre></td></tr></table></figure><p>由于<strong>通知渠道</strong>的引进，我们要创建通知渠道并与通知管理服务绑定</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//Android 8.0引入了通知渠道，所以根据版本选择是否创建通知渠道</span><br><span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O)&#123;<br>    <span class="hljs-comment">/* @param id: 表示通知渠道id，即下方创建notification时的channelid，两者要一至</span><br><span class="hljs-comment">    *  @param name: 任意</span><br><span class="hljs-comment">    *  @param importance: 通知重要性</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-comment">//创建通知渠道对象</span><br>    <span class="hljs-type">NotificationChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotificationChannel</span>(<span class="hljs-string">&quot;nid001&quot;</span>,<span class="hljs-string">&quot;测试通知&quot;</span>, NotificationManager.IMPORTANCE_HIGH);<br>    <span class="hljs-comment">//通知渠道对象与通知管理服务对象绑定</span><br>    notification_manager.createNotificationChannel(channel);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>需要注意的是Builder创建时的参数id和Channel创建时的参数id要一致</strong>。</p><p>NotificationChannel的Importance参数如下：</p><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>IMPORTANCE_NONE</td><td>关闭通知</td></tr><tr><td>IMPORTANCE_MIN</td><td>开启通知，不会弹出，但没有提示音，状态栏中无显示</td></tr><tr><td>IMPGRTANCE_LOW</td><td>开启通知，不会弹出，不发出提示音，状态栏中显示</td></tr><tr><td>IMPORTANCE_DEFAULT</td><td>开启通知，不会弹出，发出提示音，状态栏中显示</td></tr><tr><td>IMPORTANCE_HIGH</td><td>开启通知，会弹出，发出提示音，状态栏中显示</td></tr></tbody></table></li></ul><h3 id="NotificationCompat-Builder的基本方法"><a href="#NotificationCompat-Builder的基本方法" class="headerlink" title="NotificationCompat.Builder的基本方法"></a>NotificationCompat.Builder的基本方法</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>setContentTitle(String string)</td><td>设置标题</td></tr><tr><td>setContentText(String string)</td><td>设置文本内容</td></tr><tr><td>setSmallIcon(int icon)</td><td>设置小图标，只是用alpha图层，即图标不能带颜色</td></tr><tr><td>setLargeIcon(int argb)</td><td>设置小图标颜色</td></tr><tr><td>setContentIntent(PendingIntent intent)</td><td>设置点击通知后的跳转意图</td></tr><tr><td>setAutoCancel(boolean bool)</td><td>设置点击通知后自动清除通知</td></tr><tr><td>setWhen(long when)</td><td>设置通知的创建事件</td></tr></tbody></table><p>其中前三个方法是必须的，否则程序无法正常工作。</p><h3 id="案例-4"><a href="#案例-4" class="headerlink" title="案例"></a>案例</h3><p>通过按钮创建和清楚通知，并且点击通知会跳转到另一个页面(activity)。</p><p>xml声明如下。通过onClick属性绑定点击事件处理方法。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;165dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:onClick</span>=<span class="hljs-string">&quot;sentNotification&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;发送通知&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;165dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:onClick</span>=<span class="hljs-string">&quot;cacelNotification&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;取消通知&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>MainActivity方法如下。获取通知管理服务(NotificationManager)，创建通信渠道(channel)并与通知管理服务绑定。创建PendingIntent设置跳转意图。创建Notification对象，最后实现点击事件处理方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> NotificationManager notification_manager;<br>    <span class="hljs-keyword">private</span> Notification notification;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        <span class="hljs-comment">//获取通知管理服务</span><br>        notification_manager = (NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);<br>        <span class="hljs-comment">//Android 8.0引入了通知渠道，所以根据版本选择是否创建通知渠道</span><br>        <span class="hljs-keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O)&#123;<br>            <span class="hljs-comment">/* @param id: 表示通知渠道id，即下方创建notification时的channelid，两者要一至</span><br><span class="hljs-comment">            *  @param name: 任意</span><br><span class="hljs-comment">            *  @param importance: 通知重要性</span><br><span class="hljs-comment">            */</span><br>            <span class="hljs-comment">//创建通知渠道对象</span><br>            <span class="hljs-type">NotificationChannel</span> <span class="hljs-variable">channel</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotificationChannel</span>(<span class="hljs-string">&quot;nid001&quot;</span>,<span class="hljs-string">&quot;测试通知&quot;</span>,<br>                    NotificationManager.IMPORTANCE_HIGH);<br>            <span class="hljs-comment">//通知渠道对象与通知管理服务对象绑定</span><br>            notification_manager.createNotificationChannel(channel);<br>        &#125;<br><br>        <span class="hljs-comment">//创建Intent</span><br>        <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(<span class="hljs-built_in">this</span>, NotificationActivity.class);<br><br>        <span class="hljs-comment">//创建PendingIntent</span><br>        <span class="hljs-type">PendingIntent</span> <span class="hljs-variable">pendingIntent</span> <span class="hljs-operator">=</span>  PendingIntent.getActivity(<span class="hljs-built_in">this</span>, <span class="hljs-number">0</span>, intent, PendingIntent.FLAG_IMMUTABLE);<br><br>        <span class="hljs-comment">//创建notification对象并设置基本属性</span><br>        notification = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotificationCompat</span>.Builder(<span class="hljs-built_in">this</span>,<span class="hljs-string">&quot;nid001&quot;</span>)<br>                .setContentTitle(<span class="hljs-string">&quot;叶华&quot;</span>)<br>                .setContentText(<span class="hljs-string">&quot;喂喂喂&quot;</span>)<br>                .setSmallIcon(R.drawable.baseline_account_box_24)<br>                .setLargeIcon(BitmapFactory.decodeResource(getResources(),R.drawable.wallhaven))<br>                .setColor(Color.parseColor(<span class="hljs-string">&quot;#FFFF0000&quot;</span>))<br>                .setContentIntent(pendingIntent)<br>                .setAutoCancel(<span class="hljs-literal">true</span>)<br>                .build();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sentNotification</span><span class="hljs-params">(View view)</span>&#123;<br>        <span class="hljs-comment">/* @param id: 任意</span><br><span class="hljs-comment">         *  @param notification: 创建好的通知</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-comment">//将创建好的通知发送出去</span><br>        notification_manager.notify(<span class="hljs-number">111</span>,notification);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cacelNotification</span><span class="hljs-params">(View view)</span>&#123;<br>        <span class="hljs-comment">//清除通知，id与notify方法的id一致</span><br>        notification_manager.cancel(<span class="hljs-number">111</span>);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>其中NotificationActivity方法如下。只是简单的在Logcat处输出信息：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//需要将该Acitivity注册到AndroidManifest.xml中，否则否则系统将不识别也不执行该Activity</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NotificationActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Activity</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        Log.d(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;点击消息进入到了NotificatoinActivity&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-9-Toolbar"><a href="#2-9-Toolbar" class="headerlink" title="2.9 Toolbar"></a>2.9 Toolbar</h2><p>工具栏。</p><h3 id="基本属性-7"><a href="#基本属性-7" class="headerlink" title="基本属性"></a>基本属性</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>layout_width、layout_height</td><td>宽高，layout_height一般设置为“?attr&#x2F;actionBarSize”</td></tr><tr><td>background</td><td>背景色或背景图</td></tr><tr><td>navigationIcon</td><td>导航图标，比如返回图标</td></tr><tr><td>title</td><td>标题</td></tr><tr><td>subtitle</td><td>子标题</td></tr><tr><td>logo</td><td>图标</td></tr></tbody></table><h3 id="案例-5"><a href="#案例-5" class="headerlink" title="案例"></a>案例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">androidx.appcompat.widget.Toolbar</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;?attr/actionBarSize&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#00FFFF&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:title</span>=<span class="hljs-string">&quot;大标题&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:subtitle</span>=<span class="hljs-string">&quot;小标题&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:titleMarginStart</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:navigationIcon</span>=<span class="hljs-string">&quot;@drawable/baseline_arrow_back_24&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:logo</span>=<span class="hljs-string">&quot;@mipmap/ic_launcher&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br></code></pre></td></tr></table></figure><p>一般标题都是居中显示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">androidx.appcompat.widget.Toolbar</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;?attr/actionBarSize&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#00FFFF&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:navigationIcon</span>=<span class="hljs-string">&quot;@drawable/baseline_arrow_back_24&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:logo</span>=<span class="hljs-string">&quot;@mipmap/ic_launcher&quot;</span></span><br><span class="hljs-tag">        &gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;标题&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">            /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">androidx.appcompat.widget.Toolbar</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在TextView中设置了标题就不要在<code>&lt;androidx.appcompat.widget.Toolbar&gt;</code>里面再设置标题了。由于是androidx里面的Toolbar，与android里面的Toolbar不同，需要注意在java代码中使用该对象时不要导错包（import androidx.appcompat.widget.Toolbar）。</p><h2 id="2-10-AlertDialog"><a href="#2-10-AlertDialog" class="headerlink" title="2.10 AlertDialog"></a>2.10 AlertDialog</h2><p>对话框。</p><h3 id="AlertDialog-Builder的基本方法"><a href="#AlertDialog-Builder的基本方法" class="headerlink" title="AlertDialog.Builder的基本方法"></a>AlertDialog.Builder的基本方法</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>setIcon(int iconId)</td><td>设置图标</td></tr><tr><td>setTitle(Charsequence title)</td><td>添加标题</td></tr><tr><td>setMessage(CharSequence message)</td><td>添加消息</td></tr><tr><td>setView(View view)</td><td>设置自定义布局</td></tr><tr><td>setPositiveButton</td><td>确定按钮</td></tr><tr><td>setNegativeButton</td><td>取消按钮</td></tr><tr><td>setNeutralButton</td><td>中间按钮</td></tr><tr><td>create()</td><td>创建对话框</td></tr><tr><td>show()</td><td>显示对话框</td></tr></tbody></table><h3 id="案例-6"><a href="#案例-6" class="headerlink" title="案例"></a>案例</h3><p>实现以上功能。</p><p>触发按钮的xml设置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;50dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/btn1&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;点击显示窗口&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:onClick</span>=<span class="hljs-string">&quot;ClickWindow&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br></code></pre></td></tr></table></figure><p>绑定了ClickWindow方法。</p><p>MainActivity方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> AlertDialog dialog;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><br><span class="hljs-comment">//        View dialogview = getLayoutInflater().inflate(R.layout.dialog_view, null);</span><br><br>        <span class="hljs-comment">//创建AlertDialog.Builder对象</span><br>        AlertDialog.<span class="hljs-type">Builder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AlertDialog</span>.Builder(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-comment">//设置基本属性</span><br>        dialog = builder.setIcon(R.drawable.baseline_account_box_24)<br>                .setTitle(<span class="hljs-string">&quot;我是对话框&quot;</span>)<br>                .setMessage(<span class="hljs-string">&quot;阿巴阿巴......&quot;</span>)<br>                .setPositiveButton(<span class="hljs-string">&quot;确认&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DialogInterface</span>.OnClickListener() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(DialogInterface dialogInterface, <span class="hljs-type">int</span> i)</span> &#123;<br>                        Log.d(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;点击确认&quot;</span>);<br>                    &#125;<br>                &#125;)<br>                .setNegativeButton(<span class="hljs-string">&quot;取消&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DialogInterface</span>.OnClickListener() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(DialogInterface dialogInterface, <span class="hljs-type">int</span> i)</span> &#123;<br>                        Log.d(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;点击取消&quot;</span>);<br>                    &#125;<br>                &#125;)<br>                .setNeutralButton(<span class="hljs-string">&quot;中立&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">DialogInterface</span>.OnClickListener() &#123;<br>                    <span class="hljs-meta">@Override</span><br>                    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(DialogInterface dialogInterface, <span class="hljs-type">int</span> i)</span> &#123;<br>                        Log.d(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;点击中立&quot;</span>);<br>                    &#125;<br>                &#125;)<br>                .setView(R.layout.dialog_view)<br>                .create();<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ClickWindow</span><span class="hljs-params">(View view)</span> &#123;<br>        dialog.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>显然，首先要创建的是AlertDialog.Builder对象，然后通过一系列方法设置属性。其中setView方法的参数是自己创建的一个布局的xml文件。最后实现ClickWindow方法来处理点击事件。</p><h2 id="2-11-PopupWindow"><a href="#2-11-PopupWindow" class="headerlink" title="2.11 PopupWindow"></a>2.11 PopupWindow</h2><p>悬浮框。</p><p>PopupWindow弹出后，所有的触屏和物理按键都由PopupWindows 处理。其他任何事件的响应都必须发生在PopupWindow消失之后，（home 等系统层面的事件除外）。 </p><h3 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>PopupWindow(View contentView, int width, int height, boolean focusable)</td><td>多个构造方法，这里拿一个来说明。参数contentView指PopupWindow的布局，参数width和height一般设置ViewGroup.LayoutParams.WRAP_CONTENT，参数focusable指是否显示焦点，即点击该布局之外的地方可以退出。</td></tr><tr><td>setContentView(View contentView)</td><td>设置PopupWindow显示的View</td></tr><tr><td>getContentView()</td><td>获得PopupWindow显示的View</td></tr><tr><td>showAsDropDown(View anchor)</td><td>相对某个控件的位置（正左下方），无偏移</td></tr><tr><td>showAsDropDown(View anchor, int xoff, int yoff)</td><td>相对某个控件的位置，有偏移</td></tr><tr><td>setFocusable(boolean focusable)</td><td>设置焦点</td></tr><tr><td>setBackgroundDrawable(Drawable background)</td><td>设置背景</td></tr><tr><td>setAnimationStyle(int animationStyle)</td><td>设置动画效果</td></tr><tr><td>dismiss()</td><td>关闭弹窗</td></tr></tbody></table><h3 id="案例-7"><a href="#案例-7" class="headerlink" title="案例"></a>案例</h3><p>xml配置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--主活动的layout的xml--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;50dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/btn1&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;点击显示PopupWindow&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:onClick</span>=<span class="hljs-string">&quot;ClickButton&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><span class="hljs-comment">&lt;!--popupwindow的layout的xml--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/haha&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;哈哈哈哈哈&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/xixi&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;嘻嘻嘻嘻&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>MainActivity如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">TAG</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> PopupWindow popupWindow;<br>    <span class="hljs-keyword">private</span> View popupwindow_view;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><br>        <span class="hljs-comment">//获取view资源的对象</span><br>        popupwindow_view = getLayoutInflater().inflate(R.layout.popupwindow_view, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//创建popupwindow对象</span><br>        popupWindow = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PopupWindow</span>(popupwindow_view,<br>                ViewGroup.LayoutParams.WRAP_CONTENT,<br>                ViewGroup.LayoutParams.WRAP_CONTENT,<br>                <span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//设置背景</span><br>        popupWindow.setBackgroundDrawable(getResources().getDrawable(R.drawable.wallhaven));<br><br>        <span class="hljs-comment">//设置popupwindow中按钮的点击事件处理方法</span><br>        <span class="hljs-type">Button</span> <span class="hljs-variable">haha</span> <span class="hljs-operator">=</span> popupwindow_view.findViewById(R.id.haha);<br>        <span class="hljs-type">Button</span> <span class="hljs-variable">xixi</span> <span class="hljs-operator">=</span> popupwindow_view.findViewById(R.id.xixi);<br>        haha.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>                Toast.makeText(MainActivity.<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;你点击了哈哈哈&quot;</span>, Toast.LENGTH_SHORT).show();<br>                popupWindow.dismiss();<br>            &#125;<br>        &#125;);<br>        xixi.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>                Toast.makeText(MainActivity.<span class="hljs-built_in">this</span>, <span class="hljs-string">&quot;你点击了嘻嘻嘻&quot;</span>, Toast.LENGTH_SHORT).show();<br>                popupWindow.dismiss();<br>            &#125;<br>        &#125;);<br><br>    &#125;<br>    <span class="hljs-comment">//显示popupwindow</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ClickButton</span><span class="hljs-params">(View view)</span> &#123;<br>        popupWindow.showAsDropDown(view);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-12-ListView"><a href="#2-12-ListView" class="headerlink" title="2.12 ListView"></a>2.12 ListView</h2><p>列表。列表中的每一项(item)都有自己的布局。item的布局单独创建一个layout的xml文件，并对该布局创建一个类，同时也要创建对应的Adapter类，用来给item填充数据等。</p><blockquote><p>什么是Adapter?</p><p>答：</p><p>Adapter（适配器）是一个用于将数据与视图进行绑定的桥梁。简单点说，就是将各种数据以合适的形式显示到view上，提供给用户看。（个人的理解是Adapter将数据从布局中分离开来）</p><p>常用的几个Adapter类</p><ul><li>BaseAdapter：是一个抽象类，提供了一个基本的Adapter实现，可以用于自定义Adapter的开发。</li><li>ArrayAdapter：是BaseAdapter的子类，用于将数组或List数据绑定到ListView中。</li><li>SimpleAdapter：是BaseAdapter的子类，用于将键值对数据绑定到ListView中的多个TextView组合的布局中。</li><li>CursorAdapter：是BaseAdapter的子类，用于将数据库Cursor中的数据绑定到ListView中。</li><li>RecyclerView.Adapter：用于RecyclerView组件的适配器，支持更强大的列表项定制和动画效果。</li></ul></blockquote><h3 id="基本属性-8"><a href="#基本属性-8" class="headerlink" title="基本属性"></a>基本属性</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>divider</td><td>设置表项之间的分隔条,可以用颜色分割,也可以用drawable资源分割</td></tr><tr><td>dividerHeight</td><td>设置表项之间分割线的高度</td></tr><tr><td>dividerPadding</td><td>设置表项之间分割线的左右内边距</td></tr><tr><td>listSelector</td><td>设置表项被选中时的背景样式</td></tr><tr><td>scrollbars</td><td>设置滚动条的显示方式，如”vertical”（垂直滚动条）、”horizontal”（水平滚动条）和”none”（不显示滚动条）</td></tr><tr><td>headerDividersEnabled, footerDividersEnabled</td><td>是否显示列表头部和尾部的分割线，默认为true</td></tr></tbody></table><h3 id="案例-8"><a href="#案例-8" class="headerlink" title="案例"></a>案例</h3><p>实现类似QQ的消息列表。（目的在于学会使用Adapte）</p><p>首先activity_main.xml中创建一个ListView就行了。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">ListView</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/lv&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">ListView</span>&gt;</span><br></code></pre></td></tr></table></figure><p>另外创建一个xml文件用于列表中item的布局。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:app</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:tools</span>=<span class="hljs-string">&quot;http://schemas.android.com/tools&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span>&gt;</span><br><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">ImageView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/imageView&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;135dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;128dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintBottom_toBottomOf</span>=<span class="hljs-string">&quot;@+id/textView3&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toStartOf</span>=<span class="hljs-string">&quot;@+id/textView3&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">tools:srcCompat</span>=<span class="hljs-string">&quot;@tools:sample/avatars&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/textView2&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;275dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;40dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;TextView&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span> /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/textView3&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;275dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;94dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;TextView&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintEnd_toEndOf</span>=<span class="hljs-string">&quot;parent&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">app:layout_constraintTop_toBottomOf</span>=<span class="hljs-string">&quot;@+id/textView2&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里使用ConstraintLayout布局很方便，只要拖拽组件，连线就可以制作好。</p><p>因为信息不存放在xml文件中，所以创建一个类来描述item。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//列表中item所需要展示的东西</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-comment">//网名</span><br>    <span class="hljs-keyword">private</span> String name;<br><span class="hljs-comment">//消息</span><br>    <span class="hljs-keyword">private</span> String text;<br>    <span class="hljs-comment">//头像</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> pIcon;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name, String text, <span class="hljs-type">int</span> pIcon)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.text = text;<br>        <span class="hljs-built_in">this</span>.pIcon = pIcon;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getText</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> text;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setText</span><span class="hljs-params">(String text)</span> &#123;<br>        <span class="hljs-built_in">this</span>.text = text;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getpIcon</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> pIcon;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setpIcon</span><span class="hljs-params">(<span class="hljs-type">int</span> pIcon)</span> &#123;<br>        <span class="hljs-built_in">this</span>.pIcon = pIcon;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>再写个类继承BaseAdapter用来将数据显示在页面中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseAdapter</span> &#123;<br><br>    <span class="hljs-keyword">private</span> ArrayList&lt;Person&gt; data;<br>    <span class="hljs-keyword">private</span> Context context;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PersonAdapter</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PersonAdapter</span><span class="hljs-params">(ArrayList&lt;Person&gt; data, Context context)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>        <span class="hljs-built_in">this</span>.context = context;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data.size();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">getItem</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">return</span> data.get(i);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">getItemId</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-comment">//getView给列表中的每一项进行设置并返回到页面上</span><br>    <span class="hljs-keyword">public</span> View <span class="hljs-title function_">getView</span><span class="hljs-params">(<span class="hljs-type">int</span> i, View view, ViewGroup viewGroup)</span> &#123;<br>        ViewHolder viewHolder;<br>        <br>        <span class="hljs-keyword">if</span> (view == <span class="hljs-literal">null</span>)&#123;<br>            view = LayoutInflater.from(context).inflate(R.layout.item_view, viewGroup, <span class="hljs-literal">false</span>);<br><br>            viewHolder = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ViewHolder</span>();<br>            viewHolder.Icon = view.findViewById(R.id.imageView);<br>            viewHolder.Name = view.findViewById(R.id.textView2);<br>            viewHolder.Message = view.findViewById(R.id.textView3);<br><br>            view.setTag(viewHolder);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            viewHolder = (ViewHolder) view.getTag();<br>        &#125;<br><br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> data.get(i);<br><br>        viewHolder.Icon.setBackgroundResource(person.getpIcon());<br>        viewHolder.Name.setText(person.getName());<br>        viewHolder.Message.setText(person.getText());<br><br>        <span class="hljs-keyword">return</span> view;<br>    &#125;<br><br>    <span class="hljs-comment">//优化</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewHolder</span>&#123;<br>        ImageView Icon;<br>        TextView Name;<br>        TextView Message;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>对于getView方法，有多少个item就会调用多少次getView方法，里面的inflate方法和findViewById方法会被调用多次，这是非常耗时的。</p><p>但是getView方法中的参数view是系统提供的视图<strong>缓存</strong>对象。所以通过if语句的判断view是否已经创建，就不会执行多次inflate方法。同时创建ViewHolder类存放item的组件，通过view.setTag(viewHolder)放入view中，相当于也缓存item中的控件引用，以便后续复用（比如屏幕上下滑动，同一个item多次出现、隐藏的情况）。</p><p>最后MainActivity.java如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span>&#123;<br><br>    <span class="hljs-keyword">private</span> ArrayList&lt;Person&gt; PersonArrayList;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><br>        <span class="hljs-comment">//随便造点数据</span><br>        PersonArrayList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Person&gt;();<br>        PersonArrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;送之&quot;</span>, <span class="hljs-string">&quot;在吗？&quot;</span>, R.drawable.wallhaven));<br>        PersonArrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;无阿&quot;</span>, <span class="hljs-string">&quot;Vivo50&quot;</span>, R.drawable.wallhaven));<br>        PersonArrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;吉拉&quot;</span>, <span class="hljs-string">&quot;6&quot;</span>, R.drawable.wallhaven));<br>        PersonArrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;阿三&quot;</span>, <span class="hljs-string">&quot;?&quot;</span>, R.drawable.wallhaven));<br>        PersonArrayList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;骗子&quot;</span>, <span class="hljs-string">&quot;我是秦始皇&quot;</span>, R.drawable.baseline_account_box_24));<br><br>        <span class="hljs-comment">//找到ListView</span><br>        <span class="hljs-type">ListView</span> <span class="hljs-variable">listviewByid</span> <span class="hljs-operator">=</span> findViewById(R.id.lv);<br>        <span class="hljs-comment">//需要配合Adapter才能将数据放入</span><br>        listviewByid.setAdapter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonAdapter</span>(PersonArrayList, <span class="hljs-built_in">this</span>));<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-13-RecyclerView"><a href="#2-13-RecyclerView" class="headerlink" title="2.13 RecyclerView"></a>2.13 RecyclerView</h2><p>RecyclerView比ListView更加灵活，RecyclerView在继承RecyclerView.Adapter时会强制让我们实现ViewHolder，同时也提供了多个布局可供选择。</p><p>直接上案例。</p><h3 id="案例-9"><a href="#案例-9" class="headerlink" title="案例"></a>案例</h3><p>同ListView的案例。主要是继承RecyclerView.Adapter处有区别。</p><p>PersonAdapter.java如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//RecyclerView.Adapter&lt;VH&gt;,在继承RecyclerView.Adapter的时候就让我们强制性创建ViewHolder来优化</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PersonAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RecyclerView</span>.Adapter&lt;PersonAdapter.ViewHolder&gt; &#123;<br><br>    <span class="hljs-keyword">private</span> ArrayList&lt;Person&gt; data;<br>    <span class="hljs-keyword">private</span> Context context;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">PersonAdapter</span><span class="hljs-params">(ArrayList&lt;Person&gt; data, Context context)</span> &#123;<br>        <span class="hljs-built_in">this</span>.data = data;<br>        <span class="hljs-built_in">this</span>.context = context;<br>    &#125;<br><br>    <span class="hljs-comment">//用于创建ViewHolder对象</span><br>    <span class="hljs-keyword">public</span> ViewHolder <span class="hljs-title function_">onCreateViewHolder</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> ViewGroup parent, <span class="hljs-type">int</span> viewType)</span> &#123;<br>        <span class="hljs-comment">//就是BaseAdapter类中getView()方法的第二个参数--缓冲对象view</span><br>        <span class="hljs-type">View</span> <span class="hljs-variable">view</span> <span class="hljs-operator">=</span> View.inflate(context, R.layout.item_view, <span class="hljs-literal">null</span>);<br>        <span class="hljs-comment">//创建viewholder并返回</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ViewHolder</span>(view);<br>    &#125;<br><br>    <span class="hljs-comment">//用于给item的控件设置数据</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onBindViewHolder</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> ViewHolder holder, <span class="hljs-type">int</span> position)</span> &#123;<br>        <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> data.get(position);<br><br>        holder.Icon.setBackgroundResource(person.getpIcon());<br>        holder.Name.setText(person.getName());<br>        holder.Message.setText(person.getText());<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getItemCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> data == <span class="hljs-literal">null</span> ? <span class="hljs-number">0</span>:data.size();<br>    &#125;<br><br>    <span class="hljs-comment">//ViewHolder需要继承RecyclerView.ViewHolder类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewHolder</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">RecyclerView</span>.ViewHolder &#123;<br>        <span class="hljs-comment">//item的控件</span><br>        <span class="hljs-keyword">private</span> ImageView Icon;<br>        <span class="hljs-keyword">private</span> TextView Name;<br>        <span class="hljs-keyword">private</span> TextView Message;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-title function_">ViewHolder</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> View itemView)</span> &#123;<br>            <span class="hljs-built_in">super</span>(itemView);<br>            <span class="hljs-comment">//获取控件,调用的时候通过ViewHolder.xxx</span><br>            Icon = itemView.findViewById(R.id.imageView);<br>            Name = itemView.findViewById(R.id.textView2);<br>            Message = itemView.findViewById(R.id.textView3);<br><br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>看似那么多方法，但做的事情并没有变：通过inflate方法获取view，创建ViewHolder对象，通过findViewById方法获取item中的组件，通过setxxx方法设置数据。只不过是将这些工作细化为多个方法了。</p><p>MainActivity.java如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span>&#123;<br><br>    <span class="hljs-keyword">private</span> ArrayList&lt;Person&gt; PersonArrayList;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><br>        <span class="hljs-comment">//随便造点数据</span><br>......<br><br>        <span class="hljs-comment">//找到ListView</span><br>        <span class="hljs-type">RecyclerView</span> <span class="hljs-variable">recyclerView</span> <span class="hljs-operator">=</span> findViewById(R.id.rv);<br>        <span class="hljs-comment">//创建Adapter</span><br>        <span class="hljs-type">PersonAdapter</span> <span class="hljs-variable">personAdapter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonAdapter</span>(PersonArrayList, <span class="hljs-built_in">this</span>);<br>        <span class="hljs-comment">//需要配合Adapter才能将数据放入</span><br>        recyclerView.setAdapter(personAdapter);<br>        <span class="hljs-comment">//除此之外，还需要给recyclerView布局。ListView默认垂直布局，而recyclerView将布局抽离出来，使得布局更加灵活</span><br>        recyclerView.setLayoutManager(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LinearLayoutManager</span>(<span class="hljs-built_in">this</span>));<span class="hljs-comment">//示例使用线性布局管理器</span><br>        <span class="hljs-comment">//recyclerView.setLayoutManager(new GridLayoutManager(this,3));//示例使用网格布局管理器</span><br>        <span class="hljs-comment">//recyclerView.setLayoutManager(new StaggeredGridLayoutManager(3,LinearLayout.HORIZONTAL));//示例使用网格布局管理器</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>以上基本就实现了RecyclerView。</p><p>然后再给item来个点击事件的监听和处理。</p><p>这部分主要在PersonAdapter.java中额外添加一下方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//外部设置的监听对象</span><br><span class="hljs-keyword">private</span> OnRecyclerItemOnClickListener monRecyclerItemOnClickListener;<br><br><span class="hljs-comment">//item的点击事件处理方法的接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OnRecyclerItemOnClickListener</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">onRecyclerItemClick</span><span class="hljs-params">(<span class="hljs-type">int</span> postion)</span>;<br>&#125;<br><br><span class="hljs-comment">//外部调用该方法来设置item监听</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRecyclerItemOnClickListener</span><span class="hljs-params">(OnRecyclerItemOnClickListener listener)</span>&#123;<br>    monRecyclerItemOnClickListener = listener;<br>&#125;<br></code></pre></td></tr></table></figure><p>同时还需要在继承了RecyclerView.ViewHolder类的ViewHolder类的ViewHolder方法中给item设置监听</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//设置监听</span><br>itemView.setOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>.OnClickListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View view)</span> &#123;<br>        <span class="hljs-keyword">if</span> (monRecyclerItemOnClickListener != <span class="hljs-literal">null</span>)&#123;<br>            monRecyclerItemOnClickListener.onRecyclerItemClick(getAdapterPosition());<br>        &#125;<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>最后在MainActivity.java中给Adapter创建监听并实现接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">personAdapter.setRecyclerItemOnClickListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PersonAdapter</span>.OnRecyclerItemOnClickListener() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onRecyclerItemClick</span><span class="hljs-params">(<span class="hljs-type">int</span> postion)</span> &#123;<br>        Log.d(<span class="hljs-string">&quot;leo&quot;</span>, <span class="hljs-string">&quot;点击了第&quot;</span>+postion+<span class="hljs-string">&quot;个item&quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>咋一看，怎么设置了两次监听？其实在MainActivity.java的调用的setRecyclerItemOnClickListener方法实际上是为了给外部提供一个接口，让外部有机会设置自己的监听器monRecyclerItemOnClickListener来处理item的点击事件。（并不是继承View.OnClickListener重写onClick方法）</p><p>而给item设置的监听，才会在我们点击页面中的列表项时触发。</p><p>（可以尝试理解为item在页面中有对应控件，是可以点击到的，而Adapter在页面中并不没有。当然这样理解并不是很正确）</p><p>（不妨可以直接将OnRecyclerItemOnClickListener接口写成方法试试，但一般不将处理函数写死）</p><h2 id="2-14-ViewPager"><a href="#2-14-ViewPager" class="headerlink" title="2.14 ViewPager"></a>2.14 ViewPager</h2><p>ViewPager是一个页面切换组件，常用于创建轮播图、图片浏览、导航页面等需要左右滑动切换内容的场景。使用<code>&lt;androidx.viewpager.widget.ViewPager&gt;</code>或者<code>&lt;androidx.viewpager2.widget.ViewPager2&gt;</code>标签。需要PagerAdapter创建Adapter对象与ViewPager对象绑定。</p><p>在开发中经常与Fragment搭配使用，官方给我们提供了两个专门用于Fragment的Adapter：<strong>FragmentPageAdapter</strong>和<strong>FragmentStatePagerAdapter</strong>：</p><ul><li><strong>FragmentPageAdapter</strong>：和PagerAdapter一样，只会缓存当前的Fragment以及左边一个，右边 一个，即总共会缓存3个Fragment。</li><li><strong>FragmentStatePagerAdapter</strong>：当Fragment对用户不可见时，整个Fragment会被销毁， 只会保存Fragment的状态。而在页面需要重新显示的时候，会生成新的页面。</li></ul><p>（与viewpager2搭配使用！）</p><h3 id="基本方法-1"><a href="#基本方法-1" class="headerlink" title="基本方法"></a>基本方法</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>instantiateItem()</td><td>①将给定位置的view添加到ViewGroup(容器)中,创建并显示出来 <br/>②返回一个代表新增页面的Object(key),通常都是直接返回view本身就可以了,当然你也可以自定义自己的key,但是key和每个view要一一对应的关系</td></tr><tr><td>isViewFromObject()</td><td>判断instantiateItem函数所返回来的Key与一个页面视图是否是代表的同一个视图(即它俩是否是对应的，对应的表示同一个View),通常我们直接写 return view &#x3D;&#x3D; object</td></tr><tr><td>destroyItem()</td><td>从ViewGroup容器中移除对应位置的视图对象，即摧毁对应页面视图</td></tr><tr><td>getPageTitle()</td><td>获取指定位置页面的标题</td></tr></tbody></table><h3 id="案例-10"><a href="#案例-10" class="headerlink" title="案例"></a>案例</h3><p>页面切换。</p><p>先随便在layout文件夹下创建三个布局。</p><p>然后创建一个继承PagerAdapter的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ViewAdapter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PagerAdapter</span> &#123;<br><br>    <span class="hljs-comment">//存放要展示的viewpage</span><br>    <span class="hljs-keyword">private</span> List&lt;View&gt; viewList;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ViewAdapter</span><span class="hljs-params">(List&lt;View&gt; viewList)</span> &#123;<br>        <span class="hljs-built_in">this</span>.viewList = viewList;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> viewList == <span class="hljs-literal">null</span>? <span class="hljs-number">0</span> : viewList.size();<br>    &#125;<br><br>    <span class="hljs-comment">//判断是否是当前页面视图</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isViewFromObject</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> View view, <span class="hljs-meta">@NonNull</span> Object object)</span> &#123;<br>        <span class="hljs-keyword">return</span> view == object;<br>    &#125;<br><br>    <span class="hljs-comment">//创建页面视图</span><br>    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">instantiateItem</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> ViewGroup container, <span class="hljs-type">int</span> position)</span> &#123;<br>        container.addView(viewList.get(position), <span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">return</span> viewList.get(position);<br>    &#125;<br><span class="hljs-comment">//摧毁页面视图</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroyItem</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> ViewGroup container, <span class="hljs-type">int</span> position, <span class="hljs-meta">@NonNull</span> Object object)</span> &#123;<br>        container.removeView(viewList.get(position));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>MainActivity.java如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span>&#123;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><br>        <span class="hljs-comment">//创建解析器</span><br>        <span class="hljs-type">LayoutInflater</span> <span class="hljs-variable">inflater</span> <span class="hljs-operator">=</span> getLayoutInflater().from(<span class="hljs-built_in">this</span>);<br>        <span class="hljs-comment">//解析viewpage页面</span><br>        <span class="hljs-type">View</span> <span class="hljs-variable">vp1</span> <span class="hljs-operator">=</span> inflater.inflate(R.layout.viewpage1,<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">View</span> <span class="hljs-variable">vp2</span> <span class="hljs-operator">=</span> inflater.inflate(R.layout.viewpage2,<span class="hljs-literal">null</span>);<br>        <span class="hljs-type">View</span> <span class="hljs-variable">vp3</span> <span class="hljs-operator">=</span> inflater.inflate(R.layout.viewpage3,<span class="hljs-literal">null</span>);<br><br>        List&lt;View&gt; viewList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>        viewList.add(vp1);<br>        viewList.add(vp2);<br>        viewList.add(vp3);<br>        <span class="hljs-comment">//通过id找ViewPager</span><br>        <span class="hljs-type">ViewPager</span> <span class="hljs-variable">viewPager</span> <span class="hljs-operator">=</span> findViewById(R.id.vp);<br>        <span class="hljs-comment">//创建ViewAdapter</span><br>        <span class="hljs-type">ViewAdapter</span> <span class="hljs-variable">viewAdapter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ViewAdapter</span>(viewList);<br>        <span class="hljs-comment">//绑定ViewAdapter</span><br>        viewPager.setAdapter(viewAdapter);<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="三、布局"><a href="#三、布局" class="headerlink" title="三、布局"></a>三、布局</h1><p>也就是放置控件、布局的容器，可以多层嵌套。</p><p>布局中的所有元素均使用 <code>View</code> 和 <code>ViewGroup</code> 对象的层次结构进行构建。<code>View</code> 通常用于绘制用户<strong>可看到并与之交互</strong>的内容。<code>ViewGroup</code> 则是<strong>不可见</strong>的容器。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308131930446.jpg"></p><p><code>View</code> 对象通常称为“微件”，可以是多个子类之一，例如 <code>Button</code> 或 <code>TextView</code>。<code>ViewGroup</code> 对象通常称为“布局”，可以是提供不同布局结构的众多类型之一，例如 <code>LinearLayout</code> 或 <code>ConstraintLayout</code>。</p><h2 id="3-1-LinearLayout"><a href="#3-1-LinearLayout" class="headerlink" title="3.1 LinearLayout"></a>3.1 LinearLayout</h2><p>线性布局</p><h3 id="基本属性-9"><a href="#基本属性-9" class="headerlink" title="基本属性"></a>基本属性</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>orientation</td><td>布局中组件的排列方式，如horizontal(水平摆放)、vertical(垂直拜访，即一个控件占一整行)</td></tr><tr><td>gravity</td><td>控制组件或布局所包含的子元素的对齐方式，可以多个组合，以 | 分隔，如 bottom|left表示位置在左下方</td></tr><tr><td>layout_gravity</td><td>控制当前组件在父容器的对齐方式</td></tr><tr><td>background</td><td>为当前组件设置背景（图片、颜色）</td></tr><tr><td>divider</td><td>分割线。与showDividers搭配使用</td></tr><tr><td>showDividers</td><td>设置分割线所在的位置，如none(无)、beginning(开始)、end(结束)、middle(每两个组件间)</td></tr><tr><td>dividerPadding</td><td>设置分隔线与左右两边的间距</td></tr><tr><td>layout_weight</td><td>等比例划分剩余区域</td></tr></tbody></table><h3 id="案例-11"><a href="#案例-11" class="headerlink" title="案例"></a>案例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;vertical&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;@drawable/wallhaven&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:divider</span>=<span class="hljs-string">&quot;@drawable/baseline_password_24&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:showDividers</span>=<span class="hljs-string">&quot;middle&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:dividerPadding</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">    &gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">LinearLayout</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;300dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:gravity</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">            <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;LinearLayout嵌套LinearLayout&quot;</span></span><br><span class="hljs-tag">            /&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;请选择你喜欢吃的水果:&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;left&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;24dp&quot;</span>/&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">RadioButton</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/apple&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;苹果&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;24dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;right&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">RadioButton</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/banana&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;香蕉&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;24dp&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">RadioButton</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/pear&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;梨&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;24dp&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">RadioButton</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/Cantaloupe&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;哈密瓜&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;24dp&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/btnpost&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;50dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;提交&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:onClick</span>=<span class="hljs-string">&quot;postByclick&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">LinearLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-2-RelativeLayout"><a href="#3-2-RelativeLayout" class="headerlink" title="3.2 RelativeLayout"></a>3.2 RelativeLayout</h2><p>相对布局。</p><h3 id="基本属性-10"><a href="#基本属性-10" class="headerlink" title="基本属性"></a>基本属性</h3><table><thead><tr><th align="left">属性</th><th>说明</th></tr></thead><tbody><tr><td align="left">gravity</td><td>控制组件或布局所包含的子元素的对齐方式</td></tr><tr><td align="left">ignoreGravity</td><td>设置为true将不受gravity属性的影响</td></tr><tr><td align="left">layout_alignParentXXXX(Left, Right等)</td><td>根据父容器定位。左(右)对齐</td></tr><tr><td align="left">layout_centerXXXX(Horizontal, Vertical, InParent)</td><td>根据父容器定位。水平居中，垂直居中，中间位置</td></tr><tr><td align="left">layout_XXX(toLeftOf, toRightOf, above, below, alignTop, alignBottom, alignLeft, alignRight)</td><td>根据兄弟组件定位。根据id来设置。其中toLeftOf, toRightOf, above, below是参考组件的左、右、上、下边，而alignTop, alignBottom, alignLeft, alignRight则是<strong>对齐</strong>参考组件的上、下、左、右边界。</td></tr><tr><td align="left">layout_XXX(margin, marginLeft, marginRight, marginTop, marginBottom)</td><td>设置组件与父容器的边距（偏移）</td></tr><tr><td align="left">padding, paddingXXX(Left, Right, Top, Bottom)</td><td>设置组件内部元素间的边距</td></tr></tbody></table><h3 id="案例-12"><a href="#案例-12" class="headerlink" title="案例"></a>案例</h3><p>实现梅花布局。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">RelativeLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    &gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/btn_center&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_centerInParent</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/btn_left&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_centerVertical</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_toLeftOf</span>=<span class="hljs-string">&quot;@id/btn_center&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/btn_right&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_centerVertical</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_toRightOf</span>=<span class="hljs-string">&quot;@id/btn_center&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/btn_top&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_centerHorizontal</span>=<span class="hljs-string">&quot;true&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_above</span>=<span class="hljs-string">&quot;@id/btn_center&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:id</span>=<span class="hljs-string">&quot;@+id/btn_bottom&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_below</span>=<span class="hljs-string">&quot;@id/btn_center&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_centerInParent</span>=<span class="hljs-string">&quot;true&quot;</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">RelativeLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-3-FrameLayout"><a href="#3-3-FrameLayout" class="headerlink" title="3.3 FrameLayout"></a>3.3 FrameLayout</h2><p>帧布局。从父容器左上角开始绘制，按组件或布局的定义顺序依次绘制，造成覆盖效果。</p><h3 id="基本属性-11"><a href="#基本属性-11" class="headerlink" title="基本属性"></a>基本属性</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>foreground</td><td>设置前景图像</td></tr><tr><td>foregroundGravity</td><td>设置前景图像显示的位置</td></tr></tbody></table><h3 id="案例-13"><a href="#案例-13" class="headerlink" title="案例"></a>案例</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">FrameLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;match_parent&quot;</span></span><br><span class="hljs-tag">    &gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;400dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;400dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#FFFF0000&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;300dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;300dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#FF00FF00&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;200dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;200dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#FF0000FF&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;100dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#FFFFFF00&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:foreground</span>=<span class="hljs-string">&quot;@drawable/baseline_airplanemode_active_24&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:foregroundGravity</span>=<span class="hljs-string">&quot;center&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">FrameLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-4-TableLayout"><a href="#3-4-TableLayout" class="headerlink" title="3.4 TableLayout"></a>3.4 TableLayout</h2><p>表格布局。</p><p>&lt;<code>TableLayout&gt;</code>表格标签，内嵌<code>&lt;TableRow&gt;</code>表行标签</p><h3 id="基本属性-12"><a href="#基本属性-12" class="headerlink" title="基本属性"></a>基本属性</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>collapseColumns</td><td>设置需要被隐藏的列的序号，序号从0开始。可以设置多个,用逗号隔开，比如”0,2”，如果是所有列都生效，则用”*“号即可</td></tr><tr><td>stretchColumns</td><td>设置允许被拉伸的列的列序号，序号从0开始。设置同上。只要存在一行是满的，设置就对所有行无效。<strong>无法控制被拉伸的控件的长度</strong></td></tr><tr><td>shrinkColumns</td><td>设置允许被收缩的列的列序号，序号从0开始。设置同上。只要存在一行有空隙，设置就对所有行无效。<strong>无法控制被收缩的控件的长度</strong></td></tr><tr><td>layout_column</td><td>设置<strong>子控件</strong>显示在第几列</td></tr><tr><td>layout_span</td><td>设置<strong>子控件</strong>横向跨几列</td></tr></tbody></table><h2 id="3-5-GridLayout"><a href="#3-5-GridLayout" class="headerlink" title="3.5 GridLayout"></a>3.5 GridLayout</h2><p>网格布局。</p><p>与TableLayout有点类似，但比它更好用，功能（属性）更多。</p><h3 id="基本属性-13"><a href="#基本属性-13" class="headerlink" title="基本属性"></a>基本属性</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>orientation</td><td>设置水平显示还是垂直显示</td></tr><tr><td>columnCount</td><td>设置行的显示个数。</td></tr><tr><td>rowCount</td><td>设置列的显示个数。</td></tr><tr><td>layout_row, layout_column</td><td>设置<strong>子控件</strong>显示在第几行第几列。从0开始，可以覆盖。<u>后面没有定义行列的控件会跟随当前控件移动</u>。</td></tr><tr><td>layout_rowSpan, layout_columnSpan</td><td>设置<strong>子控件</strong>横跨几行几列。<strong>需要设置android:layout_gravity &#x3D; “fill”才能生效</strong></td></tr><tr><td>layout_gravity</td><td>设置<strong>子控件</strong>在网格中的显示位置，如left, right等</td></tr><tr><td>layout_columnWeight, layout_rowWeight</td><td>设置<strong>子控件</strong>的横向（或纵向）剩余空间的分配权重。与LinearLayout布局的属性layout_weight相同</td></tr></tbody></table><h3 id="案例-14"><a href="#案例-14" class="headerlink" title="案例"></a>案例</h3><p>实现计算器布局。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">GridLayout</span></span><br><span class="hljs-tag">    <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_width</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:layout_height</span>=<span class="hljs-string">&quot;wrap_content&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:orientation</span>=<span class="hljs-string">&quot;horizontal&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:columnCount</span>=<span class="hljs-string">&quot;4&quot;</span></span><br><span class="hljs-tag">    <span class="hljs-attr">android:rowCount</span>=<span class="hljs-string">&quot;7&quot;</span></span><br><span class="hljs-tag">    &gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">TextView</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;9+1&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:textSize</span>=<span class="hljs-string">&quot;24sp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:background</span>=<span class="hljs-string">&quot;#fecccb&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_margin</span>=<span class="hljs-string">&quot;5dp&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;fill&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_columnSpan</span>=<span class="hljs-string">&quot;4&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;回退&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_columnSpan</span>=<span class="hljs-string">&quot;2&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;fill&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;归零&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_columnSpan</span>=<span class="hljs-string">&quot;2&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:layout_gravity</span>=<span class="hljs-string">&quot;fill&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;7&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;8&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;9&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;+&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;4&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;5&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;6&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;-&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;1&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;2&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;3&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;*&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;0&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;.&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;=&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">android.widget.Button</span> <span class="hljs-attr">android:text</span>=<span class="hljs-string">&quot;/&quot;</span>/&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">GridLayout</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3-6-ConstraintLayout"><a href="#3-6-ConstraintLayout" class="headerlink" title="3.6 ConstraintLayout"></a>3.6 ConstraintLayout</h2><p>约束布局。</p><p><code>&lt;androidx.constraintlayout.widget.ConstraintLayout&gt;</code>标签。</p><p>可以在Design模式下，拖动控件进行布局，更加方便，<strong>进行可视化布局</strong>，Infer Constraints功能可以直接帮你设置好约束（比如距离控件或父容器的各种设置），当然也可以在Attributes处进行更详细的设置。</p><h1 id="四、动画"><a href="#四、动画" class="headerlink" title="四、动画"></a>四、动画</h1><h2 id="4-1-逐帧动画"><a href="#4-1-逐帧动画" class="headerlink" title="4.1 逐帧动画"></a>4.1 逐帧动画</h2><p>把多张图片快速播放形成的动画。</p><p>使用方法：</p><p><code>&lt;animation-list&gt;</code>作为大标签，内部设置多个<code>&lt;item&gt;</code>小标签（对应多张图片），<code>&lt;item&gt;</code>标签设置图片资源(drawable)和图片显示的时间(duration)。</p><h3 id="基本属性-14"><a href="#基本属性-14" class="headerlink" title="基本属性"></a>基本属性</h3><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>drawable</td><td>图片资源</td></tr><tr><td>duration</td><td>图片显示的时间，单位为ms。每张图片显示的时间可以单独设置</td></tr></tbody></table><h3 id="基本方法-2"><a href="#基本方法-2" class="headerlink" title="基本方法"></a>基本方法</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>start()</td><td>播放动画</td></tr><tr><td>stop()</td><td>停止动画</td></tr></tbody></table><h3 id="案例-15"><a href="#案例-15" class="headerlink" title="案例"></a>案例</h3><p>动画xml如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">animation-list</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@drawable/baseline_airplanemode_active_24&quot;</span> <span class="hljs-attr">android:duration</span>=<span class="hljs-string">&quot;120&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@drawable/baseline_airplanemode_inactive_24&quot;</span> <span class="hljs-attr">android:duration</span>=<span class="hljs-string">&quot;120&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">item</span> <span class="hljs-attr">android:drawable</span>=<span class="hljs-string">&quot;@drawable/wallhaven&quot;</span> <span class="hljs-attr">android:duration</span>=<span class="hljs-string">&quot;120&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">animation-list</span>&gt;</span><br></code></pre></td></tr></table></figure><p>然后在activity_main.xml中引用。</p><p>但是并不会播放，需要通过调用start()方法来播放动画。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br><br>        <span class="hljs-type">LinearLayout</span> <span class="hljs-variable">linearlayout</span> <span class="hljs-operator">=</span> findViewById(R.id.ll);<br>        <span class="hljs-type">AnimationDrawable</span> <span class="hljs-variable">animation</span> <span class="hljs-operator">=</span> (AnimationDrawable)linearlayout.getBackground();<br>        animation.start();<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-2-补间动画"><a href="#4-2-补间动画" class="headerlink" title="4.2 补间动画"></a>4.2 补间动画</h2><p>在指定的时间段内，通过不断地改变视图的属性值（如位置、尺寸、旋转角度、透明度等），来实现视图的平滑动画效果。</p><p>主要有以下几种类型的补间动画：</p><ol><li>位移动画（Translate Animation）：通过改变视图的位置实现移动效果。</li><li>缩放动画（Scale Animation）：通过改变视图的尺寸实现缩放效果。</li><li>旋转动画（Rotate Animation）：通过改变视图的旋转角度实现旋转效果。</li><li>透明度动画（Alpha Animation）：通过改变视图的透明度实现淡入淡出效果。</li></ol><h3 id="基本属性-15"><a href="#基本属性-15" class="headerlink" title="基本属性"></a>基本属性</h3><h4 id="位移动画"><a href="#位移动画" class="headerlink" title="位移动画"></a>位移动画</h4><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>fromXDelta, fromYDelta</td><td>起始X、Y轴位置的偏移量</td></tr><tr><td>toXDelta, toYDelta</td><td>结束X、Y轴位置的偏移量</td></tr><tr><td>duration</td><td>动画时长</td></tr></tbody></table><h4 id="缩放动画"><a href="#缩放动画" class="headerlink" title="缩放动画"></a>缩放动画</h4><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>fromXScale, fromYScale</td><td>起始X、Y轴上的缩放比例</td></tr><tr><td>toXScale, toYScale</td><td>结束X、Y轴上的缩放比例</td></tr><tr><td>pivotX, pivotY</td><td>缩放中心点的X、Y轴坐标（被缩放的控件的左上角为0%，中心为50%）</td></tr><tr><td>duration</td><td>动画时长</td></tr></tbody></table><h4 id="旋转动画"><a href="#旋转动画" class="headerlink" title="旋转动画"></a>旋转动画</h4><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>fromDegrees</td><td>起始角度（0~360）</td></tr><tr><td>toDegrees</td><td>结束角度</td></tr><tr><td>pivotX, pivotY</td><td>旋转中心点的X、Y轴坐标</td></tr><tr><td>duration</td><td>动画时长</td></tr></tbody></table><h4 id="透明度动画"><a href="#透明度动画" class="headerlink" title="透明度动画"></a>透明度动画</h4><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>fromAlpha</td><td>起始透明度（0.0表示完全透明，1.0表示完全不透明）</td></tr><tr><td>toAlpha</td><td>结束透明度</td></tr><tr><td>duration</td><td>动画时长</td></tr></tbody></table><h3 id="基本方法-3"><a href="#基本方法-3" class="headerlink" title="基本方法"></a>基本方法</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>start()</td><td>开始执行动画</td></tr><tr><td>setRepeatMode(int repeatMode)</td><td>设置动画的重复模式</td></tr><tr><td>setRepeatCount(int repeatCount)</td><td>设置动画的重复次数</td></tr><tr><td>setFillEnabled(boolean fillEnabled)</td><td>设置是否保持动画结束时的状态</td></tr><tr><td>setDuration(int duration)</td><td>设置动画的持续时间，单位为毫秒</td></tr><tr><td>setInterpolator(Interpolator interpolator)</td><td>设置动画的插值器</td></tr></tbody></table><h3 id="案例-16"><a href="#案例-16" class="headerlink" title="案例"></a>案例</h3><p>动画xml文件如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">set</span> <span class="hljs-attr">xmlns:android</span>=<span class="hljs-string">&quot;http://schemas.android.com/apk/res/android&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">alpha</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:fromAlpha</span>=<span class="hljs-string">&quot;0&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:toAlpha</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:duration</span>=<span class="hljs-string">&quot;2000&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">rotate</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:fromDegrees</span>=<span class="hljs-string">&quot;0&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:toDegrees</span>=<span class="hljs-string">&quot;360&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:pivotX</span>=<span class="hljs-string">&quot;50%&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:pivotY</span>=<span class="hljs-string">&quot;50%&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:duration</span>=<span class="hljs-string">&quot;2000&quot;</span>/&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scale</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:fromXScale</span>=<span class="hljs-string">&quot;0&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:fromYScale</span>=<span class="hljs-string">&quot;0&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:toXScale</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:toYScale</span>=<span class="hljs-string">&quot;1&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:pivotY</span>=<span class="hljs-string">&quot;50%&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:pivotX</span>=<span class="hljs-string">&quot;50%&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:duration</span>=<span class="hljs-string">&quot;2000&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">translate</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:fromXDelta</span>=<span class="hljs-string">&quot;0&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:fromYDelta</span>=<span class="hljs-string">&quot;0&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:toXDelta</span>=<span class="hljs-string">&quot;400&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:toYDelta</span>=<span class="hljs-string">&quot;400&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">android:duration</span>=<span class="hljs-string">&quot;2000&quot;</span></span><br><span class="hljs-tag">        /&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">set</span>&gt;</span><br></code></pre></td></tr></table></figure><p>加载并启动该动画</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过id找到使用动画的控件</span><br><span class="hljs-type">ImageView</span> <span class="hljs-variable">imageview</span> <span class="hljs-operator">=</span> findViewById(R.id.imageV);<br><span class="hljs-comment">//加载动画的xml文件</span><br><span class="hljs-type">Animation</span> <span class="hljs-variable">animation</span> <span class="hljs-operator">=</span> AnimationUtils.loadAnimation(<span class="hljs-built_in">this</span>, R.anim.bujian);<br><span class="hljs-comment">//通过使用该动画的控件来启动动画</span><br>imageview.startAnimation(animation);<br></code></pre></td></tr></table></figure><h2 id="4-3-属性动画"><a href="#4-3-属性动画" class="headerlink" title="4.3 属性动画"></a>4.3 属性动画</h2><p>属性动画（Property Animation）是一种可以改变<strong>任意对象</strong>的属性值，并实现平滑动画效果的机制。这个过程是通过插值器和估值器来计算中间属性值的。插值器控制动画的时间进度，估值器则根据时间进度计算出中间的属性值。</p><h3 id="基本方法-4"><a href="#基本方法-4" class="headerlink" title="基本方法"></a>基本方法</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>ObjectAnimator.ofXXX(target, propertyName, values, …)</td><td>创建一个针对指定目标对象、属性名和起始值&#x2F;结束值的属性动画</td></tr></tbody></table><p>其他方法同补间动画的方法一样。</p><h3 id="案例-17"><a href="#案例-17" class="headerlink" title="案例"></a>案例</h3><p>两种方法设置透明度</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>    <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>    setContentView(R.layout.activity_main);<br><br>    <span class="hljs-type">TextView</span> <span class="hljs-variable">textView</span> <span class="hljs-operator">=</span> findViewById(R.id.tv);<br><span class="hljs-comment">//方法一</span><br>    <span class="hljs-type">ValueAnimator</span> <span class="hljs-variable">valueAnimator</span> <span class="hljs-operator">=</span> ValueAnimator.ofFloat(<span class="hljs-number">0f</span>, <span class="hljs-number">1f</span>);<br>    valueAnimator.setDuration(<span class="hljs-number">4000</span>);<br>    <span class="hljs-comment">//添加动画数值更新监听器</span><br>    valueAnimator.addUpdateListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ValueAnimator</span>.AnimatorUpdateListener() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onAnimationUpdate</span><span class="hljs-params">(<span class="hljs-meta">@NonNull</span> ValueAnimator valueAnimator)</span> &#123;<br>            <span class="hljs-type">float</span> <span class="hljs-variable">animatedValue</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>) valueAnimator.getAnimatedValue();<br>            Log.d(<span class="hljs-string">&quot;leo&quot;</span>, <span class="hljs-string">&quot;onAnimationUpdate: &quot;</span> + animatedValue);<br>            <span class="hljs-comment">//根据动画数值修改控件的透明度</span><br>            textView.setAlpha(animatedValue);<br>        &#125;<br>    &#125;);<br>    valueAnimator.start();<br><span class="hljs-comment">//方法二</span><br>    <span class="hljs-comment">//        ObjectAnimator alpha = ObjectAnimator.ofFloat(textView, &quot;alpha&quot;, 0f, 1f);</span><br>    <span class="hljs-comment">//        alpha.setDuration(4000);</span><br>    <span class="hljs-comment">//        alpha.start();</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android开发学习笔记(一) —— 分析Android项目结构</title>
    <link href="/2023/08/12/Android%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)%20%E2%80%94%E2%80%94%20%E5%88%86%E6%9E%90Android%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/"/>
    <url>/2023/08/12/Android%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0(%E4%B8%80)%20%E2%80%94%E2%80%94%20%E5%88%86%E6%9E%90Android%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="一、项目结构"><a href="#一、项目结构" class="headerlink" title="一、项目结构"></a>一、项目结构</h1><p>我们创建的项目，它的项目结构是这样的：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308131906853.jpg"></p><p>任何一个新建的项目都会默认使用Android模式的项目结构，但这并不是项目真实的目录结构，而是被Android Studio转换过的。这种项目结构简洁明了，适合进行快速开发，但是对于新手来说可能并不易于理解。</p><p>点击上图中顶部的Android区域可以切换项目结构模式，我们将其切换成Project模式，这个就是项目的真实目录结构。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308131906007.jpg"></p><p>接下来，我们依次分析目录结构中的文件。</p><ol><li><p><code>.gradle</code> 和 <code>.idea</code><br>这两个目录下放置的都是Android Studio自动生成的一些文件，我们无须关心，也不要去手动编辑。</p></li><li><p><code>app</code><br>项目中的代码、资源等内容几乎都是放置在这个目录下的，我们后面的开发工作也基本都是在这个目录下进行的。这个目录在下文会单独展开进行讲解。</p></li><li><p><code>build</code><br>这个目录我们也不需要过多关心，它主要包含了一些在编译时自动生成的文件。</p></li><li><p><code>gradle</code><br>这个目录下包含了gradle wrapper的配置文件，使用gradle wrapper的方式不需要提前将gradle下载好，而是会自动根据本地的缓存情况决定是否需要联网下载gradle。Android Studio默认没有启用gradle wrapper的方式，如果需要打开，可以点击Android Studio导航栏→File→Settings-→Build,Execution,.Deployment→Gradle，进行配置更改。</p></li><li><p><code>.gitignore</code></p><p>这个文件是用来将指定的目录或文件排除在版本控制之外的</p></li><li><p><code>build.gradle</code><br>这是项目全局的gradle构建脚本，通常这个文件中的内容是不需要修改的。这个目录在下文会单独展开进行讲解。</p></li><li><p><code>gradle.properties</code><br>这个文件是全局的gradle配置文件，在这里配置的属性将会影响到项目中所有的gradle编译脚本。</p></li><li><p><code>gradlew</code>和<code>gradlew.bat</code><br>这两个文件是用来在命令行界面中执行gradle命令的，其中gradlew是在Linux或Mac系统中使用的，gradlew.bat是在Windows系统中使用的。</p></li><li><p><code>HelloWorld.iml</code><br>iml文件是所有IntelliJ IDEA项目都会自动生成的一个文件（Android Studio是基于IntelliJ IDEA开发的)，用于标识这是一个IntelliJ IDEA项目，我们不需要修改这个文件中的任何内容。</p></li><li><p><code>local.properties</code><br>  这个文件用于指定本机中的Android SDK路径，通常内容都是自动生成的，我们并不需要修改。除非你本机中的Android SDK位置发生了变化，那么就将这个文件中的路径改成新的位置即可。</p></li><li><p><code>settings.gradle</code></p></li></ol><p>   这个文件用于指定项目中所有引入的模块。由于HelloWorld项目中就只有一个app模块，因此该文件中也就只引入了app这一个模块。通常情况下模块的引人都是自动完成的，需要我们手动去修改这个文件的场景可能比较少。</p><p>初步分析整个项目的外层目录结构，我们会发现，除了app目录之外，大多数的文件和目录都是自动生成的，我们并不需要进行修改。</p><h1 id="二、app目录"><a href="#二、app目录" class="headerlink" title="二、app目录"></a>二、app目录</h1><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308131909224.jpg"></p><ol><li><code>build</code><br>  这个目录主要包含了一些在编译时自动生成的文件，不过它里面的内容会更多更杂，我们不需要过多关心。</li><li><code>libs</code><br>  如果你的项目中使用到了第三方jar包，就需要把这些jar包都放在libs目录下，放在这个目录下的jar包都会被自动添加到构建路径里去。</li><li><code>androidTest</code><br>  此处是用来编写Android Test测试用例的，可以对项目进行一些自动化测试。</li><li><code>java</code><br>  java目录是放置我们所有Java代码的地方。</li><li><code>res</code><br>  这个目录下的内容就有点多了。简单点说，就是你在项目中使用到的所有图片、布局、字符串等资源都要存放在这个目录下。当然这个目录下还有很多子目录，图片放在drawable目录下，布局放在layout目录下，字符串放在values目录下，所以我们不用担心会把整个res目录弄得乱糟糟的。</li><li><code>AndroidManifest.xml</code><br>  这是你整个Android项目的配置文件，你在程序中定义的所有四大组件都需要在这个文件里注册，另外还可以在这个文件中给应用程序添加权限声明。</li><li><code>test</code><br>  此处是用来编写UnitTest测试用例的，是对项目进行自动化测试的另一种方式。</li><li><code>.gitignore</code><br>  这个文件用于将app模块内的指定的目录或文件排除在版本控制之外，作用和外层的.gitignore文件类似。</li><li><code>build.gradle</code><br>  这是app模块的gradle构建脚本，这个文件中会指定很多项目构建相关的配置，我们稍后将会详细分析gradle构建脚本中的具体内容。</li><li><code>proguard-rules.pro</code><br>  这个文件用于指定项目代码的混淆规则，当代码开发完成后打成安装包文件，如果不希望代码被别人破解，通常会将代码进行混淆，从而让破解者难以阅读。</li></ol><h2 id="2-1-详解资源目录"><a href="#2-1-详解资源目录" class="headerlink" title="2.1 详解资源目录"></a>2.1 详解资源目录</h2><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202308131914566.jpg"></p><p>所有以drawable开头的文件夹都是用来放图片的，所有以mipmap开头的文件夹都是用来放应用图标的，所有以values开头的文件夹都是用来放字符串、样式、颜色等配置的，layout文件夹是用来放布局文件的。</p><p>除此之外，我们开可以创建color文件夹和anim文件夹，前者用于存放颜色选择器（控件不同状态时显示不同颜色），后者用于存放动画资源。</p><p>之所以有这么多mipmap开头的文件夹，其实主要是为了让程序能够更好地兼容各种设备（设备屏幕原因，因此分辨率不同）。drawable文件夹也是相同的道理，虽然Android Studio没有帮我们自动生成，但是我们应该自己创建drawable-hdpi、drawable-xhdpi、drawable–xxhdpi等文件夹。</p><h2 id="2-2-详解build-gradle文件"><a href="#2-2-详解build-gradle文件" class="headerlink" title="2.2 详解build.gradle文件"></a>2.2 详解build.gradle文件</h2><h3 id="2-2-1-最外层目录下的build-gradle文件"><a href="#2-2-1-最外层目录下的build-gradle文件" class="headerlink" title="2.2.1 最外层目录下的build.gradle文件"></a>2.2.1 最外层目录下的build.gradle文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">plugins &#123;<br>    id <span class="hljs-string">&#x27;com.android.application&#x27;</span> version <span class="hljs-string">&#x27;8.0.2&#x27;</span> apply <span class="hljs-literal">false</span><br>    id <span class="hljs-string">&#x27;com.android.library&#x27;</span> version <span class="hljs-string">&#x27;8.0.2&#x27;</span> apply <span class="hljs-literal">false</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在这个例子中，<code>plugins</code>声明了两个插件：<code>com.android.application</code>（用于构建 Android 应用程序模块）和<code>com.android.library</code>（用于构建 Android 库模块），它们的版本号都是<code>8.0.2</code>，并且<code>apply false</code>表示这些插件不会自动应用到项目中。</p><p>（应用程序模块和库模块的最大区别在于，前者是可以直接运行的，而后者只能作为代码库依附于别的应用程序模块来运行。）</p><p>如果需要使用这些插件，可以在项目的其他构建脚本中显式地应用它们。通常情况下我们并不需要修改这个文件的内容，除非我们想添加一些全局的项目构建配置。</p><h3 id="2-2-2-app目录下的build-gradle文件"><a href="#2-2-2-app目录下的build-gradle文件" class="headerlink" title="2.2.2 app目录下的build.gradle文件"></a>2.2.2 app目录下的build.gradle文件</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs awk">plugins &#123;<br><span class="hljs-regexp">//</span>意思同最外层的build.gradle一样<br>    id <span class="hljs-string">&#x27;com.android.application&#x27;</span><br>&#125;<br><br>android &#123;<br><span class="hljs-regexp">//</span>指定应用程序的命名空间，也就是应用程序的包名<br>    namespace <span class="hljs-string">&#x27;com.example.forcelogout&#x27;</span><br>    <span class="hljs-regexp">//</span>SDK编译版本为<span class="hljs-number">33</span>,根据这个可以查找Android系统版本<br>    compileSdk <span class="hljs-number">33</span><br><br>    defaultConfig &#123;<br>    <span class="hljs-regexp">//</span>指定项目的包名，在创建项目的时候其实已经指定过包名（当然也可以修改）<br>        applicationId <span class="hljs-string">&quot;com.example.forcelogout&quot;</span><br>        <span class="hljs-regexp">//</span>项目最低兼容的SDK版本（或最低兼容的Android系统版本）<br>        minSdk <span class="hljs-number">29</span><br>        <span class="hljs-regexp">//</span>表示在该目标版本上已经做过了充分的测试<br>        targetSdk <span class="hljs-number">33</span><br>        <span class="hljs-regexp">//</span>指定项目的版本号<br>        versionCode <span class="hljs-number">1</span><br>        <span class="hljs-regexp">//</span>指定项目的版本名<br>        versionName <span class="hljs-string">&quot;1.0&quot;</span><br><span class="hljs-regexp">//</span>指定Android单元测试运行器的属性，这里是基于JUnit的Android测试运行器<br>        testInstrumentationRunner <span class="hljs-string">&quot;androidx.test.runner.AndroidJUnitRunner&quot;</span><br>    &#125;<br><br>    buildTypes &#123;<br>        release &#123;<br>        <span class="hljs-regexp">//</span>指定是否对项目的代码进行混淆<br>            minifyEnabled false<br>            /*指定混淆时使用的规则文件<br>            *第一个proguard-android.txt是在Android SDK目录下的<br>            *里面是所有项目通用的混淆规则<br>            *第二个proguard-rules.pro是在当前项目的根目录下的<br>            *里面可以编写当前项目特有的混淆规则。<br>            */<br>            proguardFiles getDefaultProguardFile(<span class="hljs-string">&#x27;proguard-android-optimize.txt&#x27;</span>), <span class="hljs-string">&#x27;proguard-rules.pro&#x27;</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-regexp">//</span>用于指定编译选项<br>    compileOptions &#123;<br>    <span class="hljs-regexp">//</span>指定了源代码的兼容性要求，表示编译器将按照 Java <span class="hljs-number">1.8</span> 的规范来处理源代码文件<br>        sourceCompatibility JavaVersion.VERSION_1_8<br>        <span class="hljs-regexp">//</span>指定了生成的字节码的兼容性要求，表示编译器将生成与 Java <span class="hljs-number">1.8</span> 兼容的字节码文件<br>        targetCompatibility JavaVersion.VERSION_1_8<br>    &#125;<br>    buildFeatures &#123;<br>    <span class="hljs-regexp">//</span>true表示允许您以类型安全的方式访问布局文件中的视图<br>        viewBinding true<br>    &#125;<br>&#125;<br><span class="hljs-regexp">//</span>依赖配置，当缺少依赖的时候可以手动添加<br>dependencies &#123;<br>    implementation <span class="hljs-string">&#x27;androidx.appcompat:appcompat:1.4.1&#x27;</span><br>    implementation <span class="hljs-string">&#x27;com.google.android.material:material:1.5.0&#x27;</span><br>    implementation <span class="hljs-string">&#x27;androidx.constraintlayout:constraintlayout:2.1.3&#x27;</span><br>    implementation <span class="hljs-string">&#x27;androidx.annotation:annotation:1.3.0&#x27;</span><br>    implementation <span class="hljs-string">&#x27;androidx.lifecycle:lifecycle-livedata-ktx:2.4.1&#x27;</span><br>    implementation <span class="hljs-string">&#x27;androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1&#x27;</span><br>    testImplementation <span class="hljs-string">&#x27;junit:junit:4.13.2&#x27;</span><br>    androidTestImplementation <span class="hljs-string">&#x27;androidx.test.ext:junit:1.1.3&#x27;</span><br>    androidTestImplementation <span class="hljs-string">&#x27;androidx.test.espresso:espresso-core:3.4.0&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>android闭包用来配置项目构建的各种属性。</p><p>在android闭包中嵌套的defaultConfig闭包用来对项目的更多细节进行配置。</p><p>buildTypes闭包中用于指定生成安装文件的相关配置，通常只会有两个子闭包，一个是debug,一个是release。debug闭包用于指定生成测试版安装文件的配置，release闭包用于指定生成正式版安装文件的配置。另外，debug闭包是可以忽略不写的，因此我们看到上面的代码中就只有一个release闭包。</p><p>dependencies闭包。这个闭包的功能非常强大，它可以指定当前项目所有的依赖关系。通常Android Studio项目一共有3种依赖方式：<strong>本地依赖、库依赖和远程依赖</strong>。本地依赖可以对本地的 Jar 包或目录添加依赖关系，库依赖可以对项目中的库模块添加依赖关系，远程依赖则可以对 jcenter 库上的开源项目添加依赖关系。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>静态链接库和动态链接库</title>
    <link href="/2023/07/26/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/"/>
    <url>/2023/07/26/%E9%9D%99%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%E5%92%8C%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93/</url>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>在跟着滴水学习PE结构的时候，接触到了静态链接和动态链接的知识。但是那时并没有做笔记，有也只是杂乱的（是啊！为什么不写博客啊？？？）。如今学习Android逆向时，也需要了解这方面的知识，趁着这个机会写一篇文章记录一下。</p><hr><h2 id="1-1-编译过程"><a href="#1-1-编译过程" class="headerlink" title="1.1 编译过程"></a>1.1 编译过程</h2><p>先来了解一下程序的编译过程（借用菜鸟教程的图片）：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307261549265.png"></p><p>从我们编写好的源文件开始，先经过预编译、编译、汇编，得到了<code>.o</code>文件（或<code>.obj</code>文件），这类文件是二进制文件。之后在链接过程，会将我们源文件对应的<code>.obj</code>文件与源文件所需要的静态链接库（<code>.lib</code>、<code>.o</code>）或动态链接库（<code>.dll</code>、<code>.so</code>）合并，形成了我们常见的可执行文件（如<code>.exe</code>、<code>.elf</code>文件）。静态链接库和动态链接库的区别就在于链接过程中是如何合并的。</p><h1 id="二、静态链接库"><a href="#二、静态链接库" class="headerlink" title="二、静态链接库"></a>二、静态链接库</h1><h2 id="2-1-概念"><a href="#2-1-概念" class="headerlink" title="2.1 概念"></a>2.1 概念</h2><p>静态链接库在Windows平台下是<code>.lib</code>文件，在Linux平台下是<code>.a</code>文件。</p><p>静态链接库是一种资源的集合，包括函数、变量、类等，程序通过与其链接，调用库中的资源。在链接的时候，静态链接库会将自身完整复制到程序中，这样就使得程序可以独立运行，无需依赖外部库文件。但这样做也导致了一些问题，比如最终的可执行文件非常大、静态链接库更新则依赖于该库的所有程序都需要重新编译、多个程序使用同一个静态库会在内存中重复加载等。</p><h2 id="2-2-Windows平台下创建与使用静态链接库"><a href="#2-2-Windows平台下创建与使用静态链接库" class="headerlink" title="2.2 Windows平台下创建与使用静态链接库"></a>2.2 Windows平台下创建与使用静态链接库</h2><p><code>lib</code>项目的编写比较简单，参照<a href="https://learn.microsoft.com/zh-cn/cpp/build/walkthrough-creating-and-using-a-static-library-cpp?view=msvc-170">官方文档</a>来就是了。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307261549818.png"></p><p>然后是使用<code>lib</code>时的一些配置。这部分在<a href="https://learn.microsoft.com/zh-cn/cpp/build/walkthrough-creating-and-using-a-static-library-cpp?view=msvc-170#UseLibInApp">官方文档</a>的<strong>在应用中使用静态库的功能</strong>处。官方用的是比较简单的方法，一个添加引用，一个添加引用库的路径就可以了。</p><p>我这里改变了一下方法，并没有使用“添加引用”，这个想法是基于后面的使用动态库的配置，步骤如下：</p><ol><li><p>首先将 <code>lib</code> 的<code>.h</code>头文件的所在路径添加到使用该<code>lib</code>项目的属性页 -&gt; C&#x2F;C++ -&gt; 常规 -&gt; 附加包含目录。这一步是为了能够使用头文件（库函数）。</p></li><li><p>然后是将<code>lib</code>文件的文件名添加到使用该<code>lib</code>项目的属性页 -&gt; 链接器 -&gt; 输入 -&gt; 附加依赖项。</p><p>接下来需要在使用该<code>lib</code>项目的属性页 -&gt; 链接器 -&gt; 常规 -&gt; 附加库目录处，添加<code>lib</code>文件的所在路径。</p></li></ol><p>（因为是写完<code>dll</code>配置后尝试的，图片的话就参考后面的<strong>3.2 Windows平台下创建与使用动态链接库</strong>吧）</p><p>以上完成后，就可以成功的使用<code>lib</code>文件了。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307261549930.png"></p><h2 id="2-3-Linux平台下创建与使用静态链接库"><a href="#2-3-Linux平台下创建与使用静态链接库" class="headerlink" title="2.3 Linux平台下创建与使用静态链接库"></a>2.3 Linux平台下创建与使用静态链接库</h2><p>代码同上，编写好后执行指令生成<code>.o</code>文件。</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">g</span><span class="hljs-literal">++</span> <span class="hljs-literal">-</span><span class="hljs-comment">c StaticMath</span><span class="hljs-string">.</span><span class="hljs-comment">cpp(cpp文件名)</span><br></code></pre></td></tr></table></figure><p>注意带参数<code>-c</code>，否则直接编译为可执行文件。然后，通过<code>ar</code>工具将目标文件打包成<code>.a</code>静态库文件</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">ar -crv libstaticmath.a<span class="hljs-comment">(.a文件名任意)</span> StaticMath.o<span class="hljs-comment">(生成的.o文件名)</span><br></code></pre></td></tr></table></figure><p>这一步就会生成我们所需要的静态库。接下来是编写使用案例（代码同上），编写好了之后执行以下命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">g++ TestStaticLibrary.cpp -I .<span class="hljs-regexp">/StaticLibrary -L ./</span>StaticLibrary -lstaticmath -o TestStaticLibrary.out<br></code></pre></td></tr></table></figure><p>其中 <code>-I</code> 用于指定头文件搜索路径，<code>-L</code> 用于指定库文件搜索路径，<code>-l</code> 用于指定静态库或共享库文件（不需要<code>lib</code>前缀和<code>.a</code>后缀，编译器查找动态连接库时有隐含的命名规则，即在给出的名字前面加上lib，后面加上.a或.so来确定库的名称），<code>-o</code>用于指定生成的可执行文件的名称，默认情况下会生成一个名为 <code>a.out</code> 的可执行文件。</p><p>因为我在测试的时候，<code>TestStaticLibrary.cpp</code>和静态库项目并没有放在同一个目录下，如果不加<code>-I</code>参数，可能会报错</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata">TestStaticLibrary.cpp:1:10: fatal <span class="hljs-keyword">error</span>: StaticMath.<span class="hljs-keyword">h</span>: <span class="hljs-keyword">No</span> such <span class="hljs-keyword">file</span> or directory<br>    1 | #<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;StaticMath.h&quot;</span><br>      |          ^~~~~~~~~~~~~~<br>compilation terminated.<br></code></pre></td></tr></table></figure><p>最后执行生成的<code>.out</code>文件，结果如下</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307261550027.jpg"></p><h1 id="三、动态链接库"><a href="#三、动态链接库" class="headerlink" title="三、动态链接库"></a>三、动态链接库</h1><h2 id="3-1-概念"><a href="#3-1-概念" class="headerlink" title="3.1 概念"></a>3.1 概念</h2><p>动态链接库在Windows平台下是<code>.dll</code>文件，在Linux平台下是<code>.so</code>文件。</p><p>与静态链接库相同的是，动态链接库也是一种资源的集合，包括函数、变量和类等资源。</p><p>但是动态链接库在链接的时候，并不会把自身复制到可执行程序中，而是把对动态链接库的引用信息放在可执行文件中，以指示程序在运行时需要加载的动态链接库。在程序运行时，操作系统会根据这些引用信息来动态加载并链接动态链接库，使得程序可以调用其中的函数和使用其中的数据。</p><p>这样做的优点，比如动态链接库的代码在内存中是共享的，可以被多个程序同时使用。但也有缺点，如果缺少所需的<code>.dll</code>文件，则可执行文件无法运行。</p><h2 id="3-2-Windows平台下创建与使用动态链接库"><a href="#3-2-Windows平台下创建与使用动态链接库" class="headerlink" title="3.2 Windows平台下创建与使用动态链接库"></a>3.2 Windows平台下创建与使用动态链接库</h2><p><code>dll</code>项目编译后，会生成<code>.lib</code>、<code>.dll</code>文件。<code>.lib</code>文件是一个辅助文件，它包含了与动态链接库相关的一些信息，包括函数名、符号名以及函数在<code>dll</code>中的偏移等，主要作用是在编译期间提供引用信息，以便编译器能够正确地解析和链接动态链接库。</p><p>创建<code>dll</code>文件比较简单，但需要注意在函数名前面加上<code>extern &quot;C&quot; __declspec(dllimport)</code>。</p><ul><li><p><code>extern &quot;C&quot;</code>用于告诉编译器将代码按照 C 语言的规则进行链接。因为 C++ 在编译过程中会对函数名进行重载和名称修饰，导致函数名在编译后变成了不同的形式。而动态链接库对外暴露的函数名通常是使用 C 语言的命名规则，为了确保正确链接，需要使用<code>extern &quot;C&quot;</code>来告诉编译器使用 C 语言的链接规则。</p></li><li><p><code>__declspec(dllimport)</code>用于显式地指示编译器该函数是从<code>dll </code>文件中导入的。使用<code>__declspec(dllimport)</code>修饰的函数表示该函数在编译时是从外部的<code>dll </code>文件中引入的，而不是当前编译的源文件中定义的。这样，在链接阶段，编译器会根据该关键字生成正确的导入表，并在运行时动态加载对应的 DLL 文件。</p></li></ul><p>这一部分的编写跟着官方文档走就行了。</p><p>这里主要说一下使用<code>.dll</code>文件时所需要的设置。</p><ol><li><p>首先将 <code>dll</code> 的<code>.h</code>头文件的所在路径添加到使用该<code>dll</code>项目的属性页 -&gt; C&#x2F;C++ -&gt; 常规 -&gt; 附加包含目录，这一步的设置跟静态链接库一样。是为了能够使用头文件（库函数）。（这一步在<a href="https://learn.microsoft.com/zh-cn/cpp/build/walkthrough-creating-and-using-a-dynamic-link-library-cpp?view=msvc-170#to-add-the-dll-header-to-your-include-path">官方文档</a>的<strong>将 DLL 标头添加到包含路径</strong>处）</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307261550538.jpg"></p></li><li><p>然后是将<code>lib</code>文件的文件名（以项目名命名的，我还傻乎乎的填<code>.c</code>的文件名）添加到使用该<code>dll</code>项目的属性页 -&gt; 链接器 -&gt; 输入 -&gt; 附加依赖项，</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307261550945.jpg"></p><p>现在只是告诉链接器在编译时需要使用到这个<code>lib</code>文件，但是还没有告诉链接器去哪里找这个<code>lib</code>文件，所以接下来需要在使用该<code>dll</code>项目的属性页 -&gt; 链接器 -&gt; 常规 -&gt; 附加库目录处，添加<code>lib</code>文件的所在路径（奇怪，这个<code>lib</code>文件怎么在使用<code>dll</code>项目的路径下？？？）</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307261552596.jpg"></p><p>（以上在<a href="https://learn.microsoft.com/zh-cn/cpp/build/walkthrough-creating-and-using-a-dynamic-link-library-cpp?view=msvc-170#to-add-the-dll-import-library-to-your-project">官方文档</a>的<strong>将 DLL 导入库添加到项目中</strong>处）</p></li><li><p>最后是将<code>dll</code>文件复制到使用该<code>dll</code>的项目中，在该项目的属性页 -&gt; 生成事件 -&gt; 生成后事件 -&gt; 命令行中添加指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">xcopy /y /d dll所在路径 <span class="hljs-string">&quot;<span class="hljs-subst">$(OutDir)</span>&quot;</span><br></code></pre></td></tr></table></figure><p>（这一步在<a href="https://learn.microsoft.com/zh-cn/cpp/build/walkthrough-creating-and-using-a-dynamic-link-library-cpp?view=msvc-170#to-add-the-dll-import-library-to-your-project">官方文档</a>的<strong>在生成后事件中复制 DLL</strong>处）</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307261551736.jpg"></p></li></ol><p>以上完成后，就可以愉快地使用自己写的<code>dll</code>了。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307261551693.png"></p><h2 id="3-3-Linux平台下创建与使用动态链接库"><a href="#3-3-Linux平台下创建与使用动态链接库" class="headerlink" title="3.3 Linux平台下创建与使用动态链接库"></a>3.3 Linux平台下创建与使用动态链接库</h2><p>编写好<code>so</code>项目后，执行命令生成<code>.o</code>文件。</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck"><span class="hljs-comment">g</span><span class="hljs-literal">++</span> <span class="hljs-literal">-</span><span class="hljs-comment">fPIC</span> <span class="hljs-literal">-</span><span class="hljs-comment">c DynamicMath</span><span class="hljs-string">.</span><span class="hljs-comment">cpp(cpp文件名)</span><br></code></pre></td></tr></table></figure><p>其中<code>-fPIC</code>用于创建与地址无关的编译程序，是为了能够在多个应用程序间共享。</p><p>之后，执行命令生成动态库</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">g++ -shared -o libdynmath<span class="hljs-selector-class">.so</span>(.a文件名任意) DynamicMath<span class="hljs-selector-class">.o</span>(生成的.o文件名)<br></code></pre></td></tr></table></figure><p>其中<code>-shared</code>用于生成动态链接库。</p><p>编写使用案例，执行下列命令，引用动态库编译成可执行文件（跟静态库方式一样）。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">g++ TestDynamicLibrary.cpp -I .<span class="hljs-regexp">/DynamicLibrary -L ./</span>DynamicLibrary -ldynmath -o TestDynamicLibrary<br></code></pre></td></tr></table></figure><p>接下来需要将生成的<code>so</code>文件复制到<code>/usr/lib</code>目录下（在<code>root</code>模式下）。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo cp .<span class="hljs-regexp">/DynamicLibrary/</span>libdynmath.so <span class="hljs-regexp">/usr/</span>lib<br></code></pre></td></tr></table></figure><p>否者报错如下</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stata">./TestDynamicLibrary: <span class="hljs-keyword">error</span> <span class="hljs-keyword">while</span> loading shared libraries: libdynmath.<span class="hljs-keyword">so</span>: <br>cannotopen shared object <span class="hljs-keyword">file</span>: <span class="hljs-keyword">No</span> such <span class="hljs-keyword">file</span> or directory<br></code></pre></td></tr></table></figure><p>找不到<code>libdynmath.so</code>，那为什么会这样呢？</p><p>原因是在<code>Linux</code>系统下，程序通过以下方式定位<code>so</code>文件：</p><ol><li>默认搜索路径：系统会在一组默认的目录中搜索动态共享库，包括 <code>/lib</code>, <code>/usr/lib</code>, <code>/lib64</code>, <code>/usr/lib64</code> 等等。</li><li>环境变量<code>LD_LIBRARY_PATH</code>：程序可以通过设置环境变量 <code>LD_LIBRARY_PATH</code> 来指定额外的动态共享库搜索路径。系统会在该环境变量所指定的路径中搜索动态共享库。</li><li><code>rpath/rpath-link</code>：程序可以在编译时通过 <code>-Wl,-rpath</code> 或 <code>-Wl,-rpath-link</code> 选项指定运行时搜索动态共享库的路径。这些路径会被保存在可执行文件的 <code>ELF</code> 头部中，并在程序运行时生效。</li><li>缓存文件：<code>Linux</code>系统还维护了一个动态共享库的缓存文件，通常是 <code>/etc/ld.so.cache</code>。该文件记录了系统中可用的动态共享库的位置，加快了库的搜索速度。</li></ol><p>所以最简单的方式是将<code>so</code>文件复制 <code>/lib</code>, <code>/usr/lib</code>等目录下。最终执行效果如下</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307261551601.jpg"></p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>库是一种资源的集合，包括函数、变量、类等，程序可以通过与其链接来调用库中的资源。由于链接的方式的不同，可以分为静态链接库和动态链接库，静态链接库在编译阶段将自身复制到可执行文件中，这样一来可执行文件就可以独立运行；而动态链接库则是将引用信息复制到可执行文件中，可执行文件通过这些引用信息来动态加载动态链接库，这样一来可执行文件就不能独立运行。</p><hr><p>参考：</p><p><a href="https://learn.microsoft.com/zh-cn/cpp/build/walkthrough-creating-and-using-a-static-library-cpp?view=msvc-170">演练：创建并使用静态库 (C++) | Microsoft Learn</a></p><p><a href="https://learn.microsoft.com/zh-cn/cpp/build/walkthrough-creating-and-using-a-dynamic-link-library-cpp?view=msvc-170">演练：创建和使用自己的动态链接库 (C++) | Microsoft Learn</a></p><p><a href="https://blog.csdn.net/dive668/article/details/120372718">【Visual Studio】创建并使用静态库(.lib) 松库本库的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/dive668/article/details/120388534?ops_request_misc=&request_id=ce1e4f5606d441d3b092bc80b29b56ed&biz_id=&utm_medium=distribute.pc_search_result.none-task-blog-2~blog~koosearch~default-1-120388534-null-null.268%5Ev1%5Econtrol&utm_term=%E5%8A%A8%E6%80%81&spm=1018.2226.3001.4450">【Visual Studio】创建并使用动态链接库(C++)_松库本库的博客-CSDN博客</a></p><p><a href="https://www.runoob.com/w3cnote/cpp-static-library-and-dynamic-library.html">C++静态库与动态库 | 菜鸟教程 (runoob.com)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>静态库</tag>
      
      <tag>动态库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android应用程序启动流程(二)</title>
    <link href="/2023/07/24/Android%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B(%E4%BA%8C)/"/>
    <url>/2023/07/24/Android%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B(%E4%BA%8C)/</url>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>在<a href="https://gal2xy.github.io/2023/07/17/Android%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B(%E4%B8%80)">上一篇文章</a>中，我们分析了应用程序进程启动的流程。那么，在应用程序进程已启动的情况下，应用程序又是如何启动的呢？在这篇文章中，我们将从点击应用快捷图标开始，分析应用程序是如何启动的，即根<code>Activity</code>是如何启动的。</p><h1 id="二、根Activity启动流程"><a href="#二、根Activity启动流程" class="headerlink" title="二、根Activity启动流程"></a>二、根Activity启动流程</h1><h2 id="2-1-Launcher-请求-AMS-过程"><a href="#2-1-Launcher-请求-AMS-过程" class="headerlink" title="2.1 Launcher 请求 AMS 过程"></a>2.1 Launcher 请求 AMS 过程</h2><p>还记得<a href="https://gal2xy.github.io/2023/07/04/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/">Android系统启动流程</a>中，最后一个阶段是什么嘛？没错，是<code>Launcher</code>应用程序的启动，也就是手机的桌面。它是<code>Zygote</code>进程孵化的第一个<code>APP</code>。在启动过程中，它会请求<code>PackageManagerService</code>返回系统中已经安装的应用程序的信息，并将这些信息封装成一个快捷图标列表显示在系统屏幕上，用户可以通过点击图标来启动相应的应用程序。</p><p>当我们点击应用图标时，<code>Launcher</code>的<code>onClick</code>方法被调用，该方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/packages/apps/Launcher3/src/com/android/launcher3/Launcher.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>    ......<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">tag</span> <span class="hljs-operator">=</span> v.getTag();<br>    <span class="hljs-keyword">if</span> (tag <span class="hljs-keyword">instanceof</span> ShortcutInfo) &#123;<span class="hljs-comment">//应用程序快捷图标</span><br>        <span class="hljs-comment">//处理应用程序快捷方式的点击事件</span><br>        onClickAppShortcut(v);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tag <span class="hljs-keyword">instanceof</span> FolderInfo) &#123;<span class="hljs-comment">//文件夹</span><br>        <span class="hljs-keyword">if</span> (v <span class="hljs-keyword">instanceof</span> FolderIcon) &#123;<span class="hljs-comment">//点击的视图时文件夹图标</span><br>            onClickFolderIcon(v);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((FeatureFlags.LAUNCHER3_ALL_APPS_PULL_UP &amp;&amp; v <span class="hljs-keyword">instanceof</span> PageIndicator) ||<br>               (v == mAllAppsButton &amp;&amp; mAllAppsButton != <span class="hljs-literal">null</span>)) &#123;<br>        onClickAllAppsButton(v);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tag <span class="hljs-keyword">instanceof</span> AppInfo) &#123;<span class="hljs-comment">//应用信息</span><br>        startAppShortcutOrInfoActivity(v);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tag <span class="hljs-keyword">instanceof</span> LauncherAppWidgetInfo) &#123;<span class="hljs-comment">//Launcher小部件，如天气、日期等小部件</span><br>        <span class="hljs-keyword">if</span> (v <span class="hljs-keyword">instanceof</span> PendingAppWidgetHostView) &#123;<br>            onClickPendingWidget((PendingAppWidgetHostView) v);<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClickAppShortcut</span><span class="hljs-params">(<span class="hljs-keyword">final</span> View v)</span> &#123;<br>    <span class="hljs-comment">//对v的检测</span><br>......<br>    <span class="hljs-comment">// Start activities</span><br>    startAppShortcutOrInfoActivity(v);<br>&#125;<br><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startAppShortcutOrInfoActivity</span><span class="hljs-params">(View v)</span> &#123;<br>    <span class="hljs-type">ItemInfo</span> <span class="hljs-variable">item</span> <span class="hljs-operator">=</span> (ItemInfo) v.getTag();<br>    <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> item.getIntent();<br>    <span class="hljs-keyword">if</span> (intent == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Input must have a valid intent&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//startActivitySafely()启动应用程序</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">success</span> <span class="hljs-operator">=</span> startActivitySafely(v, intent, item);<br>    <span class="hljs-comment">//记录应用程序启动的用户事件（日志）</span><br>    getUserEventDispatcher().logAppLaunch(v, intent); <span class="hljs-comment">// TODO for discovered apps b/35802115</span><br><br>    <span class="hljs-keyword">if</span> (success &amp;&amp; v <span class="hljs-keyword">instanceof</span> BubbleTextView) &#123;<br>        mWaitingForResume = (BubbleTextView) v;<br>        mWaitingForResume.setStayPressed(<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startActivitySafely</span><span class="hljs-params">(View v, Intent intent, ItemInfo item)</span> &#123;<br>    ......<br>    <span class="hljs-comment">//创建一个新的任务栈来启动Activity</span><br>    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);<br>    <span class="hljs-keyword">if</span> (v != <span class="hljs-literal">null</span>) &#123;<br>        intent.setSourceBounds(getViewBounds(v));<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (Utilities.ATLEAST_MARSHMALLOW<br>            &amp;&amp; (item <span class="hljs-keyword">instanceof</span> ShortcutInfo)<br>            &amp;&amp; (item.itemType == Favorites.ITEM_TYPE_SHORTCUT<br>                || item.itemType == Favorites.ITEM_TYPE_DEEP_SHORTCUT)<br>            &amp;&amp; !((ShortcutInfo) item).isPromise()) &#123;<br>            <span class="hljs-comment">// Shortcuts need some special checks due to legacy reasons.</span><br>            startShortcutIntentSafely(intent, optsBundle, item);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (user == <span class="hljs-literal">null</span> || user.equals(Process.myUserHandle())) &#123;<br>            <span class="hljs-comment">// Could be launching some bookkeeping activity</span><br>            startActivity(intent, optsBundle);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            LauncherAppsCompat.getInstance(<span class="hljs-built_in">this</span>).startActivityForProfile(<br>                intent.getComponent(), user, intent.getSourceBounds(), optsBundle);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">catch</span> (ActivityNotFoundException|SecurityException e) &#123;<br>        ......<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果点击的时应用快捷图标，会调用<code>onClickAppShortcut</code>方法，进而调用<code>startAppShortcutOrInfoActivity</code>方法，获取视图对象的<code>Intent</code>，然后调用<code>startActivitySafely</code>方法，设置<code>Intent</code>的<code>Flag</code>为<code>FLAG_ACTIVITY_NEW_TASK</code>，指示<code>Android</code>系统通过创建一个新的任务栈来启动<code>Activity</code>，之后会调用<code>startActivity</code>方法，该方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/Activity.java</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Launch a new activity.  You will not receive any information about when</span><br><span class="hljs-comment">* the activity exits.  This implementation overrides the base version,</span><br><span class="hljs-comment">* providing information about the activity performing the launch.  </span><br><span class="hljs-comment">* Because of this additional information,</span><br><span class="hljs-comment">* the &#123;<span class="hljs-doctag">@link</span> Intent#FLAG_ACTIVITY_NEW_TASK&#125; launch flag is not</span><br><span class="hljs-comment">* required; if not specified, the new activity will be added to the</span><br><span class="hljs-comment">* task of the caller.</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> intent The intent to start.</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> options Additional options for how the Activity should be started.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startActivity</span><span class="hljs-params">(Intent intent, <span class="hljs-meta">@Nullable</span> Bundle options)</span> &#123;<br>    <span class="hljs-keyword">if</span> (options != <span class="hljs-literal">null</span>) &#123;<br>        startActivityForResult(intent, -<span class="hljs-number">1</span>, options);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        startActivityForResult(intent, -<span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Same as calling &#123;<span class="hljs-doctag">@link</span> #startActivityForResult(Intent, int, Bundle)&#125;</span><br><span class="hljs-comment">* with no options.</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> requestCode If &gt;= 0, this code will be returned in</span><br><span class="hljs-comment">*                    onActivityResult() when the activity exits.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startActivityForResult</span><span class="hljs-params">(<span class="hljs-meta">@RequiresPermission</span> Intent intent, <span class="hljs-type">int</span> requestCode)</span> &#123;<br>    startActivityForResult(intent, requestCode, <span class="hljs-literal">null</span>);<br>&#125;<br><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Launch an activity for which you would like a result when it finished.</span><br><span class="hljs-comment">* When this activity exits, your</span><br><span class="hljs-comment">* onActivityResult() method will be called with the given requestCode.</span><br><span class="hljs-comment">* Using a negative requestCode is the same as calling</span><br><span class="hljs-comment">* &#123;<span class="hljs-doctag">@link</span> #startActivity&#125; (the activity is not launched as a sub-activity).</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startActivityForResult</span><span class="hljs-params">(<span class="hljs-meta">@RequiresPermission</span> Intent intent, <span class="hljs-type">int</span> requestCode,</span><br><span class="hljs-params">                                   <span class="hljs-meta">@Nullable</span> Bundle options)</span> &#123;<br>    <span class="hljs-keyword">if</span> (mParent == <span class="hljs-literal">null</span>) &#123;<span class="hljs-comment">//当前Activity是否有父Activity</span><br>        options = transferSpringboardActivityOptions(options);<br>        Instrumentation.<span class="hljs-type">ActivityResult</span> <span class="hljs-variable">ar</span> <span class="hljs-operator">=</span> mInstrumentation.execStartActivity(<span class="hljs-built_in">this</span>, mMainThread.getApplicationThread(), mToken, <span class="hljs-built_in">this</span>, intent, requestCode, options);<br>        <span class="hljs-keyword">if</span> (ar != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//通过主线程的sendActivityResult方法将结果数据发送给发起请求的Activity</span><br>            mMainThread.sendActivityResult(mToken, mEmbeddedID, requestCode, ar.getResultCode(), ar.getResultData());<br>        &#125;<br>        <span class="hljs-keyword">if</span> (requestCode &gt;= <span class="hljs-number">0</span>) &#123;<br>            mStartedActivity = <span class="hljs-literal">true</span>;<br>        &#125;<br>        cancelInputsAndStartExitTransition(options);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> (options != <span class="hljs-literal">null</span>) &#123;<br>            mParent.startActivityFromChild(<span class="hljs-built_in">this</span>, intent, requestCode, options);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            mParent.startActivityFromChild(<span class="hljs-built_in">this</span>, intent, requestCode);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>startActivity</code>方法中，无论哪个分支，最终都会调用三个参数的<code>startActivityForResult</code>方法，第二个参数<code>requestCode = -1</code>表示<code>Launcher</code>不需要知道<code>Activity</code>启动的结果，第三个参数则代表<code>Activity</code>启动的方式。</p><p>在三个参数的<code>startActivityForResult</code>方法中，<code>mParent</code>是<code>Activity</code>类型的，表示当前<code>Activity</code>的父类。很显然，我们要启动的应用程序的第一个<code>Activity</code>（也就是根<code>Activity</code>）还没有创建出来，所以调用<code>mInstrumentation</code>的<code>execStartActivity</code>方法，<code>mInstrumentation</code>主要用来监控应用程序和系统的交互。<code>execStartActivity</code>方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/Instrumentation.java</span><br><span class="hljs-keyword">public</span> ActivityResult <span class="hljs-title function_">execStartActivity</span><span class="hljs-params">(</span><br><span class="hljs-params">    Context who, IBinder contextThread, IBinder token, Activity target,</span><br><span class="hljs-params">    Intent intent, <span class="hljs-type">int</span> requestCode, Bundle options)</span> &#123;<br>    <span class="hljs-type">IApplicationThread</span> <span class="hljs-variable">whoThread</span> <span class="hljs-operator">=</span> (IApplicationThread) contextThread;<br>    <span class="hljs-type">Uri</span> <span class="hljs-variable">referrer</span> <span class="hljs-operator">=</span> target != <span class="hljs-literal">null</span> ? target.onProvideReferrer() : <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (referrer != <span class="hljs-literal">null</span>) &#123;<br>        intent.putExtra(Intent.EXTRA_REFERRER, referrer);<br>    &#125;<br>    <span class="hljs-comment">//检查是否存在活动监视器mActivityMonitors</span><br>    <span class="hljs-keyword">if</span> (mActivityMonitors != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">synchronized</span> (mSync) &#123;<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">N</span> <span class="hljs-operator">=</span> mActivityMonitors.size();<br>            <span class="hljs-comment">//遍历监视器查找匹配的Activity</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;N; i++) &#123;<br>                <span class="hljs-keyword">final</span> <span class="hljs-type">ActivityMonitor</span> <span class="hljs-variable">am</span> <span class="hljs-operator">=</span> mActivityMonitors.get(i);<br>                <span class="hljs-type">ActivityResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>                <span class="hljs-keyword">if</span> (am.ignoreMatchingSpecificIntents()) &#123;<br>                    result = am.onStartActivity(intent);<br>                &#125;<br>                <span class="hljs-keyword">if</span> (result != <span class="hljs-literal">null</span>) &#123;<br>                    am.mHits++;<br>                    <span class="hljs-keyword">return</span> result;<br>                &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (am.match(who, <span class="hljs-literal">null</span>, intent)) &#123;<br>                    am.mHits++;<br>                    <span class="hljs-comment">//当该monitor阻塞activity启动,则直接返回</span><br>                    <span class="hljs-keyword">if</span> (am.isBlocking()) &#123;<br>                        <span class="hljs-keyword">return</span> requestCode &gt;= <span class="hljs-number">0</span> ? am.getResult() : <span class="hljs-literal">null</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">try</span> &#123;<br>        intent.migrateExtraStreamToClipData();<br>        intent.prepareToLeaveProcess(who);<br>        <span class="hljs-comment">//获取AMS的代理对象并调用startActivity方法</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> ActivityManager.getService()<br>            .startActivity(whoThread, who.getBasePackageName(), intent,<br>                           intent.resolveTypeIfNeeded(who.getContentResolver()),<br>                           token, target != <span class="hljs-literal">null</span> ? target.mEmbeddedID : <span class="hljs-literal">null</span>,<br>                           requestCode, <span class="hljs-number">0</span>, <span class="hljs-literal">null</span>, options);<br>        <span class="hljs-comment">//检查Activity的启动结果</span><br>        checkStartActivityResult(result, intent);<br>    &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Failure from system&quot;</span>, e);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>先通过活动监视器检查正在启动的<code>Activity</code>是否受监视或拦截，如果没有，则调用<code>ActivityManager</code>的<code>getService</code>方法获得<code>AMS</code>的代理对象，接着调用<code>startActivity</code>方法。</p><p>首先看<code>getService</code>方法做了什么，该方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/ActivityManager.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> IActivityManager <span class="hljs-title function_">getService</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> IActivityManagerSingleton.get();<br>&#125;<br><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Singleton&lt;IActivityManager&gt; IActivityManagerSingleton =<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>&lt;IActivityManager&gt;() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> IActivityManager <span class="hljs-title function_">create</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">IBinder</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> ServiceManager.getService(Context.ACTIVITY_SERVICE);<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">IActivityManager</span> <span class="hljs-variable">am</span> <span class="hljs-operator">=</span> IActivityManager.Stub.asInterface(b);<br>        <span class="hljs-keyword">return</span> am;<br>    &#125;<br>&#125;;<br><br><br><span class="hljs-comment">//路径：/frameworks/base/core/java/android/util/Singleton.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Singleton</span>&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> T mInstance;<br><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">abstract</span> T <span class="hljs-title function_">create</span><span class="hljs-params">()</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> T <span class="hljs-title function_">get</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>            <span class="hljs-keyword">if</span> (mInstance == <span class="hljs-literal">null</span>) &#123;<br>                mInstance = create();<br>            &#125;<br>            <span class="hljs-keyword">return</span> mInstance;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>getService</code>方法调用了<code>IActivityManagerSingleton</code>的<code>get</code>方法，而<code>IActivityManagerSingleton</code>是一个<code>Singleton</code>类，这个类中<code>get</code>方法调用了<code>create</code>方法。它在创建的时候重写了<code>create</code>方法，通过<code>getService</code>方法获取名为 “activity” 的<code>Service</code>引用，也就是<code>IBinder</code>类型的<code>AMS</code>引用，接着将它转换成<code>IActivityManager</code>类型的对象（采用的是<code>AIDL</code>，<code>IActivityManager.java</code>类是由<code>AIDL</code>工具编译<code>IActivityManager.aidl</code>时生成的）。<code>AIDL</code>的作用是实现跨进程通信(<code>IPC</code>)，在这里是建立服务端<code>AMS</code>和客户端<code>Launcher</code>之间的通信。</p><p>回到<code>Instrumentation.java</code>，接下来是调用<code>startActivity</code>方法。</p><h2 id="2-2-AMS-到-ApplicationThread-的调用过程"><a href="#2-2-AMS-到-ApplicationThread-的调用过程" class="headerlink" title="2.2 AMS 到 ApplicationThread 的调用过程"></a>2.2 AMS 到 ApplicationThread 的调用过程</h2><p><code>Launcher</code>请求<code>AMS</code>后，代码逻辑进入到<code>AMS</code>中， <code>AMS</code>的 <code>startActivity</code>方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">startActivity</span><span class="hljs-params">(IApplicationThread caller, String callingPackage,</span><br><span class="hljs-params">                               Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class="hljs-type">int</span> requestCode,</span><br><span class="hljs-params">                               <span class="hljs-type">int</span> startFlags, ProfilerInfo profilerInfo, Bundle bOptions)</span> &#123;<br>    <span class="hljs-keyword">return</span> startActivityAsUser(caller, callingPackage, intent, resolvedType, resultTo,<br>                               resultWho, requestCode, startFlags, profilerInfo, bOptions,<br>                               UserHandle.getCallingUserId());<br>&#125;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">startActivityAsUser</span><span class="hljs-params">(IApplicationThread caller, String callingPackage,</span><br><span class="hljs-params">                                     Intent intent, String resolvedType, IBinder resultTo, String resultWho, <span class="hljs-type">int</span> requestCode,</span><br><span class="hljs-params">                                     <span class="hljs-type">int</span> startFlags, ProfilerInfo profilerInfo, Bundle bOptions, <span class="hljs-type">int</span> userId)</span> &#123;<br>    <span class="hljs-comment">//判断调用者进程是否被隔离</span><br>    enforceNotIsolatedCaller(<span class="hljs-string">&quot;startActivity&quot;</span>);<br>    <span class="hljs-comment">//检查调用者权限</span><br>    userId = mUserController.handleIncomingUser(Binder.getCallingPid(), Binder.getCallingUid(),<br>                                                userId, <span class="hljs-literal">false</span>, ALLOW_FULL_ONLY, <span class="hljs-string">&quot;startActivity&quot;</span>, <span class="hljs-literal">null</span>);<br>    <span class="hljs-comment">// <span class="hljs-doctag">TODO:</span> Switch to user app stacks here.</span><br>    <span class="hljs-keyword">return</span> mActivityStarter.startActivityMayWait(caller, -<span class="hljs-number">1</span>, callingPackage, intent,<br>                                                 resolvedType, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, resultTo, resultWho, requestCode, startFlags,<br>                                                 profilerInfo, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, bOptions, <span class="hljs-literal">false</span>, userId, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>,<br>                                                 <span class="hljs-string">&quot;startActivityAsUser&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>与 <code>startActivity</code>方法相比， <code>startActivityAsUser</code>方法的参数多了一个<code>UserHandle.getCallingUserId()</code>，此方法用于获取调用者的<code>UserId</code>。接着在<code>startActivityAsUser</code>方法中，检查调用者进程是否被隔离，以及调用者权限，最后调用<code>startActivityMayWait</code>方法，该方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/services/core/java/com/android/server/am/ActivityStarter.java</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">startActivityMayWait</span><span class="hljs-params">(IApplicationThread caller, <span class="hljs-type">int</span> callingUid,</span><br><span class="hljs-params">                               String callingPackage, Intent intent, String resolvedType,</span><br><span class="hljs-params">                               IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span><br><span class="hljs-params">                               IBinder resultTo, String resultWho, <span class="hljs-type">int</span> requestCode, <span class="hljs-type">int</span> startFlags,</span><br><span class="hljs-params">                               ProfilerInfo profilerInfo, WaitResult outResult,</span><br><span class="hljs-params">                               Configuration globalConfig, Bundle bOptions, <span class="hljs-type">boolean</span> ignoreTargetSecurity, <span class="hljs-type">int</span> userId,</span><br><span class="hljs-params">                               IActivityContainer iContainer, TaskRecord inTask, String reason)</span> &#123;<br>    ......<br>    <span class="hljs-comment">//创建新的Intent对象，即便intent被修改也不受影响</span><br>    intent = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(intent);<br><br>    <span class="hljs-comment">//收集Intent所指向的Activity信息, 当存在多个可供选择的Activity,则直接向用户弹出resolveActivity</span><br>    <span class="hljs-type">ActivityInfo</span> <span class="hljs-variable">aInfo</span> <span class="hljs-operator">=</span> resolveActivity(intent, resolvedType, startFlags, profilerInfo, userId);<br>......<br>    <span class="hljs-keyword">synchronized</span> (mService) &#123;<br>        ......<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> startActivityLocked(caller, intent, ephemeralIntent, resolvedType,<br>                                      aInfo, rInfo, voiceSession, voiceInteractor,<br>                                      resultTo, resultWho, requestCode, callingPid,<br>                                      callingUid, callingPackage, realCallingPid, realCallingUid, startFlags,<br>                                      options, ignoreTargetSecurity, componentSpecified, outRecord, container,<br>                                      inTask, reason);<br><br>......<br><br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">startActivityLocked</span><span class="hljs-params">(IApplicationThread caller, Intent intent, Intent ephemeralIntent,</span><br><span class="hljs-params">                        String resolvedType, ActivityInfo aInfo, ResolveInfo rInfo,</span><br><span class="hljs-params">                        IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span><br><span class="hljs-params">                        IBinder resultTo, String resultWho, <span class="hljs-type">int</span> requestCode, <span class="hljs-type">int</span> callingPid, <span class="hljs-type">int</span> callingUid,</span><br><span class="hljs-params">                        String callingPackage, <span class="hljs-type">int</span> realCallingPid, <span class="hljs-type">int</span> realCallingUid, <span class="hljs-type">int</span> startFlags,</span><br><span class="hljs-params">                        ActivityOptions options, <span class="hljs-type">boolean</span> ignoreTargetSecurity, <span class="hljs-type">boolean</span> componentSpecified,</span><br><span class="hljs-params">                        ActivityRecord[] outActivity, ActivityStackSupervisor.ActivityContainer container,</span><br><span class="hljs-params">                        TaskRecord inTask, String reason)</span> &#123;<br><span class="hljs-comment">//判断启动理由是否为空</span><br>    <span class="hljs-keyword">if</span> (TextUtils.isEmpty(reason)) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Need to specify a reason.&quot;</span>);<br>    &#125;<br>    mLastStartReason = reason;<br>    mLastStartActivityTimeMs = System.currentTimeMillis();<br>    mLastStartActivityRecord[<span class="hljs-number">0</span>] = <span class="hljs-literal">null</span>;<br><br>    mLastStartActivityResult = startActivity(caller, intent, ephemeralIntent, resolvedType,<br>                                             aInfo, rInfo, voiceSession, voiceInteractor, resultTo, resultWho, requestCode,<br>                                             callingPid, callingUid, callingPackage, realCallingPid, realCallingUid, startFlags,<br>                                             options, ignoreTargetSecurity, componentSpecified, mLastStartActivityRecord,<br>                                             container, inTask);<br><br>    <span class="hljs-keyword">if</span> (outActivity != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// mLastStartActivityRecord[0] is set in the call to startActivity above.</span><br>        outActivity[<span class="hljs-number">0</span>] = mLastStartActivityRecord[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-keyword">return</span> mLastStartActivityResult;<br>&#125;<br><br><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">startActivity</span><span class="hljs-params">(IApplicationThread caller, Intent intent, Intent ephemeralIntent,</span><br><span class="hljs-params">                          String resolvedType, ActivityInfo aInfo, ResolveInfo rInfo,</span><br><span class="hljs-params">                          IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span><br><span class="hljs-params">                          IBinder resultTo, String resultWho, <span class="hljs-type">int</span> requestCode, <span class="hljs-type">int</span> callingPid, <span class="hljs-type">int</span> callingUid,</span><br><span class="hljs-params">                          String callingPackage, <span class="hljs-type">int</span> realCallingPid, <span class="hljs-type">int</span> realCallingUid, <span class="hljs-type">int</span> startFlags,</span><br><span class="hljs-params">                          ActivityOptions options, <span class="hljs-type">boolean</span> ignoreTargetSecurity, <span class="hljs-type">boolean</span> componentSpecified,</span><br><span class="hljs-params">                          ActivityRecord[] outActivity, ActivityStackSupervisor.ActivityContainer container,</span><br><span class="hljs-params">                          TaskRecord inTask)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">err</span> <span class="hljs-operator">=</span> ActivityManager.START_SUCCESS;<br>    <span class="hljs-comment">// Pull the optional Ephemeral Installer-only bundle out of the options early.</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">Bundle</span> <span class="hljs-variable">verificationBundle</span><br>        <span class="hljs-operator">=</span> options != <span class="hljs-literal">null</span> ? options.popAppVerificationBundle() : <span class="hljs-literal">null</span>;<br><br>    <span class="hljs-type">ProcessRecord</span> <span class="hljs-variable">callerApp</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">if</span> (caller != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">//获得Launcher进程</span><br>        callerApp = mService.getRecordForAppLocked(caller);<br>        <span class="hljs-keyword">if</span> (callerApp != <span class="hljs-literal">null</span>) &#123;<br>            callingPid = callerApp.pid;<br>            callingUid = callerApp.info.uid;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Slog.w(TAG, <span class="hljs-string">&quot;Unable to find app for caller &quot;</span> + caller<br>                   + <span class="hljs-string">&quot; (pid=&quot;</span> + callingPid + <span class="hljs-string">&quot;) when starting: &quot;</span><br>                   + intent.toString());<br>            err = ActivityManager.START_PERMISSION_DENIED;<br>        &#125;<br>    &#125;<br><br>    ......<br><span class="hljs-comment">//创建即将要启动的Activity的描述类ActivityRecord</span><br>    <span class="hljs-type">ActivityRecord</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActivityRecord</span>(mService, callerApp, callingPid, callingUid,<br>                                          callingPackage, intent, resolvedType, aInfo, mService.getGlobalConfiguration(),<br>                                          resultRecord, resultWho, requestCode, componentSpecified, voiceSession != <span class="hljs-literal">null</span>,<br>                                          mSupervisor, container, options, sourceRecord);<br>    <span class="hljs-keyword">if</span> (outActivity != <span class="hljs-literal">null</span>) &#123;<br>        outActivity[<span class="hljs-number">0</span>] = r;<br>    &#125;<br>......<br><br>    doPendingActivityLaunchesLocked(<span class="hljs-literal">false</span>);<br><br>    <span class="hljs-keyword">return</span> startActivity(r, sourceRecord, voiceSession, voiceInteractor, startFlags, <span class="hljs-literal">true</span>,<br>                         options, inTask, outActivity);<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>startActivityMayWait</code>方法中，我们主要关注<code>startActivityLocked</code>方法，该方法先判断了一下启动理由，然后调用<code>startActivity</code>方法（怎么这么多同名方法啊！）。该方法中，调用了<code>mService.getRecordForAppLocked(caller)</code>获得代表<code>Launcher</code>进程的<code>callerApp</code>对象，它是<code>ProcessRecord</code>类型的，<code>ProcessRecord</code>用于描述一个应用程序进程。参数<code>caller</code>是一路传过来的，指向的是<code>Launcher</code>所在的应用程序进程的<code>AppliactionThread</code>对象。</p><p>同样地，<code>ActivityRecord</code>用于描述一个<code>Activity</code>，记录其所用信息。<code>ActivityRecord</code>方法创建了用于描述将要启动的<code>Activity</code>信息的对象<code>r</code>，并将<code>r</code>赋值给<code>outActivity[0]</code>，两者作为<code>startActivity</code>方法的参数传递下去。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/services/core/java/com/android/server/am/ActivityStarter.java</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">startActivity</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span><br><span class="hljs-params">                          IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span><br><span class="hljs-params">                          <span class="hljs-type">int</span> startFlags, <span class="hljs-type">boolean</span> doResume, ActivityOptions options, TaskRecord inTask,</span><br><span class="hljs-params">                          ActivityRecord[] outActivity)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> START_CANCELED;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//延迟窗口布局的操作</span><br>        mService.mWindowManager.deferSurfaceLayout();<br>        result = startActivityUnchecked(r, sourceRecord, voiceSession, voiceInteractor,<br>                                        startFlags, doResume, options, inTask, outActivity);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (!ActivityManager.isStartResultSuccessful(result)<br>            &amp;&amp; mStartActivity.getTask() != <span class="hljs-literal">null</span>) &#123;<br>            mStartActivity.getTask().removeActivity(mStartActivity);<br>        &#125;<br>        <span class="hljs-comment">//继续执行窗口布局操作</span><br>        mService.mWindowManager.continueSurfaceLayout();<br>    &#125;<br><br>    postStartActivityProcessing(r, result, mSupervisor.getLastStack().mStackId,  mSourceRecord,<br>                                mTargetStack);<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><br><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">startActivityUnchecked</span><span class="hljs-params">(<span class="hljs-keyword">final</span> ActivityRecord r, ActivityRecord sourceRecord,</span><br><span class="hljs-params">                                   IVoiceInteractionSession voiceSession, IVoiceInteractor voiceInteractor,</span><br><span class="hljs-params">                                   <span class="hljs-type">int</span> startFlags, <span class="hljs-type">boolean</span> doResume, ActivityOptions options, TaskRecord inTask,</span><br><span class="hljs-params">                                   ActivityRecord[] outActivity)</span> &#123;<br><br>    ......<br>    <br>    <span class="hljs-keyword">if</span> (mStartActivity.resultTo == <span class="hljs-literal">null</span> &amp;&amp; mInTask == <span class="hljs-literal">null</span> &amp;&amp; !mAddingToTask &amp;&amp; (mLaunchFlags &amp; FLAG_ACTIVITY_NEW_TASK) != <span class="hljs-number">0</span>) &#123;<br>        newTask = <span class="hljs-literal">true</span>;<br>        <span class="hljs-comment">//创建新的TaskRecord</span><br>        result = setTaskFromReuseOrCreateNewTask(taskToAffiliate, preferredLaunchStackId, topStack);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mSourceRecord != <span class="hljs-literal">null</span>) &#123;<br>        result = setTaskFromSourceRecord();<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (mInTask != <span class="hljs-literal">null</span>) &#123;<br>        result = setTaskFromInTask();<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        setTaskToCurrentTopOrCreateNewTask();<br>    &#125;<br>    <br>    ......<br><br>    <span class="hljs-keyword">if</span> (mDoResume) &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">ActivityRecord</span> <span class="hljs-variable">topTaskActivity</span> <span class="hljs-operator">=</span><br>            mStartActivity.getTask().topRunningActivityLocked();<br>        <span class="hljs-keyword">if</span> (!mTargetStack.isFocusable()<br>            || (topTaskActivity != <span class="hljs-literal">null</span> &amp;&amp; topTaskActivity.mTaskOverlay<br>                &amp;&amp; mStartActivity != topTaskActivity)) &#123;<br>            <br>            mTargetStack.ensureActivitiesVisibleLocked(<span class="hljs-literal">null</span>, <span class="hljs-number">0</span>, !PRESERVE_WINDOWS);<br>            mWindowManager.executeAppTransition();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (mTargetStack.isFocusable() &amp;&amp; !mSupervisor.isFocusedStack(mTargetStack)) &#123;<br>                mTargetStack.moveToFront(<span class="hljs-string">&quot;startActivityUnchecked&quot;</span>);<br>            &#125;<br>            mSupervisor.resumeFocusedStackTopActivityLocked(mTargetStack, mStartActivity, mOptions);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        mTargetStack.addRecentActivityLocked(mStartActivity);<br>    &#125;<br>    mSupervisor.updateUserStackLocked(mStartActivity.userId, mTargetStack);<br><br>    mSupervisor.handleNonResizableTaskIfNeeded(mStartActivity.getTask(), preferredLaunchStackId, preferredLaunchDisplayId, mTargetStack.mStackId);<br><br>    <span class="hljs-keyword">return</span> START_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>startActivity</code>方法调用了<code>startActivityUnchecked</code>方法，该方法主要是处理与<code>Activity</code>栈管理相关的逻辑。在 2.1 中的 <code>startActivitySafely</code>方法，里面设置<code>Intent</code>的<code>Flag</code>为<code>FLAG_ACTIVITY_NEW_TASK</code>。所以这里会调用<code>setTaskFromReuseOrCreateNewTask</code>方法，创建一个新的<code>TaskRecord</code>用于描述<code>Activity</code>栈。之后会调用<code>resumeFocusedStackTopActivityLocked</code>方法，该方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/services/core/java/com/android/server/am/ActivityStackSupervisor.java</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">resumeFocusedStackTopActivityLocked</span><span class="hljs-params">(</span><br><span class="hljs-params">    ActivityStack targetStack, ActivityRecord target, ActivityOptions targetOptions)</span> &#123;<br>    <span class="hljs-comment">//判断目标Activity栈是否存在，并且目标Activity栈是否为焦点Activity栈（用户当前正在与之交互的任务的Activity栈）</span><br>    <span class="hljs-keyword">if</span> (targetStack != <span class="hljs-literal">null</span> &amp;&amp; isFocusedStack(targetStack)) &#123;<br>        <span class="hljs-comment">//恢复焦点Activity栈的顶部活动</span><br>        <span class="hljs-keyword">return</span> targetStack.resumeTopActivityUncheckedLocked(target, targetOptions);<br>    &#125;<br>    <span class="hljs-comment">//获取当前焦点Activity栈的顶部正在运行的Activity</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">ActivityRecord</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> mFocusedStack.topRunningActivityLocked();<br>    <span class="hljs-comment">//获得到的ActivityRecord为空或者不处于RESUMED状态</span><br>    <span class="hljs-keyword">if</span> (r == <span class="hljs-literal">null</span> || r.state != RESUMED) &#123;<br>        <span class="hljs-comment">//恢复焦点Activity栈的顶部活动</span><br>        mFocusedStack.resumeTopActivityUncheckedLocked(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (r.state == RESUMED) &#123;<br>        mFocusedStack.executeAppTransition(targetOptions);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>走到这一步，新<code>Activity</code>栈已经创建好了，但是<code>Activity</code>还没创建好，所以调用后一个<code>resumeTopActivityUncheckedLocked</code>方法，该方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/services/core/java/com/android/server/am/ActivityStack.java</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">resumeTopActivityUncheckedLocked</span><span class="hljs-params">(ActivityRecord prev, ActivityOptions options)</span> &#123;<br>    <span class="hljs-comment">//检查是否已经在递归执行resumeTopActivityInnerLocked方法，避免进一步递归调用</span><br>    <span class="hljs-keyword">if</span> (mStackSupervisor.inResumeTopActivity) &#123;<br>        <span class="hljs-comment">// Don&#x27;t even start recursing.</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//防止递归调用，将mStackSupervisor.inResumeTopActivity标志设置为true，表示正在恢复栈顶活动</span><br>        mStackSupervisor.inResumeTopActivity = <span class="hljs-literal">true</span>;<br>        result = resumeTopActivityInnerLocked(prev, options);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-comment">//将mStackSupervisor.inResumeTopActivity标志重新设置为false，表示恢复顶部活动的过程结束</span><br>        mStackSupervisor.inResumeTopActivity = <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    mStackSupervisor.checkReadyForSleepLocked();<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br><br><br><br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">resumeTopActivityInnerLocked</span><span class="hljs-params">(ActivityRecord prev, ActivityOptions options)</span> &#123;<br>    ......    <br>    mStackSupervisor.startSpecificActivityLocked(next, <span class="hljs-literal">true</span>, <span class="hljs-literal">true</span>);<br>    &#125;<br><br><span class="hljs-keyword">if</span> (DEBUG_STACK) mStackSupervisor.validateTopActivitiesLocked();<br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>resumeTopActivityUncheckedLocked</code>方法中，根据<code>mStackSupervisor.inResumeTopActivity</code>标志来防止递归调用<code>resumeTopActivityInnerLocked</code>方法，之后调用<code>resumeTopActivityInnerLocked</code>方法，该方法代码巨多，主要关注<code>startSpecificActivityLocked</code>方法，该方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/services/core/java/com/android/server/am/ActivityStackSupervisor.java</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">startSpecificActivityLocked</span><span class="hljs-params">(ActivityRecord r,</span><br><span class="hljs-params">                                 <span class="hljs-type">boolean</span> andResume, <span class="hljs-type">boolean</span> checkConfig)</span> &#123;<br>    <span class="hljs-comment">//获取即将启动的Activity的所在的应用程序进程</span><br>    <span class="hljs-type">ProcessRecord</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> mService.getProcessRecordLocked(r.processName, r.info.applicationInfo.uid, <span class="hljs-literal">true</span>);<br>    r.getStack().setLaunchTime(r);<br><span class="hljs-comment">//如果要启动的Activity所在的应用程序进程已经运行</span><br>    <span class="hljs-keyword">if</span> (app != <span class="hljs-literal">null</span> &amp;&amp; app.thread != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">if</span> ((r.info.flags&amp;ActivityInfo.FLAG_MULTIPROCESS) == <span class="hljs-number">0</span> || !<span class="hljs-string">&quot;android&quot;</span>.equals(r.info.packageName)) &#123;<br>                app.addPackage(r.info.packageName, r.info.applicationInfo.versionCode, mService.mProcessStats);<br>            &#125;<br>            realStartActivityLocked(r, app, andResume, checkConfig);<br>            <span class="hljs-keyword">return</span>;<br>        &#125; <span class="hljs-keyword">catch</span> (RemoteException e) &#123;<br>            Slog.w(TAG, <span class="hljs-string">&quot;Exception when starting activity &quot;</span> + r.intent.getComponent().flattenToShortString(), e);<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//应用程序没有运行或者没有有效的进程线程,调用startProcessLocked方法启动目标活动所属的进程</span><br>    mService.startProcessLocked(r.processName, r.info.applicationInfo, <span class="hljs-literal">true</span>, <span class="hljs-number">0</span>, <span class="hljs-string">&quot;activity&quot;</span>, r.intent.getComponent(), <span class="hljs-literal">false</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>startSpecificActivityLocked</code>方法中，先通过<code>getProcessRecordLocked</code>方法获得即将启动的Activity的所在的应用程序进程，接着判断得到的应用程序进程是否已经运行了，如果没有运行，则调用<code>startProcessLocked</code>方法，沿着此方法继续下去，就是<a href="https://gal2xy.github.io/2023/07/17/Android%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B(%E4%B8%80)">应用程序进程启动流程</a>了。如果运行了，就调用<code>realStartActivityLocked</code>方法，该方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/services/core/java/com/android/server/am/ActivityStackSupervisor.java</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">realStartActivityLocked</span><span class="hljs-params">(ActivityRecord r, ProcessRecord app,</span><br><span class="hljs-params">                                      <span class="hljs-type">boolean</span> andResume, <span class="hljs-type">boolean</span> checkConfig)</span> <span class="hljs-keyword">throws</span> RemoteException &#123;<br>    ......<br><br>        app.thread.scheduleLaunchActivity(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(r.intent), r.appToken,<br>                                          System.identityHashCode(r), r.info,<br>                                          mergedConfiguration.getGlobalConfiguration(),<br>                                          mergedConfiguration.getOverrideConfiguration(), r.compat,<br>                                          r.launchedFromPackage, task.voiceInteractor, app.repProcState, r.icicle,<br>                                          r.persistentState, results, newIntents, !andResume,<br>                                          mService.isNextTransitionForward(), profilerInfo);<br><br>        ......<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的<code>app</code>指传入的要启动的<code>Activity</code>所在的应用程序进程， <code>app.thread</code>指<code>IApplicationThread</code>，它的实现是<code>ActivityThread</code>的内部类<code>AppliactionThread</code>，这个类又是继承<code>IApplicationThread.Stub</code>的。</p><p><code>realStartActivityLocked</code>方法主要是调用<code>scheduleLaunchActivity</code>方法，将启动<code>Activity</code>的请求发送给应用程序所在的进程。当前代码逻辑运行在<code>AMS</code>所在的进程（<code>SystemServer</code>进程）中，通过<code>ApplicationThread</code>来与应用程序进程进行<code>Binder</code>通信，即<code>ApplicationThread</code>是<code>AMS</code>所在的进程和应用程序进程的通信桥梁。</p><h2 id="2-3-ActivityThread启动Activity的过程"><a href="#2-3-ActivityThread启动Activity的过程" class="headerlink" title="2.3 ActivityThread启动Activity的过程"></a>2.3 ActivityThread启动Activity的过程</h2><p>在上一篇文章里讲过，应用程序进程创建后会运行代表主线程的实例<code>ActivityThread</code>，它管理者当前应用程序进程的主线程。  <code>scheduleLaunchActivity</code>方法就是在<code>AppliactionThread</code>类中的，该类又是<code>ActivityThread</code>的内部类。所以代码逻辑终于进入到应用程序进程中。<code>scheduleLaunchActivity</code>该方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/ActivityThread.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">scheduleLaunchActivity</span><span class="hljs-params">(Intent intent, IBinder token, <span class="hljs-type">int</span> ident,</span><br><span class="hljs-params">                                         ActivityInfo info, Configuration curConfig, Configuration overrideConfig,</span><br><span class="hljs-params">                                         CompatibilityInfo compatInfo, String referrer, IVoiceInteractor voiceInteractor,</span><br><span class="hljs-params">                                         <span class="hljs-type">int</span> procState, Bundle state, PersistableBundle persistentState,</span><br><span class="hljs-params">                                         List&lt;ResultInfo&gt; pendingResults, List&lt;ReferrerIntent&gt; pendingNewIntents,</span><br><span class="hljs-params">                                         <span class="hljs-type">boolean</span> notResumed, <span class="hljs-type">boolean</span> isForward, ProfilerInfo profilerInfo)</span> &#123;<br><span class="hljs-comment">//更新进程的状态</span><br>    updateProcessState(procState, <span class="hljs-literal">false</span>);<br><span class="hljs-comment">//将要启动的Activity的参数封装成ActivityClientRecord</span><br>    <span class="hljs-type">ActivityClientRecord</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActivityClientRecord</span>();<br>    r.token = token;<br>    ......<br>    <span class="hljs-comment">//更新要要启动Activity的配置</span><br>    updatePendingConfiguration(curConfig);<br><span class="hljs-comment">//向H类发送类型为LAUNCH_ACTIVITY的消息</span><br>    sendMessage(H.LAUNCH_ACTIVITY, r);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>scheduleLaunchActivity</code>方法将传入的参数封装成<code>ActivityClientRecord</code>对象，<code>sendMessage</code>方法向<code>H</code>类发送类型为<code>LAUNCH_ACTIVITY</code>的消息，并将<code>ActivityClientRecord</code>传递过去。<code>sendMessage</code>方法有多个重载方法，调用到的如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/ActivityThread.java</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(<span class="hljs-type">int</span> what, Object obj)</span> &#123;<br>    sendMessage(what, obj, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-literal">false</span>);<br>&#125;<br><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sendMessage</span><span class="hljs-params">(<span class="hljs-type">int</span> what, Object obj, <span class="hljs-type">int</span> arg1, <span class="hljs-type">int</span> arg2, <span class="hljs-type">boolean</span> async)</span> &#123;<br>    <span class="hljs-keyword">if</span> (DEBUG_MESSAGES) <br>        Slog.v(TAG, <span class="hljs-string">&quot;SCHEDULE &quot;</span> + what + <span class="hljs-string">&quot; &quot;</span> + mH.codeToString(what) + <span class="hljs-string">&quot;: &quot;</span> + arg1 + <span class="hljs-string">&quot; / &quot;</span> + obj);<br><span class="hljs-comment">//获取消息实例</span><br>    <span class="hljs-type">Message</span> <span class="hljs-variable">msg</span> <span class="hljs-operator">=</span> Message.obtain();<br>    msg.what = what;<br>    msg.obj = obj;<br>    msg.arg1 = arg1;<br>    msg.arg2 = arg2;<br>    <span class="hljs-comment">//是否是异步消息</span><br>    <span class="hljs-keyword">if</span> (async) &#123;<br>        msg.setAsynchronous(<span class="hljs-literal">true</span>);<br>    &#125;<br>    <span class="hljs-comment">//调用消息处理程序（mH）的sendMessage方法将消息发送出去</span><br>    mH.sendMessage(msg);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>mH</code>是<code>H</code>类，它是<code>ActivityThread</code>的内部类并继承自<code>Handler</code>，是应用程序进程中主线程的消息管理类。因为<code>ApplicationThread</code>是一个<code>Binder</code>，它的调用逻辑运行在<code>Binder</code>线程池中，所以这里需要用<code>H</code>类将代码的逻辑切换到主线程中。</p><p><code>sendMessage</code>方法将消息添加到消息队列中，消息处理程序会自动从队列中取出消息并调用对应的<code>handleMessage</code>方法进行处理，该方法在<code>H</code>类中，如下所示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/ActivityThread.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleMessage</span><span class="hljs-params">(Message msg)</span> &#123;<br>    <span class="hljs-keyword">if</span> (DEBUG_MESSAGES) Slog.v(TAG, <span class="hljs-string">&quot;&gt;&gt;&gt; handling: &quot;</span> + codeToString(msg.what));<br>    <span class="hljs-keyword">switch</span> (msg.what) &#123;<br>        <span class="hljs-keyword">case</span> LAUNCH_ACTIVITY: &#123;<br>            Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="hljs-string">&quot;activityStart&quot;</span>);<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">ActivityClientRecord</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> (ActivityClientRecord) msg.obj;<br><br>            r.packageInfo = getPackageInfoNoCheck(r.activityInfo.applicationInfo, r.compatInfo);<br>            handleLaunchActivity(r, <span class="hljs-literal">null</span>, <span class="hljs-string">&quot;LAUNCH_ACTIVITY&quot;</span>);<br>            Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);<br>        &#125; <span class="hljs-keyword">break</span>;<br>        ......<br>    &#125;<br>    <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> msg.obj;<br>    <span class="hljs-keyword">if</span> (obj <span class="hljs-keyword">instanceof</span> SomeArgs) &#123;<br>        ((SomeArgs) obj).recycle();<br>    &#125;<br>    <span class="hljs-keyword">if</span> (DEBUG_MESSAGES) Slog.v(TAG, <span class="hljs-string">&quot;&lt;&lt;&lt; done: &quot;</span> + codeToString(msg.what));<br>&#125;<br></code></pre></td></tr></table></figure><p><code>handleMessage</code>对 <code>LAUNCH_ACTIVITY</code>消息的处理为：将参数<code>obj</code>（也就是在<code>scheduleLaunchActivity</code>方法中创建的<code>ActivityClientRecord</code>）转成<code>ActivityClientRecord</code>对象，通过<code>getPackageInfoNoCheck</code>的方法获得<code>LoadedApk</code>类型的对象并赋值给<code>r.packageInfo</code>。</p><p>为什么要获取<code>LoadedApk</code>呢？因为应用程序进程要启动<code>Activity</code>时，需要将该<code>Activity</code>所属的<code>APK</code>加载进来，而<code>LoadedApk</code>就是用来描述已加载的<code>APK</code>文件的。</p><p>接下来调用<code>handleLaunchActivity</code>方法，该方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/ActivityThread.java</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleLaunchActivity</span><span class="hljs-params">(ActivityClientRecord r, Intent customIntent, String reason)</span> &#123;<br><span class="hljs-comment">//取消之前计划的GC(垃圾回收机制)操作，因为应用程序正在重新变为活动状态</span><br>    unscheduleGcIdler();<br>    mSomeActivitiesChanged = <span class="hljs-literal">true</span>;<br><span class="hljs-comment">//如果ActivityClientRecord对象中包含了profilerInfo（性能分析器相关信息），则将其设置到mProfiler中，并启动性能分析器</span><br>    <span class="hljs-keyword">if</span> (r.profilerInfo != <span class="hljs-literal">null</span>) &#123;<br>        mProfiler.setProfiler(r.profilerInfo);<br>        mProfiler.startProfiling();<br>    &#125;<br><br>    <span class="hljs-comment">//处理配置变更,确保当前运行时使用的是最新的配置信息</span><br>    handleConfigurationChanged(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br><br>    <span class="hljs-keyword">if</span> (localLOGV) <br>        Slog.v(TAG, <span class="hljs-string">&quot;Handling launch of &quot;</span> + r);<br><br>    <span class="hljs-comment">//初始化窗口管理器</span><br>    WindowManagerGlobal.initialize();<br><span class="hljs-comment">//执行Activity启动流程</span><br>    <span class="hljs-type">Activity</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> performLaunchActivity(r, customIntent);<br><span class="hljs-comment">//判断Activity是否启动成功</span><br>    <span class="hljs-keyword">if</span> (a != <span class="hljs-literal">null</span>) &#123;<br>        r.createdConfig = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Configuration</span>(mConfiguration);<br>        reportSizeConfigurations(r);<br>        <span class="hljs-type">Bundle</span> <span class="hljs-variable">oldState</span> <span class="hljs-operator">=</span> r.state;<br>        <span class="hljs-comment">//将Activity的状态设置为Resume</span><br>        handleResumeActivity(r.token, <span class="hljs-literal">false</span>, r.isForward, !r.activity.mFinished &amp;&amp; !r.startsNotResumed, r.lastProcessedSeq, reason);<br>        <br>        <span class="hljs-keyword">if</span> (!r.activity.mFinished &amp;&amp; r.startsNotResumed) &#123;<br>            performPauseActivityIfNeeded(r, reason);<br>            <span class="hljs-keyword">if</span> (r.isPreHoneycomb()) &#123;<br>                r.state = oldState;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//停止Activity启动</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            ActivityManager.getService().finishActivity(r.token, Activity.RESULT_CANCELED, <span class="hljs-literal">null</span>, Activity.DONT_FINISH_TASK_WITH_ACTIVITY);<br>        &#125; <span class="hljs-keyword">catch</span> (RemoteException ex) &#123;<br>            <span class="hljs-keyword">throw</span> ex.rethrowFromSystemServer();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>取消<code>GC</code>操作，根据<code>profilerInfo</code>决定是否启动性能分析器，然后更新配置，初始化窗口管理器，调用<code>performLaunchActivity</code>方法启动<code>Activity</code>，如果启动成功，则进行相应的处理，包括保存配置信息、报告<code>Activity</code>尺寸配置、将<code>Activity</code>的状态设置为<code>Resume</code>等。如果<code>Activity</code>启动失败，则通知<code>ActivityManager</code>停止当前<code>Activity</code>。</p><p>接下来看<code>performLaunchActivity</code>方法，该方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/ActivityThread.java</span><br><span class="hljs-keyword">private</span> Activity <span class="hljs-title function_">performLaunchActivity</span><span class="hljs-params">(ActivityClientRecord r, Intent customIntent)</span> &#123;<br><span class="hljs-comment">//获取Activity的信息</span><br>    <span class="hljs-type">ActivityInfo</span> <span class="hljs-variable">aInfo</span> <span class="hljs-operator">=</span> r.activityInfo;<br>    <span class="hljs-keyword">if</span> (r.packageInfo == <span class="hljs-literal">null</span>) &#123;<br>        r.packageInfo = getPackageInfo(aInfo.applicationInfo, r.compatInfo, Context.CONTEXT_INCLUDE_CODE);<br>    &#125;<br><span class="hljs-comment">//获取componentName，即Activity的全限定类名(包名和类名)</span><br>    <span class="hljs-type">ComponentName</span> <span class="hljs-variable">component</span> <span class="hljs-operator">=</span> r.intent.getComponent();<br>    ......<br><span class="hljs-comment">//启动Activity的上下文环境(Context)</span><br>    <span class="hljs-type">ContextImpl</span> <span class="hljs-variable">appContext</span> <span class="hljs-operator">=</span> createBaseContextForActivity(r);<br>    <span class="hljs-type">Activity</span> <span class="hljs-variable">activity</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//创建类加载器</span><br>        java.lang.<span class="hljs-type">ClassLoader</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> appContext.getClassLoader();<br>        <span class="hljs-comment">//通过类加载器创建Activity实例</span><br>        activity = mInstrumentation.newActivity(cl, component.getClassName(), r.intent);<br><br>        StrictMode.incrementExpectedActivityCount(activity.getClass());<br>        r.intent.setExtrasClassLoader(cl);<br>        r.intent.prepareToEnterProcess();<br>        <span class="hljs-keyword">if</span> (r.state != <span class="hljs-literal">null</span>) &#123;<br>            r.state.setClassLoader(cl);<br>        &#125;<br>    &#125;<br>......<br>    <br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//创建应用程序对象（Application）的实例</span><br>        <span class="hljs-type">Application</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> r.packageInfo.makeApplication(<span class="hljs-literal">false</span>, mInstrumentation);<br>        ......<br><br>        <span class="hljs-keyword">if</span> (activity != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//初始化Activity</span><br>            ......<br>            <span class="hljs-comment">//对 Activity 进行初始化和连接关键组件</span><br>            activity.attach(appContext, <span class="hljs-built_in">this</span>, getInstrumentation(), r.token,<br>                            r.ident, app, r.intent, r.activityInfo, title, r.parent,<br>                            r.embeddedID, r.lastNonConfigurationInstances, config,<br>                            r.referrer, r.voiceInteractor, window, r.configCallback);<br><br>            ......<br>            <span class="hljs-comment">//启动Activity</span><br>            <span class="hljs-keyword">if</span> (r.isPersistable()) &#123;<br>                mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                mInstrumentation.callActivityOnCreate(activity, r.state);<br>            &#125;<br>            ......<br>        &#125;<br>        r.paused = <span class="hljs-literal">true</span>;<br><br>        mActivities.put(r.token, r);<br><br>    &#125; <br>    ......<br><br>    <span class="hljs-keyword">return</span> activity;<br>&#125;<br></code></pre></td></tr></table></figure><p>先做一些准备工作，比如获取<code>Activity</code>的信息、获取<code>APK</code>文件描述信息、获取组件名称(<code>ComponentName</code>)、获取上下文环境(<code>Context</code>)。然后调用<code>mInstrumentation</code>的<code>newActivity</code>方法，通过类加载器创建<code>Activity</code>实例。</p><p>接着是调用<code>makeApplication</code>方法创建应用程序对象（<code>Application</code>）的实例。在 <code>Android </code>中，每个应用程序都有一个全局的 <code>Application</code> 对象，该对象在整个应用程序的生命周期中存在，并且可以用于存储和共享应用程序的全局状态和数据。</p><p>之后是对刚创建的<code>Activity</code>实例进行初始化工作，最后调用<code>callActivityOnCreate</code>方法启动<code>Activity</code>。该方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/Instrumentation.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">callActivityOnCreate</span><span class="hljs-params">(Activity activity, Bundle icicle, PersistableBundle persistentState)</span> &#123;<br>    <span class="hljs-comment">//执行预处理操作，例如设定主题样式、初始化资源等</span><br>    prePerformCreate(activity);<br><span class="hljs-comment">//执行Activity的创建操作</span><br>    activity.performCreate(icicle, persistentState);<br>    <span class="hljs-comment">//执行后处理操作，例如注册广播接收器、初始化数据等</span><br>    postPerformCreate(activity);<br>&#125;<br></code></pre></td></tr></table></figure><p>关键是调用了<code>Activity</code>的<code>performCreate</code>方法，该方法如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/Activity.java</span><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">performCreate</span><span class="hljs-params">(Bundle icicle, PersistableBundle persistentState)</span> &#123;<br>    <span class="hljs-comment">//在Android 6.0及以上版本中，应用需要动态请求某些权限，该方法用于恢复之前的权限请求状态</span><br>    restoreHasCurrentPermissionRequest(icicle);<br>    <span class="hljs-comment">//调用Activity的实际的onCreate方法，执行开发者在Activity中重写的onCreate方法</span><br>    onCreate(icicle, persistentState);<br>    <span class="hljs-comment">//读取Activity的转场状态，即过渡动画的状态。这个方法将之前保存的转场状态恢复到当前Activity中</span><br>    mActivityTransitionState.readState(icicle);<br>    <span class="hljs-comment">//执行一些通用的初始化操作</span><br>    performCreateCommon();<br>&#125;<br></code></pre></td></tr></table></figure><p>在<code>performCreate</code>方法中会调用<code>Activity</code>的实际的<code>onCreate</code>方法，其具体的实现是由开发者来重写。到此，根<code>Activity</code>就启动了，即应用程序启动了。</p><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>整个流程下来非常长，感觉有点杂乱，这里简单梳理一下整个应用程序启动的流程（假设应用程序进程没有运行）：</p><ol><li>点击桌面的应用图标，<code>Launcher</code>进程使用<code>Binder</code>与<code>SystemServer</code>进程的<code>AMS</code>进行跨进程通信(<code>IPC</code>)，发起<code>startActivity</code>请求。</li><li><code>SystemServer</code>进程的<code>AMS</code>接收到请求后，通过<code>zygoteSendArgsAndGetResult</code>与<code>zygote</code>进程进行<code>Socket</code>通信，发送创建进程的请求。</li><li><code>Zygote</code>进程接收请求后，通过<code>forkAndSpecialize</code>方法创建应用程序进程，然后进行一系列初始化工作。</li><li>启动了应用程序进程后，<code>AMS</code>通过<code>ApplicationThread</code>来与应用程序进程进行<code>Binder</code>通信，发送<code>scheduleLaunchActivity</code>请求。</li><li>应用程序进程的<code>Binder</code>线程（<code>ApplicationThread</code>）接收到请求后，通过<code>sendMessage</code>方法与主线程<code>ActivityThread</code>进行<code>Handler</code>通信，发送 <code>LAUNCH_ACTIVITY</code>的消息。</li><li>主线程<code>ActivityThread</code>接收到消息后，通过反射机制创建目标<code>Activity</code>，并回调<code>Activity.onCreate()</code>等方法。到此，应用程序便正式启动，开始进入<code>Activity</code>生命周期。</li></ol><hr><p>参考：</p><p><a href="http://liuwangshu.cn/framework/component/1-activity-start-1.html">Android深入四大组件（一）应用程序启动过程（前篇） | BATcoder - 刘望舒 (liuwangshu.cn)</a></p><p><a href="http://liuwangshu.cn/framework/component/1-activity-start-2.html">Android深入四大组件（一）应用程序启动过程（后篇） | BATcoder - 刘望舒 (liuwangshu.cn)</a></p><p><a href="http://gityuan.com/2016/03/12/start-activity/">startActivity启动过程分析 - Gityuan博客 | 袁辉辉的技术博客</a></p><p><a href="https://zhuanlan.zhihu.com/p/67451239">死磕Android_App 启动过程（含 Activity 启动过程） - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Android源码解析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BurpSuite抓手机端小程序包</title>
    <link href="/2023/07/21/BurpSuite%E6%8A%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8C%85/"/>
    <url>/2023/07/21/BurpSuite%E6%8A%93%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>本篇文章利用BurpSuite + pixel4，对羊了羊小程序进行抓包和改包，尝试通关羊了羊。参考了网上的相关文章，但大部分都是失效的，已经被游戏方修复了。</p><hr><p>嗯，这应该就是一篇水文，望海涵。</p><h1 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h1><h2 id="2-1-BurpSuite证书配置"><a href="#2-1-BurpSuite证书配置" class="headerlink" title="2.1 BurpSuite证书配置"></a>2.1 BurpSuite证书配置</h2><p>我这里直接讲述怎么在手机上配置BurpSuite证书。</p><p>在[上一篇博客](<a href="https://gal2xy.github.io/2023/07/15/Pixel4%E5%88%B7Lineage">https://gal2xy.github.io/2023/07/15/Pixel4刷Lineage</a> OS&#x2F;#四、添加BurpSuite证书)中，讲述了一种将证书放置系统证书目录下。由于证书配置不正确的原因（但后面想了想，估计是因为手机时间的问题导致<code>https</code>连接失败），脑子一抽经，将手机刷机回Android10了。然后发现之前的方法不能使用了，因为<code>adb root</code>在这部手机系统上被限制了。于是跟着报错信息，一路查找，找了多个工具（尝试了<code>adb_root</code>、<code>adbd-Insecure</code>、<code>magisk-overlayfs</code>、<code>RootExplorer</code>、<code>movecert</code>），终于有一个有效的有用了插件<a href="https://github.com/NVISOsecurity/MagiskTrustUserCerts">AlwaysTurstUserCerts</a>。之后在手机的设置-&gt;安全-&gt;加密与凭证-&gt;从存储设备安装，即普通的用户证书安装流程。然后根据证书的哈希值在系统证书目录下查找，惊奇的发现存在了！而且<code>RootExplorer</code>工具中也允许挂载系统证书目录为可读可写了！</p><h2 id="2-2-Edxposed和JustTrustMe安装"><a href="#2-2-Edxposed和JustTrustMe安装" class="headerlink" title="2.2 Edxposed和JustTrustMe安装"></a>2.2 Edxposed和JustTrustMe安装</h2><p>证书配置完后，还需要在<code>magisk</code>上安装<code>JustTrustMe</code>插件来绕过<code>SSL pinning</code>，在<code>Edxposed</code>(其他<code>xposed</code>都行)上启动，作用域选择微信或者QQ。</p><h2 id="2-3-手机代理到电脑上"><a href="#2-3-手机代理到电脑上" class="headerlink" title="2.3 手机代理到电脑上"></a>2.3 手机代理到电脑上</h2><p>这一步需要手机和电脑处在同一网络中，查看电脑<code>ip</code>，然后对手机连接的<code>wife</code>进行代理设置，代理<code>ip</code>为电脑<code>ip</code>，端口只要是没被占用的就行。</p><p>以上准备工作不想着重讲述，安装配置的事情都在网络上有参考文章。</p><h1 id="三、微信小程序羊了羊抓包改包"><a href="#三、微信小程序羊了羊抓包改包" class="headerlink" title="三、微信小程序羊了羊抓包改包"></a>三、微信小程序羊了羊抓包改包</h1><p>同样的小程序在QQ上抓包比较顺利，但在微信上时网络就巨卡了。目前不知道什么原因。所以这里以QQ上的羊了羊作为例子讲解抓包改包。</p><p>首先我们先进入到羊了羊的开始游戏界面，先不进行拦截，点击挑战进入消消乐界面，我们可以看到许多流量包，其中URL为<code>/sheep/v1/game/map_info_ex</code>这个流量包，通过名字就可以知道是获取地图的。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307210958624.jpg"></p><p>在相应的响应流量包中，<code>map_md5</code>就是第一、二关的地图的<code>md5</code>值了。至于<code>map_seed</code>就是用于生成地图的初始种子，但我们并不知道生成算法。</p><hr><p>既然<code>map_md5</code>是第一、二关的地图的<code>md5</code>值，那将第二个<code>md5</code>值覆盖为第一个<code>md5</code>值不就行了？！</p><p>尝试了一下，开启拦截，等到出现这个请求包，右键拦截-&gt;响应此请求，继续放行，等到这个响应到来后，篡改<code>map_md5</code>，再放行，确实可以，但缺点是通关了不会在名片中显示。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307210958769.jpg"></p><p>（<code>pixel4</code>没有截屏功能！？）</p><hr><p>当然，<code>map_seed</code>也不是改了没用的，因为毕竟是用初始种子进行加密得到的地图，而这些加密，大概率是会用到位运算的，比如什么左移、右移。假设是这样，我们将种子变得简单点不就行了！</p><p>尝试将<code>map_seed</code>全改为0，第二关的地图如下所示</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307210958569.jpg"></p><p>然后还是有点难，因为虽然看着整齐，但是个数不是3的倍数。</p><h1 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h1><p>在寻找关键请求时，我们可以先不进行拦截，先分析一遍整个请求响应的流量包，其中一些带参数的请求可能比较关键。然后我们可以尝试开启拦截，一个接一个的放行，如果手机端因某个请求流量包的放行而触发了动作，那么可以肯定这个请求是关键的。找到关键请求之后，我们可以修改这个请求的参数或者拦截对应的响应，进一步深入学习。</p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android，抓包</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android应用程序启动流程(一)</title>
    <link href="/2023/07/17/Android%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B(%E4%B8%80)/"/>
    <url>/2023/07/17/Android%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B(%E4%B8%80)/</url>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>要想启动一个应用程序，首先要保证这个应用程序所需要的应用程序进程已经启动。<code>Activity Manager Service(AMS)</code>在启动应用程序时会检查这个应用程序所需要的应用进程是否存在，不存在就会请求<code>Zygote</code>进程启动所需要的应用程序进程。当应用程序进程启动完后，就会接着启动应用程序，也就是启动根<code>Activity</code>，这部分将在下一篇文章中分析。本篇文章就先来分析一下应用程序进程的启动流程。</p><h1 id="二、应用程序进程启动流程"><a href="#二、应用程序进程启动流程" class="headerlink" title="二、应用程序进程启动流程"></a>二、应用程序进程启动流程</h1><h2 id="2-1-AMS发送启动应用程序进程请求"><a href="#2-1-AMS发送启动应用程序进程请求" class="headerlink" title="2.1 AMS发送启动应用程序进程请求"></a>2.1 AMS发送启动应用程序进程请求</h2><p>假定此时启动的应用程序所需的应用程序进程不存在，则<code>AMS</code>会通过<code>startProcessLocked</code>方法向<code>Zygote</code>进程发送请求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startProcessLocked</span><span class="hljs-params">(ProcessRecord app, String hostingType, String hostingNameStr, String abiOverride, String entryPoint, String[] entryPointArgs)</span> &#123;<br>    ......<br>    <span class="hljs-keyword">try</span> &#123;<br><span class="hljs-comment">//设置各个参数的值，如uid、gids、debugFlags、entryPoint等</span><br>        ......<br>        <br>        ProcessStartResult startResult;<br>        <span class="hljs-keyword">if</span> (hostingType.equals(<span class="hljs-string">&quot;webview_service&quot;</span>)) &#123;<br>            startResult = startWebView(entryPoint,<br>                                       app.processName, uid, uid, gids, debugFlags, mountExternal,<br>                                       app.info.targetSdkVersion, seInfo, requiredAbi, instructionSet,<br>                                       app.info.dataDir, <span class="hljs-literal">null</span>, entryPointArgs);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//启动应用程序进程</span><br>            startResult = Process.start(entryPoint,<br>                                        app.processName, uid, uid, gids, debugFlags, mountExternal,<br>                                        app.info.targetSdkVersion, seInfo, requiredAbi, instructionSet,<br>                                        app.info.dataDir, invokeWith, entryPointArgs);<br>        &#125;<br>        ......<br>    &#125; <span class="hljs-keyword">catch</span> (RuntimeException e) &#123;<br>    ......    <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该方法先对所需要的参数进行初始化，其中<code>entryPoint</code>我们得知是<code>android.app.ActivityThread</code>，后文会再次提到它。然后判断<code>hostingType</code>（是个啥嘞？）是否是<code>webview_service</code>，如果是则调用<code>startWebView</code>方法，否则调用<code>Process.start</code>方法启动应用程序进程。该方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/os/Process.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ProcessStartResult <span class="hljs-title function_">start</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String processClass,</span><br><span class="hljs-params">                                             <span class="hljs-keyword">final</span> String niceName,</span><br><span class="hljs-params">                                             <span class="hljs-type">int</span> uid, <span class="hljs-type">int</span> gid, <span class="hljs-type">int</span>[] gids,</span><br><span class="hljs-params">                                             <span class="hljs-type">int</span> debugFlags, <span class="hljs-type">int</span> mountExternal,</span><br><span class="hljs-params">                                             <span class="hljs-type">int</span> targetSdkVersion,</span><br><span class="hljs-params">                                             String seInfo,</span><br><span class="hljs-params">                                             String abi,</span><br><span class="hljs-params">                                             String instructionSet,</span><br><span class="hljs-params">                                             String appDataDir,</span><br><span class="hljs-params">                                             String invokeWith,</span><br><span class="hljs-params">                                             String[] zygoteArgs)</span> &#123;<br>    <span class="hljs-keyword">return</span> zygoteProcess.start(processClass, niceName, uid, gid, gids,<br>                               debugFlags, mountExternal, targetSdkVersion, seInfo,<br>                               abi, instructionSet, appDataDir, invokeWith, zygoteArgs);<br>&#125;<br></code></pre></td></tr></table></figure><p>该方法并没有实现功能，而是调用了<code>zygoteProcess.start</code>方法来实现，<code>zygoteProcess</code>用来保持与<code>Zygote</code>进程的通信状态。该方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/os/ZygoteProcess.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> Process.ProcessStartResult <span class="hljs-title function_">start</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String processClass,</span><br><span class="hljs-params">                                              <span class="hljs-keyword">final</span> String niceName,</span><br><span class="hljs-params">                                              <span class="hljs-type">int</span> uid, <span class="hljs-type">int</span> gid, <span class="hljs-type">int</span>[] gids,</span><br><span class="hljs-params">                                              <span class="hljs-type">int</span> debugFlags, <span class="hljs-type">int</span> mountExternal,</span><br><span class="hljs-params">                                              <span class="hljs-type">int</span> targetSdkVersion,</span><br><span class="hljs-params">                                              String seInfo,</span><br><span class="hljs-params">                                              String abi,</span><br><span class="hljs-params">                                              String instructionSet,</span><br><span class="hljs-params">                                              String appDataDir,</span><br><span class="hljs-params">                                              String invokeWith,</span><br><span class="hljs-params">                                              String[] zygoteArgs)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> startViaZygote(processClass, niceName, uid, gid, gids,<br>                              debugFlags, mountExternal, targetSdkVersion, seInfo,<br>                              abi, instructionSet, appDataDir, invokeWith, zygoteArgs);<br>    &#125; <span class="hljs-keyword">catch</span> (ZygoteStartFailedEx ex) &#123;<br>        Log.e(LOG_TAG,<br>              <span class="hljs-string">&quot;Starting VM process through Zygote failed&quot;</span>);<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<br>            <span class="hljs-string">&quot;Starting VM process through Zygote failed&quot;</span>, ex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>好，还是个代理函数，该方法调用了<code>startViaZygote</code>来实现功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/os/ZygoteProcess.java</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">*Starts a new process via the zygote mechanism.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">private</span> Process.ProcessStartResult <span class="hljs-title function_">startViaZygote</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String processClass,</span><br><span class="hljs-params">                                                  <span class="hljs-keyword">final</span> String niceName,</span><br><span class="hljs-params">                                                  <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> uid, <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> gid,</span><br><span class="hljs-params">                                                  <span class="hljs-keyword">final</span> <span class="hljs-type">int</span>[] gids,</span><br><span class="hljs-params">                                                  <span class="hljs-type">int</span> debugFlags, <span class="hljs-type">int</span> mountExternal,</span><br><span class="hljs-params">                                                  <span class="hljs-type">int</span> targetSdkVersion,</span><br><span class="hljs-params">                                                  String seInfo,</span><br><span class="hljs-params">                                                  String abi,</span><br><span class="hljs-params">                                                  String instructionSet,</span><br><span class="hljs-params">                                                  String appDataDir,</span><br><span class="hljs-params">                                                  String invokeWith,</span><br><span class="hljs-params">                                                  String[] extraArgs)</span><br>    <span class="hljs-keyword">throws</span> ZygoteStartFailedEx &#123;<br>    <span class="hljs-comment">//创建argsForZygote字符串数组，将应用进程的启动参数保存在其中</span><br>    ......<br><br>    <span class="hljs-keyword">synchronized</span>(mLock) &#123;<br>        <span class="hljs-keyword">return</span> zygoteSendArgsAndGetResult(openZygoteSocketIfNeeded(abi), argsForZygote);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该方法将应用进程的启动参数转成字符串数组，然后调用<code>zygoteSendArgsAndGetResult</code>方法，该方法的第一个参数是个<code>openZygoteSocketIfNeeded</code>方法。</p><p>我们先来看<code>openZygoteSocketIfNeeded</code>方法，该方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/os/ZygoteProcess.java</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Tries to open socket to Zygote process if not already open. If</span><br><span class="hljs-comment">* already open, does nothing.  May block and retry.  Requires that mLock be held.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@GuardedBy(&quot;mLock&quot;)</span><br><span class="hljs-keyword">private</span> ZygoteState <span class="hljs-title function_">openZygoteSocketIfNeeded</span><span class="hljs-params">(String abi)</span> <span class="hljs-keyword">throws</span> ZygoteStartFailedEx &#123;<br>    <span class="hljs-comment">//检查当前线程是否持有mLock锁，没有则抛异常</span><br>    Preconditions.checkState(Thread.holdsLock(mLock), <span class="hljs-string">&quot;ZygoteProcess lock not held&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> (primaryZygoteState == <span class="hljs-literal">null</span> || primaryZygoteState.isClosed()) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//通过Socket与主Zygote进程建立连接</span><br>            primaryZygoteState = ZygoteState.connect(mSocket);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException ioe) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZygoteStartFailedEx</span>(<span class="hljs-string">&quot;Error connecting to primary zygote&quot;</span>, ioe);<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//检查主Zygote进程的状态是否与给定的abi(应用二进制接口)匹配，匹配则返回主Zygote进程的状态</span><br>    <span class="hljs-keyword">if</span> (primaryZygoteState.matches(abi)) &#123;<br>        <span class="hljs-keyword">return</span> primaryZygoteState;<br>    &#125;<br><br>    <span class="hljs-comment">// 主Zygote进程的状态与abi不匹配，尝试与辅Zygote进程建立连接</span><br>    <span class="hljs-keyword">if</span> (secondaryZygoteState == <span class="hljs-literal">null</span> || secondaryZygoteState.isClosed()) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//通过Socket与辅Zygote进程建立连接</span><br>            secondaryZygoteState = ZygoteState.connect(mSecondarySocket);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException ioe) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZygoteStartFailedEx</span>(<span class="hljs-string">&quot;Error connecting to secondary zygote&quot;</span>, ioe);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (secondaryZygoteState.matches(abi)) &#123;<br>        <span class="hljs-keyword">return</span> secondaryZygoteState;<br>    &#125;<br><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZygoteStartFailedEx</span>(<span class="hljs-string">&quot;Unsupported zygote ABI: &quot;</span> + abi);<br>&#125;<br></code></pre></td></tr></table></figure><p>该方法先检查当前线程是否上<code>mLock</code>锁，然后尝试与主<code>Zygote</code>连接，如果主<code>Zygote</code>状态与启动应用程序进程所需的<code>ABI</code>不匹配，则尝试连接辅<code>Zygote</code>，如果仍不匹配，则抛出异常。</p><blockquote><p> <code>Zygote</code>的启动脚本有4中，其中<code>init.zygote32_64.rc</code>和<code>init.zygote64_32.rc</code>分主辅<code>Zygote</code>（谁在前谁主），主辅<code>Zygote</code>的区别在于所支持程序的位数(32位、64位)。</p></blockquote><p>接下来看<code>zygoteSendArgsAndGetResult</code>方法，该方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/os/ZygoteProcess.java</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Sends an argument list to the zygote process, which starts a new child</span><br><span class="hljs-comment">* and returns the child&#x27;s pid. Please note: the present implementation</span><br><span class="hljs-comment">* replaces newlines in the argument list with spaces.</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> ZygoteStartFailedEx if process start failed for any reason</span><br><span class="hljs-comment">*/</span><br><span class="hljs-meta">@GuardedBy(&quot;mLock&quot;)</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Process.ProcessStartResult <span class="hljs-title function_">zygoteSendArgsAndGetResult</span><span class="hljs-params">(</span><br><span class="hljs-params">    ZygoteState zygoteState, ArrayList&lt;String&gt; args)</span><br>    <span class="hljs-keyword">throws</span> ZygoteStartFailedEx &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// 检查args数组中的参数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">sz</span> <span class="hljs-operator">=</span> args.size();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; sz; i++) &#123;<br>            <span class="hljs-keyword">if</span> (args.get(i).indexOf(<span class="hljs-string">&#x27;\n&#x27;</span>) &gt;= <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZygoteStartFailedEx</span>(<span class="hljs-string">&quot;embedded newlines not allowed&quot;</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">        * See com.android.internal.os.SystemZygoteInit.readArgumentList()</span><br><span class="hljs-comment">        * Presently the wire format to the zygote process is:</span><br><span class="hljs-comment">        * a) a count of arguments (argc, in essence)</span><br><span class="hljs-comment">        * b) a number of newline-separated argument strings equal to count</span><br><span class="hljs-comment">        *</span><br><span class="hljs-comment">        * After the zygote process reads these it will write the pid of</span><br><span class="hljs-comment">        * the child or -1 on failure, followed by boolean to</span><br><span class="hljs-comment">        * indicate whether a wrapper process was used.</span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">writer</span> <span class="hljs-operator">=</span> zygoteState.writer;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">DataInputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> zygoteState.inputStream;<br><span class="hljs-comment">//将参数写入zygoteState中</span><br>        writer.write(Integer.toString(args.size()));<br>        writer.newLine();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; sz; i++) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">arg</span> <span class="hljs-operator">=</span> args.get(i);<br>            writer.write(arg);<br>            writer.newLine();<br>        &#125;<br><br>        writer.flush();<br><br>        <br>        Process.<span class="hljs-type">ProcessStartResult</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Process</span>.ProcessStartResult();<br><span class="hljs-comment">//等待socket服务端（即zygote）返回新创建的进程pid、usingWrapper;</span><br>        <br>        result.pid = inputStream.readInt();<br>        result.usingWrapper = inputStream.readBoolean();<br><br>        <span class="hljs-keyword">if</span> (result.pid &lt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZygoteStartFailedEx</span>(<span class="hljs-string">&quot;fork() failed&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125; <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>        zygoteState.close();<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZygoteStartFailedEx</span>(ex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该方法将参数列表写入<code>zygoteState</code>中，然后与<code>Zygote</code>进程进行<code>Socket</code>通信，等待<code>socket</code>服务端发送回来新创建的进程pid。如果<code>pid&gt;=0</code>则进程创建成功，返回<code>ProcessStartResult</code>对象（包含<code>pid</code>、<code>usingWrapper</code>），否则关闭<code>Zygote</code>的<code>Socket</code>并抛出异常。</p><p>接下来就是<code>Zygote</code>进程接收请求并创建应用程序进程了。</p><h2 id="2-2-Zygote进程接收请求并创建应用程序进程"><a href="#2-2-Zygote进程接收请求并创建应用程序进程" class="headerlink" title="2.2 Zygote进程接收请求并创建应用程序进程"></a>2.2 Zygote进程接收请求并创建应用程序进程</h2><p>在分析[Android系统启动流程](<a href="https://gal2xy.github.io/2023/07/04/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/">Android系统启动流程 - gla2xy’s blog (gal2xy.github.io)</a>)中，<code>ZygoteInit.java</code>的<code>main</code>函数中，<code>Zygote</code>创建<code>Socket</code>服务端后，会通过<code>runSelectLoop</code>方法等待<code>AMS</code>的请求来创建新的应用程序进程。那我们就来分析一下<code>runSelectLoop</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">runSelectLoop</span><span class="hljs-params">(String abiList)</span> <span class="hljs-keyword">throws</span> Zygote.MethodAndArgsCaller &#123;<br>    <span class="hljs-comment">//创建文件描述符的数组和zygoteConnection对象的数组</span><br>    ArrayList&lt;FileDescriptor&gt; fds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;FileDescriptor&gt;();<br>    ArrayList&lt;ZygoteConnection&gt; peers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;ZygoteConnection&gt;();<br><span class="hljs-comment">//mServerSocket是zygote进程的Socket，保存到fds[0]</span><br>    fds.add(mServerSocket.getFileDescriptor());<br>    peers.add(<span class="hljs-literal">null</span>);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-comment">//创建一个 StructPollfd 数组 pollFds，用于存储待轮询的文件描述符</span><br>        StructPollfd[] pollFds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StructPollfd</span>[fds.size()];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; pollFds.length; ++i) &#123;<br>            pollFds[i] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">StructPollfd</span>();<br>            pollFds[i].fd = fds.get(i);<br>            pollFds[i].events = (<span class="hljs-type">short</span>) POLLIN;<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//使用 Os.poll() 方法对文件描述符进行轮询，等待有数据可读的文件描述符。该方法会阻塞直到有事件发生</span><br>            Os.poll(pollFds, -<span class="hljs-number">1</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (ErrnoException ex) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;poll failed&quot;</span>, ex);<br>        &#125;<br>        <span class="hljs-comment">//遍历 pollFds 数组，判断每个文件描述符是否有可读事件发生</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> pollFds.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; --i) &#123;<br>            <span class="hljs-comment">//判断每个文件描述符是否有可读事件发生</span><br>            <span class="hljs-keyword">if</span> ((pollFds[i].revents &amp; POLLIN) == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-comment">//如果文件描述符索引为 0，表示有新的连接请求到达</span><br>            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">//调用 acceptCommandPeer() 方法接受连接，并将新的连接对象添加到 peers 和对应的文件描述符添加到 fds。</span><br>                <span class="hljs-type">ZygoteConnection</span> <span class="hljs-variable">newPeer</span> <span class="hljs-operator">=</span> acceptCommandPeer(abiList);<br>                peers.add(newPeer);<br>                fds.add(newPeer.getFileDesciptor());<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">//如果文件描述符索引不为 0，则表示已有连接的数据可读，调用对应连接对象的 runOnce() 方法</span><br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">done</span> <span class="hljs-operator">=</span> peers.get(i).runOnce(<span class="hljs-built_in">this</span>);<br>                <span class="hljs-comment">//处理完后移除该文件描述符和连接对象</span><br>                <span class="hljs-keyword">if</span> (done) &#123;<br>                    peers.remove(i);<br>                    fds.remove(i);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">private</span> ZygoteConnection <span class="hljs-title function_">acceptCommandPeer</span><span class="hljs-params">(String abiList)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">return</span> createNewConnection(mServerSocket.accept(), abiList);<br>    &#125; <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<br>            <span class="hljs-string">&quot;IOException during accept()&quot;</span>, ex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>整个<code>runSelectLoop</code>方法主要是通过死循环来轮询可读事件发生的文件描述符，找到后接受连接并创建连接对象并调用<code>runOnce</code>方法进行处理。该方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/com/android/internal/os/ZygoteConnection.java</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Reads one start command from the command socket. If successful,</span><br><span class="hljs-comment">* a child is forked and a &#123;<span class="hljs-doctag">@link</span> Zygote.MethodAndArgsCaller&#125;</span><br><span class="hljs-comment">* exception is thrown in that child while in the parent process,</span><br><span class="hljs-comment">* the method returns normally. On failure, the child is not</span><br><span class="hljs-comment">* spawned and messages are printed to the log and stderr. Returns</span><br><span class="hljs-comment">* a boolean status value indicating whether an end-of-file on the command</span><br><span class="hljs-comment">* socket has been encountered.</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@return</span> false if command socket should continue to be read from, or</span><br><span class="hljs-comment">* true if an end-of-file has been encountered.</span><br><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> Zygote.MethodAndArgsCaller trampoline to invoke main()</span><br><span class="hljs-comment">* method in child process</span><br><span class="hljs-comment">*/</span><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">runOnce</span><span class="hljs-params">(ZygoteServer zygoteServer)</span> <span class="hljs-keyword">throws</span> Zygote.MethodAndArgsCaller &#123;<br><br>    String args[];<br>    <span class="hljs-type">Arguments</span> <span class="hljs-variable">parsedArgs</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    FileDescriptor[] descriptors;<br><br>    <span class="hljs-comment">//获取启动参数和文件描述符</span><br>    <span class="hljs-keyword">try</span> &#123;<br>        args = readArgumentList();<br>        descriptors = mSocket.getAncillaryFileDescriptors();<br>    &#125; <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>        Log.w(TAG, <span class="hljs-string">&quot;IOException on command socket &quot;</span> + ex.getMessage());<br>        closeSocket();<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    ......<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//将binder客户端传递过来的参数，解析成Arguments对象格式</span><br>        parsedArgs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Arguments</span>(args);<br><br>        <span class="hljs-comment">//根据参数做相应处理</span><br>        ......<br><span class="hljs-comment">//创建应用程序进程</span><br>        pid = Zygote.forkAndSpecialize(parsedArgs.uid, parsedArgs.gid, parsedArgs.gids,<br>                                       parsedArgs.debugFlags, rlimits, parsedArgs.mountExternal, parsedArgs.seInfo,<br>                                       parsedArgs.niceName, fdsToClose, fdsToIgnore, parsedArgs.instructionSet,<br>                                       parsedArgs.appDataDir);<br>    &#125; <span class="hljs-keyword">catch</span> (ErrnoException ex) &#123;<br>    ......<br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <br>        <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//当前代码运行在子进程中</span><br>            zygoteServer.closeServerSocket();<br>            IoUtils.closeQuietly(serverPipeFd);<span class="hljs-comment">//关闭文件描述符</span><br>            serverPipeFd = <span class="hljs-literal">null</span>;<br>            handleChildProc(parsedArgs, descriptors, childPipeFd, newStderr);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">//当前代码运行在父进程中</span><br>            IoUtils.closeQuietly(childPipeFd);<br>            childPipeFd = <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">return</span> handleParentProc(pid, descriptors, serverPipeFd, parsedArgs);<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        IoUtils.closeQuietly(childPipeFd);<br>        IoUtils.closeQuietly(serverPipeFd);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该方法先获取启动参数和文件描述符，对其做处理后，调用<code>Zygote.forkAndSpecialize</code>方法创建应用程序进程，然后通过<code>pid</code>判断当前代码运行在哪个进程中，正常流程是创建成功，<code>pid=0</code>进入<code>handleChildProc</code>方法。</p><h2 id="2-3-应用程序进程的初始化"><a href="#2-3-应用程序进程的初始化" class="headerlink" title="2.3 应用程序进程的初始化"></a>2.3 应用程序进程的初始化</h2><p><code>handleChildProc</code>方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/core/java/com/android/internal/os/ZygoteConnection.java</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Handles post-fork setup of child proc, closing sockets as appropriate,</span><br><span class="hljs-comment">* reopen stdio as appropriate, and ultimately throwing MethodAndArgsCaller</span><br><span class="hljs-comment">* if successful or returning if failed.</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@throws</span> Zygote.MethodAndArgsCaller on success to</span><br><span class="hljs-comment">* trampoline to code that invokes static main.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleChildProc</span><span class="hljs-params">(Arguments parsedArgs,</span><br><span class="hljs-params">                             FileDescriptor[] descriptors, FileDescriptor pipeFd, PrintStream newStderr)</span><br>    <span class="hljs-keyword">throws</span> Zygote.MethodAndArgsCaller &#123;<br>    <br><span class="hljs-comment">// 关闭从zygote继承过来的Socket通信</span><br>    closeSocket();<br>    <span class="hljs-comment">//重定向std_xxx到descriptors数组中对应的文件描述符，然后关闭descriptors数组中的文件描述符</span><br>    <span class="hljs-keyword">if</span> (descriptors != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Os.dup2(descriptors[<span class="hljs-number">0</span>], STDIN_FILENO);<br>            Os.dup2(descriptors[<span class="hljs-number">1</span>], STDOUT_FILENO);<br>            Os.dup2(descriptors[<span class="hljs-number">2</span>], STDERR_FILENO);<br><br>            <span class="hljs-keyword">for</span> (FileDescriptor fd: descriptors) &#123;<br>                IoUtils.closeQuietly(fd);<br>            &#125;<br>            newStderr = System.err;<br>        &#125; <span class="hljs-keyword">catch</span> (ErrnoException ex) &#123;<br>            Log.e(TAG, <span class="hljs-string">&quot;Error reopening stdio&quot;</span>, ex);<br>        &#125;<br>    &#125;<br><span class="hljs-comment">//设置进程的命令行参数argv0为parsedArgs.niceName</span><br>    <span class="hljs-keyword">if</span> (parsedArgs.niceName != <span class="hljs-literal">null</span>) &#123;<br>        Process.setArgV0(parsedArgs.niceName);<br>    &#125;<br><br>    <span class="hljs-comment">//关闭Trace事件，表示不再跟踪当前的活动管理器事件</span><br>    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);<br>    <span class="hljs-comment">//invokeWith可能是一个用于指定子进程启动方式的参数</span><br>    <span class="hljs-keyword">if</span> (parsedArgs.invokeWith != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">//通过 WrapperInit.execApplication() 方法以另一个进程来执行应用程序进程</span><br>        WrapperInit.execApplication(parsedArgs.invokeWith,<br>                                    parsedArgs.niceName, parsedArgs.targetSdkVersion,<br>                                    VMRuntime.getCurrentInstructionSet(),<br>                                    pipeFd, parsedArgs.remainingArgs);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ZygoteInit.zygoteInit(parsedArgs.targetSdkVersion,<br>                              parsedArgs.remainingArgs, <span class="hljs-literal">null</span> <span class="hljs-comment">/* classLoader */</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>该方法主要用于配置子进程的初始环境，包括关闭父进程的通信管道、重定向标准输入输出和错误输出、设置子进程名称等。在完成这些操作后，根据不同的情况来启动子进程。</p><p>其中<code>execApplication</code>方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/com/android/internal/os/WrapperInit.java</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">* Executes a runtime application with a wrapper command.</span><br><span class="hljs-comment">* This method never returns.</span><br><span class="hljs-comment">*</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> invokeWith The wrapper command.</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> niceName The nice name for the application, or null if none.</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> targetSdkVersion The target SDK version for the app.</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> pipeFd The pipe to which the application&#x27;s pid should be written, or null if none.</span><br><span class="hljs-comment">* <span class="hljs-doctag">@param</span> args Arguments for &#123;<span class="hljs-doctag">@link</span> RuntimeInit#main&#125;.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">execApplication</span><span class="hljs-params">(String invokeWith, String niceName,</span><br><span class="hljs-params">                                   <span class="hljs-type">int</span> targetSdkVersion, String instructionSet, FileDescriptor pipeFd,</span><br><span class="hljs-params">                                   String[] args)</span> &#123;<br>    <span class="hljs-comment">//创建指令字符串并构造指令</span><br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">command</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(invokeWith);<br><br>    <span class="hljs-keyword">final</span> String appProcess;<br>    <span class="hljs-comment">//根据目标设备指令集选择相应的app_process可执行文件</span><br>    <span class="hljs-keyword">if</span> (VMRuntime.is64BitInstructionSet(instructionSet)) &#123;<br>        appProcess = <span class="hljs-string">&quot;/system/bin/app_process64&quot;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        appProcess = <span class="hljs-string">&quot;/system/bin/app_process32&quot;</span>;<br>    &#125;<br>    command.append(<span class="hljs-string">&#x27; &#x27;</span>);<br>    command.append(appProcess);<br><span class="hljs-comment">//指定--application参数来表示要执行的是应用程序</span><br>    command.append(<span class="hljs-string">&quot; /system/bin --application&quot;</span>);<br>    <span class="hljs-comment">//添加 --nice-name= 参数</span><br>    <span class="hljs-keyword">if</span> (niceName != <span class="hljs-literal">null</span>) &#123;<br>        command.append(<span class="hljs-string">&quot; &#x27;--nice-name=&quot;</span>).append(niceName).append(<span class="hljs-string">&quot;&#x27;&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//使用 com.android.internal.os.WrapperInit 作为应用程序的入口点类</span><br>    command.append(<span class="hljs-string">&quot; com.android.internal.os.WrapperInit &quot;</span>);<br>    <span class="hljs-comment">//将 pipeFd 转换为整数并添加到命令字符串中。该整数用于在应用程序启动后向父进程写入应用程序的PID</span><br>    command.append(pipeFd != <span class="hljs-literal">null</span> ? pipeFd.getInt$() : <span class="hljs-number">0</span>);<br>    command.append(<span class="hljs-string">&#x27; &#x27;</span>);<br>    command.append(targetSdkVersion);<br>    Zygote.appendQuotedShellArgs(command, args);<br>    preserveCapabilities();<br>    <span class="hljs-comment">//调用 Zygote.execShell() 方法执行构建好的命令</span><br>    Zygote.execShell(command.toString());<br>&#125;<br></code></pre></td></tr></table></figure><p>该方法通过构造命令来执行应用程序进程，其中<code>/system/bin/app_process32</code>这串字符有点眼熟啊！是在解析<code>init.rc</code>文件中出现过，也就是下面这个命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">service zygote <span class="hljs-regexp">/system/</span>bin<span class="hljs-regexp">/app_process64 -Xzygote /</span>system/bin --zygote --start-system-server<br></code></pre></td></tr></table></figure><p>好了，这部分点到为止。</p><p>查阅了网上的博客，都认为在<code>handleChildProc</code>方法之后，进入分支<code>zygoteInit</code>方法，该方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//路径：/frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">zygoteInit</span><span class="hljs-params">(<span class="hljs-type">int</span> targetSdkVersion, String[] argv,</span><br><span class="hljs-params">                                    ClassLoader classLoader)</span> <span class="hljs-keyword">throws</span> Zygote.MethodAndArgsCaller &#123;<br>    <span class="hljs-keyword">if</span> (RuntimeInit.DEBUG) &#123;<br>        Slog.d(RuntimeInit.TAG, <span class="hljs-string">&quot;RuntimeInit: Starting application from zygote&quot;</span>);<br>    &#125;<br><span class="hljs-comment">// 原生添加名为“ZygoteInit ”的systrace tag以标识进程初始化流程</span><br>    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="hljs-string">&quot;ZygoteInit&quot;</span>);<br>    RuntimeInit.redirectLogStreams();<span class="hljs-comment">//重定向log输出</span><br><br>    RuntimeInit.commonInit();<span class="hljs-comment">// 通用的一些初始化</span><br>    ZygoteInit.nativeZygoteInit();<span class="hljs-comment">//nativeZygoteInit函数中JNI调用启动进程的binder线程池</span><br>    RuntimeInit.applicationInit(targetSdkVersion, argv, classLoader);<br>&#125;<br></code></pre></td></tr></table></figure><p>该方法的主要工作是标识进程初始化流程，重定向log输出，通用初始化处理，启动<code>Binder</code>线程池，然后调用<code>applicationInit</code>方法。该方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/core/java/com/android/internal/os/RuntimeInit.java</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">applicationInit</span><span class="hljs-params">(<span class="hljs-type">int</span> targetSdkVersion, String[] argv, ClassLoader classLoader)</span><br>    <span class="hljs-keyword">throws</span> Zygote.MethodAndArgsCaller &#123;<br>    <span class="hljs-comment">//true代表应用程序退出时不调用AppRuntime.onExit()，否则会在退出前调用</span><br>    nativeSetExitWithoutCleanup(<span class="hljs-literal">true</span>);<br><br>    <span class="hljs-comment">//设置虚拟机的内存利用率参数值为0.75和SDK版本</span><br>    VMRuntime.getRuntime().setTargetHeapUtilization(<span class="hljs-number">0.75f</span>);<br>    VMRuntime.getRuntime().setTargetSdkVersion(targetSdkVersion);<br><br>    <span class="hljs-keyword">final</span> Arguments args;<br>    <span class="hljs-keyword">try</span> &#123;<br>        args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Arguments</span>(argv);<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException ex) &#123;<br>        Slog.e(TAG, ex.getMessage());<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 结束ZygoteInit的systrace tag</span><br>    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);<br><br>    invokeStaticMain(args.startClass, args.startArgs, classLoader);<br>&#125;<br></code></pre></td></tr></table></figure><p>关键的是<code>invokeStaticMain</code>方法，需要注意的是第一个参数<code>args.startClass</code>，就是文章开头提到的<code>entryPoint</code>参数，其值为<code>android.app.ActivityThread</code>。接下来我们查看<code>invokeStaticMain</code>方法，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/core/java/com/android/internal/os/RuntimeInit.java</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeStaticMain</span><span class="hljs-params">(String className, String[] argv, ClassLoader classLoader)</span><br>    <span class="hljs-keyword">throws</span> Zygote.MethodAndArgsCaller &#123;<br>    Class&lt;?&gt; cl;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//获取android.app.ActivityThread的类</span><br>        cl = Class.forName(className, <span class="hljs-literal">true</span>, classLoader);<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<br>            <span class="hljs-string">&quot;Missing class when invoking static main &quot;</span> + className,<br>            ex);<br>    &#125;<br><br>    Method m;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//获得android.app.ActivityThread中的main方法</span><br>        m = cl.getMethod(<span class="hljs-string">&quot;main&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; String[].class &#125;);<br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<br>            <span class="hljs-string">&quot;Missing static main on &quot;</span> + className, ex);<br>    &#125; <span class="hljs-keyword">catch</span> (SecurityException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<br>            <span class="hljs-string">&quot;Problem getting static main on &quot;</span> + className, ex);<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-variable">modifiers</span> <span class="hljs-operator">=</span> m.getModifiers();<br>    <span class="hljs-keyword">if</span> (! (Modifier.isStatic(modifiers) &amp;&amp; Modifier.isPublic(modifiers))) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<br>            <span class="hljs-string">&quot;Main method is not public and static on &quot;</span> + className);<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * This throw gets caught in ZygoteInit.main(), which responds</span><br><span class="hljs-comment">    * by invoking the exception&#x27;s run() method. This arrangement</span><br><span class="hljs-comment">    * clears up all the stack frames that were required in setting</span><br><span class="hljs-comment">    * up the process.</span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-comment">//通过抛出异常启动main方法</span><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Zygote</span>.MethodAndArgsCaller(m, argv);<br>&#125;<br></code></pre></td></tr></table></figure><p>这部分的代码同<a href="https://gal2xy.github.io/2023/07/04/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/#2-5-System-Server%E9%98%B6%E6%AE%B5">系统启动流程中SystemService阶段</a>的后一部分一致（其实从<code>zygoteInit</code>方法开始就一样了），这里就不再分析<code>MethodAndArgsCaller</code>方法，详细请见链接。接下来分析<code>ActivityThread</code>的<code>main</code>方法。</p><h2 id="2-4-应用程序进程的运行"><a href="#2-4-应用程序进程的运行" class="headerlink" title="2.4 应用程序进程的运行"></a>2.4 应用程序进程的运行</h2><p><code>ActivityThread</code>的<code>main</code>方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-comment">//路径：/frameworks/base/core/java/android/app/ActivityThread.java</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-comment">//开始跟踪，标记为&quot;ActivityThreadMain&quot;</span><br>    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="hljs-string">&quot;ActivityThreadMain&quot;</span>);<br>    <br>    <span class="hljs-comment">//启动采样分析器集成，用于性能分析</span><br>    SamplingProfilerIntegration.start();<br><br>    <span class="hljs-comment">//关闭CloseGuard，默认情况下它是启用的，但在此处将其禁用。CloseGuard用于检测资源没有正确关闭的情况</span><br>    CloseGuard.setEnabled(<span class="hljs-literal">false</span>);<br>    <br><span class="hljs-comment">//初始化当前用户的环境变量</span><br>    Environment.initForCurrentUser();<br><br>    <span class="hljs-comment">//设置事件日志的报告器，用于在libcore中记录事件日志</span><br>    EventLogger.setReporter(<span class="hljs-keyword">new</span> <span class="hljs-title class_">EventLoggingReporter</span>());<br><br>    <span class="hljs-comment">//寻找CA证书的存储位置并设置为默认的CA证书存储位置</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">File</span> <span class="hljs-variable">configDir</span> <span class="hljs-operator">=</span> Environment.getUserConfigDirectory(UserHandle.myUserId());<br>    TrustedCertificateStore.setDefaultUserDirectory(configDir);<br>    <br><span class="hljs-comment">//设置当前进程的argv[0]值为&quot;&lt;pre-initialized&gt;&quot;</span><br>    Process.setArgV0(<span class="hljs-string">&quot;&lt;pre-initialized&gt;&quot;</span>);<br>    <br><span class="hljs-comment">//创建并启动主线程的loop消息循环</span><br>    Looper.prepareMainLooper();<br>    <br><span class="hljs-comment">//创建线程并将当前线程附加到ActivityThread，参数false表示不使用新线程</span><br>    <span class="hljs-type">ActivityThread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActivityThread</span>();<br>    thread.attach(<span class="hljs-literal">false</span>);<br>    <br><span class="hljs-comment">//如果sMainThreadHandler为空，则将其设置为ActivityThread的Handler。</span><br>    <span class="hljs-keyword">if</span> (sMainThreadHandler == <span class="hljs-literal">null</span>) &#123;<br>        sMainThreadHandler = thread.getHandler();<br>    &#125;<br>    <br><span class="hljs-comment">//永假，可忽略</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-literal">false</span>) &#123;<br>        Looper.myLooper().setMessageLogging(<span class="hljs-keyword">new</span> <span class="hljs-title class_">LogPrinter</span>(Log.DEBUG, <span class="hljs-string">&quot;ActivityThread&quot;</span>));<br>    &#125;<br><br>    <span class="hljs-comment">//结束跟踪</span><br>    Trace.traceEnd(Trace.TRACE_TAG_ACTIVITY_MANAGER);<br>    <br>    <span class="hljs-comment">//开始主线程的消息循环</span><br>    Looper.loop();<br><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Main thread loop unexpectedly exited&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>该方法初始化一些环境变量和设置，并且创建了一个<code>ActivityThread</code>对象，然后进入主线程的消息循环。其中<code>Handler</code>是一个消息机制，用于同进程的线程间通信。</p><p>至此，应用程序进程就创建完成了并且运行了主线程的管理类<code>ActivityThread</code>。</p><h1 id="三、小结"><a href="#三、小结" class="headerlink" title="三、小结"></a>三、小结</h1><p>应用程序进程启动过程主要可以分为以下几部分：</p><ol><li><code>AMS</code>发送启动应用程序进程请求：<code>AMS</code>首先会调用<code>startProcessLocked</code>方法，最终通过<code>openZygoteSocketIfNeeded</code>方法与<code>Zygote</code> 的Socket建立连接，并通过<code>zygoteSendArgsAndGetResult</code>与进程进行通信，发送请求。</li><li><code>Zygote</code>进程接收请求并创建应用程序进程：<code>Zygote</code>通过<code>runSelectLoop</code>方法接收到<code>AMS</code>的请求，然后调用<code>runOnce</code>方法，通过<code>forkAndSpecialize</code>方法创建应用程序进程。</li><li>应用程序进程初始化和运行：应用程序进程创建完成后，首先会通过<code>handleParentProc</code>开始进行初始化工作，启动<code>Binder</code>线程池，最后通过抛出异常的方式调用<code>MethodAndArgsCaller</code>来启动应用程序进程，即进入到<code>ActivityThread</code>的<code>main</code>方法，创建并启动主线程的消息循环，进入阻塞状态。</li></ol><p>整个主线流程可用下面这张图概括（来自刘望舒博客的图片）：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307171046842.png"></p><hr><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/411198603">Android 应用启动全流程分析（源码深度剖析和 Systrace 展示）- 上篇 - 知乎 (zhihu.com)</a></p><p><a href="http://gityuan.com/2016/03/26/app-process-create/">理解Android进程创建流程 - Gityuan博客 | 袁辉辉的技术博客</a></p><p><a href="http://liuwangshu.cn/framework/applicationprocess/1.html">Android应用程序进程启动过程（前篇） | BATcoder - 刘望舒 (liuwangshu.cn)</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Android源码解析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Pixel4刷Lineage OS和root</title>
    <link href="/2023/07/15/Pixel4%E5%88%B7Lineage%20OS/"/>
    <url>/2023/07/15/Pixel4%E5%88%B7Lineage%20OS/</url>
    
    <content type="html"><![CDATA[<h1 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h1><p>刷机前建议先看看这个视频（<a href="https://www.bilibili.com/video/BV1BY4y1H7Mc/?buvid=XX71D2975B6460DDA13ACF6C397DF2E78AA3B&is_story_h5=false&mid=rVd4HoESkEBG2mkNA+9sTQ==&p=1&plat_id=116&share_from=ugc&share_medium=android&share_plat=android&share_session_id=b77b1884-2159-47d3-8b5d-7094160a3811&share_source=QQ&share_tag=s_i&timestamp=1689348675&unique_k=AJdJ9pW&up_id=25876945&vd_source=93c3d93ed7e80c0e051905699e1c294f">玩机必看！带你入坑安卓刷机，小白也能看懂的ROOT基础指南来啦！_哔哩哔哩_bilibili</a>），了解刷机的一些基础知识。<code>pixle</code>刷<code>LineageOS</code>系统的话可以参考：<a href="https://www.bilibili.com/video/BV1fR4y1v7qf/?buvid=XX71D2975B6460DDA13ACF6C397DF2E78AA3B&is_story_h5=false&mid=rVd4HoESkEBG2mkNA+9sTQ==&p=1&plat_id=116&share_from=ugc&share_medium=android&share_plat=android&share_session_id=ec2eeed6-587f-4461-a521-457392a009ec&share_source=QQ&share_tag=s_i&timestamp=1689396221&unique_k=3rdkpc7&up_id=3493094532057146&vd_source=93c3d93ed7e80c0e051905699e1c294f">两条命令教你刷入LineageOS，小白也能上手！_哔哩哔哩_bilibili</a>。</p><h1 id="二、Pixel4刷LineageOS系统及MindTheGapps"><a href="#二、Pixel4刷LineageOS系统及MindTheGapps" class="headerlink" title="二、Pixel4刷LineageOS系统及MindTheGapps"></a>二、Pixel4刷LineageOS系统及MindTheGapps</h1><h2 id="2-1-准备工作"><a href="#2-1-准备工作" class="headerlink" title="2.1 准备工作"></a>2.1 准备工作</h2><ol><li><p>在官网中找对应设备的总页面：<a href="https://wiki.lineageos.org/devices/">Devices | LineageOS Wiki</a>，判断设备是否与页面中手机展示信息相符。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307152231613.png"></p></li><li><p>下载<code>LineageOS</code>的<code>zip</code>和<code>boot.img</code>：<a href="https://download.lineageos.org/devices/flame/builds">LineageOS Downloads</a>下载最新的配套的<code>boot.img</code>和<code>lineage-xxxxxxx-nightly-flame-signed.zip</code>（因为只有最新的🤣）</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307152231549.png"></p></li><li><p>下载Google apps（MindTheGapps）：<a href="https://wiki.lineageos.org/gapps">Google apps | LineageOS Wiki</a>，选择移动版。根据你下的LineageOS的包下对应的（例如Lineage 20安卓版本是13，所以选择MindTheGapps-13xxxx）,至于是<code>arm</code>还是<code>arm64</code>则根据你的手机的<code>CPU</code>架构来选择。</p><p>在<code>cmd</code>中使用下列指令查看设备的CPU架构：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">adb shell getprop ro<span class="hljs-selector-class">.product</span><span class="hljs-selector-class">.cpu</span>.abi<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307152232080.png"></p><p>选择镜像网站下载比较快（另一个网站尝试点击下载是无反应的）</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307152232488.png"></p></li><li><p>确保电脑端下载了<code>platform-tools</code>，即在命令窗口中能够使用<code>adb</code>和<code>fastboot</code>指令。</p></li><li><p>手机端开启USB调试模式</p></li></ol><p><strong>在开始操作前，请先阅读一遍官网给的刷机教程（<a href="https://wiki.lineageos.org/devices/flame/install">Install LineageOS on flame | LineageOS Wiki</a>）！！！</strong></p><p><strong>在开始操作前，请先阅读一遍官网给的刷机教程（<a href="https://wiki.lineageos.org/devices/flame/install">Install LineageOS on flame | LineageOS Wiki</a>）！！！</strong></p><p><strong>在开始操作前，请先阅读一遍官网给的刷机教程（<a href="https://wiki.lineageos.org/devices/flame/install">Install LineageOS on flame | LineageOS Wiki</a>）！！！</strong></p><h2 id="2-2-刷入LineageOS"><a href="#2-2-刷入LineageOS" class="headerlink" title="2.2 刷入LineageOS"></a>2.2 刷入LineageOS</h2><p>首先在手机端解<code>OEM</code>锁（在开发者选项里），然后电脑端执行下列命令即可解<code>BootLoader</code>锁：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">adb reboot bootloader</span><br><span class="hljs-attribute">fastboot devices</span><br><span class="hljs-attribute">fastboot flashing unlock</span><br></code></pre></td></tr></table></figure><p>解完<code>BootLoader</code>锁之后应该还是在<code>fastboot</code>模式下（没记错的话，如果不是就执行<code>fastboot reboot bootloader</code>），执行下列命令刷入<code>boot.img</code>：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">fastboot flash boot <span class="hljs-attr">--slot</span> <span class="hljs-attribute">all</span> boot<span class="hljs-selector-class">.img</span>所在路径<br></code></pre></td></tr></table></figure><p>这是使用<code>--slot all</code>是因为下面这个原因，当然也可以不添加，倘若报<code>no valid slot to boot</code>，请添加该参数并重新执行该指令（参考：<a href="https://forum.xda-developers.com/t/no-valid-slot-to-boot-any-way-to-back-up-data.4193883/">No valid slot to boot - any way to back up data? | XDA Forums (xda-developers.com)</a>）。</p><blockquote><p>从Android7开始，引入了新的OTA升级方式A&#x2F;B System Updates，这种升级方式将boot、system等分区为两套，叫做slot A和slot B。在fastboot模式下可以看到当前使用的是哪个分区。</p></blockquote><p>然后执行下列指令清除用户数据：</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">fastboot <span class="hljs-built_in">erase</span> userdata<br></code></pre></td></tr></table></figure><p>执行下列指令进入<code>fastbootd</code>模式:</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">fastboot reboot fastboot</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307152232204.jpg"></p><p>选择<code>Enter recovery</code>进入到<code>recovery</code>模式，然后选择<code>Apply update</code>，继续选择<code>Apply from ADB</code>，在手机底部看到<code>ADB Sideload</code>后，就可以输入下列命令刷入<code>lineage</code>系统：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">adb</span> sideload lineagexxx.zip所在路径<br></code></pre></td></tr></table></figure><p>这个会卡在47%，不要急，执行完后手机底部会有命令显示<code>Install completed</code>。</p><p>刷入<code>lineag</code>系统后，同样的方式进入到<code>Apply from ADB</code>，执行下列命令刷入<code>MindTheGapps</code>：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">adb</span> sideload MindTheGappsxxx.zip所在路径<br></code></pre></td></tr></table></figure><p>关键的来了！它会报错，如图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307152233262.jpg"></p><p>不要管它，点击<code>Yes</code>继续安装，可以参考官方文档，如下图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307152233793.jpg"></p><p>安装成功如图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307152233803.jpg"></p><p>最后选择<code>reboot system now</code>就大功告成了。</p><p><code>MindTheGapps</code>安装和没有安装的区别如图所示：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307152233855.jpg"></p><h1 id="三、Pixel4刷root"><a href="#三、Pixel4刷root" class="headerlink" title="三、Pixel4刷root"></a>三、Pixel4刷root</h1><h2 id="3-1-准备工作"><a href="#3-1-准备工作" class="headerlink" title="3.1 准备工作"></a>3.1 准备工作</h2><ol><li>下载<code>Magisk</code>（<a href="https://github.com/topjohnwu/Magisk/releases%EF%BC%89">https://github.com/topjohnwu/Magisk/releases）</a></li><li>刷<code>LineageOS</code>时的<code>boot.img</code></li></ol><h2 id="3-2-刷入root"><a href="#3-2-刷入root" class="headerlink" title="3.2 刷入root"></a>3.2 刷入root</h2><p>先通过指令在手机端安装<code>Magisk</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">adb <span class="hljs-keyword">install</span> Magisk路径(电脑端)<br></code></pre></td></tr></table></figure><p>然后将<code>boot.img</code>导入手机端，指令如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gradle">adb <span class="hljs-keyword">push</span> boot.img路径(电脑端) <span class="hljs-regexp">/storage/</span>emulated<span class="hljs-regexp">/0/</span>Download(手机端，这里选择的是Magisk的下载路径，可以随意)<br></code></pre></td></tr></table></figure><p>手机端打开<code>Magisk</code>，点击安装，选择<code>修补boot镜像中的vbmeta</code>，再选择<code>选择并修补一个文件</code>，选择刚才传入的<code>boot.img</code>。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307152233622.png"></p><p>修补后会在<code>boot.img</code>的同文件夹下生成一个<code>magisk_patched_xxx.img</code>文件，把<code>magisk_patched.img</code>传到电脑端，使用下列指令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">adb pull <span class="hljs-regexp">/storage/</span>emulated<span class="hljs-regexp">/0/</span>Download/xxx(手机端) \xxx(电脑端)<br></code></pre></td></tr></table></figure><p>然后使用下列指令使手机进入<code>bootloader</code>：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">adb reboot bootloader</span><br></code></pre></td></tr></table></figure><p>将修补的<code>boot.img</code>写回<code>boot</code>分区并重启手机：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">fastboot flash boot (<span class="hljs-attr">--slot</span> <span class="hljs-attribute">all</span>) magisk_patchedxxx<span class="hljs-selector-class">.img</span>所在路径<br>fastboot reboot<br></code></pre></td></tr></table></figure><p>打开<code>Magisk</code>可以发现超级用户和模块可以使用了，即<code>root</code>成功。</p><h1 id="四、添加BurpSuite证书"><a href="#四、添加BurpSuite证书" class="headerlink" title="四、添加BurpSuite证书"></a>四、添加BurpSuite证书</h1><p>直接安装证书只能安装进用户里，而有些 app 只信任系统的根证书，所以需要将 Burp 的 CA 证书添加到系统根证书里。</p><p>首先导出 Burp 的证书，然后执行下面指令：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">openssl <span class="hljs-keyword">x</span><span class="hljs-number">509</span> -inform DER -subject_hash_old -in 证书路径<br></code></pre></td></tr></table></figure><p>第一行的数字就是哈希值。然后执行</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">openssl</span> x509 -inform DER -in burp.cer -text &gt; 所得到的哈希值.<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>用记事本编辑证书，将<code>-----BEGIN CERTIFICATE-----</code>到<code>-----END CERTIFICATE-----</code>的部分（也就是证书部分）放到文件最前面。</p><p>执行</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">adb remount<span class="hljs-regexp">//</span>重新挂载设备的文件系统，将文件系统从只读模式切换为可读写模式<br><span class="hljs-regexp">//</span>如果adb remount失败，请先adb root再尝试<br>adb push cert<span class="hljs-regexp">/xxxx.0 /</span>sdcard<span class="hljs-regexp">/Download/</span><span class="hljs-regexp">//</span>将得到的.<span class="hljs-number">0</span>文件推入手机中<br></code></pre></td></tr></table></figure><p>adb root无效的话，可能是你所刷的系统带有Google API，所以不完全开放root权限，详细可参考<a href="https://developer.android.google.cn/studio/run/managing-avds?hl=zh-cn">创建和管理虚拟设备  | Android Studio  | Android Developers (google.cn)</a>，关键说明如下：</p><blockquote><p>为确保应用安全并且与实体设备的体验一致，包含 Google Play 商店的系统映像已使用发布密钥签名，这意味着，您无法获得这些映像的提升权限 (root)。</p><p>如果您需要使用提升权限 (root) 来帮助您排查应用问题，您可以使用不包含 Google 应用或服务的 Android 开源项目 (AOSP) 系统映像。然后，您可以使用 <code>adb root</code> 和 <code>adb unroot</code> 命令在普通权限和提升权限之间切换：</p></blockquote><p>如果想要完全获取root权限，可以寻找其他工具（暂时没找到能用的），如果只是为了让证书装在系统根证书目录下，可以使用<a href="https://github.com/NVISOsecurity/MagiskTrustUserCerts">AlwaysTurstUserCerts</a>插件。</p><p>接着执行下列命令</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">adb shell  <span class="hljs-regexp">//</span>进入shell模式<br>cp <span class="hljs-regexp">/sdcard/</span>Download<span class="hljs-regexp">/xxxx.0 /</span>system<span class="hljs-regexp">/etc/</span>security<span class="hljs-regexp">/cacerts/</span> <span class="hljs-regexp">//</span>将证书复制到系统根证书目录下<br>chmod <span class="hljs-number">644</span> <span class="hljs-regexp">/system/</span>etc<span class="hljs-regexp">/security/</span>cacerts<span class="hljs-regexp">/xxxx.0/</span><span class="hljs-regexp">/设置文件权限</span><br></code></pre></td></tr></table></figure><p>现在burp的证书就在系统根证书下了。我试了下，重启后这个文件并没有消失，如果消失了就 adb remount, adb shell, cp 与 chmod 四步就行了。</p><p><strong>注意！！！在抓包前，先把手机时间调到当前时间，否则可能会出现抓包异常！！！（稀里糊涂的我再次刷机了）</strong></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>刷机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android系统启动流程</title>
    <link href="/2023/07/04/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <url>/2023/07/04/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="一、引言"><a href="#一、引言" class="headerlink" title="一、引言"></a>一、引言</h1><p>在分析Android系统架构的文章中，我们只是静态分析了Android系统架构，虽然可以了解Android架构地层次和功能，但不足以了解Android整个系统运行时各层次之间的信息传递和交互，即不能真正看穿Android的运行机理，故还需进一步学习。</p><p>所以新开一篇文章结合Android 8.0源码来讲述Android系统启动流程。</p><h1 id="二、Android系统启动流程"><a href="#二、Android系统启动流程" class="headerlink" title="二、Android系统启动流程"></a>二、Android系统启动流程</h1><p>这是一张Android系统启动的流程图（来自gityuan）。</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307041429364.jpg"></p><p>根据上图，整个过程可分为以下几个阶段：</p><ol><li><strong>Boot Loader阶段</strong>：设备加电后，首先运行的是Boot Loader程序。Boot Loader主要负责硬件初始化和设备的引导操作。</li><li><strong>Kernel阶段</strong>：当Boot Loader完成初始化操作后，它会将控制权交给内核。内核是Android系统的核心组件，负责管理系统资源、调度进程等。在这个阶段，内核会加载文件系统和驱动程序，为最终系统的启动做好准备。</li><li><strong>Init进程阶段</strong>：在Kernel阶段完成后，Init进程就会被启动。Init进程是用户空间的第一个进程，负责启动系统中其他所有的进程。在这个阶段，Init进程会依次执行init.rc脚本中定义的各项任务，包括挂载文件系统、启动服务等。</li><li><strong>Zygote进程阶段</strong>：在Init进程启动完成后，Android系统会创建一个名为Zygote的进程，他是所有Java应用程序的孵化器。Zygote进程会预加载大量的Java类和资源，以提高应用程序的启动速度。当用户启动新的应用程序时，Zygote进程会复制自身并生成新的虚拟机实例，然后加载对应应用程序的代码并执行。</li><li><strong>System Server阶段</strong>：在Zygote进程启动完成后，System Server进程就会被启动。System Server是整个Android系统中非常重要的一个进程，负责启动并管理多种系统服务，例如Activity Manager、Window Manager、PackageManager等。在这个阶段，用户才可以看到开始界面，开始使用手机。</li><li><strong>Launcher启动阶段</strong>：在System Server启动完成后，系统会开始启动Android应用程序。在这个阶段，启动器会展示所有已安装的应用程序，用户可以选择启动所需应用程序。</li></ol><h2 id="2-1-Boot-Loader阶段"><a href="#2-1-Boot-Loader阶段" class="headerlink" title="2.1 Boot Loader阶段"></a>2.1 Boot Loader阶段</h2><p>当手机处于关机状态时，长按Power键开机，引导芯片开始从固化在ROM 里的预设代码开始执行，将引导程序（Boot Loader）加载到 RAM中并执行，主要任务是将操作系统加载到内存中并建立好操作系统运行的环境，然后将控制权转移到操作系统内核。</p><h2 id="2-2-Kernel阶段"><a href="#2-2-Kernel阶段" class="headerlink" title="2.2 Kernel阶段"></a>2.2 Kernel阶段</h2><p>Kernel阶段会启动Kernel的swapper进程(pid&#x3D;0)，该进程又称为idle进程，是Kernel开创的第一个进程，用于初始化进程管理、内存管理，加载驱动等相关工作，以及启动kthreadd进程（pid&#x3D;2），该进程是Linux系统的内核进程，是所有内核进程的鼻祖，会创建内核工作线程kworkder，软中断线程ksoftirqd，thermal等内核守护进程。Kernel完成这些工作后，会在系统文件中寻找init.rc文件，并启动init进程。</p><h2 id="2-3-Init进程阶段"><a href="#2-3-Init进程阶段" class="headerlink" title="2.3 Init进程阶段"></a>2.3 Init进程阶段</h2><p><code>init</code>进程（pid&#x3D;1）是<code>Android</code>系统中用户空间的第一个进程，是所有用户进程的鼻祖。init源码在<code>system/core/init/init.cpp</code>路径下，关键代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span> </span>&#123;<br>    ......<br><span class="hljs-comment">// 添加环境变量</span><br>    <span class="hljs-built_in">add_environment</span>(<span class="hljs-string">&quot;PATH&quot;</span>, _PATH_DEFPATH);<br>......<br><br>    <span class="hljs-keyword">if</span> (is_first_stage) &#123;<br>        ......<br>        <span class="hljs-comment">// 创建和挂载启动所需要的文件目录</span><br>        <span class="hljs-built_in">mount</span>(<span class="hljs-string">&quot;tmpfs&quot;</span>, <span class="hljs-string">&quot;/dev&quot;</span>, <span class="hljs-string">&quot;tmpfs&quot;</span>, MS_NOSUID, <span class="hljs-string">&quot;mode=0755&quot;</span>);<br>        ......<br>        <span class="hljs-comment">// 初始化Kernel的日志</span><br>        <span class="hljs-built_in">InitKernelLogging</span>(argv);<br>        ......<br>    &#125;<br>    ......<br><span class="hljs-comment">// 对属性服务进行初始化</span><br>    <span class="hljs-built_in">property_init</span>();<br><br>    ......<br>    <span class="hljs-comment">// 设置子进程信号处理，如果子进程异常退出，init进程会调用该函数中设定的信号处理函数来进行处理</span><br>    <span class="hljs-built_in">signal_handler_init</span>();<br>......<br>    <span class="hljs-comment">//启动属性服务</span><br>    <span class="hljs-built_in">start_property_service</span>();<br>    ......<br><br>    <span class="hljs-keyword">if</span> (bootscript.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-comment">//解析 init.rc配置文件</span><br>        parser.<span class="hljs-built_in">ParseConfig</span>(<span class="hljs-string">&quot;/init.rc&quot;</span>);<br>        ......<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        ......<br>    &#125;<br><br>    ......<br>    <br>    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-comment">//重启死去的进程</span><br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>而在解析<code>init.rc</code>（<code>system/core/rootdir/init.rc</code>）过程中会孵化<code>zygote</code>进程。</p><p>从代码中可以看出<code>init</code>进程阶段主要做了以下事情：</p><ol><li>创建和挂载启动所需要的文件目录</li><li>初始化和启动属性服务</li><li>解析<code>init.rc</code>配置文件并孵化<code>zygote</code>进程</li></ol><h2 id="2-4-Zygote进程阶段"><a href="#2-4-Zygote进程阶段" class="headerlink" title="2.4 Zygote进程阶段"></a>2.4 Zygote进程阶段</h2><p>在<code>Android</code>系统中，<code>DVM</code>和<code>ART</code>、应用程序进程以及运行系统的关键服务的<code>SystemServer</code>进程都是由<code>Zygote</code>进程创建的，我们也将它称为孵化器。它通过fork（复制进程）来创建<strong>应用进程和<code>SystemServer</code>进程</strong>，由于<code>Zygote</code>进程在启动时会创建<code>DVM</code>或者<code>ART</code>，因此通过fork而创建的应用程序进程和<code>SystemServer</code>进程可以在内部获取一个<code>DVM</code>或者<code>ART</code>的实例副本。</p><p>通过解析<code>init.rc</code>配置文件可以知道<code>init</code>启动<code>Zygote</code>时主要是调用<code>app_main.cpp</code>的<code>main</code>方法（之后再分析），所在路径为<code>frameworks/base/cmds/app_process/app_main.cpp</code>。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* <span class="hljs-type">const</span> argv[])</span></span><br><span class="hljs-function"></span>&#123;<br>    ......<br>    <span class="hljs-keyword">while</span> (i &lt; argc) &#123;<br>        <span class="hljs-type">const</span> <span class="hljs-type">char</span>* arg = argv[i++];<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(arg, <span class="hljs-string">&quot;--zygote&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//如果当前运行在zygote进程中，则将zygote设置为true</span><br>            zygote = <span class="hljs-literal">true</span>;<br>            niceName = ZYGOTE_NICE_NAME;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(arg, <span class="hljs-string">&quot;--start-system-server&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-comment">//如果当前运行在SystemServer进程中，则将startSystemServer设置为true</span><br>            startSystemServer = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(arg, <span class="hljs-string">&quot;--application&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>            application = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strncmp</span>(arg, <span class="hljs-string">&quot;--nice-name=&quot;</span>, <span class="hljs-number">12</span>) == <span class="hljs-number">0</span>) &#123;<br>            niceName.<span class="hljs-built_in">setTo</span>(arg + <span class="hljs-number">12</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strncmp</span>(arg, <span class="hljs-string">&quot;--&quot;</span>, <span class="hljs-number">2</span>) != <span class="hljs-number">0</span>) &#123;<br>            className.<span class="hljs-built_in">setTo</span>(arg);<br>            <span class="hljs-keyword">break</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            --i;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    ......<br>    <br>    <span class="hljs-keyword">if</span> (zygote) &#123;<br>        <span class="hljs-comment">//启动Zygote进程</span><br>        runtime.<span class="hljs-built_in">start</span>(<span class="hljs-string">&quot;com.android.internal.os.ZygoteInit&quot;</span>, args, zygote);<br>    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (className) &#123;<br>        runtime.<span class="hljs-built_in">start</span>(<span class="hljs-string">&quot;com.android.internal.os.RuntimeInit&quot;</span>, args, zygote);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">fprintf</span>(stderr, <span class="hljs-string">&quot;Error: no class name or --zygote supplied.\n&quot;</span>);<br>        <span class="hljs-built_in">app_usage</span>();<br>        <span class="hljs-built_in">LOG_ALWAYS_FATAL</span>(<span class="hljs-string">&quot;app_process: no class name or --zygote supplied.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>zygote</code>进程都是通过fork自身来创建子进程的，这样<code>Zygote</code>进程以及它的子进程都可以进入<code>app_main.cpp</code>的<code>main</code>函数，因此为了区分<code>main</code>函数运行在哪个进程中，对<code>argc</code>进行了判断。</p><p>接下来查看<code>runtime.start()</code>这个方法，这个方法属于<code>AppRuntime</code>类，而这个类又继承<code>AndroidRuntime</code>，路径为<code>/frameworks/base/core/jni/AndroidRuntime.cpp</code>，位于第994行。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AndroidRuntime::start</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span>* className, <span class="hljs-type">const</span> Vector&lt;String8&gt;&amp; options, <span class="hljs-type">bool</span> zygote)</span></span><br><span class="hljs-function"></span>&#123;<br>    ......<br><br>    <span class="hljs-comment">/* 启动java虚拟机 */</span><br>    JniInvocation jni_invocation;<br>    jni_invocation.<span class="hljs-built_in">Init</span>(<span class="hljs-literal">NULL</span>);<br>    JNIEnv* env;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">startVm</span>(&amp;mJavaVM, &amp;env, zygote) != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-built_in">onVmCreated</span>(env);<br><br>    <span class="hljs-comment">//为java虚拟机注册JNI方法</span><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">startReg</span>(env) &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-built_in">ALOGE</span>(<span class="hljs-string">&quot;Unable to register all android natives\n&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    ......<br>    <span class="hljs-comment">//className为com.android.internal.os.ZygoteInit</span><br>    classNameStr = env-&gt;<span class="hljs-built_in">NewStringUTF</span>(className);<br>    ......<br>    <span class="hljs-comment">//将全限定类名className转成路径</span><br>    <span class="hljs-type">char</span>* slashClassName = <span class="hljs-built_in">toSlashClassName</span>(className);<br>    <span class="hljs-comment">//通过slashClassName找到ZygoteInit</span><br>    jclass startClass = env-&gt;<span class="hljs-built_in">FindClass</span>(slashClassName);<br>    <span class="hljs-keyword">if</span> (startClass == <span class="hljs-literal">NULL</span>) &#123;<br>        <span class="hljs-built_in">ALOGE</span>(<span class="hljs-string">&quot;JavaVM unable to locate class &#x27;%s&#x27;\n&quot;</span>, slashClassName);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//找到ZygoteInit的main方法</span><br>        jmethodID startMeth = env-&gt;<span class="hljs-built_in">GetStaticMethodID</span>(startClass, <span class="hljs-string">&quot;main&quot;</span>,<br>            <span class="hljs-string">&quot;([Ljava/lang/String;)V&quot;</span>);<br>        <span class="hljs-keyword">if</span> (startMeth == <span class="hljs-literal">NULL</span>) &#123;<br>            <span class="hljs-built_in">ALOGE</span>(<span class="hljs-string">&quot;JavaVM unable to find main() in &#x27;%s&#x27;\n&quot;</span>, className);<br>            <span class="hljs-comment">/* keep going */</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">//通过JNI调用ZygoteInit的main方法</span><br>            env-&gt;<span class="hljs-built_in">CallStaticVoidMethod</span>(startClass, startMeth, strArray);<br>......    <br>&#125;<br></code></pre></td></tr></table></figure><p>首先通过<code>startVm</code>方法创建java虚拟机，然后通过<code>startReg</code>方法为Java虚拟机注册<code>JNI</code>方法，将<code>className</code>转成路径后，即找到<code>ZygoteInit</code>类所在位置，然后通过<code>GetStaticMethodID</code>获取<code>main</code>方法，最后通过<code>CallStaticVoidMethod</code>方法启动<code>ZygoteInit</code>。</p><p>值得注意的是，这里是通过<code>JNI</code>调用<code>ZygoteInit</code>的<code>main</code>方法，查看<code>ZygoteInit</code>也可以发现是java语言编写的。当前<code>Zygote</code>的运行逻辑在<code>Native</code>层中，通过<code>JNI</code>调用java代码后，<code>Zygote</code>就进入到了java框架层！</p><p>继续查看<code>ZygoteInit</code>，所在位置为<code>frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String argv[])</span> &#123;<br>    ......<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        ......<br><span class="hljs-comment">//创建一个server端的socket,socketName的值为zygote</span><br>        zygoteServer.registerServerSocket(socketName);<br><br>        <span class="hljs-keyword">if</span> (!enableLazyPreload) &#123;<br>            ......<br>            <span class="hljs-comment">//预加载类和资源</span><br>            preload(bootTimingsTraceLog);<br>            ......<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            Zygote.resetNicePriority();<br>        &#125;<br><br>        ......<br>            <br>        <span class="hljs-keyword">if</span> (startSystemServer) &#123;<br>            <span class="hljs-comment">//启动systemServer进程</span><br>            startSystemServer(abiList, socketName, zygoteServer);<br>        &#125;<br><br>        Log.i(TAG, <span class="hljs-string">&quot;Accepting command socket connections&quot;</span>);<br>        <span class="hljs-comment">//等待AMS请求</span><br>        zygoteServer.runSelectLoop(abiList);<br>        zygoteServer.closeServerSocket();<br>    &#125; <span class="hljs-keyword">catch</span> (Zygote.MethodAndArgsCaller caller) &#123;<br>        caller.run();<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>        Log.e(TAG, <span class="hljs-string">&quot;System zygote died with exception&quot;</span>, ex);<br>        zygoteServer.closeServerSocket();<br>        <span class="hljs-keyword">throw</span> ex;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>首先通过<code>registerServerSocket</code>方法来创建一个名为<code>zygote</code>的<code>Server</code>端的<code>socket</code>，用于等待<code>ActivityManagerService</code>请求<code>Zygote</code>来创建新的应用程序进程。然后预加载类和资源。启动<code>systemServer</code>进程之后，通过<code>runSelectLoop</code>方法等待<code>AMS</code>请求创建新的应用程序进程。</p><p>总结一下整个<code>Zygote</code>进程阶段主要的任务：</p><ol><li>创建<code>AndroidRuntime</code>并调用其<code>start</code>方法，启动<code>Zygote</code>进程。</li><li>创建java虚拟机并注册<code>JNI</code>方法。</li><li>通过<code>JNI</code>调用<code>ZygoteInit</code>的<code>main</code>方法，使<code>Zygote</code>从<code>Native</code>层进入到<code>java</code>框架层。</li><li>通过<code>registerServerSocket</code>方法创建服务器端<code>Socket</code>，并通过<code>runSelectLoop</code>方法等待<code>AMS</code>请求来创建新的应用程序进程。</li><li>启动<code>SystemServer</code>进程。</li></ol><h2 id="2-5-System-Server阶段"><a href="#2-5-System-Server阶段" class="headerlink" title="2.5 System Server阶段"></a>2.5 System Server阶段</h2><p><code>SystemServer</code>启动代码仍在<code>frameworks/base/core/java/com/android/internal/os/ZygoteInit.java</code>中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">startSystemServer</span><span class="hljs-params">(String abiList, String socketName, ZygoteServer zygoteServer)</span><br>    <span class="hljs-keyword">throws</span> Zygote.MethodAndArgsCaller, RuntimeException &#123;<br>    ......<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        ......<br><br>        <span class="hljs-comment">/* 从Zygote进程中fork出SystemServer进程 */</span><br>        pid = Zygote.forkSystemServer(<br>            ......);<br>    &#125; <span class="hljs-keyword">catch</span> (IllegalArgumentException ex) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(ex);<br>    &#125;<br>        <br>    <span class="hljs-comment">/* For child process */</span><br>    <span class="hljs-comment">//子进程是否运行在SystemServer进程中</span><br>    <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (hasSecondZygote(abiList)) &#123;<br>            waitForSecondaryZygote(socketName);<br>        &#125;<br><span class="hljs-comment">//关闭Zygote进程创建的Socket</span><br>        zygoteServer.closeServerSocket();<br>        <span class="hljs-comment">//启动SystemServer进程</span><br>        handleSystemServerProcess(parsedArgs);<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>由于<code>SystemServer</code>进程fork了<code>Zygote</code>进程，所以该进程也会得到<code>Zygote</code>进程创建的<code>Socket</code>，这个<code>Socket</code>对于<code>SystemServer</code>进程没有用处，所以需要关闭。最后通过<code>handleSystemServerProcess</code>方法启动<code>SystemServer</code>进程。</p><p>接下来查看<code>handleSystemServerProcess</code>方法，其代码位于同样的路径下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">handleSystemServerProcess</span><span class="hljs-params">(ZygoteConnection.Arguments parsedArgs)</span><br>    <span class="hljs-keyword">throws</span> Zygote.MethodAndArgsCaller &#123;<br><br>    ......<br><br>    <span class="hljs-keyword">if</span> (parsedArgs.invokeWith != <span class="hljs-literal">null</span>) &#123;<br>        ......<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-type">ClassLoader</span> <span class="hljs-variable">cl</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">if</span> (systemServerClasspath != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">//创建PathClassLoader</span><br>            cl = createPathClassLoader(systemServerClasspath, parsedArgs.targetSdkVersion);<br><br>            Thread.currentThread().setContextClassLoader(cl);<br>        &#125;<br><br>        <span class="hljs-comment">//调用zygoteInit方法</span><br>        ZygoteInit.zygoteInit(parsedArgs.targetSdkVersion, parsedArgs.remainingArgs, cl);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>继续跟踪<code>zygoteInit</code>方法，其代码还是位于同样的路径下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">zygoteInit</span><span class="hljs-params">(<span class="hljs-type">int</span> targetSdkVersion, String[] argv, ClassLoader classLoader)</span><br>    <span class="hljs-keyword">throws</span> Zygote.MethodAndArgsCaller &#123;<br>    <span class="hljs-keyword">if</span> (RuntimeInit.DEBUG) &#123;<br>        Slog.d(RuntimeInit.TAG, <span class="hljs-string">&quot;RuntimeInit: Starting application from zygote&quot;</span>);<br>    &#125;<br><br>    Trace.traceBegin(Trace.TRACE_TAG_ACTIVITY_MANAGER, <span class="hljs-string">&quot;ZygoteInit&quot;</span>);<br>    RuntimeInit.redirectLogStreams();<br><br>    RuntimeInit.commonInit();<br>    <span class="hljs-comment">//启动Binder线程池</span><br>    ZygoteInit.nativeZygoteInit();<br>    <span class="hljs-comment">//进入SystemServer的main方法</span><br>    RuntimeInit.applicationInit(targetSdkVersion, argv, classLoader);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>nativeZygoteInit</code>方法顾名思义是<code>native</code>层的方法，用来启动<code>Binder</code>线程池（需要先了解JNI，这里先不解释），这样<code>SystemServer</code>进程就可以使用<code>Binder</code>与其他进程进行通信了。<code>applicationInit</code>方法则是用于进入到<code>SystemServer</code>的<code>main</code>方法，对应方法所在路径为<code>/frameworks/base/core/java/com/android/internal/os/RuntimeInit.java</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">applicationInit</span><span class="hljs-params">(<span class="hljs-type">int</span> targetSdkVersion, String[] argv, ClassLoader classLoader)</span><br><span class="hljs-keyword">throws</span> Zygote.MethodAndArgsCaller &#123;<br>    ......<br>    <span class="hljs-comment">// Remaining arguments are passed to the start class&#x27;s static main</span><br>    invokeStaticMain(args.startClass, args.startArgs, classLoader);<br>&#125;<br></code></pre></td></tr></table></figure><p><code>invokeStaticMain</code>方法的代码如下（位于相同路径下）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeStaticMain</span><span class="hljs-params">(String className, String[] argv, ClassLoader classLoader)</span><br><span class="hljs-keyword">throws</span> Zygote.MethodAndArgsCaller &#123;<br>    Class&lt;?&gt; cl;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//通过反射得到SystemServer类</span><br>        cl = Class.forName(className, <span class="hljs-literal">true</span>, classLoader);<br>    &#125; <span class="hljs-keyword">catch</span> (ClassNotFoundException ex) &#123;<br>        ......<br>    &#125;<br><br>    Method m;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">//找到SystemServer的main方法</span><br>        m = cl.getMethod(<span class="hljs-string">&quot;main&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Class</span>[] &#123; String[].class &#125;);<br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException ex) &#123;<br>        ......<br>    &#125; <span class="hljs-keyword">catch</span> (SecurityException ex) &#123;<br>        ......<br>    &#125;<br><br>    ......<br>    <span class="hljs-comment">//抛出异常，这里抛出异常中调用了SystemServer的main方法</span><br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Zygote</span>.MethodAndArgsCaller(m, argv);<br>&#125;<br></code></pre></td></tr></table></figure><p>主要是获取<code>SystemServer</code>的<code>main</code>方法，并传入<code>MethodAndArgsCaller</code>异常中，捕获该异常的代码在<code>ZygoteInit.java</code>的<code>main</code>方法中（第766行），这个<code>main</code>方法会调用<code>SystemServer</code>的<code>main</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>    ......<br>&#125; <span class="hljs-keyword">catch</span> (Zygote.MethodAndArgsCaller caller) &#123;<br>    caller.run();<br>&#125; <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>    Log.e(TAG, <span class="hljs-string">&quot;System zygote died with exception&quot;</span>, ex);<br>    zygoteServer.closeServerSocket();<br>    <span class="hljs-keyword">throw</span> ex;<br>&#125;<br></code></pre></td></tr></table></figure><p>当捕获到<code>MethodAndArgsCaller</code>异常时，就会调用<code>MethodAndArgsCaller</code>的<code>run</code>方法，路径为<code>/frameworks/base/core/java/com/android/internal/os/Zygote.java</code>，代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MethodAndArgsCaller</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span><br>    <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-comment">/** method to call */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Method mMethod;<br><br>    <span class="hljs-comment">/** argument array */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String[] mArgs;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MethodAndArgsCaller</span><span class="hljs-params">(Method method, String[] args)</span> &#123;<br>        mMethod = method;<br>        mArgs = args;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            mMethod.invoke(<span class="hljs-literal">null</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[] &#123; mArgs &#125;);<br>        &#125; <span class="hljs-keyword">catch</span> (IllegalAccessException ex) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(ex);<br>        &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException ex) &#123;<br>            <span class="hljs-type">Throwable</span> <span class="hljs-variable">cause</span> <span class="hljs-operator">=</span> ex.getCause();<br>            <span class="hljs-keyword">if</span> (cause <span class="hljs-keyword">instanceof</span> RuntimeException) &#123;<br>                <span class="hljs-keyword">throw</span> (RuntimeException) cause;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cause <span class="hljs-keyword">instanceof</span> Error) &#123;<br>                <span class="hljs-keyword">throw</span> (Error) cause;<br>            &#125;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(ex);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>因为我们将<code>SystemServer</code>的<code>main</code>方法作为参数传入了<code>MethodAndArgsCaller</code>异常中，所以<code>mMethod.invoke</code>即是<code>SystemServer</code>的<code>main</code>方法的<code>invoke</code>，即<code>SystemServer</code>的<code>main</code>方法被调用。</p><blockquote><p>所以为什么不直接在<code>invokeStaticMain</code>方法中调用<code>SystemServer</code>的<code>main</code>方法呢，反而是要通过抛出异常来调用？</p><p>答：因为在<code>Zygote</code>启动<code>SystemServer</code>进程后，<code>SystemServer</code>进程做了很多准备工作，这使得<code>SystemServer</code>的<code>main</code>方法看起来不像是<code>SystemServer</code>进程的入口方法。而抛出异常的处理会清除所有的设置过程需要的堆栈帧，会使得<code>SystemServer</code>的<code>main</code>方法看起来像是<code>SystemServer</code>进程的入口方法。</p></blockquote><p><code>SystemServer</code>的<code>main</code>方法对应代码路径为<code>/frameworks/base/services/java/com/android/server/SystemServer.java</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemServer</span>().run();<br>&#125;<br>......<br>    <br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        ......<br>        <span class="hljs-comment">//创建消息Looper</span><br>        Looper.prepareMainLooper();<br>        <span class="hljs-comment">//加载动态库libandroid_servers.so</span><br>        System.loadLibrary(<span class="hljs-string">&quot;android_servers&quot;</span>);<br>        performPendingShutdown();<br><br>        <span class="hljs-comment">//创建系统的Context</span><br>        createSystemContext();<br><br>        <span class="hljs-comment">//创建SystemServiceManager</span><br>        mSystemServiceManager = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SystemServiceManager</span>(mSystemContext);<br>        mSystemServiceManager.setRuntimeRestarted(mRuntimeRestart);<br>        LocalServices.addService(SystemServiceManager.class, mSystemServiceManager);<br>        <span class="hljs-comment">// Prepare the thread pool for init tasks that can be parallelized</span><br>        SystemServerInitThreadPool.get();<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        traceEnd();  <span class="hljs-comment">// InitBeforeStartServices</span><br>    &#125;<br><br>    <span class="hljs-keyword">try</span> &#123;<br>        traceBeginAndSlog(<span class="hljs-string">&quot;StartServices&quot;</span>);<br>        <span class="hljs-comment">//启动引导服务</span><br>        startBootstrapServices();<br>        <span class="hljs-comment">//启动核心服务</span><br>        startCoreServices();<br>        <span class="hljs-comment">//启动其他服务</span><br>        startOtherServices();<br>        SystemServerInitThreadPool.shutdown();<br>    &#125; <span class="hljs-keyword">catch</span> (Throwable ex) &#123;<br>        ......<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        traceEnd();<br>    &#125;<br>    ......<br><br>    <span class="hljs-comment">// Loop forever.</span><br>    Looper.loop();<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;Main thread loop unexpectedly exited&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>首先会创建消息<code>Looper</code>、加载库、创建系统<code>context</code>，然后创建<code>SystemServiceManager</code>来对系统服务进行创建、启动和生命周期管理。然后会启动各种服务，包括<code>ActivityManagerService</code>、<code>PackageManagerService</code>、<code>WindowManagerService</code>等服务。最后<code>Looper</code>循环等待接收消息。</p><p>总结一下整个<code>System Server</code>进程阶段的主要任务：</p><ol><li>启动<code>Binder</code>线程池。</li><li>创建<code>SystemServiceManager</code>，用于对系统服务进行创建、启动和生命周期管理。</li><li>启动各种系统服务。</li></ol><h2 id="2-6-Launcher进程阶段"><a href="#2-6-Launcher进程阶段" class="headerlink" title="2.6 Launcher进程阶段"></a>2.6 Launcher进程阶段</h2><p>系统启动的最后一步是启动一个应用程序来显示系统中已经安装的应用程序，这个应用程序就是<code>Launcher</code>，通俗来讲就是Android系统的桌面，它是<code>Zygote</code>进程孵化的第一个APP。<code>Launcher</code>在启动过程中会请求<code>PackageManagerService</code>返回系统中已经安装的应用程序的信息，并将这些信息封装成一个快捷图标列表显示在系统屏幕上，用户可以通过点击图标来启动相应的应用程序。</p><p><code>Launcher</code>通过<code>startOtherServices</code>启动，启动入口为<code>AMS</code>的<code>systemReady</code>方法（第1646行），所在路径为<code>frameworks/base/services/java/com/android/server/SystemServer.java</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">startOhterServices</span><span class="hljs-params">()</span>&#123;<br>    ......<br>    mActivityManagerService.systemReady(() -&gt; &#123;<br>            Slog.i(TAG, <span class="hljs-string">&quot;Making services ready&quot;</span>);<br>            traceBeginAndSlog(<span class="hljs-string">&quot;StartActivityManagerReadyPhase&quot;</span>);<br>            mSystemServiceManager.startBootPhase(<br>                    SystemService.PHASE_ACTIVITY_MANAGER_READY);<br>        ......<br>    &#125;<br>......<br>&#125;<br><br></code></pre></td></tr></table></figure><p>查看<code>AMS</code>的<code>systemReady</code>方法代码，所在路径为<code>/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">systemReady</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Runnable goingCallback, BootTimingsTraceLog traceLog)</span> &#123;<br>    ......<br>    <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>) &#123;<br>        ......<br>        mStackSupervisor.resumeFocusedStackTopActivityLocked();<br>        mUserController.sendUserSwitchBroadcastsLocked(-<span class="hljs-number">1</span>, currentUserId);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用了<code>ActivityStackSupervisor</code>的<code>resumeFocusedStackTopActivityLocked</code>方法，所在路径为<code>/frameworks/base/services/core/java/com/android/server/am/ActivityStackSupervisor.java</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">resumeFocusedStackTopActivityLocked</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">return</span> resumeFocusedStackTopActivityLocked(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>);<br>&#125;<br><br><span class="hljs-type">boolean</span> <span class="hljs-title function_">resumeFocusedStackTopActivityLocked</span><span class="hljs-params">(</span><br><span class="hljs-params">    ActivityStack targetStack, ActivityRecord target, ActivityOptions targetOptions)</span> &#123;<br>    <span class="hljs-keyword">if</span> (targetStack != <span class="hljs-literal">null</span> &amp;&amp; isFocusedStack(targetStack)) &#123;<br>        <span class="hljs-keyword">return</span> targetStack.resumeTopActivityUncheckedLocked(target, targetOptions);<br>    &#125;<br>    ......<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里使用了重载，最终都是调用第二个方法，里面调用是<code>ActivityStack</code>的<code>resumeTopActivityUncheckedLocked</code>方法，所在路径为<code>/frameworks/base/services/core/java/com/android/server/am/ActivityStack.java</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">resumeTopActivityUncheckedLocked</span><span class="hljs-params">(ActivityRecord prev, ActivityOptions options)</span> &#123;<br>    ......<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-comment">// Protect against recursion.</span><br>        mStackSupervisor.inResumeTopActivity = <span class="hljs-literal">true</span>;<br>        result = resumeTopActivityInnerLocked(prev, options);<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        mStackSupervisor.inResumeTopActivity = <span class="hljs-literal">false</span>;<br>    &#125;<br>   <br>    mStackSupervisor.checkReadyForSleepLocked();<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>该方法主要是调用了<code>resumeTopActivityInnerLocked</code>方法（在同一个文件中，第2305行）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">resumeTopActivityInnerLocked</span><span class="hljs-params">(ActivityRecord prev, ActivityOptions options)</span> &#123;<br>   ......<br>   <span class="hljs-keyword">return</span> isOnHomeDisplay() &amp;&amp;<br>          mStackSupervisor.resumeHomeStackTask(returnTaskType, prev, <span class="hljs-string">&quot;prevFinished&quot;</span>);<br>   ......               <br>&#125;<br></code></pre></td></tr></table></figure><p>关键的地方是调用了<code>ActivityStackSupervisor</code>的<code>resumeHomeStackTask</code>方法，所在路径为<code>frameworks/base/services/core/java/com/android/server/am/ActivityStackSupervisor.java</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">resumeHomeStackTask</span><span class="hljs-params">(ActivityRecord prev, String reason)</span> &#123;<br>    ......<br>    <span class="hljs-keyword">if</span> (r != <span class="hljs-literal">null</span> &amp;&amp; !r.finishing) &#123;<br>        moveFocusableActivityStackToFrontLocked(r, myReason);<br>        <span class="hljs-keyword">return</span> resumeFocusedStackTopActivityLocked(mHomeStack, prev, <span class="hljs-literal">null</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> mService.startHomeActivityLocked(mCurrentUser, myReason);<br>&#125;<br></code></pre></td></tr></table></figure><p>关键的地方是调用了<code>ActivityService</code>的<code>startHomeActivityLocked</code>方法，所在路径为<code>frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">boolean</span> <span class="hljs-title function_">startHomeActivityLocked</span><span class="hljs-params">(<span class="hljs-type">int</span> userId, String reason)</span> &#123;<br>    <span class="hljs-comment">//判断工厂模式和mTopAction值，符合要求则继续执行</span><br>    <span class="hljs-keyword">if</span> (mFactoryTest == FactoryTest.FACTORY_TEST_LOW_LEVEL<br>        &amp;&amp; mTopAction == <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//创建Launcher启动所需要的Intent</span><br>    <span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> getHomeIntent();<br>    <span class="hljs-comment">//使用Intent对应的Activity信息</span><br>    <span class="hljs-type">ActivityInfo</span> <span class="hljs-variable">aInfo</span> <span class="hljs-operator">=</span> resolveActivityInfo(intent, STOCK_PM_FLAGS, userId);<br>    <span class="hljs-keyword">if</span> (aInfo != <span class="hljs-literal">null</span>) &#123;<br>        <span class="hljs-comment">// 设置Intent的组件为解析得到的Activity组件</span><br>        intent.setComponent(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ComponentName</span>(aInfo.applicationInfo.packageName, aInfo.name));<br>        <span class="hljs-comment">// 创建新的ActivityInfo对象，并将applicationInfo设置为相应用户ID下的应用程序信息</span><br>        aInfo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActivityInfo</span>(aInfo);<br>        aInfo.applicationInfo = getAppInfoForUser(aInfo.applicationInfo, userId);<br>        <span class="hljs-comment">// 获取指定名称和UID的进程记录</span><br>        <span class="hljs-type">ProcessRecord</span> <span class="hljs-variable">app</span> <span class="hljs-operator">=</span> getProcessRecordLocked(aInfo.processName, Info.applicationInfo.uid, <span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">// 如果进程记录不存在或进程记录没有关联的instrumentation</span><br>        <span class="hljs-keyword">if</span> (app == <span class="hljs-literal">null</span> || app.instr == <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-comment">// 设置Intent标志包含FLAG_ACTIVITY_NEW_TASK，表示在新任务中启动Home活动</span><br>            intent.setFlags(intent.getFlags() | Intent.FLAG_ACTIVITY_NEW_TASK);<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">resolvedUserId</span> <span class="hljs-operator">=</span> UserHandle.getUserId(aInfo.applicationInfo.uid);<br>            <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">myReason</span> <span class="hljs-operator">=</span> reason + <span class="hljs-string">&quot;:&quot;</span> + userId + <span class="hljs-string">&quot;:&quot;</span> + resolvedUserId;<br>            <span class="hljs-comment">// 启动Launcher</span><br>            mActivityStarter.startHomeActivityLocked(intent, aInfo, myReason);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        Slog.wtf(TAG, <span class="hljs-string">&quot;No home screen found for &quot;</span> + intent, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Throwable</span>());<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建了一个<code>Intent</code>，并将<code>mTopAction</code>和<code>mTopData</code>传入。<code>mTopAction</code>的值为<code>Intent.ACTION_MAIN</code>，并且如果系统运行模式低级工厂模式，则将<code>intent</code>的<code>Category</code>设置为<code>android.intent.category.HOME</code>（具体细节请跟进<code>getHomeIntent</code>方法查看）。在<code>AndroidManifest</code>文件（<code>/packages/apps/Launcher3/AndroidManifest.xml</code>）中查看<code>intent-filter</code>可以知道，能与该<code>Intent</code>匹配的是<code>Launcher</code>。之后就是判断<code>Launcher</code>是否已经启动，如果没有则调用<code>ActivityStarter</code>的<code>startHomeActivityLocked</code>方法启动，所在路径为<code>/frameworks/base/services/core/java/com/android/server/am/ActivityStarter.java</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">startHomeActivityLocked</span><span class="hljs-params">(Intent intent, ActivityInfo aInfo, String reason)</span> &#123;<br>    <span class="hljs-comment">//将Launcher放入HomeStack中</span><br>    mSupervisor.moveHomeStackTaskToTop(reason);<br>    <span class="hljs-comment">//启动Launcher</span><br>mLastHomeActivityStartResult = startActivityLocked(<span class="hljs-literal">null</span> <span class="hljs-comment">/*caller*/</span>, intent,<br><span class="hljs-literal">null</span> <span class="hljs-comment">/*ephemeralIntent*/</span>, <span class="hljs-literal">null</span> <span class="hljs-comment">/*resolvedType*/</span>, aInfo, <span class="hljs-literal">null</span> <span class="hljs-comment">/*rInfo*/</span>,<br><span class="hljs-literal">null</span> <span class="hljs-comment">/*voiceSession*/</span>, <span class="hljs-literal">null</span> <span class="hljs-comment">/*voiceInteractor*/</span>, <span class="hljs-literal">null</span> <span class="hljs-comment">/*resultTo*/</span>,<br><span class="hljs-literal">null</span> <span class="hljs-comment">/*resultWho*/</span>, <span class="hljs-number">0</span> <span class="hljs-comment">/*requestCode*/</span>, <span class="hljs-number">0</span> <span class="hljs-comment">/*callingPid*/</span>, <span class="hljs-number">0</span> <span class="hljs-comment">/*callingUid*/</span>,<br><span class="hljs-literal">null</span> <span class="hljs-comment">/*callingPackage*/</span>, <span class="hljs-number">0</span> <span class="hljs-comment">/*realCallingPid*/</span>, <span class="hljs-number">0</span> <span class="hljs-comment">/*realCallingUid*/</span>,<br><span class="hljs-number">0</span> <span class="hljs-comment">/*startFlags*/</span>, <span class="hljs-literal">null</span> <span class="hljs-comment">/*options*/</span>, <span class="hljs-literal">false</span> <span class="hljs-comment">/*ignoreTargetSecurity*/</span>,<br><span class="hljs-literal">false</span> <span class="hljs-comment">/*componentSpecified*/</span>, mLastHomeActivityStartRecord <span class="hljs-comment">/*outActivity*/</span>,<br><span class="hljs-literal">null</span> <span class="hljs-comment">/*container*/</span>, <span class="hljs-literal">null</span> <span class="hljs-comment">/*inTask*/</span>, <span class="hljs-string">&quot;startHomeActivity: &quot;</span> + reason);<br>    <span class="hljs-keyword">if</span> (mSupervisor.inResumeTopActivity) &#123;<br>        mSupervisor.scheduleResumeTopActivities();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将<code>Launcher</code>放入<code>HomeStack</code>中，<code>HomeStack</code>是在<code>ActivityStackSupervisor</code>中定义的用于存储<code>Launcher</code>的变量。接着调用<code>startActivityLocked</code>方法来启动<code>Launcher</code>。</p><h1 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h1><p>以上只是简单的梳理了一遍Android系统启动的流程，整个过程为：设备开机后，处于<code>Boot Loader</code>阶段，加载并执行引导程序，为操作系统建立好环境之后，将控制权转移给操作系统内核，进入到<code>kernel</code>阶段。<code>kernel</code>阶段会启动<code>swapper</code>进程初始化进程管理、内存管理，加载驱动等相关工作，启动<code>kthreadd</code>进程，之后会启动<code>init</code>进程进入到<code>init</code>阶段。<code>init</code>阶段会创建和挂载启动所需要的文件目录，初始化和启动属性服务，之后启动<code>zygote</code>进程进入到<code>zygote</code>阶段。<code>zygote</code>阶段会创建java虚拟机并注册<code>JNI</code>方法，使<code>Zygote</code>从<code>Native</code>层进入到<code>java</code>框架层，创建服务器端<code>Socket</code>，用于消息通信，之后启动<code>SystemServer</code>进程进入到<code>SystemServer</code>阶段。<code>SystemServer</code>阶段会启动<code>Binder</code>线程池，创建<code>SystemServiceManager</code>管理系统服务，之后启动各种系统服务，其中包括<code>Launcher</code>，就是我们所常见的系统桌面。</p><p>然而，本篇文章省略了很多细节，并没有深入分析各个阶段的相关代码，并且在学习的过程中也遇到了一些没有了解过的东西，比如<code>rc</code>文件以及如何解析<code>rc</code>文件、 <code>Binder</code>通信、系统服务的管理、Activity的管理等。这些都需要积累一定的基础，进一步深入学习。</p><hr><p>参考：</p><p><a href="http://liuwangshu.cn/tags/Android%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8/">Android系统启动篇 | BATcoder - 刘望舒 (liuwangshu.cn)</a>（Android系统启动系列篇）</p><p><a href="http://gityuan.com/android/">Android 操作系统架构开篇 - Gityuan博客 | 袁辉辉的技术博客</a>（找系统启动系列篇）</p><p><a href="https://zhuanlan.zhihu.com/p/350204291">深入研究源码：Android10.0系统启动流程（一） - 知乎 (zhihu.com)</a>（主页找系列篇）</p><p><a href="https://www.jianshu.com/p/2c1318b0f527">Android系统启动流程 - 简书 (jianshu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/127074795">Android操作系统启动过程概览 - 知乎 (zhihu.com)</a></p><p><a href="http://aospxref.com/">AOSPXRef</a></p><p><a href="">《Android进阶解密》</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
      <tag>Android源码解析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android Intent</title>
    <link href="/2023/07/04/Android%20Intent/"/>
    <url>/2023/07/04/Android%20Intent/</url>
    
    <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>Intent是Android四大组件通信桥梁，它负责在组件之间传递消息和数据，是一个消息传递对象。通过使用Intent，可以启动另一个活动Activity、服务Service、广播接收器BroadcastReceiver，以及发送和接收数据。</p><h1 id="二、Intent的两种类型"><a href="#二、Intent的两种类型" class="headerlink" title="二、Intent的两种类型"></a>二、Intent的两种类型</h1><p>显式Intent多用来实现一个应用内部的跳转，而隐式intent多用来实现应用与应用之间的跳转</p><ol><li><p><strong>显示Intent</strong></p><p>明确指定了要启动的目标组件的名称。</p><blockquote><p> <strong>值得注意的是从Android 5.0开始， Service 只能通过显式 Intent 启动，如果使用隐式 Intent 调用 bindService()，系统会引发异常</strong>。因为使用隐式 Intent 启动服务存在安全隐患，无法确定哪些服务将响应 Intent，且用户无法看到哪些服务已启动。</p></blockquote></li><li><p><strong>隐式Intent</strong></p><p>不指定组件名，而是指定了可处理该Intent的某些组件的属性，如Action、Data、Category等，然后系统会根据这些属性去匹配AndroidManifest.xml相关组件的Intent-filter，寻找到满足属性的组件，当不止一个满足时, 会弹出一个让我们选择启动哪个的对话框。</p></li></ol><p>举个例子：</p><p>比如我们在手机上修改头像，选择本地图片后，这时候系统自动跳转到图库，这个就是显示Intent（不好说，也许只有一个应用能响应该Intent）。</p><p>再例如，我们在手机上打开pdf文件，选择用其他应用打开，这时候就会弹出多个应用供我们选择，比如WPS、浏览器等，这个就是隐式Intent。</p><h2 id="2-1-强制使用应用选择器"><a href="#2-1-强制使用应用选择器" class="headerlink" title="2.1 强制使用应用选择器"></a>2.1 强制使用应用选择器</h2><p>如果有多个应用响应隐式 Intent，则系统会弹出对话框，让用户选择要使用的应用，用户也可以将某个应用设置为该操作的默认选项。</p><p>如果想让用户无法选择用于操作的应用，而强制使用某个应用响应该操作时，可以使用如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Intent</span> <span class="hljs-variable">sendIntent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(Intent.ACTION_SEND);<br> Intent intent=Intent.createChooser(viewIntent,<span class="hljs-string">&quot;应用选择器&quot;</span>);<br><span class="hljs-comment">//createChooser()创建显式调用选择器，用户将无法设定默认选项</span><br><span class="hljs-type">Intent</span> <span class="hljs-variable">chooser</span> <span class="hljs-operator">=</span> Intent.createChooser(sendIntent, title);<br><br><span class="hljs-comment">// 判断该Intent是否存在可响应Activity</span><br><span class="hljs-keyword">if</span> (sendIntent.resolveActivity(getPackageManager()) != <span class="hljs-literal">null</span>) &#123;<br>    startActivity(chooser);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2-Intent使用流程"><a href="#2-2-Intent使用流程" class="headerlink" title="2.2 Intent使用流程"></a>2.2 Intent使用流程</h2><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307041427465.jpg"></p><h1 id="三、Intent的七个属性"><a href="#三、Intent的七个属性" class="headerlink" title="三、Intent的七个属性"></a>三、Intent的七个属性</h1><h2 id="3-1-ComponentName-组件名称"><a href="#3-1-ComponentName-组件名称" class="headerlink" title="3.1 ComponentName(组件名称)"></a>3.1 ComponentName(组件名称)</h2><p>目标组件的名称。这是可选项，如果构建Intent时有组件名称，则为显式Intent，否则为隐式Intent。</p><p>组件名称由组件所在应用程序配置文件中设置的包名+组件的全限定类名组成。</p><p>例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ComponentName</span> <span class="hljs-variable">componentName</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComponentName</span>(<span class="hljs-string">&quot;com.example.demo&quot;</span>,<span class="hljs-string">&quot;com.example.demo.DemoActivity&quot;</span>);<br><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>();<br>intent.setComponent(componentName);<br>startActivity(intent);<br></code></pre></td></tr></table></figure><p>ComponentName中的两个参数，第一个为包名，第二个为全限定类名。如果全限定类名的前面和包名是一样的话，是可以省略的，上面这个例子的组件名称可以写成com.example.demo&#x2F;.DemoActivity。</p><h2 id="3-2-Action-动作"><a href="#3-2-Action-动作" class="headerlink" title="3.2 Action(动作)"></a>3.2 Action(动作)</h2><p>一个普通的字符串，代表Intent要完成的一个抽象动作，它告诉系统或其他组件要执行什么操作。</p><h3 id="Action的两种类型"><a href="#Action的两种类型" class="headerlink" title="Action的两种类型"></a>Action的两种类型</h3><ol><li><p><strong>系统定义的Action</strong></p><p>Android系统提供了许多预定义的Action，例如</p><ul><li><strong>ACTION_VIEW</strong><br> 向用户展示某信息，比如使用浏览器打开网址，用图片应用显示图片等。</li><li><strong>ACTION_SEND</strong><br> 用于发送数据，比如电子邮件应用或者一些社交应用。</li><li><strong>ACTION_DIAL</strong><br> 显示带拨号盘的页面，让用户可以进行拨号动作。</li></ul><p>更多Action常量详见<a href="https://developer.android.google.cn/guide/components/intents-common?hl=zh-cn">通用 Intent  | Android 开发者  | Android Developers (google.cn)</a></p></li><li><p><strong>应用程序定义的Action</strong></p><p>开发者可以自定义Action，在应用程序内部使用，但确保加入应用的软件包名称作为前缀。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">ACTION_TIMETRAVEL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;com.example.action.SEND_EMAIL&quot;</span>;<br></code></pre></td></tr></table></figure></li></ol><h2 id="3-3-Category-类别"><a href="#3-3-Category-类别" class="headerlink" title="3.3 Category(类别)"></a>3.3 Category(类别)</h2><p>一个普通的字符串，用于为Action提供额外的附加信息。一个Intent对象可以有多个Category。</p><h3 id="Category的两种类型"><a href="#Category的两种类型" class="headerlink" title="Category的两种类型"></a>Category的两种类型</h3><ol><li><p><strong>系统定义的Category</strong></p><ul><li><p><strong>CATEGORY_DEFAULT</strong>：默认类别，表示这个Intent没有特殊要求，可以被任何与之匹配的组件来处理。通常情况下，在一个Intent中只能添加一个CATEGORY_DEFAULT。</p></li><li><p><strong>CATEGORY_BROWSABLE</strong>： 表示你的Activity能够打开浏览器并访问一个链接。如果你想创建一个能够响应http:&#x2F;&#x2F;或https:&#x2F;&#x2F;链接的Activity，你需要添加这个Category。</p></li><li><p><strong>CATEGORY_LAUNCHER</strong>：表示该Activity是一个启动器（Launcher），也就是它会在设备上生成一个图标，当用户点击该图标时，系统会启动此Activity。在一个应用程序中，只有一个Activity可以拥有CATEGORY_LAUNCHER属性。</p></li></ul></li><li><p><strong>应用程序定义的Category</strong></p><p>自定义的Category需要在AndroidManifest.xml配置文件中进行声明。例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;com.example.myapp.MY_CUSTOM_CATEGORY&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>使用时代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Intent</span> <span class="hljs-variable">intent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Intent</span>(Intent.ACTION_VIEW);<br>intent.addCategory(<span class="hljs-string">&quot;com.example.myapp.MY_CUSTOM_CATEGORY&quot;</span>);<br>startActivity(intent);<br></code></pre></td></tr></table></figure><p>这样，其他应用程序就可以使用该Intent Category来启动你的应用程序，并执行相关操作。</p></li></ol><h2 id="3-4-Data-数据-Type-MIME类型"><a href="#3-4-Data-数据-Type-MIME类型" class="headerlink" title="3.4 Data(数据), Type(MIME类型)"></a>3.4 Data(数据), Type(MIME类型)</h2><h3 id="Data"><a href="#Data" class="headerlink" title="Data"></a>Data</h3><p>Data通常用于向Action属性提供操作的数据，是一个URI对象，该URI可以表示文件、网址、数据库表格等不同类型的数据源。</p><h3 id="Type"><a href="#Type" class="headerlink" title="Type"></a>Type</h3><p>Type通常用于指定Data所指定的URI对应的MIME类型。</p><p>以下是一些常见的Android MIME类型（其中*是通配符，也可以指定某种类型）：</p><ul><li>image&#x2F;*：所有图像类型。</li><li>audio&#x2F;*：所有音频类型。</li><li>video&#x2F;*：所有视频类型。</li><li>text&#x2F;*：所有文本类型。</li><li>application&#x2F;pdf：PDF文件类型</li><li>application&#x2F;zip：Zip压缩文件类型</li></ul><p>当然也可以自定义MIME类型。例如自定义json的MIME类型：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-built_in">application</span>/json<br></code></pre></td></tr></table></figure><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p><strong>若要同时设置 URI 和 MIME 类型，请勿调用 <code>setData()</code> 和 <code>setType()</code>，因为它们会互相抵消彼此的值。请始终使用 <code>setDataAndType()</code> 同时设置 URI 和 MIME 类型。</strong></p><p>原因参考：<a href="https://www.coder.work/article/671139">Android:关于Intents，为什么setType()和setData()会互相抵消？</a></p><h2 id="3-5-Extra-额外信息"><a href="#3-5-Extra-额外信息" class="headerlink" title="3.5 Extra(额外信息)"></a>3.5 Extra(额外信息)</h2><p>Extra是一个键值对集合，用于传递额外信息。Extra的键是String类型，而值可以是任何Parcelable或Serializable对象（Java中用于序列化和反序列化对象的接口）。</p><h2 id="3-6-Flag-标记"><a href="#3-6-Flag-标记" class="headerlink" title="3.6 Flag(标记)"></a>3.6 Flag(标记)</h2><p>充当 Intent 的元数据。指示 Android 系统如何启动 Activity（例如，Activity 应属于哪个任务），以及启动之后如何处理（例如，它是否属于最近的 Activity 列表）。</p><p>以下是几种常见的Flag：</p><ul><li><strong>FLAG_ACTIVITY_NEW_TASK</strong>：创建一个新的任务栈来启动Activity，如果已经存在一个相同的任务栈，则直接将它调到前台。这个Flag通常用于从Service启动一个Activity。</li><li><strong>FLAG_ACTIVITY_CLEAR_TOP</strong>：清空Task栈顶部的所有Activity，使得目标Activity变成栈顶的Activity。如果该Activity不存在，则创建一个新的实例。这个Flag通常用于从深层次的Activity返回到栈顶Activity。</li><li><strong>FLAG_ACTIVITY_SINGLE_TOP</strong>：如果目标Activity已经位于栈顶，则不创建一个新的实例，而是继续使用原来的实例。这个Flag通常用于避免重复创建Activity的情况。</li><li><strong>FLAG_ACTIVITY_NO_HISTORY</strong>：启动一个Activity时不在Task栈中保存这个Activity的历史记录。这个Flag通常用于启动一个临时性的Activity。</li><li><strong>FLAG_ACTIVITY_CLEAR_TASK</strong>：清空整个Task栈，并且创建一个新的Task栈。这个Flag通常用于启动一个应用的主界面或者重新启动应用。</li><li><strong>FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS</strong>：阻止启动的Activity出现在最近运行的应用列表中。</li></ul><h1 id="四、Intent过滤器"><a href="#四、Intent过滤器" class="headerlink" title="四、Intent过滤器"></a>四、Intent过滤器</h1><p>Intent过滤器(Intent-filter)是 AndroidMainifest.xml 配置文件中组件的子标签<code>&lt;intent-fileter&gt;</code>。<strong>一个组件可以声明一个或者多个 Intent过滤器，只要其中一个通过匹配，该组件就可以响应相应 Intent。</strong></p><p>Intent过滤器通过 Action、Category、Data 属性进行过滤，筛选出可以响应的组件。</p><p>例如官方文档中的一个例子：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">activity</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;ShareActivity&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- This activity handles &quot;SEND&quot; actions with text data --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.SEND&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.DEFAULT&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">android:mimeType</span>=<span class="hljs-string">&quot;text/plain&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- This activity also handles &quot;SEND&quot; and &quot;SEND_MULTIPLE&quot; with media data --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.SEND&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">action</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.action.SEND_MULTIPLE&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">category</span> <span class="hljs-attr">android:name</span>=<span class="hljs-string">&quot;android.intent.category.DEFAULT&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">android:mimeType</span>=<span class="hljs-string">&quot;application/vnd.google.panorama360+jpg&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">android:mimeType</span>=<span class="hljs-string">&quot;image/*&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">android:mimeType</span>=<span class="hljs-string">&quot;video/*&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">activity</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以看出<code>ShareActivity</code>旨在发送图片、视频、文本。</p><h2 id="4-1-Intent匹配规则"><a href="#4-1-Intent匹配规则" class="headerlink" title="4.1 Intent匹配规则"></a>4.1 Intent匹配规则</h2><p>当收到隐式 Intent 以启动 Activity 时，系统会按照优先级（Action &gt; Data &gt; Category），将该 Intent 与 Intent 过滤器进行比较，搜索该 Intent 的最佳 Activity。</p><p>如果多个 Intent 过滤器都能够匹配到同一个 Intent，那么系统就会根据它们在清单文件中声明的顺序来决定使用哪一个 Intent 过滤器。在同一个 Intent 过滤器中，如果同时设置了多个 action 或 category，那么这些条件之间是 “或” 的关系，只要满足其中任意一个，该 Intent Filter 就会被匹配到。</p><h3 id="Action匹配规则"><a href="#Action匹配规则" class="headerlink" title="Action匹配规则"></a>Action匹配规则</h3><ul><li>Intent只能设置一个action，但一个Intent过滤器可以声明多个action。只要Intent中的action与Intent过滤器的某一项action匹配，就可以通过action测试。</li><li>如果Intent过滤器未列出任何action，则 Intent 没有任何匹配项，因此所有 Intent 均无法通过action测试。</li><li>如果 Intent 未指定action，则只要Intent过滤器内包含至少一项action，就可以通过action测试。</li></ul><h3 id="Data匹配规则"><a href="#Data匹配规则" class="headerlink" title="Data匹配规则"></a>Data匹配规则</h3><p>Data的匹配规则分为两部分：URI和MIME。</p><h4 id="URI匹配规则"><a href="#URI匹配规则" class="headerlink" title="URI匹配规则"></a>URI匹配规则</h4><p>URI的格式为<code>&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;/&lt;path&gt;</code>，上述每个属性均为可选，但存在线性依赖关系：</p><ul><li>如果未指定scheme，则会忽略host。</li><li>如果未指定host，则会忽略port。</li><li>如果未指定scheme和host，则会忽略path</li></ul><p>Intent 中的 URI 与过滤器中的 URI 进行比较时，它仅与过滤器中包含的部分 URI 进行比较（即刚才所讲到的依赖关系）。例如：</p><ul><li>如果过滤器仅指定scheme，则具有该scheme的所有 URI 均与该过滤器匹配。</li><li>如果过滤器指定scheme和authority，但未指定path，则具有相同scheme和authority的所有 URI 都会通过过滤器，无论其path如何均是如此。</li><li>如果过滤器指定scheme、authority和path，则仅具有相同scheme、authority和path的 URI 才会通过过滤器。</li><li>path 部分可以使用通配符(*)，仅需部分匹配路径名即可。</li></ul><h4 id="URI和MIME匹配规则"><a href="#URI和MIME匹配规则" class="headerlink" title="URI和MIME匹配规则"></a>URI和MIME匹配规则</h4><ol><li>仅当过滤器未指定任何 URI 或 MIME 类型时，不含 URI 和 MIME 类型的 Intent 才会通过测试。</li><li>如果 Intent 指定 URI 或 MIME 类型，而过滤器中没有声明data元素，则Intent不能通过测试。</li><li>如果 Intent 指定 URI 或 MIME 类型，仅当有过滤器能匹配其URI和MIME类型时，才会通过测试。</li><li>对于包含 URI 但不含 MIME 类型（既未显式声明，也无法通过 URI 推断得出）的 Intent，仅当其 URI 与过滤器的 URI 格式匹配、<strong>且过滤器同样未指定 MIME 类型时</strong>，才会通过测试。</li><li>仅当过滤器列出相同的 MIME 类型且未指定 URI 格式时，包含 MIME 类型但不含 URI 的 Intent 才会通过测试。</li><li>如果过滤器只是列出 MIME 类型，则默认支持URI含 <code>content:</code> 或 <code>file:</code>的数据。</li></ol><p>由于大部分可用数据均由内容提供程序分发，因此指定数据类型（而非 URI）的过滤器也许最为常见。</p><p>另一常见的配置是具有架构和数据类型的过滤器，如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">intent-filter</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">data</span> <span class="hljs-attr">android:scheme</span>=<span class="hljs-string">&quot;http&quot;</span> <span class="hljs-attr">android:mimeType</span>=<span class="hljs-string">&quot;video/*&quot;</span> /&gt;</span><br>    ...<br><span class="hljs-tag">&lt;/<span class="hljs-name">intent-filter</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="Category匹配规则"><a href="#Category匹配规则" class="headerlink" title="Category匹配规则"></a>Category匹配规则</h3><ul><li>Intent 可以包含多项 category，Intent 过滤器也可以包含多项 category。Intent 中的每项category 必须在Intent过滤器中都有对应项，才能通过category 测试。（Intent过滤器声明的category可以超过Intent中的category数量）</li><li>不含category的Intent始终会通过Intent过滤器中的category测试。</li><li>当目标组件为 Activity 时，如需响应隐式 Intent，必须添加 “android.intent.category.DEFAULT” 到 Intent 过滤器中。</li><li>目标组件为广播时，Intent 和 Intent 过滤器都不设置 category，可通过匹配。</li></ul><h1 id="五、Intent数据传递"><a href="#五、Intent数据传递" class="headerlink" title="五、Intent数据传递"></a>五、Intent数据传递</h1><p>Intent不仅可以用来启动组件，还可以用来传递数据。</p><p>Intent传送数据是以键值对的形式。</p><p>传递单个数据时，主要通过<code>putExtra()</code>方法，该方法接收两个参数，第一个是数据的键，第二个是数据的值。</p><p>传递多个数据时，使用Bundle对象作为容器，先将数据存储到Bundle中，然后通过<code>putExtras()</code>方法传入Intent中。</p><p>Intent传递的数据可分为以下几种：</p><ol><li><strong>基本类型数据</strong>：如int、float、double等。</li><li><strong>字符串类型数据</strong>：如String、CharSequence等。</li><li><strong>序列化数据类型</strong>：如ArrayList、Bundle等。</li><li><strong>自定义数据类型</strong>：如Parcelable、Serializable对象。</li></ol><h2 id="5-1-Intent数据回传"><a href="#5-1-Intent数据回传" class="headerlink" title="5.1 Intent数据回传"></a>5.1 Intent数据回传</h2><p>一个Activity可以通过Intent启动另一个Activity，有时候，我们希望后者能够返回一些数据给前者，这时候就需要使用数据回传。典型的应用场景如：充值。</p><p>数据回传的过程如下：</p><ol><li>在调用者 Activity 中，重写 <code>onActivityResult(int requestCode, int resultCode, Intent intent) </code> 方法。其中<code>requestCode</code>是请求码，<code>resultCode</code>是结果码。</li><li>在调用者 Activity 中，使用 <code>startActivityForResult(Intent intent, int requestCode)</code> 方法启动另一个 Activity。其中请求码由我们自己设定，用于区分请求来源。</li><li>在被调用的 Activity 中，获取需要返回的数据，并将其放入一个 Intent 对象中。</li><li>在被调用的 Activity 中，调用 <code>setResult(int resultCode, Intent data)</code> 方法来设置返回结果和结果码。</li><li>在被调用的 Activity 中，调用 <code>finish() </code>方法来结束当前 Activity 的生命周期。当被请求的 Activity 被关闭时，就会调用请求者Activity的<code>onActivityResult()</code> 方法。</li></ol><p><strong>请求码</strong>和<strong>结果码</strong>的作用如下：</p><ul><li><strong>区分不同的请求</strong>：如果一个 Activity 发送了多个不同的请求，在 onActivityResult 方法中使用请求码来区别不同的请求，以便做出不同的处理。</li><li><strong>标识操作执行结果</strong>：结果码用于标识操作的执行结果，比如成功、失败、用户取消等。这可以告诉调用方执行的操作是否成功。</li><li><strong>保证数据正确性</strong>：使用请求码和结果码可以确保返回的数据来自于正确的 Activity，防止数据被恶意篡改或者被其他程序错误地返回。</li><li><strong>简化代码编写</strong>：使用请求码和结果码，开发者可以更加简单方便地实现 Activity 之间的数据传递，减少编写冗长代码的工作量。</li></ul><h1 id="六、待定Intent"><a href="#六、待定Intent" class="headerlink" title="六、待定Intent"></a>六、待定Intent</h1><p>待定Intent（Pending Intent）是Android平台中的一种特殊类型的Intent对象，通常被用于延迟执行某个动作。待定Intent和普通Intent的区别在于，待定Intent是在稍有的实践点由系统代理执行，而不是立刻执行。</p><p>典型的应用场景如：设置闹钟、备忘录。</p><h3 id="6-1-PendingIntent的相关方法"><a href="#6-1-PendingIntent的相关方法" class="headerlink" title="6.1 PendingIntent的相关方法"></a>6.1 PendingIntent的相关方法</h3><ul><li>getActivity()：返回一个启动 Activity 的 PendingIntent。</li><li>getService()：返回一个启动 Service 的 PendingIntent。</li><li>getBroadcast()：返回一个发送广播的 PendingIntent。</li><li>cancel()：取消当前的 PendingIntent。</li><li>send()：发送当前的 PendingIntent。</li></ul><h3 id="6-2-PendingIntent的标志位"><a href="#6-2-PendingIntent的标志位" class="headerlink" title="6.2 PendingIntent的标志位"></a>6.2 PendingIntent的标志位</h3><p>在创建待定 Intent 时，我们还可以设置 PendingIntent.FLAG_XXX等标志位。这些标志位主要用于控制 PendingIntent 的一些行为和属性，以下是几种常用的标志位：</p><ul><li><strong>FLAG_ONE_SHOT</strong>：表示 PendingIntent 只能被使用一次。</li><li><strong>FLAG_CANCEL_CURRENT</strong>：表示如果 PendingIntent 已经存在，则会先取消当前的 PendingIntent，然后重新创建一个新的 PendingIntent。</li><li><strong>FLAG_UPDATE_CURRENT</strong>：表示如果 PendingIntent 已经存在，则会更新它的 Extras 数据，而不是重新创建一个新的 PendingIntent。</li><li><strong>FLAG_NO_CREATE</strong>：表示如果 PendingIntent 已经存在，返回它，否则返回 null。</li></ul><hr><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/165542980">Intent详解以及Activity的跳转与数据传递 - 知乎 (zhihu.com)</a></p><p><a href="https://www.runoob.com/w3cnote/android-tutorial-intent-base.html">4.5.1 Intent的基本使用 | 菜鸟教程 (runoob.com)</a></p><p><a href="https://developer.android.google.cn/guide/components/intents-filters?hl=zh-cn#Building">Intent 和 Intent 过滤器  | Android 开发者  | Android Developers (google.cn)</a></p><p><a href="https://www.jianshu.com/p/19147a69e970">Android Intent详解 - 简书 (jianshu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/45397580">Android-Intent-Intent Filter篇 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android四大组件</title>
    <link href="/2023/07/04/Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6/"/>
    <url>/2023/07/04/Android%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>Android四大基本组件分别是Activity、Service服务、ContentProvider内容提供者、BroadcastReceiver广播接收器。它们都需要在AndroidManifest.xml配置文件中进行注册。</p><h1 id="二、四大组件"><a href="#二、四大组件" class="headerlink" title="二、四大组件"></a>二、四大组件</h1><h2 id="2-1-Activity"><a href="#2-1-Activity" class="headerlink" title="2.1 Activity"></a>2.1 Activity</h2><p>Activity在屏幕上为用户提供了一个GUI界面，允许用户在上面做一些交互性的操作， 比如打电话、照相、发送邮件。</p><ol><li>一个Android应用一般有多个Activity。</li><li>Activity之间通过Intent进行通信。</li><li>Andorid应用中每个Activity都必须在AndroidManifest.xml配置文件中进行注册，否则系统将不识别也不执行该Activity。</li></ol><h3 id="Activity的相关方法"><a href="#Activity的相关方法" class="headerlink" title="Activity的相关方法"></a>Activity的相关方法</h3><ul><li><strong>onCreate()<strong>：只在Activity创建时调用，通常做一些初始化设置，</strong>不可见</strong>。</li><li><strong>onStart()<strong>：在Activity由不可见变为可见时调用，</strong>可见</strong>，此时用户可以看到界面，但没有获取到焦点，用户不能进行操作。</li><li><strong>onResume()<strong>：此时Activity获取到焦点，能够与用户交互，</strong>可见</strong>。此方法是在与用户进行交互时调用。</li><li><strong>onPause()<strong>：在当前Activity被其它Activity覆盖或锁屏时调用，</strong>可见</strong>，但失去焦点。此时会对状态信息和数据进行保存。</li><li><strong>onStop()<strong>：在Activity不可见时调用，</strong>不可见</strong>，Activity进入到了后台，且Activity对象仍在内存中。</li><li>**onDestroy()**：在Activity销毁时调用。</li><li>**onRestart()**：当处于Stopped状态的活动需要再次展现给用户时调用。</li></ul><h3 id="Activity的生命周期"><a href="#Activity的生命周期" class="headerlink" title="Activity的生命周期"></a>Activity的生命周期</h3><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307041425246.jpg"></p><p>上述图片中，存在三个周期：</p><ol><li>整个的生命周期：onCreate() → onStart() → onResume() → Activity running → onPause() → onStop() → onDestory()</li><li>可见的生命周期：onStart() → onResume() → Activity running → onPause() → onStop() → onRestart()</li><li>前台的生命周期：onResume() → Activity running → onPause()</li></ol><h3 id="Activity栈"><a href="#Activity栈" class="headerlink" title="Activity栈"></a>Activity栈</h3><p>Android系统采用栈结构来管理应用程序运行过程中所启动的Activity，即Activity栈。</p><p>示例如下：</p><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307041424674.png"></p><h3 id="Activity的四种状态"><a href="#Activity的四种状态" class="headerlink" title="Activity的四种状态"></a>Activity的四种状态</h3><ol><li><p><strong>Active&#x2F;Running</strong></p><p>当前Activity处在屏幕最前端（在Activity栈的顶部），此时可以与用户进行交互，叫做活动状态或运行状态。</p></li><li><p><strong>Paused</strong></p><p>如果当前Activity被一个新的非全屏的Activity 或者一个透明的Activity 覆盖时，此时的状态叫做暂停状态（Paused）。此时它依然保持活力（保持所有的状态，成员信息，和窗口管理器保持连接），所以它仍然可见，但已经失去了焦点故不可与用户进行交互。当内存不足时，Activity通常会被系统杀死。</p></li><li><p><strong>Stopped</strong></p><p>如果当前的Activity被另一个Activity完全遮挡，此时状态叫做停止状态（Stopped）。它仍然保留所有状态和成员信息，但是它不再对用户可见。当内存不足时，Activity通常会被系统杀死。</p></li><li><p><strong>Killed</strong></p><p>Activity被系统终止进程，将该Activity从内存中删除。</p></li></ol><h3 id="Activity的启动模式"><a href="#Activity的启动模式" class="headerlink" title="Activity的启动模式"></a>Activity的启动模式</h3><ol><li><p><strong>Standard</strong>标准模式 </p><p>Activity的默认启动模式。在该模式下，同一个Activity可以被多次实例化。</p></li><li><p><strong>singleTop</strong> 栈顶单例模式 </p><p>如果需要启动的Activity存在且位于栈顶，则不会重新创建，而是使用栈顶的Activity。但是，如果需要启动的Activity存在但不位于栈顶，那么仍创建新的Activity。</p></li><li><p><strong>singleTask</strong>栈内单例模式</p><p>同一个Activity只被允许在系统中有且仅有一个Activity实例。如果系统中已经有了一个实例， 持有这个实例的任务将移动到顶部，同时intent将被通过onNewIntent()发送。 如果没有，则会创建一个新的Activity并置放在合适的任务中。</p></li><li><p><strong>singleInstance</strong>全局单例模式 </p><p>上面三种模式都是在同一个任务栈中进行的，而这个模式它会另起一个新的任务栈。将一个Activity指定为singleInstance模式，当启动这个Activiy时会使用一个新的任务栈来管理它，与singleTask相同， 同一时刻在系统中只会存在一个这样的Activity实例。</p></li></ol><h2 id="2-2-Service"><a href="#2-2-Service" class="headerlink" title="2.2 Service"></a>2.2 Service</h2><p>Service是一种可以长时间运行在后台的，无界面的服务程序。它可以和其他组件进行交互。Service需要在AndroidManifest.xml配置文件中进行注册。</p><p>举个例子，比如音乐播放器在后台仍然可以进行音乐的播放、暂停、切歌等操作，这些都是由播放音乐的Service进行控制。</p><h3 id="Service的相关方法"><a href="#Service的相关方法" class="headerlink" title="Service的相关方法"></a>Service的相关方法</h3><ul><li>**onCreate()**：Service首次被创建时才会调用该方法。</li><li>**onDestory()**：Service被关闭时会回调该方法。</li><li>**onStartCommand()**：当Service被启动时调用该方法。在此方法中，可以执行如播放媒体文件、下载资源等任务。</li><li>**onbind()**：与目标客户端进行绑定，返回一个 IBinder 对象，app通过该对象与Service组件进行通信。</li><li>**onUnbind()**：只有与Service绑定的所有客户端都取消绑定时，才会调用该方法。</li><li>**stopSelf()**：服务自身调用，用于停止服务。</li><li>**startService()**：客户端请求启动服务，使服务进入“started”状态，即使应用程序已经停止或者已经销毁，服务仍然可以继续运行。</li><li>**stopService()**：客户端请求停止服务，释放所占用的资源。</li><li>**bindService()**：客户端请求绑定服务。</li><li>**unbindService()**：客户端请求解除服务绑定。这个方法用于断开客户端与服务之间的连接。</li></ul><h3 id="Service的生命周期"><a href="#Service的生命周期" class="headerlink" title="Service的生命周期"></a>Service的生命周期</h3><p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307041423993.png"></p><p>上述图片中，存在两种周期：</p><ol><li><p><strong>StartService</strong></p><p>onCreate() → onStartCommand() → Service running → onDestory()</p></li><li><p><strong>BindService</strong></p><p>onCreate() → onBind() → …… → onUnbind() → onDestory()</p></li></ol><h3 id="Service的两种启动方式"><a href="#Service的两种启动方式" class="headerlink" title="Service的两种启动方式"></a>Service的两种启动方式</h3><ol><li><strong>StartService</strong><ul><li>系统对同一个Service只会创建一个Service实例。如果Service实例不存在，调用startService则会实例化一个Service对象，否则复用之前创建的Service实例。</li><li>通过stopSelf()或StopService()关闭Service。</li><li>如果调用者直接退出而没有调用StopService，Service会一直在后台运行。该Service的调用者再启动起来后可以通过stopService关闭Service。</li></ul></li><li><strong>BindService</strong><ul><li>系统对同一个Service只会创建一个Service实例。如果Service实例不存在，调用bindService则会实例化一个Service对象，否则复用之前创建的Service实例。</li><li>当Service只与一个客户端绑定时，调用unbindService()或者调用者退出，Service会被销毁。当Service与多个客户端绑定时，只有与所有客户端取消绑定后，Service才会被销毁。</li></ul></li></ol><h2 id="2-3-BroadcastReceiver"><a href="#2-3-BroadcastReceiver" class="headerlink" title="2.3 BroadcastReceiver"></a>2.3 BroadcastReceiver</h2><p>Broadcast是一种广泛运用的在应用程序之间传输信息的机制。而BroadcastReceiver 是对发送出来的Broadcast进行过滤接受并响应的一类组件。可以使用BroadcastReceiver 来让应用对外部的事件做出响应。</p><p>BroadcastReceiver只能执行非常有限的操作，因为它是在主线程中执行的，并且会随着时间的推移而被系统杀死以释放资源。如果BroadcastReceiver需要执行长时间运行的任务，建议使用IntentService或者开启新的线程来执行任务。</p><h3 id="BroadcastReceiver的相关方法"><a href="#BroadcastReceiver的相关方法" class="headerlink" title="BroadcastReceiver的相关方法"></a>BroadcastReceiver的相关方法</h3><ul><li><p>**onReceive()**：BroadcastReceiver 必须实现的方法。在接收到广播时，系统会调用该方法。</p></li><li><p>**setResult()**：设置返回结果和数据。</p></li><li><p>**getResultCode()**：获取BroadcastReceiver 返回结果的状态码。</p></li><li><p>**getResultData()**：获取BroadcastReceiver 返回的数据。</p></li><li><p>**getResultExtras()**：获取BroadcastReceiver 返回的额外数据。</p></li><li><p>**peekService()**：检查服务是否已启动，返回对应的 IBinder对象。</p></li><li><p>**setAbortBroadcast()**：终止广播传递，使其他BroadcastReceiver 接收不到该广播。</p></li><li><p>**getInstance()**：获得广播实例</p></li><li><p>**registerReceiver()**：注册BroadcastReceiver </p></li><li><p>**sendBroadcast()**：发送广播</p></li><li><p>**unregisterReceiver()**：销毁BroadcastReceiver</p></li></ul><h3 id="Broadcast的两种类型"><a href="#Broadcast的两种类型" class="headerlink" title="Broadcast的两种类型"></a>Broadcast的两种类型</h3><ol><li><p><strong>标准广播</strong></p><p>完全异步执行的广播，所有的接收者几乎同时接收到广播消息。这种广播不保证接收者能够同时处理广播，也不能保证接收者按照特定的顺序接收到广播。</p></li><li><p><strong>有序广播</strong></p><p>同步执行的一种广播，发出广播后，同一时间只有一个广播接受者能收到，当这个广播接收者的逻辑执行完后，才会传递到下一个接收者。当然，前面的接受者还可以截断广播的继续传递，那么后续接受者就无法收到广播信息了。</p></li></ol><h3 id="BroadcastReceiver的两种注册方法"><a href="#BroadcastReceiver的两种注册方法" class="headerlink" title="BroadcastReceiver的两种注册方法"></a>BroadcastReceiver的两种注册方法</h3><ol><li><p>静态注册</p><p>在AndroidManifest,xml配置文件中进行注册。</p></li><li><p>动态注册</p><p>在代码中使用 Context.registerReceiver() 进行注册。</p></li></ol><h4 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h4><ul><li>动态注册的广播接收器与注册它的Activity共存亡。</li><li>静态注册的广播接收器与设备共存亡。</li></ul><h2 id="2-4-ContentProvider"><a href="#2-4-ContentProvider" class="headerlink" title="2.4 ContentProvider"></a>2.4 ContentProvider</h2><p>ContentProvider允许应用程序共享数据，并通过URI进行访问。如果一个ContentProvider管理多个数据集，其将会为每个数据集分配一个独立的URI。</p><p>Android所提供的ContentProvider都存放在android.provider这个包里面。</p><p>ContentProvider需要在AndroidManifest.xml配置文件中进行注册。</p><h3 id="ContentProvider的相关方法"><a href="#ContentProvider的相关方法" class="headerlink" title="ContentProvider的相关方法"></a>ContentProvider的相关方法</h3><p>ContentProvider 使用 URI 来定义数据集合，并提供了一些标准方法，如查询、插入、更新和删除等，以便其他应用程序可以通过 ContentResolver 访问和操作数据。ContentResolver 可以通过 Context.getContentResolver() 方法获得。</p><ul><li>**onCreate()**：在 ContentProvider 被创建时调用，会及逆行一些初始化工作。</li><li>**query()**：用于获取 ContentProvider 中的数据。</li><li>**insert()**：用于向 ContentProvider 中插入数据。</li><li>**update()**：用于更新 ContentProvider 中现有的数据。</li><li>**delete()**：用于从 ContentProvider中删除数据。</li></ul><h3 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h3><p>URI(Universal Resource Identifier) 统一资源标识符，每一个 ContentProvider 都对外提供一个能够唯一标识自己数据集的公开URI，这个URI用于表示这个Content Provider提供的数据。</p><p>URI被用来标识数据源和操作类型，它通常由以下几部分组成：</p><ol><li>**方案(scheme)**：用于指定访问资源所需要的协议或类型，例如http、https、file、content等。</li><li>**授权(authority)**：分为主机(host)和端口(port)。主机用于标识要访问的主机名或IP地址，对于本地文件，主机可以是localhost或空。端口可选。</li><li>**路径(Path)**：用于标识要访问的资源在服务器中的位置。它由多个单词组成，并通过’&#x2F;‘分割开来，例如“contacts&#x2F;people&#x2F;3”。后面可以增添查询参数（用于传递键值对形式的数据）和片段标识符(Fragment Identifier，用于表示资源中特定部分，例如HTML中的锚点）。</li></ol><p>URI通常有以下三种形式：</p><ul><li>scheme**:**&#x2F;&#x2F;authority&#x2F;path?query#fragment（用于访问本地资源）</li><li>scheme**:<strong>&#x2F;&#x2F;host</strong>:**port&#x2F;path?query#fragment（用于访问网络资源）</li><li>scheme**:**scheme-specific-part#fragment（用于打电话等服务）</li></ul><p>一个完整的URI示例如下：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">content:<span class="hljs-regexp">//</span>com.example.provider<span class="hljs-regexp">/contacts/</span>people/<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><hr><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/628232942">Android基础知识——四大组件 - 知乎 (zhihu.com)</a></p><p><a href="https://www.runoob.com/w3cnote/android-tutorial-activity.html">4.1.1 Activity初学乍练 | 菜鸟教程 (runoob.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android系统架构</title>
    <link href="/2023/07/04/Android%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/"/>
    <url>/2023/07/04/Android%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Android系统架构"><a href="#一、Android系统架构" class="headerlink" title="一、Android系统架构"></a>一、Android系统架构</h1><h2 id="1-1-概述"><a href="#1-1-概述" class="headerlink" title="1.1 概述"></a>1.1 概述</h2><p>Google在Android 8版本时开展了 <code>Treble</code> 计划，对Android系统进行了重新架构，将安卓系统框架与Vendor层解耦，力求彻底解决安卓碎片化的问题，这是安卓系统架构最大的变化。</p><p>Android 8前后两者区别在于Android 8 之后的系统架构多了一层硬件抽象层(HAL)。，其目的是将物理硬件与操作系统分离，使开发人员可以更加方便地编写硬件驱动程序，并且能够在各种不同地硬件平台之间进行移植。</p><p>以下是官方给出的Android 8系统之后地分层架构图，总共分为5层，从下往上依次分为Linux内核、硬件抽象层(HAL)、原生 Native 库和 Android Runtime、Java API 框架以及应用层，其中每一层都包含大量的子模块或子系统。</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main/img/202307041139788.png"/><h2 id="1-2-Linux内核"><a href="#1-2-Linux内核" class="headerlink" title="1.2 Linux内核"></a>1.2 Linux内核</h2><p>Android系统的底层基础是Linux内核层，其主要职责是管理硬件资源和进程控制。其中包括了设备驱动程序、内存管理、网络协议栈等。这些功能为上层的应用程序提供了稳定的基础服务。</p><p>其中，设备驱动程序是Linux内核非常重要的一部分，它负责与硬件进行交互，包括摄像头、显示器、WiFi、蓝牙等。通过调用设备驱动程序，Android系统才能完成与硬件设备的通信和操作。</p><h2 id="1-3-硬件抽象层-HAL"><a href="#1-3-硬件抽象层-HAL" class="headerlink" title="1.3 硬件抽象层(HAL)"></a>1.3 硬件抽象层(HAL)</h2><p>HAL是位于操作系统内核与硬件电路之间的接口层，其目的在于将硬件抽象化。HAL定义了一系列标准接口和抽象类，这些接口和抽象类描述了许多硬件设备的通用行为和属性。每个HAL模块都对应一个硬件设备类型，例如相机、蓝牙等。当Android系统需要使用某个硬件设备时，它会根据设备类型选择合适的HAL模块，然后调用该模块提供的API来访问设备。</p><h2 id="1-4-原生-C-x2F-C-库"><a href="#1-4-原生-C-x2F-C-库" class="headerlink" title="1.4 原生 C&#x2F;C++ 库"></a>1.4 原生 C&#x2F;C++ 库</h2><p>Native C&#x2F;C++ 层是指使用 C 和 C++ 语言编写的代码，通常被称为本地层。在 Android 应用程序中，本地层主要用于访问底层系统资源，例如文件系统、网络协议栈和硬件接口等。本地层还可以提供与 Java 代码的互操作性，使得 Android 应用程序能够充分利用本地代码的优势，例如高效的内存管理和快速的算法执行速度。</p><p>在 Android 架构中，本地层主要负责以下几个方面的任务：</p><ol><li><p>提供与硬件交互的接口：本地层可以实现与硬件设备的交互，例如相机、音频和传感器等。这些设备通常需要直接访问底层系统资源，因此需要使用本地层的功能来访问它们。</p></li><li><p>实现高性能算法：以 C 和 C++ 语言编写的代码通常比 Java 代码更具有高性能和高效率。当需要处理大量数据或进行复杂计算时，本地层可以提供更好的性能。例如，图像处理和音频处理等应用程序通常会使用本地库来提高性能。</p></li><li><p>跨平台移植支持：由于 C 和 C++ 语言是跨平台的，因此本地层可以轻松地在不同的操作系统和处理器架构之间进行移植。这样可以使得应用程序更具有可移植性，同时也可以充分利用各种不同硬件平台的优势。</p></li></ol><p>以下是该库的一些API：</p><ul><li><strong>WebKit</strong>：一套网页浏览器的软件引擎。</li><li><strong>OpenMAX AL</strong>：用于实现音频或视频播放功能，包括控制音频输出设备、读取音频文件、解码音频流、生成音频输出等。</li><li><strong>Libc</strong>：从BSD继承来的标准C系统函数库，专门为基于嵌入式linux的设备定制。</li><li><strong>Media Framework</strong>：多媒体库，支持多种常用的音频、视频格式录制和回放。</li><li><strong>OpenGL ES</strong>：3D绘图函数库。</li></ul><h2 id="1-5-Android-Runtime"><a href="#1-5-Android-Runtime" class="headerlink" title="1.5 Android Runtime"></a>1.5 Android Runtime</h2><p>Android Runtime又可以分为ART虚拟机和核心库两部分。</p><h3 id="核心库"><a href="#核心库" class="headerlink" title="核心库"></a>核心库</h3><p>核心库是一组基础类库，提供 Java API 框架所使用的 Java 编程语言中的大部分功能，包括了专门为 Android 开发的基于 Java 的程序库，这样开发者可以使用Java语言来编写Android应用。以下是一些常用的库：</p><ul><li>android.app：提供应用程序模型的访问，是所有 Android 应用程序的基石。</li><li>android.content：方便应用程序之间，应用程序组件之间的内容访问，发布，消息传递。</li><li>android.database：用于访问内容提供者发布的数据，包含 SQLite 数据库管理类。</li><li>android.os：提供应用程序访问标注操作系统服务的能力，包括消息，系统服务和进程间通信。</li><li>android.text：在设备显示上渲染和操作文本。</li><li>android.view：应用程序用户界面的基础构建块。</li><li>android.widget：丰富的预置用户界面组件集合，包括按钮，标签，列表，布局管理，单选按钮等。</li><li>android.webkit：一系列类的集合，允许为应用程序提供内建的 Web 浏览能力。</li></ul><h3 id="ART虚拟机"><a href="#ART虚拟机" class="headerlink" title="ART虚拟机"></a>ART虚拟机</h3><p>ART 虚拟机是 Android 5.0 及以上版本中默认使用的虚拟机，代替了Android 5.0以下版本中使用的Dalvik虚拟机。它用于将应用程序代码翻译成可在 Android 设备上运行的机器语言。</p><p>它与旧版 Dalvik 虚拟机相比具有更好的性能和稳定性。与 Dalvik 相比，ART 的主要优势是 Ahead-of-time （AOT）编译技术，可以在应用程序安装时预先编译代码（编译成ELF可执行文件），以提高应用程序的启动时间和性能。</p><p>当用户打开一个应用程序时，ART 会在后台使用 AOT 编译器将应用程序的 Dex 字节码转换成本地机器代码，并存储在设备的存储空间中。这样，在下次打开应用程序时，就可以直接加载已经编译好的代码，避免了解释执行的过程，从而提高了应用程序的运行速度和响应时间。</p><p>此外，ART 还支持 Just-In-Time（ JIT）编译技术，可以在应用程序运行过程中对频繁执行的代码进行实时编译，进一步提高应用程序的执行效率。</p><h2 id="1-6-Java-API-框架"><a href="#1-6-Java-API-框架" class="headerlink" title="1.6 Java API 框架"></a>1.6 Java API 框架</h2><p>Java API 框架层提供了许多API接口，方便开发人员开发各种应用程序。这些API包括了：</p><ul><li><strong>Content Provider</strong>：用于应用程序之间共享数据。</li><li><strong>View System</strong>：控制UI界面的渲染和交互。</li><li><strong>Activity Manager</strong>：管理各个Activity和Task的组件，使得用户可以在不同的Activity之间进行切换。</li><li><strong>Location Manager</strong>：提供地理位置及定位功能服务。</li><li><strong>Package Manager</strong>：管理所有安装在Android系统中的应用程序。</li><li><strong>Notification Manager</strong>：可让所有应用在状态栏中显示自定义提醒。</li><li><strong>Resource Manager</strong>：用于访问非代码资源，例如本地化的字符串、图形和布局文件。</li><li><strong>Telephony Manager</strong>：管理所有的移动设备功能。</li><li><strong>Window Manager</strong>：管理所有的窗口程序。</li></ul><h2 id="1-7-系统应用"><a href="#1-7-系统应用" class="headerlink" title="1.7 系统应用"></a>1.7 系统应用</h2><p>最后一个层次是系统应用层，这是用户直接面对的部分，也是Android系统最重要的一部分。系统应用层包括了通讯录、短信、电话、相机、浏览器等各种常见应用程序。每个应用程序都可以通过调用上面几个层次提供的API接口，来完成自己的任务。</p><h1 id="二、总结"><a href="#二、总结" class="headerlink" title="二、总结"></a>二、总结</h1><p>以上只是静态分析了Android系统架构，虽然可以了解Android架构地层次和功能，但不足以了解Android整个系统运行时各层次之间的信息传递和交互，即不能真正看穿Android的运行机理，故还需进一步学习。</p><hr><p>参考：</p><p><a href="https://developer.android.google.cn/guide/platform?hl=zh-cn">平台架构  | Android 开发者  | Android Developers (google.cn)</a></p><p><a href="https://source.android.google.cn/docs/core/runtime?hl=zh-cn">Android Runtime (ART) 和 Dalvik  | Android 开源项目  | Android Open Source Project (google.cn)</a></p><p><a href="http://gityuan.com/android/">Android 操作系统架构开篇 - Gityuan博客 | 袁辉辉的技术博客</a></p><p><a href="https://blog.csdn.net/Gityuan/article/details/88779176">Android技术架构演进与未来_Gityuan的博客-CSDN博客</a></p><p><a href="https://juejin.cn/post/7119763605620260894">Android系统架构及其相关模块说明</a></p><p><a href="https://zhuanlan.zhihu.com/p/146863957">Dalvik 和 ART 有什么区别？深扒 Android 虚拟机发展史，真相却出乎意料！ - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Android</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF-Reverse——Prombles Of Page Two</title>
    <link href="/2023/07/04/BUUCTF_Reverse_Prombles%20Of%20Page%20Two/"/>
    <url>/2023/07/04/BUUCTF_Reverse_Prombles%20Of%20Page%20Two/</url>
    
    <content type="html"><![CDATA[<p>这里就附上链接：</p><p><a href="https://blog.csdn.net/qq_52193383/article/details/131529421?spm=1001.2014.3001.5501">BUUCTF-Reverse —— 第二页的题目集合_gal2xy的博客-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUUCTF-Reverse——Prombles Of Page One</title>
    <link href="/2023/07/04/BUUCTF_Reverse_Prombles%20Of%20Page%20One/"/>
    <url>/2023/07/04/BUUCTF_Reverse_Prombles%20Of%20Page%20One/</url>
    
    <content type="html"><![CDATA[<p>最近几个月虽然有写博客，不过因为嫌麻烦不想发（文章积累多了，图片更多，发到github博客上还要做一些格式上的处理，就这样越拖越不想发博客）。不过最近几天还是想着处理一下，不然到时候博客网站真荒废了！</p><p>BUUCTF的Reverse专区因为图片太多，就发CSDN上了，因为处理起来比较容易。这里就附上链接：</p><p><a href="https://blog.csdn.net/qq_52193383/article/details/131528938?spm=1001.2014.3001.5501">BUUCTF-Reverse —— 第一页的题目集合_gal2xy的博客-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022DASTF十月赛</title>
    <link href="/2022/10/26/2022DASTF%E5%8D%81%E6%9C%88%E8%B5%9B/"/>
    <url>/2022/10/26/2022DASTF%E5%8D%81%E6%9C%88%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt1</span>(<span class="hljs-params">n</span>):<br>    n1 = <span class="hljs-built_in">hex</span>(n&gt;&gt;<span class="hljs-number">200</span>).encode()<br>    n2 = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(n))[<span class="hljs-number">20</span>:].encode()<br>    <span class="hljs-keyword">return</span> n1,n2<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt2</span>(<span class="hljs-params">m , n_1</span>):<br>    c_1 = <span class="hljs-built_in">pow</span>(m,e_1,n_1)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c_1 = &#x27;</span>+<span class="hljs-built_in">str</span>(c_1))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt3</span>(<span class="hljs-params">m , n_2</span>):<br>    c_2 = <span class="hljs-built_in">pow</span>( m , e_2 , n_2)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c_2 = &#x27;</span>+<span class="hljs-built_in">str</span>(c_2))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt4</span>(<span class="hljs-params">m</span>):<br>    k = getPrime(<span class="hljs-number">512</span>)<br>    m = m % k<br>    c_3 = <span class="hljs-built_in">pow</span>(m, e_2, n_3)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c_3 = &#x27;</span> + <span class="hljs-built_in">str</span>(c_3))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;m = &#x27;</span> + <span class="hljs-built_in">str</span>(m))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;k = &#x27;</span> + <span class="hljs-built_in">str</span>(k))<br><br>m1,m2 = encrypt1(flag)<br>m1 = bytes_to_long(m1)<br>m2 = bytes_to_long(m2)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n_2 = &#x27;</span> + <span class="hljs-built_in">str</span>(n_2))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n_3 = &#x27;</span> + <span class="hljs-built_in">str</span>(n_3))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;e_1 = &#x27;</span> + <span class="hljs-built_in">str</span>(e_1))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;e_2 = &#x27;</span> + <span class="hljs-built_in">str</span>(e_2))<br><br>encrypt2(m1,n_1)<br>encrypt3(n_1,n_2)<br>encrypt4(m2)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n_2 = 675835056744450121024004008337170937331109883435712066354955474563267257037603081555653829598886559337325172694278764741403348512872239277008719548968016702852609803016353158454788807563316656327979897318887566108985783153878668451688372252234938716250621575338314779485058267785731636967957494369458211599823364746908763588582489400785865427060804408606617016267936273888743392372620816053927031794575978032607311497491069242347165424963308662091557862342478844612402720375931726316909635118113432836702120449010</span><br><span class="hljs-string">n_3 = 91294511667572917673898699346231897684542006136956966126836916292947639514392684487940336406038086150289315439796780158189004157494824987037667065310517044311794725172075653186677331434123198117797575528982908532086038107428540586044471407073066169603930082133459486076777574046803264038780927350142555712567</span><br><span class="hljs-string">e_1 = 65537</span><br><span class="hljs-string">e_2 = 3</span><br><span class="hljs-string">c_1 = 47029848959680138397125259006172340325269302342762903311733700258745280761154948381409328053449580957972265859283407071931484707002138926840483316880087281153554181290481533</span><br><span class="hljs-string">c_2 = 332431</span><br><span class="hljs-string">c_3 = 11951299411967534922967467740790967733301092706094553308467975774492025797106594440070380723007894861454249455013202734019215071856834943490096156048504952328784989777263664832098681831398770963056616417301705739505187754236801407014715780468333977293887519001724078504320344074325196167699818117367329779609</span><br><span class="hljs-string">m = 9530454742891231590945778054072843874837824815724564463369259282490619049557772650832818763768769359762168560563265763313176741847581931364</span><br><span class="hljs-string">k = 8139616873420730499092246564709331937498029453340099806219977060224838957080870950877930756958455278369862703151353509623205172658012437573652818022676431</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>解<code>m1</code>要先求出<code>n_1</code>，<code>n_1</code>的加密为低指数加密，爆破可以得出<code>n_1</code>，yafu分解然后解密<code>c_1</code>。</p><p><code>m2</code>部分根据代码有公式<br>$$<br>\begin{cases}<br>m_2 &#x3D; m + t*k\\<br>c_3 &#x3D; m^{e_2}\mod n_3<br>\end{cases}<br>&#x3D;&#x3D;&gt;c_3&#x3D;(m_2-t*k)^{e_2}\mod n_3<br>$$<br>于是在模$n_3$的域上构造$f &#x3D; (m_2-t*k)^{e_2} - c_3$ ，解出$t&#x3D;0$，即$m_2&#x3D;m$。</p><p>$m_1$，$m_2$解出来的有重叠部分，需去除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> hexlify,unhexlify<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> iroot,invert<br><br><span class="hljs-comment">#n_2是偶数</span><br>n_2 = <span class="hljs-number">675835056744450121024004008337170937331109883435712066354955474563267257037603081555653829598886559337325172694278764741403348512872239277008719548968016702852609803016353158454788807563316656327979897318887566108985783153878668451688372252234938716250621575338314779485058267785731636967957494369458211599823364746908763588582489400785865427060804408606617016267936273888743392372620816053927031794575978032607311497491069242347165424963308662091557862342478844612402720375931726316909635118113432836702120449010</span><br>n_3 = <span class="hljs-number">91294511667572917673898699346231897684542006136956966126836916292947639514392684487940336406038086150289315439796780158189004157494824987037667065310517044311794725172075653186677331434123198117797575528982908532086038107428540586044471407073066169603930082133459486076777574046803264038780927350142555712567</span><br>e_1 = <span class="hljs-number">65537</span><br>e_2 = <span class="hljs-number">3</span><br>c_1 = <span class="hljs-number">47029848959680138397125259006172340325269302342762903311733700258745280761154948381409328053449580957972265859283407071931484707002138926840483316880087281153554181290481533</span><br>c_2 = <span class="hljs-number">332431</span><br>c_3 = <span class="hljs-number">11951299411967534922967467740790967733301092706094553308467975774492025797106594440070380723007894861454249455013202734019215071856834943490096156048504952328784989777263664832098681831398770963056616417301705739505187754236801407014715780468333977293887519001724078504320344074325196167699818117367329779609</span><br>m = <span class="hljs-number">9530454742891231590945778054072843874837824815724564463369259282490619049557772650832818763768769359762168560563265763313176741847581931364</span><br>k = <span class="hljs-number">8139616873420730499092246564709331937498029453340099806219977060224838957080870950877930756958455278369862703151353509623205172658012437573652818022676431</span><br><br><span class="hljs-comment">#低指数爆破</span><br>t = <span class="hljs-number">0</span><br>tmp = c_2<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    <span class="hljs-keyword">if</span>(iroot(tmp,<span class="hljs-number">3</span>)[<span class="hljs-number">1</span>]):<br>        n_1 = iroot(tmp,<span class="hljs-number">3</span>)[<span class="hljs-number">0</span>]<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n_1 = <span class="hljs-subst">&#123;n_1&#125;</span>&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;t=<span class="hljs-subst">&#123;t&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>    tmp += n_2<br>    t += <span class="hljs-number">1</span><br><br><span class="hljs-comment">#yafu n_1</span><br>p = <span class="hljs-number">2224243981</span><br>q = <span class="hljs-number">2732337821</span><br>r = <span class="hljs-number">11585031296201346891716939633970482508158508580350404805965250133832632323150440185890235814142601827544669601048550999405490149435265122374459158586377571</span><br><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)*(r-<span class="hljs-number">1</span>)<br>d = invert(e_1,phi)<br>m1 = <span class="hljs-built_in">pow</span>(c_1,d,n_1)<br><span class="hljs-comment"># print(long_to_bytes(m1))</span><br><span class="hljs-comment">#0x666c61677b3230366538353964</span><br>mm = <span class="hljs-number">0x666c61677b3230366538353964</span><br>flag1 = long_to_bytes(mm)<br><span class="hljs-built_in">print</span>(flag1)<br><span class="hljs-string">&#x27;&#x27;&#x27;sage</span><br><span class="hljs-string">n_3 = 91294511667572917673898699346231897684542006136956966126836916292947639514392684487940336406038086150289315439796780158189004157494824987037667065310517044311794725172075653186677331434123198117797575528982908532086038107428540586044471407073066169603930082133459486076777574046803264038780927350142555712567</span><br><span class="hljs-string">e_2 = 3</span><br><span class="hljs-string">c_3 = 11951299411967534922967467740790967733301092706094553308467975774492025797106594440070380723007894861454249455013202734019215071856834943490096156048504952328784989777263664832098681831398770963056616417301705739505187754236801407014715780468333977293887519001724078504320344074325196167699818117367329779609</span><br><span class="hljs-string">m = 9530454742891231590945778054072843874837824815724564463369259282490619049557772650832818763768769359762168560563265763313176741847581931364</span><br><span class="hljs-string">k = 8139616873420730499092246564709331937498029453340099806219977060224838957080870950877930756958455278369862703151353509623205172658012437573652818022676431</span><br><span class="hljs-string">p.&lt;x&gt; = PolynomialRing(Zmod(n_3))</span><br><span class="hljs-string">f= (m+x*k)^3 - c_3</span><br><span class="hljs-string">print(f.monic().small_roots())</span><br><span class="hljs-string"># [0]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">assert</span> m**<span class="hljs-number">3</span> % n_3 == c_3<br>flag2 = unhexlify(long_to_bytes(m))<br><span class="hljs-built_in">print</span>(flag2)<br><span class="hljs-comment">#有重复的字符</span><br><span class="hljs-comment"># flag&#123;206e859d859d8e854c4f600cb12757bbf9f5&#125;</span><br><span class="hljs-comment"># DASCTF&#123;206e859d8e854c4f600cb12757bbf9f5&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Proof-Yourself"><a href="#Proof-Yourself" class="headerlink" title="Proof_Yourself"></a>Proof_Yourself</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gy<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> functools<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> os<br><br>_N = gy.next_prime(<span class="hljs-number">2</span> ** <span class="hljs-number">512</span>)<br>_rand_int = functools.partial(random.SystemRandom().randint, <span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Encryptor</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.pubKey = <span class="hljs-literal">None</span><br>        self.priKey = <span class="hljs-literal">None</span><br>        self.r = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__gen_prime__</span>(<span class="hljs-params">self, rs, n_bits</span>):<br>        p = gy.mpz_urandomb(rs, n_bits)<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> gy.is_prime(p):<br>            p += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> p<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__key_gen__</span>(<span class="hljs-params">self, n_bits=<span class="hljs-number">512</span></span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            rs = gy.random_state(datetime.now().microsecond)<br>            p = self.__gen_prime__(rs, n_bits)<br>            q = self.__gen_prime__(rs, n_bits)<br>            n = p * q<br>            lmd = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> gy.gcd(n, lmd) == <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">break</span><br><br>        g = n + <span class="hljs-number">1</span><br>        mu = gy.invert(lmd, n)<br>        self.pubKey = [n, g]<br>        self.priKey = [lmd, mu]<br>        <span class="hljs-keyword">return</span> (self.pubKey, self.priKey)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encipher</span>(<span class="hljs-params">self, plaintext</span>):<br>        m = plaintext<br>        n, g = self.pubKey<br>        <span class="hljs-keyword">if</span> self.r <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            r = gy.mpz_random(gy.random_state(datetime.now().microsecond), n)<br>            <span class="hljs-keyword">while</span> gy.gcd(n, r) != <span class="hljs-number">1</span>:<br>                r += <span class="hljs-number">1</span><br>            self.r = r<br>        <span class="hljs-keyword">else</span>:<br>            r = self.r<br>        ciphertext = gy.powmod(g, m, n ** <span class="hljs-number">2</span>) * gy.powmod(r, n, n ** <span class="hljs-number">2</span>) % (n ** <span class="hljs-number">2</span>)<span class="hljs-comment">#Paillier同态加密</span><br>        <span class="hljs-keyword">return</span> ciphertext<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decipher</span>(<span class="hljs-params">self, ciphertext</span>):<br>        <span class="hljs-comment"># The decryption process is hidden</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0xffffffff</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Proof</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.pubKey = <span class="hljs-literal">None</span><br>        self.proof_param = <span class="hljs-literal">None</span><br>        self.pre_param = <span class="hljs-literal">None</span><br>        self.d = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">setup</span>(<span class="hljs-params">self, pk, c1, c2, c3, m1, m2, r1, r2, r3</span>):<br>        self.pubKey = pk<br>        self.proof_param = [c1, c2, c3, m1, m2, r1, r2, r3]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">pre_work_verify</span>(<span class="hljs-params">self</span>):<br>        c1, c2, c3, m1, m2, r1, r2, r3 = self.proof_param<br>        m4 = gy.mpz_random(gy.random_state(datetime.now().microsecond), self.pubKey[<span class="hljs-number">0</span>])<br>        pai = Encryptor()<br>        pai.pubKey = self.pubKey<br>        c4 = pai.encipher(m4)<br>        r4 = pai.r<br>        pai.r = <span class="hljs-literal">None</span> <span class="hljs-comment">#然后会重新生成r</span><br><br>        c5 = pai.encipher(m2 * m4)<br>        r5 = pai.r<br>        pai.r = <span class="hljs-literal">None</span><br><br>        self.pre_param = [c4, m4, r4, c5, r5]<br>        <span class="hljs-keyword">return</span> c4, c5<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">set_d</span>(<span class="hljs-params">self, d</span>):<br>        self.d = d<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">verify</span>(<span class="hljs-params">self</span>):<br>        n_2q = self.pubKey[<span class="hljs-number">0</span>] ** <span class="hljs-number">2</span><br>        c1, c2, c3, m1, m2, r1, r2, r3 = self.proof_param<br>        c4, m4, r4, c5, r5 = self.pre_param<br>        d = self.d<br><br>        e = d * m1 + m4<br>        a1 = <span class="hljs-built_in">pow</span>(r1, d, n_2q) * r4 % n_2q<br>        b1 = r5 * <span class="hljs-built_in">pow</span>(r3, d, n_2q) % n_2q<br>        a2 = <span class="hljs-built_in">pow</span>(r2, e, n_2q) * gy.invert(b1, n_2q) % n_2q<br>        b2 = <span class="hljs-built_in">pow</span>(c3, d, n_2q) * c5 % n_2q<br><br>        enc = Encryptor()<br>        enc.pubKey = self.pubKey<br>        enc.r = <span class="hljs-built_in">pow</span>(r1, d, n_2q) * r4 % n_2q<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">pow</span>(c1, d, n_2q) * c4 % n_2q != enc.encipher(d * m1 + m4): <span class="hljs-comment"># 这里要 ==</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        enc.r = a2<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(c2, e, n_2q) * gy.invert(b2, n_2q) % n_2q == enc.encipher(<span class="hljs-number">0</span>) <span class="hljs-comment">#必须从这里返回，且为True</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MProof</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.pubKey = <span class="hljs-literal">None</span><br>        self.priKey = <span class="hljs-literal">None</span><br>        self.cs = <span class="hljs-literal">None</span><br>        self.rs = <span class="hljs-literal">None</span><br>        self.k = <span class="hljs-literal">None</span><br>        self.t = <span class="hljs-number">9</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_param</span>(<span class="hljs-params">self, pk, cs, rs, k</span>):<br>        self.pubKey = pk[<span class="hljs-number">0</span>]<br>        self.priKey = pk[<span class="hljs-number">1</span>]<br>        self.cs = cs<br>        self.rs = rs<br>        self.k = k<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">verify</span>(<span class="hljs-params">self, d</span>):<br>        enc = Encryptor()<br>        enc.pubKey = self.pubKey<br>        enc.priKey = self.priKey<br>        cs = self.cs<br>        rs = self.rs<br>        k = self.k<br>        t = self.t<br>        <span class="hljs-keyword">assert</span> k == enc.decipher(cs[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, t - <span class="hljs-number">1</span>):<br>            c1 = cs[<span class="hljs-number">0</span>]<br>            c2 = cs[i - <span class="hljs-number">1</span>]<br>            c3 = cs[i]<br>            m2 = enc.decipher(cs[i - <span class="hljs-number">1</span>])<br>            r1 = rs[<span class="hljs-number">0</span>]<br>            r2 = rs[i - <span class="hljs-number">1</span>]<br>            r3 = rs[i]<br><br>            proof = Proof()<br>            proof.setup(self.pubKey, c1, c2, c3, k, m2, r1, r2, r3)<br><br>            proof.pre_work_verify()<br>            proof.set_d(d)<br><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> proof.verify(): <span class="hljs-comment"># 这里要返回True</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    flag = os.environ[<span class="hljs-string">&quot;flag for GFCTF2022-Crypto Proof Yourself&quot;</span>]<br>    k = _rand_int(_N - <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;k: &quot;</span>, k)<br>    d = _rand_int(_N - <span class="hljs-number">1</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;d: &quot;</span>, d)<br>    param = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;please proof yourself: &quot;</span>))<br><br>    cs = param[<span class="hljs-string">&#x27;cs&#x27;</span>]<br>    rs = param[<span class="hljs-string">&#x27;rs&#x27;</span>]<br>    pk = param[<span class="hljs-string">&#x27;pk&#x27;</span>]<br><br>    <span class="hljs-built_in">print</span>(pk[<span class="hljs-number">0</span>])<br>    <span class="hljs-built_in">print</span>(rs)<br>    mp = MProof()<br>    mp.generate_param(pk, cs, rs, k)<br>    <span class="hljs-keyword">if</span> mp.verify(d):<br>        s = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cs:<br>            s *= i<br>            s %= _N<br>        aes = AES.new(<span class="hljs-built_in">str</span>(s)[:<span class="hljs-number">32</span>].encode(), AES.MODE_ECB)<br>        flag = flag.encode()<br>        <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(flag) % AES.block_size != <span class="hljs-number">0</span>:<br>            flag += <span class="hljs-string">b&#x27;\x00&#x27;</span><br>        c = aes.encrypt(flag)<br>        c = base64.b64encode(c)<br>        <span class="hljs-built_in">print</span>(c)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;you&#x27;re not yourself!&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure><ul><li><p>MProof类中的verify()部分</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">k</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span> enc.decipher(cs[<span class="hljs-number">0</span>])<br><span class="hljs-attribute">m2</span> <span class="hljs-operator">=</span> enc.decipher(cs[i - <span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><p>说明 $k(m_1)$ 与 $c_1(cs[0])$是一组明密文，$m_2$ 与 $c_2(cs[i-1])$是一组明密文。</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-built_in">proof</span>.pre_work_verify()<br></code></pre></td></tr></table></figure><p>说明$c_4,m_4,r_4$是一组，$c_5,m_2*m_4$是一组。</p></li><li><p>Proof类中的verify()部分</p><p>就是一堆公式然后不断化简。</p><p>首先我们要明确verify返回的值必须是True，也就是从最后一个return返回，所以以下两个等式成立</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">① <span class="hljs-built_in">pow</span>(c1, d, n_2q) * c4 % n_2q == enc.encipher(d * m1 + m4)<br>② <span class="hljs-built_in">pow</span>(c2, e, n_2q) * gy.invert(b2, n_2q) % n_2q == enc.encipher(<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>根据代码有以下公式<br>$$<br>\begin{cases}<br>\quad e &#x3D; d*m_1+m_4\\<br>\quad a_1 &#x3D; r_1^d*r_4 \% n^2\\<br>\quad b_1 &#x3D; r_5*r_3^d \% n^2\\<br>\quad a_2 &#x3D; r_2^e*b_1^{-1} \% n^2\\<br>\quad b_2 &#x3D; c_3^d*c_5 \% n^2\\<br>\quad r &#x3D; r_1^d*r_4 \% n^2(在①中)\\<br>\quad r &#x3D; r_2^e*b_1^{-1} \% n^2(在②中)<br>\end{cases}<br>$$<br>对①进行化简，有<br>$$<br>\begin{align}<br>c_1^d*c_4 &amp;≡ g^{d*m_1+m_4}*r^n \mod n^2\\<br>c_1^d*c_4 &amp;≡ g^{d*m_1}*g^{m_4}*r_1^{d*n}*r_4^n \mod n^2\\<br>c_1^d &amp;≡ g^{d*m_1}*r_1^{d*n} \mod n^2\\<br>c_1 &amp;≡ g^{m_1}*r_1^n \mod n^2\<br>\end{align}<br>$$<br>因为不可能从这里返回False，所以$c_1,m_1,r_1$是一组。</p><p>对②进行化简，有<br>$$<br>\begin{align}<br>c_2^e*b_2^{-1}&amp;≡r^n \mod n^2\\<br>c_2^e*b_2^{-1} &amp;≡ r_2^{e*n}*b_1^{-n} \mod n^2\\<br>c_2^{e}*b_1^n&amp;≡r_2^{e*n}*b_2 \mod n^2\\<br>c_2^{e}*r_5^n*r_3^{d*n}&amp;≡r_2^{e*n}*c_3^d*c_5 \mod n^2\\<br>c_2^e*(g^{m_2*m_4}*r_5^n)*r_3^{d*n} &amp;≡ r_2^{e*n}*c_3^d*c_5*g^{m_2*m_4} \mod n^2\\<br>c_2^e*r_3^{d*n} &amp;≡ r_2^{e*n}*c_3^d*g^{m_2*m_4} \mod n^2\\<br>g^{e*m_2}*(c_2^e)*(g^{m_3*d}*r_3^{d*n})&amp;≡(g^{e*m_2}*r_2^{e*n})*(c_3^d)*g^{m_3*d}*g^{m_2*m_4} \mod n^2\\<br>g^{e*m_2}*(c_2^e)*(g^{m_3}*r_3^n)^d&amp;≡(g^{m_2}*r_2^n)^e*(c_3^d)*g^{m_3*d+m_2*m_4}\mod n^2<br>\end{align}<br>$$<br>因为是Paillier同态加密，要使得②成立，极有可能是$m_2,c_2,r_2$和$m_3,c_3,r_3$分别为一组。故<br>$$<br>\begin{align}<br>g^{e*m_2}&amp;≡g^{m_3*d+m_2*m_4}\mod n^2\\<br>e*m_2 &amp;≡ m_3*d+m_2*m_4\mod φ(n^2)\\<br>m_1*m_2&amp;≡m_3\mod φ(n^2)<br>\end{align}<br>$$<br>因为我们要求$c_i(即cs[i])$，所以将上述等式转换为<br>$$<br>\begin{align}<br>m_1*m_2&amp;≡m_3\mod φ(n^2)\\<br>g^{m_1*m_2} &amp;≡ g^{m_3} \mod n^2\\<br>c_3 &amp;≡ g^{m_1*m_2}*r_3^n \mod n^2\\<br>cs_i &amp;≡ g^{m_0*m_{i-1}}*r_i^n \mod n^2 \quad,i∈[1,t-1](转换成跟cs_i对应的下标)<br>\end{align}<br>$$<br>前面的等式①的推导已经得到了$cs_0$的加密公式为<br>$$<br>cs_0 ≡ g^{m_0}*r_0^n\mod n^2<br>$$<br>然后根据MProof.verify()中的for循环，有<br>$$<br>\begin{align}<br>i&#x3D;1时,有m_1&amp;&#x3D;m_0*m_0&#x3D;k^2\\<br>i&#x3D;2时,有m_2&amp;&#x3D;m_0*m_1&#x3D;k^3\\…<br>\end{align}<br>$$<br>而$m_0 &#x3D; k$，故$m_i &#x3D; k^{(i+1)}$，$i∈[0,t-1]$。故求$cs_i和cs_0$的公式可合并为<br>$$<br>cs_i ≡ g^{k^{(i+1)}}*r_i^n \mod n^2 \quad,i∈[0,t-1]<br>$$</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> gmpy2<br><br>t = <span class="hljs-number">9</span><br>k = <span class="hljs-number">11279504534075664648994853756208309836888259081316987836068134565254532996039360827546417609514423428910384542842117375028420780633866653159695275393368525</span><br>d = <span class="hljs-number">10221665185656075870670995630062725196664430105025904882602057721789662854574978018794504264934209067929011475979200882531626936657436063908347321906634698</span><br>n, g = pk = [<span class="hljs-number">48818225666351727287207574448645102762537417687444983843100304919285725062598967011116889972414214836241381602471131430626879759533369143920487299838261148460925610689261484965443528954172944323770181595455493018560585886136460076911284321702606299935385905187490733877700172236929823996030434548431963845417</span>, <span class="hljs-number">48818225666351727287207574448645102762537417687444983843100304919285725062598967011116889972414214836241381602471131430626879759533369143920487299838261148460925610689261484965443528954172944323770181595455493018560585886136460076911284321702606299935385905187490733877700172236929823996030434548431963845418</span>]<br>rs = [<span class="hljs-number">7017835444643249654271082822123622319668823350427792339866057586668389112104752762656197513200543360993520983724957230042201508973227162755834455588213955577427129770220944523362675094151087610149577572745132843096125306714661937578722687485657829513505193501779196974947234280267216675125252078851200384511</span>, <span class="hljs-number">11926419785881734844311665235521692826579887231998046623960612782040667947241499738956574205257924912658501445776452678070116549164041547529876699253294424780763676555577471679864402445858336882095147665188840642566915806261768356998922735189200720213585973193760859762565499482788728104626011895319246070666</span>, <span class="hljs-number">42849056994192303821377400100288133996583852078950720125488290595760149056455393645072193770289570081775019724341661792638180771853532605128714550478335577195726229688940314874397525687446284173037582151644404387768530054222357908795147990398041926171515316417608763369700129500666902309717940977358807727525</span>, <span class="hljs-number">569456034348887900543839220414996643340590767934767190156995758515165897120739581783360541347732807472270912131379832279120488198273011491688831841399829273608264595546111772893429063435258947915507670361144515456182164834954215193382047579447153761545329658264080907041640135001986168270265476743567482692</span>, <span class="hljs-number">3882702856238247498776796661311784006527802920550510293689922477675526354665322642479849874736259591551374176143098918760791897417239069537473431992448934909453262242143947844529634470612342500819944459175262578570970986439077317400529787443727039336276584314877540411569781766947088676007567558786204756622</span>, <span class="hljs-number">34782235652997768305926510863494232383450368915240504241174297907018847182768375070693257841105403770877838315164696945795337955510221866283665914601590428884905858716454103802020812133141150426745257298797890891272342044576267512614330845263269719988690131903885166576787904418689220619969803389055644879283</span>, <span class="hljs-number">41592967491176047854989428284345162501007190601227408901070248204262133730525966700579489348638677097892234799114781714483501047161590906530561145043956218048476973681993844049727301616425300184917461748554561251157129032137452031152035104390819324726028213814331358281835310137578997975640720667608761964678</span>, <span class="hljs-number">2578609445428238934369429276761562264275224240462388961086309951471476260768389780485799474959219453117497280460546287104687546269870223859389440049894002336889078632572487931627548008400365190508858547984095575105551066221392543458691134989381950316158817283668533035090342510306180189918351739923749743570</span>]<br><span class="hljs-comment">#len(rs) = 8</span><br>_N = gmpy2.next_prime(<span class="hljs-number">2</span> ** <span class="hljs-number">512</span>)<br>c = <span class="hljs-string">b&#x27;Oq5bkAPCCT6W3CskX+2uqtY5wrhs+2DqupzjIJ0u/Yl0m/Ig1/uvrSWdezrqLxHG&#x27;</span><br><br>cs = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(rs))]<br>n_2 = n**<span class="hljs-number">2</span><br><span class="hljs-comment"># cs[0] = pow(g, k, n_2)*pow(rs[0], n, n_2) % n_2</span><br>m_list = [k**(i+<span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(rs))]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(rs)):<br>    cs[i] = <span class="hljs-built_in">pow</span>(g, m_list[i], n_2)*<span class="hljs-built_in">pow</span>(rs[i], n, n_2) % n_2<br><br>s = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cs:<br>    s *= i<br>    s %= _N<br>aes = AES.new(<span class="hljs-built_in">str</span>(s)[:<span class="hljs-number">32</span>].encode(), AES.MODE_ECB)<br>c = base64.b64decode(c)<br>flag = aes.decrypt(c)<br><span class="hljs-built_in">print</span>(flag)<br><br></code></pre></td></tr></table></figure><h2 id="Recover-Secret"><a href="#Recover-Secret" class="headerlink" title="Recover_Secret"></a>Recover_Secret</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gy<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> functools<br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">from</span> Crypto.Util <span class="hljs-keyword">import</span> number<br><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> sys<br><br>of = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;output&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<br>sys.stdout = of<br>_N = gy.next_prime(<span class="hljs-number">2</span> ** <span class="hljs-number">512</span>)<br>_rand_int = functools.partial(random.SystemRandom().randint, <span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Encryptor</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.pubKey = <span class="hljs-literal">None</span><br>        self.priKey = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__gen_prime__</span>(<span class="hljs-params">self, rs, n_bits</span>):<br>        p = gy.mpz_urandomb(rs, n_bits)<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> gy.is_prime(p):<br>            p += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> p<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__key_gen__</span>(<span class="hljs-params">self, n_bits=<span class="hljs-number">512</span></span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            rs = gy.random_state(datetime.now().microsecond)<br>            p = self.__gen_prime__(rs, n_bits)<br>            q = self.__gen_prime__(rs, n_bits)<br>            n = p * q<br>            lmd = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> gy.gcd(n, lmd) == <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">break</span><br><br>        g = n + <span class="hljs-number">1</span><br>        mu = gy.invert(lmd, n)<br>        self.pubKey = [n, g]<br>        self.priKey = [lmd, mu]<br>        <span class="hljs-keyword">return</span> (self.pubKey, self.priKey)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encipher</span>(<span class="hljs-params">self, plaintext</span>):<br>        m = plaintext<br>        n, g = self.pubKey<br>        r = gy.mpz_random(gy.random_state(datetime.now().microsecond), n)<br>        <span class="hljs-keyword">while</span> gy.gcd(n, r) != <span class="hljs-number">1</span>:<br>            r += <span class="hljs-number">1</span><br>        ciphertext = gy.powmod(g, m, n ** <span class="hljs-number">2</span>) * gy.powmod(r, n, n ** <span class="hljs-number">2</span>) % (n ** <span class="hljs-number">2</span>) <span class="hljs-comment">#Paillier同态加密</span><br>        <span class="hljs-keyword">return</span> ciphertext<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Commit</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.param = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__key_gen__</span>(<span class="hljs-params">self, n</span>): <span class="hljs-comment"># 参数n相同，则产生的q,g,h相同</span><br>        p = n<br>        r = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            q = r * p + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> gy.is_prime(q):<br>                <span class="hljs-keyword">break</span><br>            r += <span class="hljs-number">1</span><br>        x = q - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            g = x ** r % q<br>            <span class="hljs-keyword">if</span> g != <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">break</span><br>            x -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            h = x ** r % q<br>            <span class="hljs-keyword">if</span>(g != h <span class="hljs-keyword">and</span> h != <span class="hljs-number">1</span>):<br>                <span class="hljs-keyword">break</span><br>            x -= <span class="hljs-number">1</span><br>        self.param = q, g, h<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">commit</span>(<span class="hljs-params">self, m</span>):<br>        q, g, h = self.param<br>        r = number.getRandomRange(<span class="hljs-number">1</span>, q - <span class="hljs-number">1</span>)<br>        c = (<span class="hljs-built_in">pow</span>(g, m, q) * <span class="hljs-built_in">pow</span>(h, r, q)) % q <span class="hljs-comment">#Benaloh加密</span><br>        <span class="hljs-keyword">return</span> c, r<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">shuffle</span>(<span class="hljs-params">X, Y, x</span>):<br>    res = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(X)):<br>        res.append([i, X[i], Y[i]])<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(x):<br>            res.append([i, X[i] + random.randint(-X[i], X[i]), Y[i] + random.randint(-Y[i], Y[i])])<br>    random.shuffle(res) <span class="hljs-comment">#随机排序</span><br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    k = <span class="hljs-number">6</span><br>    sk = []<br>    flag = os.environ[<span class="hljs-string">&quot;flag for GFCTF2022-Crypto Recover Secret&quot;</span>]<br>    secret = libnum.s2n(flag)<br>    <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(secret)) &lt; <span class="hljs-number">514</span><br>    enc = Encryptor()<br>    sk = [enc.__key_gen__() <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k)]<br>    <span class="hljs-built_in">print</span>(sk)<br><br>    s = [_rand_int(_N - <span class="hljs-number">1</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k)]<br>    s[<span class="hljs-number">0</span>] = secret<br><br>    v = Commit()<br>    v.__key_gen__(_N)<br>    <span class="hljs-built_in">print</span>(v.param)<br>    cr = [v.commit(s[i]) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k)]<br>    c = [i[<span class="hljs-number">0</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cr]<br>    <span class="hljs-built_in">print</span>(c)<br><br>    X = []<br>    Y = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, k + <span class="hljs-number">1</span>):<br>        xs = <span class="hljs-number">1</span><br>        enc.pubKey = sk[i - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>]  <span class="hljs-comment"># [n_i,g_i]</span><br>        n_2q = enc.pubKey[<span class="hljs-number">0</span>] ** <span class="hljs-number">2</span>  <span class="hljs-comment"># n_i^2</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>            xs *= <span class="hljs-built_in">pow</span>(enc.encipher(i ** j), cr[j][<span class="hljs-number">1</span>], n_2q)<br>        X.append(xs)<br><br>        ys = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>            ys *= <span class="hljs-built_in">pow</span>(enc.encipher(i ** j), s[j], n_2q)<br>        Y.append(ys)<br><br>    X_Y = shuffle(X, Y, <span class="hljs-number">51</span>)<br>    <span class="hljs-built_in">print</span>(X_Y)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>类Encryptor是Paillier同态加密，类Commit貌似是Benaloh加密。</p><p>重点在X、Y的生成以及shuffle混淆，先看X、Y的生成，他们的生成公式类似，为<br>$$<br>xs_i &#x3D; E(i^0,r_0)^{cr_0}*E(i^1,r_1)^{cr_1}*…*E(i^5,r_5)^{cr_5}\mod n_i^2 \tag{1}<br>$$</p><p>$$<br>ys_i &#x3D; E(i^0,r_0)^{s_0}*E(i^1,r_1)^{s_1}*…*E(i^5,r_5)^{s_5}\mod n_i^2 \tag{2}<br>$$</p><p>（这里的$cr$指$cr$中的$r$。）</p><p>根据Paillier同态加密的特点，有<br>$$<br>D(E(m_1,r_1),E(m_2,r_2)\mod n^2) &#x3D; m_1+m_2\mod n<br>$$</p><p>$$<br>D(E(m_1,r_1)^k\mod n^2)&#x3D;k*m\mod n<br>$$</p><p>于是公式(1)(2)的解密公式为<br>$$<br>D(xs_i) &#x3D; cr_0*i^0+…+cr_5*i^5 \mod n_i<br>$$</p><p>$$<br>D(ys_i) &#x3D; s_0*i^0+…+s_5*i^5 \mod n_i<br>$$</p><p>因为$xs,ys$都有6个，而系数已知，所以可以构建矩阵方程解出$cr_i,s_i$。</p><p>但是$X,Y$被打乱了顺序。</p><p>根据commit()函数，有<br>$$<br>c_i &#x3D; g^{s_i}*h^{cr_i}<br>$$<br>进行如下转换<br>$$<br>c_0 &#x3D; g^{s_0}*h^{cr_0}，c_1^i &#x3D; g^{s_1*i}*h^{cr_1*i},c_2^{i^2} &#x3D; g^{s_2*i^2}*h^{cr_2*i^2},…\<br>$$<br>于是有<br>$$<br>\begin{align}<br>c_0*c_1^i*c_2^{i^2}*…*c_5^{i^5}<br>&amp;&#x3D; g^{s_0+s_1*i+s_2*i^2+…+s_5*i^5}*h^{cr_0+c_r1*i+cr_2*i^2+…+cr_5*i^5}\\<br>&amp;&#x3D;g^{D(ys_i)}*h^{D(xs_i)}\mod q<br>\end{align}<br>$$<br>因此通过此等式可得到正确的$X,Y$。</p><p>求出$Y$后，因为有六个未知数和六个方程，所以建个矩阵求解<br>$$<br>{\left[<br>\matrix{<br>  s_0 &amp; s_1 &amp; … &amp; s_5<br>}<br>\right]}<br>*<br>\left[<br>\matrix{<br>  1^0 &amp; 2^0 &amp; … &amp; 5^0\\<br>  1^1 &amp; 2^1 &amp; … &amp; 5^1\\<br>  …\\<br>  1^6 &amp; 2^6 &amp; … &amp; 5^6<br>}<br>\right]<br>&#x3D;\left[<br>\matrix{<br>  dec\_y_0 &amp; dec\_y_1 &amp; … &amp; dec\_y_5<br>}<br>\right]<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> mpz,next_prime<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Encryptor</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.pubKey = <span class="hljs-literal">None</span><br>        self.priKey = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">decipher</span>(<span class="hljs-params">self, ciphertext</span>):<br>        n, g = self.pubKey<br>        lmd, mu = self.priKey<br>        plaintext = (<span class="hljs-built_in">pow</span>(ciphertext, lmd, n**<span class="hljs-number">2</span>) - <span class="hljs-number">1</span>)*mu//n % n <span class="hljs-comment"># Paillier同态解密</span><br>        <span class="hljs-comment"># plaintext = (pow(ciphertext, lmd, n ** 2) - 1) // n  * mu % n</span><br>        <span class="hljs-keyword">return</span> plaintext<br><br><br>_N = next_prime(<span class="hljs-number">2</span> ** <span class="hljs-number">512</span>)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;output&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    sk = <span class="hljs-built_in">eval</span>(f.readline().decode())<br>    vparam = <span class="hljs-built_in">eval</span>(f.readline().decode())<br>    c = <span class="hljs-built_in">eval</span>(f.readline().decode())<br>    X_Y = <span class="hljs-built_in">eval</span>(f.readline().decode())<br><br>X_Y = <span class="hljs-built_in">sorted</span>(X_Y, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-number">0</span>])<br>k = <span class="hljs-number">6</span><br>q, g, h = vparam<br><br><br>m_cs = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, k + <span class="hljs-number">1</span>):<br>    cs = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>        cs = cs * <span class="hljs-built_in">pow</span>(c[j], i**j, q) % q <span class="hljs-comment">#错误操作-&gt; cs *= pow(c[j], i**j, q) % q 取余在相乘</span><br>    m_cs.append(cs)<br><br><br>real_XY = []<br>enc = Encryptor()<br><span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> X_Y:<br>    i = each[<span class="hljs-number">0</span>]<br>    enc.pubKey = sk[i][<span class="hljs-number">0</span>]<br>    enc.priKey = sk[i][<span class="hljs-number">1</span>]<br>    de_xs = enc.decipher(each[<span class="hljs-number">1</span>])<br>    de_ys = enc.decipher(each[<span class="hljs-number">2</span>])<br>    gh = <span class="hljs-built_in">pow</span>(g, de_ys, q)*<span class="hljs-built_in">pow</span>(h, de_xs, q) % q<br>    <span class="hljs-keyword">if</span> gh == m_cs[i]:<br>        real_XY.append([i, de_xs, de_ys])<br><br><span class="hljs-comment"># print(real_XY)</span><br>k = <span class="hljs-number">6</span><br>Y = [<span class="hljs-built_in">int</span>(each[<span class="hljs-number">2</span>]) <span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> real_XY]<br>Y = Matrix(Y)<br><br>A = []<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>    v = [i**j <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,k+<span class="hljs-number">1</span>)]<br>    A.append(v)<br>A = Matrix(A)<br><br>S = A.solve_left(Y)<br><span class="hljs-built_in">print</span>(S)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(S[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])))<br><br></code></pre></td></tr></table></figure><hr><p>参考：</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzU1MzE3Njg2Mw==&mid=2247502987&idx=1&sn=39df1e5a1638db91f716f975fbeb69c1&chksm=fbf456fbcc83dfedf587a21112de8e6fae17942e848974c5eafd827ab94af9d65aa87bef424b&mpshare=1&scene=23&srcid=1025Lu8HWtUrWliFNcbdKzJS&sharer_sharetime=1666670305035&sharer_shareid=c677d9dd25d4fd3a57ca8bd9a85e6569#rd">DASCTF X GFCTF 2022 ｜十月赛官方Write Up (qq.com)</a></p><p><a href="https://lazzzaro.github.io/2020/05/13/crypto-%E5%85%B6%E4%BB%96%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/#Paillier%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%86">其他加密算法 | Lazzaro (lazzzaro.github.io)</a></p>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>低指数爆破</tag>
      
      <tag>Paillier</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022赣育杯</title>
    <link href="/2022/10/24/2022%E8%B5%A3%E8%82%B2%E6%9D%AF/"/>
    <url>/2022/10/24/2022%E8%B5%A3%E8%82%B2%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="Wilson"><a href="#Wilson" class="headerlink" title="Wilson"></a>Wilson</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> next_prime<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, bytes_to_long<br><br>p = getPrime(<span class="hljs-number">512</span>)<br>q = next_prime(p)<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>)<br>flag = bytes_to_long(f.read() + urandom(<span class="hljs-number">80</span>))<br>f.close()<br><br>N = <span class="hljs-number">1</span><br>a = p * q<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, p):<br>    N = (N * i) % a<br>e = <span class="hljs-number">65537</span><br>m = N * flag % a<br>c = <span class="hljs-built_in">pow</span>(m, e, a)<br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;Encode.txt&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>)<br>f.write(<span class="hljs-string">f&#x27;a = <span class="hljs-subst">&#123;a&#125;</span>\n&#x27;</span>)<br>f.write(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>\n&#x27;</span>)<br>f.close()<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">a = 156853895847604116708242664263151514811095704969640303272039451331791888050995073274981545693518063639560286348739938318495685137088495867703518198511200409009953879436648706837731243061114851474801565873584183542649886358523850682697732574913523360866915083642887238043256280849100274825940626065115676325169</span><br><span class="hljs-string">c = 3459715117165130065996389169943285249501133832272446001239391765859259811270526185228996906338576254353123756173289118671028939933226544773197852424767051933844004667155191851195814295922794480300237399956789038592856532530692732011427288405114650955620859282144504446058845961744702163836107847961388150810</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>p,q近似，对a开根求前后素数得p,q，解密得到m。根据题目名称，需要用到Wilson定理。公式如下<br>$$<br>m &#x3D; N*flag &#x3D; (p-1)!*flag &#x3D; -flag \mod p\<br>&#x3D;&#x3D;&gt;flag &#x3D; -m \mod p<br>$$<br>但是仅仅只通过对模数p应用Wilson定理是不能求出flag的，还需要对模数q应用Wilson定理，公式如下<br>$$<br>m &#x3D; N*flag &#x3D; (p-1)!*flag\mod p*q<br>$$</p><p>$$<br>&#x3D;&#x3D;&gt;m*p*……*(q-1) &#x3D; (q-1)!*flag\mod p*q<br>$$</p><p>$$<br>&#x3D;&#x3D;&gt;flag &#x3D; -m*p*……*(q-1) \mod q<br>$$</p><p>然后对这两个结果运用中国剩余定理即可求出flag。</p><p>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">broadcast_attack</span>(<span class="hljs-params">data</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">extended_gcd</span>(<span class="hljs-params">a,b</span>):<br>        x,y = <span class="hljs-number">0</span>,<span class="hljs-number">1</span><br>        lastx,lasty = <span class="hljs-number">1</span>,<span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> b:<br>            a,(q,b) = b,<span class="hljs-built_in">divmod</span>(a,b)<br>            x,lastx = lastx-q*x,x<br>            y,lasty = lasty-q*y,y<br>        <span class="hljs-keyword">return</span> (lastx,lasty,a)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">chinese_remaindor_theorem</span>(<span class="hljs-params">items</span>):<br>        N = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">for</span> a,n <span class="hljs-keyword">in</span> items:<br>            N *= n<br>        result = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> a,n <span class="hljs-keyword">in</span> items:<br>            m = N//n<br>            r,s,d = extended_gcd(n,m)<br>            <span class="hljs-keyword">if</span> d != <span class="hljs-number">1</span>:<br>                N = N//n<br>                <span class="hljs-keyword">continue</span><br>            result += a*s*m<br>        <span class="hljs-keyword">return</span> result%N ,N<br>    x, n = chinese_remaindor_theorem(data)<br>    <span class="hljs-keyword">return</span> x<br><br>a = <span class="hljs-number">156853895847604116708242664263151514811095704969640303272039451331791888050995073274981545693518063639560286348739938318495685137088495867703518198511200409009953879436648706837731243061114851474801565873584183542649886358523850682697732574913523360866915083642887238043256280849100274825940626065115676325169</span><br>c = <span class="hljs-number">3459715117165130065996389169943285249501133832272446001239391765859259811270526185228996906338576254353123756173289118671028939933226544773197852424767051933844004667155191851195814295922794480300237399956789038592856532530692732011427288405114650955620859282144504446058845961744702163836107847961388150810</span><br><br>tmp = <span class="hljs-built_in">int</span>(gmpy2.iroot(a, <span class="hljs-number">2</span>)[<span class="hljs-number">0</span>])<br>q = gmpy2.next_prime(tmp)<br>p = a // q<br><span class="hljs-keyword">assert</span> p*q == a <span class="hljs-keyword">and</span> p &lt; q <span class="hljs-keyword">and</span> isPrime(p)<br>e = <span class="hljs-number">65537</span><br>d = gmpy2.invert(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>m = <span class="hljs-built_in">pow</span>(c, d, a)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">pow</span>(m, e, a) == c<br>mp = (-m) % p<br>mq = (-m) % q<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(p, q):<br>    mq = (mq*i) % q<br><br>data = [(mp,p),(mq,q)]<br>f = broadcast_attack(data)<br><span class="hljs-built_in">print</span>(long_to_bytes(f))<br><span class="hljs-string">&#x27;&#x27;&#x27;code 2</span><br><span class="hljs-string">from gmpy2 import invert</span><br><span class="hljs-string">from Crypto.Util.number import long_to_bytes</span><br><span class="hljs-string">from functools import reduce</span><br><span class="hljs-string">a = 156853895847604116708242664263151514811095704969640303272039451331791888050995073274981545693518063639560286348739938318495685137088495867703518198511200409009953879436648706837731243061114851474801565873584183542649886358523850682697732574913523360866915083642887238043256280849100274825940626065115676325169</span><br><span class="hljs-string">c = 3459715117165130065996389169943285249501133832272446001239391765859259811270526185228996906338576254353123756173289118671028939933226544773197852424767051933844004667155191851195814295922794480300237399956789038592856532530692732011427288405114650955620859282144504446058845961744702163836107847961388150810</span><br><span class="hljs-string">p = 12524132538727147976454683542869473176723933298740764667643646868771435739017779964538584767004546975861773724104399289331497224456192089483187179727966053</span><br><span class="hljs-string">q = 12524132538727147976454683542869473176723933298740764667643646868771435739017779964538584767004546975861773724104399289331497224456192089483187179727966173</span><br><span class="hljs-string">e = 65537</span><br><span class="hljs-string">assert p &lt; q</span><br><span class="hljs-string">m = pow(c,int(invert(e,(p-1)*(q-1))),a)</span><br><span class="hljs-string">flag1 = -m % p</span><br><span class="hljs-string">flag2 = -m*reduce(lambda x,y:x*y,range(p,q)) % q</span><br><span class="hljs-string">flag = (flag1*q*int(invert(q,p)) + flag2*p*invert(p,q)) % a</span><br><span class="hljs-string">print(long_to_bytes(flag))</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h2 id="lost-N"><a href="#lost-N" class="headerlink" title="lost_N"></a>lost_N</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-comment"># part1</span><br>flag = <span class="hljs-string">b&#x27;SangFor&#123;&#125;&#x27;</span><br>d = getPrime(<span class="hljs-number">435</span>)<br>count = <span class="hljs-number">5</span><br><span class="hljs-keyword">while</span> count &gt; <span class="hljs-number">0</span>:<br>    p = getPrime(<span class="hljs-number">512</span>)<br>    q = getPrime(<span class="hljs-number">512</span>)<br>    n = p * q<br>    phi = (p-<span class="hljs-number">1</span>) * (q-<span class="hljs-number">1</span>)<br>    e = gmpy2.invert(d, phi)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c =&#x27;</span>, <span class="hljs-built_in">pow</span>(bytes_to_long(flag), e, n))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n =&#x27;</span>, n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;e =&#x27;</span>, e)<br>    count -= <span class="hljs-number">1</span><br><br><span class="hljs-comment"># part2</span><br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = getPrime(<span class="hljs-number">1024</span>)<br>n = p * q<br>e = <span class="hljs-number">0x10001</span><br>s = <span class="hljs-built_in">pow</span>(<span class="hljs-number">900</span>*p - <span class="hljs-number">218</span>*q, n-p-q, n)<br>c = <span class="hljs-built_in">pow</span>(last_n, e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n =&#x27;</span>, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c =&#x27;</span>, c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;s =&#x27;</span>, s)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">c = 13007070082982086015048648249698272815655157209727275797297990841215796701955079738986996208838342773211678208282162295881823413924960399315068498509939876883297864092435101096694113071462267388158595518905101264654742860199638059278239359756219217345342001728599121265614144789005805619626458575126846199823</span><br><span class="hljs-string">n = 145575036089862184772968012014750816659166028840828357885024516131565102712346345625910708214596157522939248398359985832422106056149116726640753670919394145037581595172384392223713667048639158944450925280598688178812170253438103664700756173806183649477673497327790421063029596049211220930285435947389700047717</span><br><span class="hljs-string">e = 6104905725583061487097813130111812725712623687061285535333592835899028572315489283518324105546236465450024687400996793197533588656449965379858202658832799573292015786259804984314040621630959455897094519928941186899832366216111359619637121411868069759469878142871432060850651758192209783752650530390826992241</span><br><span class="hljs-string">c = 59089700172263364510471541430195724136973801897202789650586019199451669728729101831161257990233999290546484165767660146638244043033774379664984894178111808280076960669616271416462197675878517863817855762681885790347812435849975072020273928469523961698304409181769820692602979823921421820511589311465948726144</span><br><span class="hljs-string">n = 171055961405321566289532118753767563629109197214150143506779656820887080836894368955104877312070939117885512468517951216152955714212079279910802095156350517032659766690101321767892798466184405283403136505441356956934759143173462058806620784497304916652269667097971495139608875846338091109621496242787157524093</span><br><span class="hljs-string">e = 30639328953696065722075015079387560065304228779854040351182305267894609577068955234152835797506237100956072519388029280776532681675227753068574540049244778077615881093270476533536257809592871380358708151151683035275615961208943826349952952069226829397420921321531951316523368786223865432179572145636266109841</span><br><span class="hljs-string">c = 24257648301491609274972482189063774024772127961295257418254600487615473027418329077996964279110710299066082437371516700591657843057597234861450272363240630164504734590903528165056021531272324846249133757036680429476939369309982196345252669711604534774523215422683385359295249160897422071732828044179085194829</span><br><span class="hljs-string">n = 99735998821682404719682435155046621256882035421263371444758755082217342389922499214602126376005623406797486880520535486455942687180959663032781490782870080236095770591995437146834606144553095293546973559144743704707021952152013362323293717685161426469215016058837362232410103330238322051089471439573994907641</span><br><span class="hljs-string">e = 81580834845272005549352820344384188734735397414102222005750919291263464191246301214086773744759605577533897859454210564034313392997143493147211816886655474145064723790935089304983994174659126346174766206623180477360887938029897557683160392738708450965784921553806400996559956745732829531154835363767773681061</span><br><span class="hljs-string">c = 105310270039347542993580213074911114373638987155564864341577443142664062749969114572669295115218200093381519732560445712425129105002834596010587656544575627162469582470245756143405705971157024449801127133755773536097173259762599166367688198314997549663330392481942723997656023552049910279885657664434799986156</span><br><span class="hljs-string">n = 118810172988175650374012494943583618875926370822995080847518376655089884052560062524542984436965153851285471302754389325839857100631601002627184437173686224779115595776898914116490948408328080895524604124937295381872443370706017215743101755848741173976351916104362193751372512936063892260855907424754174906407</span><br><span class="hljs-string">e = 57970672598245590037421993575987847127437841761387257183798066822318596392918179916711068560675528926294272336883938499809087281773070750919594701600347605662910664129043903749270935721912605279738208730075557097647316659218872977257614306133047318781156168440924237849014715453590776000659069078250493480521</span><br><span class="hljs-string">c = 50430341205487530895874157969557709374947862873979946417751686643857339147558892228311050765271667685452170747716439387141655285820549605442067496018168606163031122498272292974227360674531814593351170403519198099247839499352696883293133549658442172721339510734646474794377043195182186423251146266787514560008</span><br><span class="hljs-string">n = 80837118813383038376595037732171926303253457956240963765871280771175535050976501573174357090322706934194338649978803681581485022992041019276854467388155755920855237665754031077890133388056350355753218650482718197635332681450734918373003830855184694566883308495322647552169761087814135330222306083205629967447</span><br><span class="hljs-string">e = 51172856769626923894369204019063376718507295306271724506808987836327051371415876890252665691760404489737902233106400428873399230724307065583727090788789453353097657968301923726049631007431604461521879288667433292135840271678776989737261214286587609316530839676362375173635542358540766454865624476392874630929</span><br><span class="hljs-string">c = 24533435736573623334539431528997922833496063510219641412038735658846891237553927656156039267456590702682308774830590768888594750053426705504840854071081487058180327084899496154314864910274839867793265086899109787190447838634454294468362549369144295591261617705578124672391399319219038350878856530074063011081</span><br><span class="hljs-string"></span><br><span class="hljs-string">?</span><br><span class="hljs-string">?</span><br><span class="hljs-string">?</span><br><span class="hljs-string">?</span><br><span class="hljs-string">?</span><br><span class="hljs-string"></span><br><span class="hljs-string">e = 71905546659735491498365580186225996341462093571074706903142472266442052559638067842283521897292088493599089076218507596455101425837547743511983105386966540811629138324774640350969049873787070380161376295760563611617178869788237730560614549740931199083194226891873779907795120035746039593933256380499568775673</span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string"></span><br><span class="hljs-string">n = 20955464633057600258987829727550073699845816289000240676927869818926752810905511184835302717855745473943671910742784074561535017974853574714483642916831791020944940633062963043482236587316552330558006573820423830770910893877191630012247591380869307656539553888318621170921800017818132160253923739647771452839191101104391894609403591447166963426444018303147924843072923713248135717578047687411974516038299879758561542241544862102935741869647633013298181782208467117482306148238724598730801037692668154263059348953587766571379262442743822007387408949824805991797355089583176028081305319076896384126383926193964322235633</span><br><span class="hljs-string">c = 14815997295683082265558346455845370590765145583224067337292601455640475216349267044144296003388877395546880235511728120803143112914764263292087421926972160283428440959367872665892349776616002018624301524264223581314248857537034849571849747613963209414193510408342387107662655487869098045345428379025731617851483935711671021438908270746316921057871871545763798735895118697635903815383424855759281301248295597297869474539060531099443223045844791615425429748703429968627505406271675074549912664863784774239200764403372298995457799473112713379340870305136776932539188516395526955161359417473843082895317392495109895085666</span><br><span class="hljs-string">s = 14728527428626630951705148488338433865446345521255631461200851513782412494843597938863837697938230856843797646287742397249258609197032095158567448934855031190354034543862057663422053672290704598313096289223478302733688501373756860855445632789922930577582465209872782549135254792729915747104521949095814028476908208917363509089190935273004331739978623136706041729628143765893264698948654175039064609891374587695812144855411176143224066975193255513405865992328257766815240718115442741846443490733767716842367336385132648983241895710001620533668392060358573295789752856876282590472528110546264872047138094995909454134250</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>审计代码，part1中的RSA加密共用一个私钥d，而e,n不同，因此可以使用<strong>共私钥指数攻击</strong>(<a href="https://lazzzaro.github.io/2020/05/06/crypto-RSA/#Common-Private-Exponent%EF%BC%88%E5%85%B1%E7%A7%81%E9%92%A5%E6%8C%87%E6%95%B0%E6%94%BB%E5%87%BB%EF%BC%8Cd%E7%9B%B8%E5%90%8C%EF%BC%89">RSA | Lazzaro (lazzzaro.github.io)</a>)。但由于缺少最后一个n，需要通过part2求出。求解part2的公式推导如下<br>$$<br>s &#x3D; (900*p-218*q)^{n-p-q}\mod n<br>$$<br>根据Euler定理有<br>$$<br>s*(900*p-218*q) &#x3D; (900*p-218*q)^{n-p-q+1}&#x3D;(900*p-218*q)^{φ(n)}&#x3D;1\mod n<br>$$<br>即<br>$$<br>900*p-218*q &#x3D; s^{-1}\mod n<br>$$<br>假设解出为tmp，联立如下公式，建立方程解出p,q<br>$$<br>\begin{cases}<br>900*p-218*q&#x3D;tmp\\<br>n&#x3D;p*q<br>\end{cases}<br>&#x3D;&#x3D;&gt;900*p^2-tmp*p-218*n&#x3D;0<br>$$<br>得到p,q后，容易解出last_n。得到所有(c,n,e)之后，构建格如下<br>$$<br>L &#x3D; \left[\matrix{<br>M &amp; e0 &amp; e1 &amp; e2 &amp; e3 &amp; e4 &amp; e5\\<br>0 &amp; -n0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0\\<br>0 &amp; 0 &amp; -n1 &amp; 0 &amp; 0 &amp; 0 &amp; 0\\<br>0 &amp; 0 &amp; 0 &amp; -n2 &amp; 0 &amp; 0 &amp; 0\\<br>0 &amp; 0 &amp; 0 &amp; 0 &amp; -n3 &amp; 0 &amp; 0\\<br>0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; -n4 &amp; 0\\<br>0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; -n5\\<br>}\right]<br>$$<br>其中$M&#x3D;\lfloor n_5^{\frac{1}{2}}\rfloor$。再利用LLL进行规约，取第一个分量的第一个值除以M就是私钥d了，随便拿一个密文解密即可得到flag。</p><p>part2代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#python</span><br><span class="hljs-keyword">import</span> gmpy2<br><br>e = <span class="hljs-number">0x10001</span><br>n = <span class="hljs-number">20955464633057600258987829727550073699845816289000240676927869818926752810905511184835302717855745473943671910742784074561535017974853574714483642916831791020944940633062963043482236587316552330558006573820423830770910893877191630012247591380869307656539553888318621170921800017818132160253923739647771452839191101104391894609403591447166963426444018303147924843072923713248135717578047687411974516038299879758561542241544862102935741869647633013298181782208467117482306148238724598730801037692668154263059348953587766571379262442743822007387408949824805991797355089583176028081305319076896384126383926193964322235633</span><br>c = <span class="hljs-number">14815997295683082265558346455845370590765145583224067337292601455640475216349267044144296003388877395546880235511728120803143112914764263292087421926972160283428440959367872665892349776616002018624301524264223581314248857537034849571849747613963209414193510408342387107662655487869098045345428379025731617851483935711671021438908270746316921057871871545763798735895118697635903815383424855759281301248295597297869474539060531099443223045844791615425429748703429968627505406271675074549912664863784774239200764403372298995457799473112713379340870305136776932539188516395526955161359417473843082895317392495109895085666</span><br>s = <span class="hljs-number">14728527428626630951705148488338433865446345521255631461200851513782412494843597938863837697938230856843797646287742397249258609197032095158567448934855031190354034543862057663422053672290704598313096289223478302733688501373756860855445632789922930577582465209872782549135254792729915747104521949095814028476908208917363509089190935273004331739978623136706041729628143765893264698948654175039064609891374587695812144855411176143224066975193255513405865992328257766815240718115442741846443490733767716842367336385132648983241895710001620533668392060358573295789752856876282590472528110546264872047138094995909454134250</span><br><br>tmp = gmpy2.invert(s,n)<br><br>delta = tmp**<span class="hljs-number">2</span> - <span class="hljs-number">4</span>*<span class="hljs-number">900</span>*(-<span class="hljs-number">218</span>*n)<br><span class="hljs-keyword">if</span> delta &gt;=<span class="hljs-number">0</span>:<br>    delta = <span class="hljs-built_in">int</span>(gmpy2.iroot(delta,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>])<br>    p1 = (tmp+delta)//(<span class="hljs-number">2</span>*<span class="hljs-number">900</span>)<br>    <span class="hljs-comment"># p2 = (tmp-delta)//(2*900)</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p = <span class="hljs-subst">&#123;p1&#125;</span>&#x27;</span>)<br><br>p = p1<br>q = n//p<br><span class="hljs-keyword">assert</span> p*q == n<br><br>d = gmpy2.invert(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>last_n = <span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;last_n = <span class="hljs-subst">&#123;last_n&#125;</span>&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>part1代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br>c0 = <span class="hljs-number">13007070082982086015048648249698272815655157209727275797297990841215796701955079738986996208838342773211678208282162295881823413924960399315068498509939876883297864092435101096694113071462267388158595518905101264654742860199638059278239359756219217345342001728599121265614144789005805619626458575126846199823</span><br>n0 = <span class="hljs-number">145575036089862184772968012014750816659166028840828357885024516131565102712346345625910708214596157522939248398359985832422106056149116726640753670919394145037581595172384392223713667048639158944450925280598688178812170253438103664700756173806183649477673497327790421063029596049211220930285435947389700047717</span><br>e0 = <span class="hljs-number">6104905725583061487097813130111812725712623687061285535333592835899028572315489283518324105546236465450024687400996793197533588656449965379858202658832799573292015786259804984314040621630959455897094519928941186899832366216111359619637121411868069759469878142871432060850651758192209783752650530390826992241</span><br>c1 = <span class="hljs-number">59089700172263364510471541430195724136973801897202789650586019199451669728729101831161257990233999290546484165767660146638244043033774379664984894178111808280076960669616271416462197675878517863817855762681885790347812435849975072020273928469523961698304409181769820692602979823921421820511589311465948726144</span><br>n1 = <span class="hljs-number">171055961405321566289532118753767563629109197214150143506779656820887080836894368955104877312070939117885512468517951216152955714212079279910802095156350517032659766690101321767892798466184405283403136505441356956934759143173462058806620784497304916652269667097971495139608875846338091109621496242787157524093</span><br>e1 = <span class="hljs-number">30639328953696065722075015079387560065304228779854040351182305267894609577068955234152835797506237100956072519388029280776532681675227753068574540049244778077615881093270476533536257809592871380358708151151683035275615961208943826349952952069226829397420921321531951316523368786223865432179572145636266109841</span><br>c2 = <span class="hljs-number">24257648301491609274972482189063774024772127961295257418254600487615473027418329077996964279110710299066082437371516700591657843057597234861450272363240630164504734590903528165056021531272324846249133757036680429476939369309982196345252669711604534774523215422683385359295249160897422071732828044179085194829</span><br>n2 = <span class="hljs-number">99735998821682404719682435155046621256882035421263371444758755082217342389922499214602126376005623406797486880520535486455942687180959663032781490782870080236095770591995437146834606144553095293546973559144743704707021952152013362323293717685161426469215016058837362232410103330238322051089471439573994907641</span><br>e2 = <span class="hljs-number">81580834845272005549352820344384188734735397414102222005750919291263464191246301214086773744759605577533897859454210564034313392997143493147211816886655474145064723790935089304983994174659126346174766206623180477360887938029897557683160392738708450965784921553806400996559956745732829531154835363767773681061</span><br>c3 = <span class="hljs-number">105310270039347542993580213074911114373638987155564864341577443142664062749969114572669295115218200093381519732560445712425129105002834596010587656544575627162469582470245756143405705971157024449801127133755773536097173259762599166367688198314997549663330392481942723997656023552049910279885657664434799986156</span><br>n3 = <span class="hljs-number">118810172988175650374012494943583618875926370822995080847518376655089884052560062524542984436965153851285471302754389325839857100631601002627184437173686224779115595776898914116490948408328080895524604124937295381872443370706017215743101755848741173976351916104362193751372512936063892260855907424754174906407</span><br>e3 = <span class="hljs-number">57970672598245590037421993575987847127437841761387257183798066822318596392918179916711068560675528926294272336883938499809087281773070750919594701600347605662910664129043903749270935721912605279738208730075557097647316659218872977257614306133047318781156168440924237849014715453590776000659069078250493480521</span><br>c4 = <span class="hljs-number">50430341205487530895874157969557709374947862873979946417751686643857339147558892228311050765271667685452170747716439387141655285820549605442067496018168606163031122498272292974227360674531814593351170403519198099247839499352696883293133549658442172721339510734646474794377043195182186423251146266787514560008</span><br>n4 = <span class="hljs-number">80837118813383038376595037732171926303253457956240963765871280771175535050976501573174357090322706934194338649978803681581485022992041019276854467388155755920855237665754031077890133388056350355753218650482718197635332681450734918373003830855184694566883308495322647552169761087814135330222306083205629967447</span><br>e4 = <span class="hljs-number">51172856769626923894369204019063376718507295306271724506808987836327051371415876890252665691760404489737902233106400428873399230724307065583727090788789453353097657968301923726049631007431604461521879288667433292135840271678776989737261214286587609316530839676362375173635542358540766454865624476392874630929</span><br>c5 = <span class="hljs-number">24533435736573623334539431528997922833496063510219641412038735658846891237553927656156039267456590702682308774830590768888594750053426705504840854071081487058180327084899496154314864910274839867793265086899109787190447838634454294468362549369144295591261617705578124672391399319219038350878856530074063011081</span><br>n5 = <span class="hljs-number">108185319218897738268746205017540795873825112956591206743419271090891318238813558017643338501521098978024727760981025765573563469927135773358034691827660887010169178863498411277779419515872567620180674209868666624722965176088860357351459585091952847193607478681852858872736580818017021511957182389670032728751</span><br>e5 = <span class="hljs-number">71905546659735491498365580186225996341462093571074706903142472266442052559638067842283521897292088493599089076218507596455101425837547743511983105386966540811629138324774640350969049873787070380161376295760563611617178869788237730560614549740931199083194226891873779907795120035746039593933256380499568775673</span><br><br>M=<span class="hljs-built_in">int</span>(iroot(<span class="hljs-built_in">int</span>(n5),<span class="hljs-built_in">int</span>(<span class="hljs-number">2</span>))[<span class="hljs-number">0</span>])<br>n_l = [n0,n1,n2,n3,n4,n5]<br>L = []<br>L.append([M,e0,e1,e2,e3,e4,e5])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">7</span>):<br>    t = [<span class="hljs-number">0</span>]*<span class="hljs-number">7</span><br>    t[i] = n_l[i-<span class="hljs-number">1</span>]<br>    L.append(t)<br><br>L = matrix(ZZ,L)<br>L = L.LLL()<br>d = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">abs</span>(L[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])//M)<br><span class="hljs-built_in">print</span>(d)<br>m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(c0,d,n0))<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RSA</tag>
      
      <tag>Wilson</tag>
      
      <tag>Common Private Exponent</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GXYCTF2019-CommonModulusAttack</title>
    <link href="/2022/10/06/GXYCTF2019-CommonModulusAttack/"/>
    <url>/2022/10/06/GXYCTF2019-CommonModulusAttack/</url>
    
    <content type="html"><![CDATA[<p>此为BUU上的一道题。</p><hr><p>分析一下各函数功能</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">oldtest</span>():产生<span class="hljs-number">20</span>个随机数，写入old.txt中<br><span class="hljs-built_in">generate_init_state</span>(): 功能易懂，但字太多不写了。<br><span class="hljs-built_in">gen_states</span>():生成p,q,n,加密m，将n写入product中，c写入states<br><span class="hljs-built_in">encrypt</span>():CBC加密<br><span class="hljs-built_in">gen_new_states</span>():将states的前<span class="hljs-number">24</span>个数据按顺序进行CBC加密，写入states，同时stateselse += <span class="hljs-number">24</span><br><span class="hljs-built_in">stateconvert</span>():返回CBC加密后的结果<br><span class="hljs-built_in">lrandout</span>():stateselse&gt;<span class="hljs-number">0</span>时，按顺序取states中的数据并进行CBC加密;stateselse&lt;<span class="hljs-number">0</span>时，先<span class="hljs-built_in">gen_new_states</span>()<br>再取数据<br><span class="hljs-built_in">byte2hex</span>():顾名思义，字节转<span class="hljs-number">16</span>进制<br><span class="hljs-built_in">convert_2_binary</span>():字节转<span class="hljs-number">2</span>进制<br><span class="hljs-built_in">initseed</span>():flag做初始seed<br></code></pre></td></tr></table></figure><p>整体过程为，首先是一键三连（<code>oldtest()</code>、<code>initseed()</code>、<code>gen_states()</code>），然后循环24次<code>lrandout()</code>，此时<code>stateselse=0,statespoint=24</code>，会进行依次<code>gen_new_states()</code>，然后再次进行24次<code>lrandout()</code>，写入<code>new.txt</code>中的数据依次是$E_{CBC}(E_{CBC}(RSA_{0}))$~$E_{CBC}(E_{CBC}(RSA_{23}))$，也就是<code>state[:24]</code>进行了两次<code>CBC</code>加密。</p><p>解题关键在于破解CBC的密钥，这可能需要预测随机数，查询得知<code>java.util.Random.nextInt()</code>使用的是线性同余发生器LCG。<code>java</code>使用的参数和方程如下：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a</span> = <span class="hljs-number">25214903917</span>, b = <span class="hljs-number">11</span>, m = <span class="hljs-number">281474976710655</span><br><span class="hljs-attr">seed</span> = (a*seed + b) &amp; m<br></code></pre></td></tr></table></figure><p>（附上某书的相关图片）</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210061556802.jpg"/><p>爆破<code>seed</code>过程如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x5deece66dL</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">11L</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">0xffffffffffffL</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">crack_seed</span><span class="hljs-params">(<span class="hljs-type">long</span> out1, <span class="hljs-type">long</span> out2)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">0xffff</span>; i++) &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">seed</span> <span class="hljs-operator">=</span> (out1 &lt;&lt; <span class="hljs-number">16</span>) + i;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">guess_out2</span> <span class="hljs-operator">=</span> (a * seed + b &amp; m) &gt;&gt;&gt; <span class="hljs-number">16</span>;<br>        <span class="hljs-keyword">if</span> (guess_out2 == out2) &#123;<br>            System.out.println(<span class="hljs-string">&quot;[+] PRNG&#x27;s seed: &quot;</span> + String.valueOf(seed));<br>            <span class="hljs-keyword">return</span> seed;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;[!] PRNG crack failed!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>得到<code>seed</code>之后，就可以预测<code>AES/CBC</code>的密钥<code>key</code>，以及<code>RSA</code>的<code>p,q</code>，需要注意的是顺序和次数的问题</p><ul><li>首先过滤<code>old.txt</code>产生的随机数共计19次</li><li>然后生成<code>RSA</code>的<code>p,q</code>共计24次</li><li>最后是<code>AES/CBC</code>共72次，前24次的随机数对解题无用，中间24次的随机数是$E_{CBC}(RSA_c)$的密钥<code>key1</code>，最后24次是$E_{CBC}(E_{CBC}(RSA_{c}))$的密钥<code>key2</code>。需要注意若将随机数直接存入文件再读取，长度不够16bit，需要进行<code>byte2hex()</code>。</li></ul><p>java代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.math.BigInteger;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.lang.*;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">crak_into_RSA</span> &#123;<br>    <br>    <span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-number">0x5deece66dL</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-number">11L</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> <span class="hljs-number">0xffffffffffffL</span>;<br>    <span class="hljs-comment">//爆破种子</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">crack_seed</span><span class="hljs-params">(<span class="hljs-type">long</span> out1, <span class="hljs-type">long</span> out2)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">0xffff</span>; i++) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">seed</span> <span class="hljs-operator">=</span> (out1 &lt;&lt; <span class="hljs-number">16</span>) + i;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">guess_out2</span> <span class="hljs-operator">=</span> (a * seed + b &amp; m) &gt;&gt;&gt; <span class="hljs-number">16</span>;<br>            <span class="hljs-keyword">if</span> (guess_out2 == out2) &#123;<br>                System.out.println(<span class="hljs-string">&quot;[+] PRNG&#x27;s seed: &quot;</span> + String.valueOf(seed));<br>                <span class="hljs-keyword">return</span> seed;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Exception</span>(<span class="hljs-string">&quot;[!] PRNG crack failed!&quot;</span>);<br>    &#125;<br><span class="hljs-comment">//设置种子</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">SetSeed</span><span class="hljs-params">(<span class="hljs-type">long</span> seed)</span>&#123;<br>        <span class="hljs-built_in">this</span>.random.setSeed(seed ^ a);<br>    &#125;<br><span class="hljs-comment">//读文件</span><br>    <span class="hljs-keyword">public</span> ArrayList&lt;Long&gt; <span class="hljs-title function_">ReadFile</span><span class="hljs-params">(String fileName)</span> &#123;<br>        ArrayList&lt;Long&gt; states = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(<span class="hljs-number">24</span>);<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(fileName);<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">reader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            reader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(file));<br>            <span class="hljs-type">String</span> <span class="hljs-variable">tempString</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">while</span> ((tempString = reader.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>                states.add(Long.valueOf(tempString));<br>            &#125;<br>            reader.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">return</span> states;<br>    &#125;<br><span class="hljs-comment">//过滤前24个随机数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">oldtest</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-comment">//        ArrayList&lt;Integer&gt; old = new ArrayList&lt;Integer&gt;();</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">19</span>;i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.random.nextInt();<br><span class="hljs-comment">//            old.add(tmp);</span><br>        &#125;<br>    &#125;<br><span class="hljs-comment">//利用随机数发生器产生RSA的p,q</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">gen_RSA</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">BigInteger</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> BigInteger.valueOf(<span class="hljs-number">17L</span>);<br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">var3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(<span class="hljs-number">24</span>);<br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">var4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(<span class="hljs-number">24</span>);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">var5</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; var5 &lt; <span class="hljs-number">24</span>; ++var5) &#123;<br>            <span class="hljs-type">BigInteger</span> <span class="hljs-variable">var6</span> <span class="hljs-operator">=</span> BigInteger.probablePrime(<span class="hljs-number">512</span>, <span class="hljs-built_in">this</span>.random);<br>            <span class="hljs-type">BigInteger</span> <span class="hljs-variable">var7</span> <span class="hljs-operator">=</span> BigInteger.probablePrime(<span class="hljs-number">512</span>, <span class="hljs-built_in">this</span>.random);<br><br>            var3.add(var6);<br>            var3.add(var7);<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">var11</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-string">&quot;p_and_q&quot;</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">var12</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; var12 &lt; <span class="hljs-number">24</span>*<span class="hljs-number">2</span>; ++var12) &#123;<br>                var11.println(((BigInteger)var3.get(var12)).toString());<br>            &#125;<br>            var11.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException var10) &#123;<br>            var10.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">byte2hex</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] var0)</span> &#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">var1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(var0.length * <span class="hljs-number">2</span>);<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">var2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; var2 &lt; var0.length; ++var2) &#123;<br>            <span class="hljs-keyword">if</span> ((var0[var2] &amp; <span class="hljs-number">255</span>) &lt; <span class="hljs-number">16</span>) &#123;<br>                var1.append(<span class="hljs-string">&quot;0&quot;</span>);<br>            &#125;<br><br>            var1.append(Long.toString((<span class="hljs-type">long</span>)(var0[var2] &amp; <span class="hljs-number">255</span>), <span class="hljs-number">16</span>));<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> var1.toString();<br>    &#125;<br><span class="hljs-comment">//利用随机数发生器产生AES/CBC的key</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">gen_CBC_key</span><span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-comment">//24次无用</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">24</span>;i++)&#123;<br>            <span class="hljs-type">byte</span>[] var3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>            <span class="hljs-built_in">this</span>.random.nextBytes(var3);<br>        &#125;<br><br>        <span class="hljs-type">ArrayList</span> <span class="hljs-variable">var4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>(<span class="hljs-number">48</span>);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">48</span>;i++)&#123;<br>            <span class="hljs-type">byte</span>[] var3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">16</span>];<br>            <span class="hljs-built_in">this</span>.random.nextBytes(var3);<br>            var4.add(byte2hex(var3));<br>        &#125;<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">PrintWriter</span> <span class="hljs-variable">var11</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrintWriter</span>(<span class="hljs-string">&quot;CBC_key&quot;</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>);<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">var12</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; var12 &lt; <span class="hljs-number">48</span>; ++var12) &#123;<br>                var11.println(var4.get(var12));<br>            &#125;<br>            var11.close();<br>        &#125; <span class="hljs-keyword">catch</span> (IOException var10) &#123;<br>            var10.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">crak_into_RSA</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">crak_into_RSA</span>();<br>        ArrayList&lt;Long&gt; old = obj.ReadFile(<span class="hljs-string">&quot;old.txt&quot;</span>);<br>        System.out.println(old);<br>        <span class="hljs-type">long</span> seed;<br>        <span class="hljs-keyword">try</span> &#123;<br>            seed = obj.crack_seed(old.get(<span class="hljs-number">0</span>), old.get(<span class="hljs-number">1</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>        obj.SetSeed(seed);<br>        obj.oldtest();<br><br>        obj.gen_RSA();<br>        obj.gen_CBC_key();<br><br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>(我承认我<code>java</code>很菜，不喜欢用java，类型转换都够呛的)</p><p>接下来就是利用得到的密钥<code>key</code>（IV向量根据代码可知为空，即全0）以及<code>p,q</code>解密得到<code>generate_init_state()</code>之后的<code>c</code>，要想进一步得到<code>flag</code>只需要不断重复<code>generate_init_state()</code>。（话说这周期性是怎么看出来的）</p><p>python代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> randcrack <span class="hljs-keyword">import</span> RandCrack<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> unhexlify<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dec_CBC</span>(<span class="hljs-params">key,eenc</span>):<br>    key1, key2 = key[:<span class="hljs-number">24</span>], key[<span class="hljs-number">24</span>:]<br>    rsac = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">24</span>):<br>        aes1 = AES.new(key1[i], AES.MODE_CBC, iv=<span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">16</span>)<br>        aes2 = AES.new(key2[i], AES.MODE_CBC, iv=<span class="hljs-string">b&#x27;\x00&#x27;</span> * <span class="hljs-number">16</span>)<br>        enc = aes2.decrypt(eenc[i])<br>        rsac.append(bytes_to_long(aes1.decrypt(enc)))<br><br>    <span class="hljs-keyword">return</span> rsac<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ReadFile</span>():<br>    modulus = []<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;product&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        txt = f.readlines()<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> txt:<br>            modulus.append(<span class="hljs-built_in">int</span>(line))<br><br>    key = []<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;CBC_key&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        txt = f.readlines()<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> txt:<br>            key.append(unhexlify(line.strip()))<br><br>    pq = []<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;p_and_q&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        txt = f.readlines()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(txt),<span class="hljs-number">2</span>):<br>            (p,q) = <span class="hljs-built_in">int</span>(txt[i]),<span class="hljs-built_in">int</span>(txt[i+<span class="hljs-number">1</span>])<br>            pq.append((p,q))<br><br>    <span class="hljs-comment"># for i in range(len(modulus)):</span><br>    <span class="hljs-comment">#    assert(modulus[i] == pq[i][0]*pq[i][1]) and isPrime(pq[i][0]) and isPrime(pq[i][1])</span><br><br>    new = []<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;new.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        txt = f.readlines()<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> txt:<br>            new.append(unhexlify(line.strip()))<br><br>    <span class="hljs-keyword">return</span> modulus, key, pq, new<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dec_RSA</span>(<span class="hljs-params">c,pq</span>):<br>    e = <span class="hljs-number">17</span><br>    m = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">24</span>):<br>        <span class="hljs-keyword">try</span>:<br>            p, q = pq[i][<span class="hljs-number">0</span>], pq[i][<span class="hljs-number">1</span>]<br>            d = invert(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>            m.append(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(c[i], d, p*q)))<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">return</span> m<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_init</span>(<span class="hljs-params">seed</span>):<br>    var = <span class="hljs-number">0</span><br>    binseed = <span class="hljs-built_in">bin</span>(seed)[<span class="hljs-number">2</span>:]<br>    <span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> binseed:<br>        var = var &lt;&lt; <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> each == <span class="hljs-string">&#x27;1&#x27;</span>:<br>            var = var ^ seed<br>        <span class="hljs-keyword">if</span> (var &gt;&gt; <span class="hljs-number">256</span>) != <span class="hljs-number">0</span>:<br>            var = var ^ <span class="hljs-number">0x10000000000000000000000000000000000000000000000000000000000000223</span><br>    <span class="hljs-keyword">return</span> var<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dec_init_state</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        m = gen_init(m)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;flag&quot;</span> <span class="hljs-keyword">in</span> long_to_bytes(m):<br>            <span class="hljs-built_in">print</span>(long_to_bytes(m))<br>            <span class="hljs-keyword">break</span><br><br>modulus, key, pq, new = ReadFile()<br>rsac = dec_CBC(key, new)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;modulus = <span class="hljs-subst">&#123;modulus&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;rsac = <span class="hljs-subst">&#123;rsac&#125;</span>&#x27;</span>)<br>m = dec_RSA(rsac, pq)<br><span class="hljs-built_in">print</span>(m[<span class="hljs-number">0</span>])<br>dec_init_state(m[<span class="hljs-number">0</span>])<br><br></code></pre></td></tr></table></figure><p>根据题目中RSA的参数的特点，即使用同一个加密指数<code>e</code>加密同一个明文，这样是可以通过<strong>低加密指数广播攻击（Hastad攻击）</strong>破解的，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br>modulus = [<span class="hljs-number">98814919313645615562227632501842353623335365853705229901835148468883495797275597414884229673154676216661172834551301610934651963240119409868685277777800714566912405986645043974924445077030680918856209854280255930507129711147257107127165995928330446921396988707590674551893978543347857267274126479566133964621</span>, <span class="hljs-number">120309037005681976370949305207133746746983392014859786008077885868206237066288839457678467372792330832240493847319506910624107293327355575990265009395111812157069795648694878932912724266067108352114568041606927740805295578389613410752347225302683181568493377905133685788806771897944116380798383235212880787111</span>, <span class="hljs-number">111785936365127017878364692255320290881390250034420261152076893236497751708479451558829998875477413370296672127312833416766071239043340476618512716523841455668113510503541200502811971438914643566444202595134432922460265282115077045761511350952491133678485898016929814918158114380643876728495327499109907572429</span>, <span class="hljs-number">79107360215620077532659896175026195404235793190726547917783395438823337589603205953575483353228931287967504796791548380004359471560051416284517914649068134828827258371600937675407475086859499975654685415750272651221034077150245371035999615125332427139552452769011676593964204925071318469088799724530215124831</span>, <span class="hljs-number">76569172668426111655559325602270543124911618387292779930876870738135074619169375835923184222768365842868492168017456879360896599138595315395127482484106260530315856131196505195380380922891702380525990613251179620270889682827012451440651535676227547036408820876146886053832887455868205776680614430725735043793</span>, <span class="hljs-number">103550587454386321582558194662757829135212617455098189704465201424747083811259424236094773443146797074227050243796231001527513188517222102533609879856271977599085359214761995812013304273705087884012864870860316140959386263712261023431338642036955538675194995254860356196860928948904910104782072744666235086537</span>, <span class="hljs-number">90971837642433291280873621883216367817998065218607475308728029342384397984877685262773211911225017685122069795492703551175449897609664953357038478590596118164908410836795589316859218558924908109018646584994451050418244132783990484997446700555849562546557811117907782116545477224921738603975274933186794342491</span>, <span class="hljs-number">73413351017881312712468977975284224969712424335838849844092642943213311672854945671322891541815396298565073974489398966168460398863368939081968582617939378670552898186310210195570878457837228086549976345444751087428844389630498481701518885699105988150105202350202767346091098175295783591431654750734894877399</span>, <span class="hljs-number">71566039368566410696192366523253937232453984906766927106190688497758283492117264515150487759343943529526150027981496199751072735188260477291107672692545413595715319871286731540613403720279178498965086799594314786942108180966532474527957866789627251162692053119249102334395349645969466674380262856097693438521</span>, <span class="hljs-number">107628356419937581357884846311454393897766095193524472406415741434987693671384322405146875604772875861371298399663792861133695195849541253920791194728970646177177601304422827790522809107774220027822016584419667805968358988156290174765868439478153696514808349459959439415529354636614886500694506023255079823373</span>, <span class="hljs-number">91790474865200416562498525223387195736004778541952759476953293702991209352845230506773341766471835481185571572235140157043225934157398559619371693860888447188748144001978514611594339471810299348783446801794220036396407380964251612645759456101262295721935493095278291895678614455197784652961018115949658419209</span>, <span class="hljs-number">57745662696838303754303952465503228135078930819394673548775585096093512474118594638537980679427929033618503594855631276864271074749153391716985704043006635120113738881223783140512431675306017867810186495417036064170392661338259312054070420545443175282250796188844807847223002952495291671792316319261526203977</span>, <span class="hljs-number">74932280401824987073956870313685377085306206587423235348665346009152728684240450812927074555554879023572849407016961782430835249861002565952666939003777340922054220851625176505153442063005452154788416303298829441483147485245199232639360652800187172042662155481290924850141197767078965685536829327773869523877</span>, <span class="hljs-number">151358344215033244675875489778202324190602535755100062795559941742660074031432793530151212013764307368624092680307412309928239344375084702784223862577115959360359550888626830285200297868200193432953229394288774622849280647658223840091169768900707469559531106032962678397359686688885464319205469445395775505261</span>, <span class="hljs-number">58689109871391516446867152324943075006307619674297402783356934482330092148515973708298623302336452436909987582230530380141926976193048683919739669740152340284783548654140031841997682049142230063299924009372163169151602233027862127015614058254349505308306391730351101028876962457506249662645940599043284890479</span>, <span class="hljs-number">75861752129011706039232551442557324749632957472023260501544821732788259510015930776827063124846257933592600211419172200445500819665741080443558399298477165580569304097320488157982369509484537407955071525374169099071933569693698855275672496186292197585298047755984716638462181339492749181406670186116294083207</span>, <span class="hljs-number">95346418806667240579084074666101586656652563700979849442906833893357500903462274404419599353579163690013564626109399908623932855557157233581946448703748443415302152330984340846031484190075840945839657868726300498034388094371265188156182339601979104590181781634872909781460522645431312963619475713195057529053</span>, <span class="hljs-number">111263984476673436627489757275903278242507559263558167504820261180694675496975214444112803028740397579682261168188209236682419315487324285379489604372214244677171978542867983223205255696183564627476468236388981120865570003958834885830340089377367925355956102357809150294822256788916694056156982524732649022121</span>, <span class="hljs-number">96342125779778036941833551361632436941989127906210900570779845131168275089639216016217308560788807120832119537472979904464676694024827555869317191603939804273190020844614998671864808084618549460537796585180744783403305042282594096501853485099449520451347637383758909023665498253598410753186362009460492830077</span>, <span class="hljs-number">123521857465916800677857353280191063787794382070207831208108072146961113332349472274610835066727682678338330153931986264103329376246220375119477195903647449590640978718531623595252346576912612285734791871663640158415800617586885197074330899616507185403383799265717845801374846656401529390641443616981589591271</span>, <span class="hljs-number">131405795868049704946945078209025643754825946515862168268539786167707046891586623717476673108436285639575419309084969446295535565904197185085776823271112656565198238246280988380382110403894156666473014985911785626169140414905488725615795364652211328520244008235414509954941587909513975543894548408022461287151</span>, <span class="hljs-number">70967114730909286832264494950640090470702806737946498609585048455374288588521539757280256786923900427556094520842779667859333365003824139739221992299308163341116429010529334098884182035133381995880826298540167736908299468072146475041847885773746257305103221598524542443653591683985019129894558266194325182821</span>, <span class="hljs-number">107979432465960445003549108683102634118917861056034954024622240724163563602890130060316628069849623795318199576811119794560257267198435021465634488362082571221559448800322437539178387390819167699914898519745802727807447711037649579119174492560260601959406822151422632429549878526990294167401411360169366398309</span>, <span class="hljs-number">118859893624530448832013335940179713922013208072805796098733098460272093097271354351290476904722130296985679088987020794135009361338702308650147800222344594443187427748099291365938946361540610154000110289387874941903994296345375923386002742685159036859796319092682744673080262820281354319298093885235987771731</span>]<br>rsac = [<span class="hljs-number">74504458879652943718663653850001437748341706690464761040767162486051250985910710402432140664943614478998161249571034628851708336587661498323826689121364093982543580220191566185998828898605279747505344794840238227684405607409399902867487210576304571314924605590164238090018623295565709785325901829375477233824</span>, <span class="hljs-number">90677687219451530935331531248712316796517647127110471932385574260084489206678436536025506136368980291362036895801209630370143728770276253819338126007059869043902337086043255709746216137616247630906044373779975724955439086975040791603062792477039660332639822636527898261073298224224617779978714534530831926382</span>, <span class="hljs-number">10441054926050260515775358807238672134995234707241729080928053791607295564961937959033050961406260156072418199349907188140011493317693815061021500276765874984758886044928346932845924300744885188311089620531981448619278771578819713090509906031204293324113030585264611939296118692099522756767915057220802371922</span>, <span class="hljs-number">75065942418049435620654589688902391988060904032224001083231877620990198917295603935365374839889910973316542865166711278558219477270958110193289958891670566730226744983567315102048352813458563913653693662545337119770268597757415606316643719527194000516770694472830033240065407861002018776722640989245914933864</span>, <span class="hljs-number">15967158178072756422697064801486297052470586035506805260212161467461991259373987383255280185122289231578694016246952580063663344331526433996641826455260971239990061316068805505099845909759948602603228604199884069913782124385897091085229540639182230053801383267057411228014418697121534096948589529087973618030</span>, <span class="hljs-number">37689478205889636617142877564157174378274716740702285559079324695046266180134126621576800675259844590798526867151978596131919317434518210642866030066928530109056429979286677519091178622240424270292632823938720664459741648575643188292206339090139580383397462178781885540845296443902839519200711798152861266216</span>, <span class="hljs-number">89991079171246842344250963909361678745600967560853729184873707321755423054752908194189661108220419993798870795216751075958380000036114708766326933569202097724367289862510179697851125292225500668270519323126824977283310811921738440461634618096070254683166891178610983021175889405723063903744760830044483553015</span>, <span class="hljs-number">12564784640138976223050478455073663507636463279004472970307500669890867813114565499438039688204577264309094677815359383327303659158283614635750329846385518405508451739233890320129606029814764719198822399536313264962983904837928212526895349327777003147602280321802339650663070755926837928479100067496182740015</span>, <span class="hljs-number">11644943444021682061705775758222178592151216531043485095365213895064672411659588784299149458722852375507456625497581474106874839986786922479523762090697979412491760703258217221044871874588203242834670991968225018330747687499319134596164253217457822290251577010138433021634093698922228165988834742170304034937</span>, <span class="hljs-number">7440952483263968136543488133538954176720150568935036124555561636558405472861937899311692100225854466894641991674736586071693917092584709253652133242676032360332823213448817914514598770449974685391866088874604994277625053485651836603598675134877502825868995744877182003110720548987649603439409541560443056233</span>, <span class="hljs-number">26432139649644724258156851399015803833287203554853089382176324578551505137460733413666096695203082335960652170254261514531360519569163381379304943388941105657952632544172898150281406145833476518212352728023813500749575869340588121411252877723139411912575077520300256718257321039492671708893676087174130127627</span>, <span class="hljs-number">57123543722088565652435248193112878912919477826104699980308653915041296324381912869705895816597336792356053129908891429078049803245912627548678533968825391714890250901090173610814507250901176738461218113028322059386190976395617728466608881544720668647826686193434008738860268283215016301583387030358145368979</span>, <span class="hljs-number">23345145988953014746994009332494104314006269768459845287686772564449193680626141627252617993162588712706111487450314527081815527083176603353888026799539264957926735851981959663747313504865883507010317064677343050012331837540653419457977282011143696513646910221917021350965089365064108284126991594769804195958</span>, <span class="hljs-number">18584786192890585340554251103045488911640395930311242880183603291612729344818076657431110151188845846461865668722727322657706096938157538175405143087120939463583993015116566820907628655632261436234097039735321279198185020071927791315164532898161858419324906856694850350127947939219274692570387210945622160425</span>, <span class="hljs-number">32032100783803280101506640700407146214507106934402623014894345433328319560672855179559658148321460290731133069045000363251832955885416381476803469919752501472790597059954145215453484924607402213833208606478061431892867099951406127186058725643977545110983793482369725606454118192673307075130629848277572761800</span>, <span class="hljs-number">33553261797062509715636247635116146924068973136236402732133070162363574617308632416380426301032863871980545883634361689918994364261326716216183140972627635354327281418414737356206607530518178640605226107447668012418064780102828536450110475122533604086967729782507101136102693107027580346060700369982449268926</span>, <span class="hljs-number">89670084243832433804089281202232826269625530193093980037641998743679243635754393741282858947768060115028683001038661205854054299192392452008668561209116501939507252886741566691289008796906111249663270020473187990112802944098815756041580119043386176229088695930061919546816589198630865246014946002351028640824</span>, <span class="hljs-number">1885172266369210136727710999528571764220354997431579368990444202265790166417523564316711055628257703430143702613679953660332632889708772965357813478003529054531405806804431450226099406126799278914742462302125596290589751898179861813384971843398481071872868293514166981185749346457303403593450424312260349932</span>, <span class="hljs-number">38315205924420685030274312234361688998295987101811658111889610086810814657639278790542984546365338373266315310027165402200622668761747894472059459061618323576723570481849451043583002607285263178217863197890339568464658591355554682896748372777684662342898583067137754082163049279790489618727974756059268134757</span>, <span class="hljs-number">1503390686484331392720378357968284034985922228277965470494601879150160036004097286813280072280703228267019910176646779550924896975837747296612147447328318954616213255299480731492038869675560914084449670874184183238901906564172317022457453828770471467222933579318607818146238931448210350167812730883209706573</span>, <span class="hljs-number">18261213979022925288437196949092892081418030897865208654146190002058335053744268642563789748028557517530508560801191795766191341328352904811764022501596832195139424135209021776110924124039296421367751450136220305469912616827010861330256881960646842786938701289977933762823676627250459890848839915051749826759</span>, <span class="hljs-number">23533732290079220996981259709972499473689463975286699510373965623743642991317196761881160594348850261577119383002784894244669591774257030880479791202186436732524028353661327508406190257273456035705131167830367903206715636687652856796934500412120422271222540504288448174980494038298906213387391904497984121223</span>, <span class="hljs-number">4947065111438996960526894808482046817149283280661743322149062731884606781783471692517417963283291589117647621522497791685498761948515564261734860969232487531299769159613422384551359597280388941714265690573934157839829726977812657605906204879891549647528887678395428467400579365987072840270925293902595715999</span>, <span class="hljs-number">67653403106052782639824505158253042492359705399959732418763452025230197898542624747634303715085261173616195255069462499517424774656996471734918800423899632652788451324107959871547187612032289791267004085024256214283694845473459442053468102390886723908204278002126105750462941050782644578760981771561025922699</span>]<br>M = crt(rsac,modulus)<br>f = x^<span class="hljs-number">17</span> - M<br><span class="hljs-built_in">print</span>(f.roots())<br><span class="hljs-comment">#[(66869997917800083972572187953062445239249136563973495502684696601787248828812, 1)]</span><br></code></pre></td></tr></table></figure><hr><p><a href="https://dunkirkturbo.github.io/2020/08/12/CTF-Training-Record-2/">CTF-Training-Record-2 | 0xDktb’s Blog (dunkirkturbo.github.io)</a></p><p><a href="https://lazzzaro.github.io/2020/05/06/crypto-RSA/#%E4%BD%8E%E5%8A%A0%E5%AF%86%E6%8C%87%E6%95%B0%E5%B9%BF%E6%92%AD%E6%94%BB%E5%87%BB%EF%BC%88Hastad%E6%94%BB%E5%87%BB%EF%BC%89">RSA | Lazzaro (lazzzaro.github.io)</a></p><p><a href="https://blog.csdn.net/weixin_45883223/article/details/115299389">LCG(线性同余生成器)_WustHandy的博客-CSDN博客</a></p><p><a href="https://www.jianshu.com/p/d46a7c7edea4">浅谈Java的伪随机数发生器和线性同余法 - 简书 (jianshu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>LCG</tag>
      
      <tag>Hastad攻击</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022第五空间</title>
    <link href="/2022/10/03/2022%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4/"/>
    <url>/2022/10/03/2022%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="2022第五空间网络安全大赛"><a href="#2022第五空间网络安全大赛" class="headerlink" title="2022第五空间网络安全大赛"></a>2022第五空间网络安全大赛</h1><h2 id="5-vgcd"><a href="#5-vgcd" class="headerlink" title="5_vgcd"></a>5_vgcd</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> getrandbits, seed<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, inverse, bytes_to_long, isPrime<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sample</span>(<span class="hljs-params">rho, eta, gamma, p</span>):<br>    seed(urandom(<span class="hljs-number">8</span>))<br>    <span class="hljs-keyword">return</span> p * getrandbits(gamma - eta) + getrandbits(rho)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_vector</span>(<span class="hljs-params">rho, eta, gamma, m, p, K</span>):<br>    v = vector([sample(rho, eta, gamma, p) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m)])<br>    <span class="hljs-keyword">return</span> K*v <br>    <br>rho = <span class="hljs-number">6</span><br>m = <span class="hljs-number">3</span><br>eta = <span class="hljs-number">288</span><br>gamma = <span class="hljs-number">512</span><br>p = getPrime(gamma)<br>q = getPrime(gamma)<br>n = p * q<br>e = <span class="hljs-number">65537</span><br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>c = <span class="hljs-built_in">pow</span>(bytes_to_long(flag), e, n)<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(c)<br><br>pp = p &gt;&gt; (gamma - eta)<br><span class="hljs-keyword">assert</span> isPrime(pp)<br>K = Matrix.random(Integers(pp), m, m).lift()<br>t1 = [gen_vector(rho, eta, gamma, m, pp, K) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1024</span>)]<br><span class="hljs-built_in">print</span>(t1)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4</span>):<br>    t2 = [gen_vector(rho, eta, gamma, m, pp, K) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">512</span>)]<br>    <span class="hljs-built_in">print</span>(t2)<br><br></code></pre></td></tr></table></figure><p><code>t1</code>和<code>t2</code>由若干个$K*v$组成。(这个不应该是$v*K$吗？)<br>$$<br>\begin{align}<br>K*v &amp;&#x3D;<br>\left[<br>\begin{matrix}<br>  k_{11} &amp; k_{12} &amp; k_{13}\\<br>  k_{21} &amp; k_{22} &amp; k_{23}\\<br>  k_{31} &amp; k_{32} &amp; k_{33}<br>\end{matrix}<br>\right]<br>*<br>\left[<br>\begin{matrix}<br>  (pp*r_{226}+r_6) &amp; (pp*rr_{226}+rr_6) &amp; (pp*rrr_{226}+rrr_6)<br>\end{matrix}<br>\right]<br>\\&amp;&#x3D;<br>\left[<br>\begin{matrix}<br>  a_1*pp+b_1 &amp; a_2*pp+b_2 &amp; a_3*pp+b_3<br>\end{matrix}<br>\right]<br>\end{align}<br>$$</p><p>其中$a_i,b_i$表示如下<br>$$<br>\begin{align}<br>a_i &amp;&#x3D; k_{1i}*r_{226}+k_{2i}*rr_{226}+k_{3i}*rrr_{226}\\<br>b_i &amp;&#x3D; k_{1i}*r_{6}+k_{2i}*rr_{6}+k_{3i}*rrr_{6}<br>\end{align}<br>$$<br>有这么多形如$a*pp+b$，可以通过消去$b$然后求公约数得到$pp$，最后$coppersmith$已知高位求低位求解$p$。</p><p>这里需要用到<u>生日攻击</u>，可以简单理解为在这么多数中，有很大概率存在相同$r_6,r_6,r’’_6$，因此可以循环遍历一下所有的$K*v$。</p><p>算一下大致的概率。$r_6,r_6,r’’_6$的组合有$2^{18}$种可能，所给数据有$3072$个，套用公式得存在相同的概率近似$100\%$。</p><p>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> gcd,is_prime,invert<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>e = <span class="hljs-number">65537</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;output10.txt&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    n = <span class="hljs-built_in">int</span>(f.readline().decode())<br>    c = <span class="hljs-built_in">int</span>(f.readline().decode())<br>    L = <span class="hljs-built_in">eval</span>(f.readline().decode())<br>    L += <span class="hljs-built_in">eval</span>(f.readline().decode())<br>    L += <span class="hljs-built_in">eval</span>(f.readline().decode())<br>    L += <span class="hljs-built_in">eval</span>(f.readline().decode())<br>    L += <span class="hljs-built_in">eval</span>(f.readline().decode())<br><br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(L))):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>,<span class="hljs-built_in">len</span>(L)):<br>        x1 = L[i][<span class="hljs-number">0</span>] - L[j][<span class="hljs-number">0</span>]<br>        x2 = L[i][<span class="hljs-number">1</span>] - L[j][<span class="hljs-number">1</span>]<br>        pp = <span class="hljs-built_in">int</span>(gcd(x1,x2))<br>        <span class="hljs-keyword">if</span> pp.bit_length() == <span class="hljs-number">288</span> <span class="hljs-keyword">and</span> is_prime(pp):<br>            R.&lt;x&gt; = PolynomialRing(Zmod(n))<br>            f = (pp &lt;&lt; <span class="hljs-number">224</span>) + x<br>            re = f.small_roots(X = <span class="hljs-number">2</span>^<span class="hljs-number">224</span>,beta=<span class="hljs-number">0.4</span>)<br>            <span class="hljs-keyword">if</span> re:<br>                p = <span class="hljs-built_in">int</span>(f(re[<span class="hljs-number">0</span>]))<br>                q = n//p<br>                phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>                d = <span class="hljs-built_in">int</span>(invert(e,phi))<br>                m = <span class="hljs-built_in">pow</span>(c,d,n)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p=<span class="hljs-subst">&#123;p&#125;</span>,q=<span class="hljs-subst">&#123;q&#125;</span>&#x27;</span>)<br>                <span class="hljs-built_in">print</span>(long_to_bytes(m))<br>                <br><br></code></pre></td></tr></table></figure><hr><p>参考：</p><p><a href="https://blog.csdn.net/u010883831/article/details/126944260">【2022 第五空间】5_vgcd WriteUP_Mr_AgNO3的博客-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生日攻击</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022江西省振兴杯</title>
    <link href="/2022/10/03/2022%E6%B1%9F%E8%A5%BF%E7%9C%81%E6%8C%AF%E5%85%B4%E6%9D%AF/"/>
    <url>/2022/10/03/2022%E6%B1%9F%E8%A5%BF%E7%9C%81%E6%8C%AF%E5%85%B4%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="简单的RSA算法"><a href="#简单的RSA算法" class="headerlink" title="简单的RSA算法"></a>简单的RSA算法</h2><p>yafu分解n，得到p,q，然后进行解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>c = <span class="hljs-number">127787005372346984201114973214509899116</span><br>n = <span class="hljs-number">249875510135225835839025820066377585461</span><br>p = <span class="hljs-number">15849223833777174791</span><br>q = <span class="hljs-number">15765788454744518371</span><br>e = <span class="hljs-number">16573</span><br><span class="hljs-keyword">assert</span> n == p*q<br>d = gmpy2.invert(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(c,d,n))<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight sml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sml">b&#x27;&#125;c2s_45R_Xj&#123;galf&#x27;<br></code></pre></td></tr></table></figure><p>反过来就是flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">flag</span><span class="hljs-template-variable">&#123;jX_R54_s2c&#125;</span><br></code></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="PLC流量分析"><a href="#PLC流量分析" class="headerlink" title="PLC流量分析"></a>PLC流量分析</h2><p>进行流量追踪，发现了可疑字符<code>flag&#123;fake_flag&#125;</code>和<code>R3</code>以及<code>41</code>。并且似乎找到了规律，就是每一次发送这些字符前都会双方都会发送一系列可打印字符，作为开头。</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210032138795.png"/><p>尝试将<code>flag&#123;R341&#125;</code>作为flag，结果不行。看到<code>fake</code>想到了<code>real</code>，而跟这个相似的就是<code>R341</code>了，于是进行替换。得到flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">flag</span><span class="hljs-template-variable">&#123;R341_flag&#125;</span><br></code></pre></td></tr></table></figure><h2 id="流量中的神秘信息"><a href="#流量中的神秘信息" class="headerlink" title="流量中的神秘信息"></a>流量中的神秘信息</h2><p>扔进<code>Wireshark</code>进行流量追踪，经过多次尝试找到了真正的flag</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210032139868.png"/><p>即</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">flag&#123;d2UxY29tZVQwQ2hpbmE<span class="hljs-operator">=</span>&#125;<br></code></pre></td></tr></table></figure><p>很明显，括号内的要进行Base64解码，最终flag为</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">flag</span><span class="hljs-template-variable">&#123;we1comeT0China&#125;</span><br></code></pre></td></tr></table></figure><h2 id="modbus流量分析"><a href="#modbus流量分析" class="headerlink" title="modbus流量分析"></a>modbus流量分析</h2><p>扔进<code>Wireshark</code>进行分析，流量追踪并没有看出有用的内容。于是尝试找最长的包，发现了可疑的内容。</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210032139553.png"/><p>将这些收集起来并直接<code>chr()</code>成字符，可惜并不是这么操作</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210032139228.png"/><p>但极大概率这是flag。尝试与flag的固定格式进行匹配，发现了规律</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">m = <span class="hljs-string">&#x27;153 147 158 152 132 146 144 155 157 138 140 160 150 140 160 154 158 140 134 130&#x27;</span>.split()<br>m = [<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m:<br>    <span class="hljs-built_in">print</span>(i, end=<span class="hljs-string">&#x27; &#x27;</span>)<br><span class="hljs-built_in">print</span>()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;flag&#123;&#x27;</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">ord</span>(i), end=<span class="hljs-string">&#x27; &#x27;</span>)<br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210032139116.png"/><p>规律为对应数字进行相加总为255。于是解密脚本为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">m = <span class="hljs-string">&#x27;153 147 158 152 132 146 144 155 157 138 140 160 150 140 160 154 158 140 134 130&#x27;</span>.split()<br>m = [<span class="hljs-built_in">int</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-number">255</span>-i),end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>得到flag</p><figure class="highlight ceylon"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ceylon">flag&#123;modbus<span class="hljs-number">_</span><span class="hljs-keyword">is</span><span class="hljs-number">_</span>easy&#125;<br></code></pre></td></tr></table></figure><h1 id="STAGE"><a href="#STAGE" class="headerlink" title="STAGE"></a>STAGE</h1><h2 id="PCL图片分析"><a href="#PCL图片分析" class="headerlink" title="PCL图片分析"></a>PCL图片分析</h2><p>放入winhex分析，最后面有flag.txt，更改后缀为zip，里面有一个需要密码的flag.txt。</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210032140550.png"/><p>从更改图片宽高入手，找到了部分密码</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210032140311.png"/><p>进行模板爆破，</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210032140256.png"/><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210032140459.png"/><p>最终得到flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">flag</span><span class="hljs-template-variable">&#123;plc_sec_master&#125;</span><br></code></pre></td></tr></table></figure><h2 id="工控主机中的异常文件"><a href="#工控主机中的异常文件" class="headerlink" title="工控主机中的异常文件"></a>工控主机中的异常文件</h2><p>扔入winhex分析，发现尾部有<code>oru-flag.jpg</code>，直接将文件后缀改成<code>.zip</code>不行。仔细观察发现首部文件头为<code>KP</code>，</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210032141410.png"/><p>但我只见过<code>PK</code>的文件头。于是将<code>04034B50</code>更改成<code>504B0304</code>，更改后缀名为<code>.zip</code>。得到需要密码的jpg图片。</p><p>用爆破工具进行爆破，一开始尝试大小写字母和数字，到后面爆破时间太长就减少字符集，最终得到</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210032141180.png"/><p>图片中含有flag</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210032141323.png"/><h1 id="PPC"><a href="#PPC" class="headerlink" title="PPC"></a>PPC</h1><h2 id="被截获的机密文件"><a href="#被截获的机密文件" class="headerlink" title="被截获的机密文件"></a>被截获的机密文件</h2><p>扔进winhex打开，发现文件头为PK，更改文件后缀为.zip。解压缩得到一系列文件。</p><p>依次查看这些文件，发现<code>func1.fcb</code>（这文件名取的让人容易知道这是实现啥功能的模块代码）里面有有一段异或的加密代码，</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210032141034.png"/><p>根据上述代码，已知<code>buf</code>和<code>var</code>，所以应该是求<code>W</code>。写出python脚本如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">buf = [<span class="hljs-number">177</span>, <span class="hljs-number">146</span>, <span class="hljs-number">158</span>, <span class="hljs-number">156</span>, <span class="hljs-number">137</span>, <span class="hljs-number">148</span>, <span class="hljs-number">146</span>, <span class="hljs-number">147</span>, <span class="hljs-number">180</span>, <span class="hljs-number">142</span>, <span class="hljs-number">188</span>, <span class="hljs-number">137</span>, <span class="hljs-number">204</span>, <span class="hljs-number">197</span>, <span class="hljs-number">205</span>, <span class="hljs-number">203</span>, <span class="hljs-number">186</span>, <span class="hljs-number">143</span>, <span class="hljs-number">156</span>, <span class="hljs-number">147</span>, <span class="hljs-number">153</span>, <span class="hljs-number">139</span>, <span class="hljs-number">148</span>, <span class="hljs-number">152</span>, <span class="hljs-number">138</span>, <span class="hljs-number">181</span>, <span class="hljs-number">146</span>, <span class="hljs-number">137</span>, <span class="hljs-number">152</span>, <span class="hljs-number">145</span>]<br>var = <span class="hljs-number">0xfd</span><br>text = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>):<br>    val = buf[i] ^ var<br>    text += <span class="hljs-built_in">chr</span>(val)<br><br><span class="hljs-built_in">print</span>(text)<br><span class="hljs-comment">#LocationIsAt1806GrandviewHotel</span><br></code></pre></td></tr></table></figure><p>得到flag</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">flag</span><span class="hljs-template-variable">&#123;LocationIsAt1806GrandviewHotel&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>流量分析</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github图床搭建问题</title>
    <link href="/2022/10/03/Github%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%98/"/>
    <url>/2022/10/03/Github%E5%9B%BE%E5%BA%8A%E6%90%AD%E5%BB%BA%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>我所遇见的问题是这样的。使用PicGo+Github搭建图床，虽然PicGo上传图片成功了，但是在相册和网站上都无法显示，尝试过网上的一些方法（重复的文章真的多！），无一例外都没有效果。后经自己的猜想和实践，将问题解决了。</p><hr><p>一开始PicGo上的Github配置我是按照网上配置的。（主要是改了我也不记得之前的配置了）</p><p>将上传成功的图片在浏览器中打开，其url为</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031052750.png"/><p>但是在Github的仓库里，将图片拖出来查看，其url却是这样的</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031055720.png"/><p>按道理两者url应该一致才对，所以PicGo上的Github的域名应该改为能成功看到的域名（即将&#x2F;img前面的复制粘贴过来就可以了）</p><p>我这里的配置如下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/gal2xy/</span>blog_img<span class="hljs-regexp">/main/</span><br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031102486.png"/><p>于是就可以在相册中查看，博客上也能正常显示。</p><hr><p>2022&#x2F;10&#x2F;6</p><p>这个方法有时候会失效，淦，太难受了。</p><hr><p>203&#x2F;7&#x2F;4</p><p>因为Token过期，重新配置后，仍然无法显示图片。不过好在寻找到了方法：<a href="https://blog.csdn.net/ZMMMOO/article/details/127270446">picgo使用github做图床，图片在相册不显示，在github上也无法查看_picgo相册里显示不了图片_肉丝不切片的博客-CSDN博客</a></p><p>原因是<code>GitHub</code>的<code>raw.githubusercontent.com</code>域名解析被污染了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>图床搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022ByteCTF</title>
    <link href="/2022/10/02/2022ByteCTF/"/>
    <url>/2022/10/02/2022ByteCTF/</url>
    
    <content type="html"><![CDATA[<h1 id="2022ByteCTF"><a href="#2022ByteCTF" class="headerlink" title="2022ByteCTF"></a>2022ByteCTF</h1><h2 id="CardShark"><a href="#CardShark" class="headerlink" title="CardShark"></a>CardShark</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3.9</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> socketserver<br><span class="hljs-keyword">import</span> signal<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> urandom<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> FLAG<br><br>BANNER = <span class="hljs-string">rb&quot;&quot;&quot;</span><br><span class="hljs-string">.--------.--------.--------.--------.     .--------.--------.--------.--------.--------.</span><br><span class="hljs-string">| C.--.  | A.--.  | R.--.  | D.--.  |.-.  | S.--.  | H.--.  | A.--.  | R.--.  | K.--.  |</span><br><span class="hljs-string">|  :/\:  |  (\/)  |  :():  |  :/\:  (( )) |  :/\:  |  :/\:  |  (\/)  |  :():  |  :/\:  |</span><br><span class="hljs-string">|  :\/:  |  :\/:  |  ()()  |  (__)  |&#x27;-.-.|  :\/:  |  (__)  |  :\/:  |  ()()  |  :\/:  |</span><br><span class="hljs-string">|  &#x27;--&#x27;C |  &#x27;--&#x27;A |  &#x27;--&#x27;R |  &#x27;--&#x27;D | (( ))  &#x27;--&#x27;S |  &#x27;--&#x27;H |  &#x27;--&#x27;A |  &#x27;--&#x27;R |  &#x27;--&#x27;K |</span><br><span class="hljs-string">`--------`--------`--------`--------&#x27;  &#x27;-&#x27;`--------`--------`--------`--------`--------&#x27;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Card</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        random.seed(urandom(<span class="hljs-number">32</span>))<br>        self.cards = []<br>        <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;Hearts&#x27;</span>, <span class="hljs-string">&#x27;Spades&#x27;</span>, <span class="hljs-string">&#x27;Diamonds&#x27;</span>, <span class="hljs-string">&#x27;Clubs&#x27;</span>):<br>            <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>):<br>                self.cards.append(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;p&#125;</span> <span class="hljs-subst">&#123;t&#125;</span>&#x27;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">deal</span>(<span class="hljs-params">self</span>):<br>        n = random.getrandbits(<span class="hljs-number">4</span>)<br>        <span class="hljs-keyword">return</span> self.cards[n]<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span>(socketserver.BaseRequestHandler):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_recv_all</span>(<span class="hljs-params">self</span>):<br>        BUFF_SIZE = <span class="hljs-number">1024</span><br>        data = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            part = self.request.recv(BUFF_SIZE)<br>            data += part<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(part) &lt; BUFF_SIZE:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> data.strip()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self, msg, newline=<span class="hljs-literal">True</span></span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(msg, <span class="hljs-built_in">str</span>):<br>            msg = msg.encode()<br>        <span class="hljs-keyword">if</span> newline:<br>            msg += <span class="hljs-string">b&#x27;\n&#x27;</span><br>        self.request.sendall(msg)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recv</span>(<span class="hljs-params">self, prompt=<span class="hljs-string">&#x27;&gt; &#x27;</span></span>):<br>        self.send(prompt, newline=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">return</span> self._recv_all()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">proof_of_work</span>(<span class="hljs-params">self</span>):<br>        random.seed(urandom(<span class="hljs-number">32</span>))<br>        alphabet = string.ascii_letters + string.digits<br>        proof = <span class="hljs-string">&#x27;&#x27;</span>.join(random.choices(alphabet, k=<span class="hljs-number">32</span>))<br>        hash_value = sha256(proof.encode()).hexdigest()<br>        self.send(<span class="hljs-string">f&#x27;sha256(XXXX+<span class="hljs-subst">&#123;proof[<span class="hljs-number">4</span>:]&#125;</span>) == <span class="hljs-subst">&#123;hash_value&#125;</span>&#x27;</span>)<br>        nonce = self.recv(prompt=<span class="hljs-string">&#x27;Give me XXXX &gt; &#x27;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(nonce) != <span class="hljs-number">4</span> <span class="hljs-keyword">or</span> sha256(nonce + proof[<span class="hljs-number">4</span>:].encode()).hexdigest() != hash_value:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">timeout_handler</span>(<span class="hljs-params">self, signum, frame</span>):<br>        <span class="hljs-keyword">raise</span> TimeoutError<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">try</span>:<br>            self.send(BANNER)<br><br>            signal.signal(signal.SIGALRM, self.timeout_handler)<br>            signal.alarm(<span class="hljs-number">60</span>)<br><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.proof_of_work():<br>                self.send(<span class="hljs-string">&#x27;Wrong!&#x27;</span>)<br>                <span class="hljs-keyword">return</span><br><br>            card = Card()<br>            coin = <span class="hljs-number">5200</span><br>            count = <span class="hljs-number">0</span><br><br>            self.send(<span class="hljs-string">&#x27;Greetings! I will give you my secret, if you can guess my card 200 times in a row. &#x27;</span><br>                      <span class="hljs-string">&#x27;One coin, one chance.&#x27;</span>)<br><br>            signal.alarm(<span class="hljs-number">3600</span>)<br><br>            <span class="hljs-keyword">while</span> coin &gt; <span class="hljs-number">0</span>:<br>                coin -= <span class="hljs-number">1</span><br>                c = card.deal()<br>                r = self.recv(prompt=<span class="hljs-string">&#x27;Your guess &gt; &#x27;</span>).decode(<span class="hljs-string">&#x27;l1&#x27;</span>)<br>                <span class="hljs-keyword">if</span> r == c:<br>                    count += <span class="hljs-number">1</span><br>                    self.send(<span class="hljs-string">f&#x27;Correct! Your progress: <span class="hljs-subst">&#123;count&#125;</span>/200.&#x27;</span>)<br>                    <span class="hljs-keyword">if</span> count &gt;= <span class="hljs-number">200</span>:<br>                        self.send(<span class="hljs-string">&#x27;You are the Card Shark! Flag is yours:&#x27;</span>)<br>                        self.send(FLAG)<br>                        <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">else</span>:<br>                    count = <span class="hljs-number">0</span><br>                    self.send(<span class="hljs-string">f&#x27;Sorry! My card is <span class="hljs-subst">&#123;c&#125;</span>.&#x27;</span>)<br><br>            <span class="hljs-keyword">if</span> coin == <span class="hljs-number">0</span>:<br>                self.send(<span class="hljs-string">&#x27;You have no money! See you another day.&#x27;</span>)<br><br>            self.send(<span class="hljs-string">&#x27;Bye!&#x27;</span>)<br><br>        <span class="hljs-keyword">except</span> TimeoutError:<br>            self.send(<span class="hljs-string">&#x27;Timeout!&#x27;</span>)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br>        <span class="hljs-keyword">finally</span>:<br>            self.request.close()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    HOST, PORT = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">10000</span><br>    <span class="hljs-built_in">print</span>(HOST, PORT)<br>    server = ForkedServer((HOST, PORT), Task)<br>    server.allow_reuse_address = <span class="hljs-literal">True</span><br>    server.serve_forever()<br><br></code></pre></td></tr></table></figure><p>审计代码，容易看出先是四位哈希爆破，然后是随机数预测问题。但起初以为可以用RandCrack来解决这个随机数预测问题，看来是想简单了。</p><p>随即预测工具：<a href="https://github.com/JuliaPoo/MT19937-Symbolic-Execution-and-Solver">JuliaPoo&#x2F;MT19937-Symbolic-Execution-and-Solver: Python implementation of a symbolic execution of MT19937 and a solver for GF(2) matrices (github.com)</a></p><p>相似题目：<a href="https://www.anquanke.com/post/id/205861#h3-9">浅析MT19937伪随机数生成算法-安全客 - 安全资讯平台 (anquanke.com)</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> randcrack <span class="hljs-keyword">import</span> RandCrack<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">from</span> MT19937 <span class="hljs-keyword">import</span> MT19937, MT19937_symbolic<br><br>alphabet = string.ascii_letters + string.digits<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">proof</span>(<span class="hljs-params"><span class="hljs-built_in">hash</span>, part</span>):<br>    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> alphabet:<br>        <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> alphabet:<br>            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> alphabet:<br>                <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> alphabet:<br>                    s = (a+b+c+d).encode() + part<br>                    <span class="hljs-keyword">if</span> sha256(s).hexdigest() == <span class="hljs-built_in">hash</span>.decode():<br>                        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Found XXXX: <span class="hljs-subst">&#123;a+b+c+d&#125;</span>&#x27;</span>)<br>                        <span class="hljs-keyword">return</span> a+b+c+d<br><br><br>ID = <span class="hljs-string">&#x27;dcb894124cb27c186d8a996bdbb43602&#x27;</span><br>s = remote(ID + <span class="hljs-string">&#x27;.2022.capturetheflag.fun&#x27;</span>, <span class="hljs-number">1337</span>, ssl=<span class="hljs-literal">True</span>)<br>s.recvuntil(<span class="hljs-string">b&#x27;XXX+&#x27;</span>)<br>part = s.recvuntil(<span class="hljs-string">b&#x27;)&#x27;</span>)[:-<span class="hljs-number">1</span>]<br>s.recvuntil(<span class="hljs-string">b&#x27;== &#x27;</span>)<br><span class="hljs-built_in">hash</span> = s.recvline()[:-<span class="hljs-number">1</span>]<br><br>s.send(proof(<span class="hljs-built_in">hash</span>, part).encode())<br><br>cards = []<br><span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;Hearts&#x27;</span>, <span class="hljs-string">&#x27;Spades&#x27;</span>, <span class="hljs-string">&#x27;Diamonds&#x27;</span>, <span class="hljs-string">&#x27;Clubs&#x27;</span>):<br>     <span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;J&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>):<br>           cards.append(<span class="hljs-string">f&#x27;<span class="hljs-subst">&#123;p&#125;</span> <span class="hljs-subst">&#123;t&#125;</span>&#x27;</span>)<br><br>known = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">4992</span>)):<br>    s.send(<span class="hljs-string">&#x27;J&#x27;</span>.encode())<br>    s.recvuntil(<span class="hljs-string">b&#x27;is &#x27;</span>)<br>    key = s.recvline()[:-<span class="hljs-number">2</span>].decode()<br>    pos = cards.index(key)<br>    known.append(pos)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">#预测</span><br><span class="hljs-string">rc = RandCrack()</span><br><span class="hljs-string">for i in known:</span><br><span class="hljs-string">    rc.submit(i)</span><br><span class="hljs-string"></span><br><span class="hljs-string">cnt = 0</span><br><span class="hljs-string">for i in tqdm(range(205)):</span><br><span class="hljs-string">    pos = rc.predict_getrandbits(4)</span><br><span class="hljs-string">    s.send(cards[pos].encode())</span><br><span class="hljs-string">    res = s.recvline().decode()</span><br><span class="hljs-string">    print(res)</span><br><span class="hljs-string">    if &#x27;Correct&#x27; in res:</span><br><span class="hljs-string">        cnt += 1</span><br><span class="hljs-string">        if cnt &gt;= 200:</span><br><span class="hljs-string">            s.interactive()</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment">#预测</span><br>rc = MT19937(state_from_data=(known, <span class="hljs-number">4</span>))<br><br><span class="hljs-comment">#好像一开始是初始态，得先过4992个</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> known:<br>    <span class="hljs-keyword">assert</span> i == rc() &gt;&gt; (<span class="hljs-number">32</span>-<span class="hljs-number">4</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] Cloning successful!&quot;</span>)<br><br>cnt = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">205</span>):<br>    pos = rc() &gt;&gt; (<span class="hljs-number">32</span>-<span class="hljs-number">4</span>)<br>    <span class="hljs-comment"># s.sendlineafter(b&#x27;Your guess &gt; &#x27;, cards[pos].encode())</span><br>    s.send(cards[pos].encode())<br>    res = s.recvline().decode()<br>    <span class="hljs-built_in">print</span>(res)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Correct&#x27;</span> <span class="hljs-keyword">in</span> res:<br>        cnt += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> cnt &gt;= <span class="hljs-number">200</span>:<br>            s.interactive()<br><br></code></pre></td></tr></table></figure><h2 id="Compare"><a href="#Compare" class="headerlink" title="Compare"></a>Compare</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, getRandomNBitInteger, inverse<br><span class="hljs-keyword">from</span> fractions <span class="hljs-keyword">import</span> Fraction<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> lcm<br><span class="hljs-keyword">import</span> re<br><br>N = <span class="hljs-number">512</span><br>safe_expr = re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;^([-+*/0-9.~%^&amp;()=|&lt;&gt;]|and|or|not|MSG)+$&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encode</span>(<span class="hljs-params">m, n, g</span>):<br>    r = getRandomNBitInteger(N)<br>    c = <span class="hljs-built_in">pow</span>(g, m, n*n) * <span class="hljs-built_in">pow</span>(r, n, n*n) % (n*n)<br>    <span class="hljs-keyword">return</span> c<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decode</span>(<span class="hljs-params">c, n, l, u</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(Fraction(<span class="hljs-built_in">pow</span>(c, l, n * n) - <span class="hljs-number">1</span>, n) * u % n)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">round</span>(<span class="hljs-params">expr</span>):<br>    p = getPrime(N)<br>    q = getPrime(N)<br><br>    n = p * q<br>    g = getRandomNBitInteger(N)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n =&#x27;</span>, n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;g =&#x27;</span>, g)<br><br>    a = getRandomNBitInteger(N)<br>    b = getRandomNBitInteger(N)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a =&#x27;</span>, encode(a, n, g))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b =&#x27;</span>, encode(b, n, g))<br><br>    msg = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;msg = &quot;</span>))<br><br>    l = <span class="hljs-built_in">int</span>(lcm(p - <span class="hljs-number">1</span>, q - <span class="hljs-number">1</span>))<br>    u = inverse(Fraction(<span class="hljs-built_in">pow</span>(g, l, n * n) - <span class="hljs-number">1</span>, n), n)<br><br>    <span class="hljs-keyword">return</span> (a &gt; b) <span class="hljs-keyword">is</span> <span class="hljs-built_in">bool</span>(<span class="hljs-built_in">eval</span>(expr, <span class="hljs-literal">None</span>, &#123;<span class="hljs-string">&#x27;MSG&#x27;</span>: decode(msg, n, l, u)&#125;))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    expr = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;Hello, Give me your expr: &#x27;</span>)<br>    expr = re.sub(<span class="hljs-string">r&#x27;\s&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, expr)<br><br><br>    <span class="hljs-keyword">if</span> safe_expr.<span class="hljs-keyword">match</span>(expr) <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;Hacker?&#x27;</span>)<br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Round:&#x27;</span>, i)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">assert</span> <span class="hljs-built_in">round</span>(expr)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;You lost.&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Congratulations!&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;/flag&#x27;</span>).read())<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>Paillier同态加密，由于其满足加法同态，即<br>$$<br>\begin{cases}<br>E(a) &#x3D; g^a*r_1^n\quad mod\ n^2\\<br>E(b) &#x3D; g^b*r_2^n\quad mod\ n^2\\<br>\end{cases}<br>$$</p><p>$$<br>&#x3D;&#x3D;&gt; E(a+b) &#x3D; E(a)*E(b) &#x3D; g^{a+b}*(r_1*r_2)^n\quad mod\ n^2<br>$$</p><p>那么解密就会得到<br>$$<br>D(E(a)*E(b))&#x3D;a+b<br>$$<br>我们只要稍微改变一下就可以得到$a-b$，过程如下</p><p>对$E(b)$取逆得<br>$$<br>E(b)^{-1} &#x3D; g^{-b}*(r_2^{-1})^n\quad mod\ n^2<br>$$<br>$E(a)*E(b)^{-1}$得<br>$$<br>E(a)*E(b)^{-1} &#x3D; g^{a-b}*(r_1*r_2^{-1})^n\quad mod\ n^2<br>$$<br>因此解密就得到<br>$$<br>D(E(a)*E(b)^{-1})&#x3D;a-b<br>$$<br>如何构造<code>expr</code>？如果$a-b&gt;0$，则$(a-b)\%2^{1024}&lt;&#x3D;2^{512}$，但如果$a-b&lt;0$，则$(a-b)\%n&gt;2^{512}$左右，因此可以构造<code>expr</code>为$MSG\%2^{1024}&lt;&#x3D;2^{512}$。当然也可以根据正负数对整除符号的运算结果的差异性构造$MSG&#x2F;&#x2F;2^{512}&#x3D;&#x3D;0$。</p><p>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert<br><br>ID = <span class="hljs-string">&#x27;dcb894124cb27c186d8a996bdbb43602&#x27;</span><br>s = remote(ID + <span class="hljs-string">&#x27;.2022.capturetheflag.fun&#x27;</span>, <span class="hljs-number">1337</span>, ssl=<span class="hljs-literal">True</span>)<br><br>MSG = <span class="hljs-string">b&#x27;MSG//2**512==0&#x27;</span><br>s.recvuntil(<span class="hljs-string">b&#x27;expr: &#x27;</span>)<br>s.send(MSG)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    s.recvuntil(<span class="hljs-string">b&#x27;n =&#x27;</span>)<br>    n = <span class="hljs-built_in">int</span>(s.recvline()[:-<span class="hljs-number">1</span>].decode())<br>    s.recvuntil(<span class="hljs-string">b&#x27;g =&#x27;</span>)<br>    g = <span class="hljs-built_in">int</span>(s.recvline()[:-<span class="hljs-number">1</span>].decode())<br>    s.recvuntil(<span class="hljs-string">b&#x27;a =&#x27;</span>)<br>    a = <span class="hljs-built_in">int</span>(s.recvline()[:-<span class="hljs-number">1</span>].decode())<br>    s.recvuntil(<span class="hljs-string">b&#x27;b =&#x27;</span>)<br>    b = <span class="hljs-built_in">int</span>(s.recvline()[:-<span class="hljs-number">1</span>].decode())<br>    inv_b = <span class="hljs-built_in">int</span>(invert(b, n**<span class="hljs-number">2</span>))<br>    msg = a*inv_b % (n**<span class="hljs-number">2</span>)<br>    s.recvuntil(<span class="hljs-string">b&#x27;msg = &#x27;</span>)<br>    s.send(<span class="hljs-built_in">str</span>(msg).encode())<br>    <span class="hljs-comment"># r.sendlineafter(b&#x27;msg = &#x27;, f&#x27;&#123;x&#125;&#x27;.encode())</span><br>s.interactive()<br></code></pre></td></tr></table></figure><h2 id="Choose-U-Flag"><a href="#Choose-U-Flag" class="headerlink" title="Choose_U_Flag"></a>Choose_U_Flag</h2><p>给出两个代码，其中<code>task.py</code>如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> ast<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> signal<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> ZZ, Poly<br><span class="hljs-keyword">from</span> sympy.abc <span class="hljs-keyword">import</span> x<br><br><span class="hljs-keyword">from</span> ntru <span class="hljs-keyword">import</span> NTRUCipher<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exitHandler</span>(<span class="hljs-params">signum, frame</span>):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;timeout&quot;</span>)<br>    exit()<br><br><br>signal.signal(signal.SIGALRM, exitHandler)<br>signal.alarm(<span class="hljs-number">30</span>)<br><br>flag = os.environ.get(<span class="hljs-string">&quot;CTF_CHALLENGE_FLAG&quot;</span>)<br><br>N = <span class="hljs-number">107</span><br>p = <span class="hljs-number">3</span><br>q = <span class="hljs-number">64</span><br><br>cipher = NTRUCipher(N, p, q)<br>cipher.generate()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+]h_poly: <span class="hljs-subst">&#123;cipher.h_poly.all_coeffs()&#125;</span>&quot;</span>)<br><br>random_key = <span class="hljs-string">&#x27;&#x27;</span>.join(random.sample(string.printable, <span class="hljs-number">12</span>))<br>key_arr = np.unpackbits(np.frombuffer(random_key.encode(), dtype=np.uint8))<br>key_enc = cipher.encrypt(Poly(key_arr, x).set_domain(ZZ))<br>key_coeffs = key_enc.all_coeffs()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+]key coeffs: <span class="hljs-subst">&#123;key_coeffs&#125;</span>&quot;</span>)<br><br>dec_data = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;decrypt data &gt; &quot;</span>)<br>dec_arr = ast.literal_eval(dec_data)<br><span class="hljs-keyword">if</span> dec_arr == key_coeffs:<br>    exit(-<span class="hljs-number">1</span>)<br>dec = cipher.decrypt(Poly(dec_arr, x).set_domain(ZZ))<br>dec_coeffs = dec.all_coeffs()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;[+]decrypt coeffs: <span class="hljs-subst">&#123;dec_coeffs&#125;</span>&quot;</span>)<br><br><span class="hljs-keyword">while</span> N &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-keyword">try</span>:<br>        u_key = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;u key &gt; &quot;</span>)<br>        <span class="hljs-keyword">if</span> u_key == random_key:<br>            <span class="hljs-built_in">print</span>(flag)<br>            exit(-<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;key err&quot;</span>)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;input err&quot;</span>)<br>    N = N - <span class="hljs-number">1</span><br><br></code></pre></td></tr></table></figure><p>给出了$N,p,q,h,c$，允许我们提供$c’(!&#x3D;c)$，求出$key$。其实只要给$c$加个模数就能绕过这个限制条件，从而得到的解密内容即为$key$。</p><p>根据NTRU的解密过程，有<br>$$<br>a &#x3D; f*c\mod (q)<br>$$<br>因为模数是$q$，所以添加$q$仍然可以得到正确的$a$<br>$$<br>a &#x3D; f*(c+q)&#x3D;f*c\mod (q)<br>$$</p><p>不管NTRU是建立在多项式上还是整数上，其加解密原理是不变的。</p><p>代码如下（没环境了，只能贴一下别人的代码）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>CHALLENGE_ID = <span class="hljs-string">&#x27;bb3fcb3fc9708bfdcdf710895615ba6e&#x27;</span><br>sh = remote(CHALLENGE_ID + <span class="hljs-string">&#x27;.2022.capturetheflag.fun&#x27;</span>, <span class="hljs-number">1337</span>, ssl=<span class="hljs-literal">True</span>)<br><br>sh.recvuntil(<span class="hljs-string">&quot;[+]key coeffs: &quot;</span>)<br>cipher = <span class="hljs-built_in">eval</span>(sh.recvline(<span class="hljs-literal">False</span>))<br>cipher[-<span class="hljs-number">1</span>] += <span class="hljs-number">64</span><br><br>sh.recvuntil(<span class="hljs-string">&quot;&gt; &quot;</span>)<br>sh.sendline(<span class="hljs-built_in">str</span>(cipher).encode())<br><br>sh.recvuntil(<span class="hljs-string">&quot;coeffs: &quot;</span>)<br>key = <span class="hljs-built_in">eval</span>(sh.recvline(<span class="hljs-literal">False</span>))<br><br>tmp = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> key:<br>    tmp += <span class="hljs-built_in">str</span>(i)<br>res = long_to_bytes(<span class="hljs-built_in">int</span>(tmp, <span class="hljs-number">2</span>))<br>sh.recvuntil(<span class="hljs-string">&quot;&gt; &quot;</span>)<br>sh.sendline(res)<br>flag = sh.recvline(<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(flag)<br><br><span class="hljs-comment"># sh.interactive()</span><br>sh.close()<br></code></pre></td></tr></table></figure><hr><p>要是不知道这些函数的功能，就挨个试一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">random.sample(string.printable, <span class="hljs-number">12</span>)<span class="hljs-comment">#随机产生12个可打印字符</span><br>np.frombuffer(random_key.encode(), dtype=np.uint8)<span class="hljs-comment">#转成数组，数据好像是字符ord()</span><br>np.unpackbits()<span class="hljs-comment">#转成二进制数组，即数据二进制化</span><br>Poly(key_arr, x).set_domain(ZZ)<span class="hljs-comment">#以key_arr的数据为系数，x为变量，在整数域上的多项式</span><br>np.zeros(<span class="hljs-built_in">len</span>)<span class="hljs-comment">#全0数组,长度为len</span><br>np.ones(<span class="hljs-built_in">len</span>)<span class="hljs-comment">#全1数组</span><br>np.concatenate((x,y,z))<span class="hljs-comment">#连接x,y,z，组成一个数组</span><br>np.random.permutation()<span class="hljs-comment">#随机排列</span><br>(rand_poly * self.h_poly).trunc(self.q)<br>h_poly.all_coeffs()<span class="hljs-comment">#多项式转换成系数数组</span><br><br></code></pre></td></tr></table></figure><hr><p>参考：</p><p><a href="https://lazzzaro.github.io/2020/05/13/crypto-%E5%85%B6%E4%BB%96%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95/#Paillier%E5%90%8C%E6%80%81%E5%8A%A0%E5%AF%86">其他加密算法 | Lazzaro (lazzzaro.github.io)</a></p><p><a href="https://blog.wm-team.cn/index.php/archives/28/">ByteCTF 2022 By W&amp;M - W&amp;M Team (wm-team.cn)</a></p><p><a href="">ByteCTF WriteUp By Nu1L.pdf</a></p>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MT19937</tag>
      
      <tag>Paillier同态加密</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022 DASCTF X CBCTF九月赛</title>
    <link href="/2022/09/21/2022DASCTF%20X%20CBCTF%E4%B9%9D%E6%9C%88%E8%B5%9B/"/>
    <url>/2022/09/21/2022DASCTF%20X%20CBCTF%E4%B9%9D%E6%9C%88%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="DASCTF-X-CBCTF-2022九月挑战赛"><a href="#DASCTF-X-CBCTF-2022九月挑战赛" class="headerlink" title="DASCTF X CBCTF 2022九月挑战赛"></a>DASCTF X CBCTF 2022九月挑战赛</h1><h2 id="LittleRSA"><a href="#LittleRSA" class="headerlink" title="LittleRSA"></a>LittleRSA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> sympy<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>m = bytes_to_long(flag)<br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>e = <span class="hljs-number">65537</span><br>n = p * q<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br>s = getPrime(<span class="hljs-number">300</span>)<br>N = getPrime(<span class="hljs-number">2048</span>)<br>g = p * inverse(s,N)**<span class="hljs-number">2</span> % (N**<span class="hljs-number">2</span>)<br><span class="hljs-built_in">print</span>(N)<br><span class="hljs-built_in">print</span>(g)<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">N = 19351301035801508116955552063316327463227928638319284082504070745230119792307421099534903837766317639913937954784857576991401214861067471772614753337821871108189780331081099041824669243928056765115068764246765680962348646383991303828426125303844394268682191775232611288039200316595279055408827296256289143602827525373267536643865729646353071637054367702218515803980122435811129935450486950137279824491461041391572264371799797200331838690523349105589985032730668315787318829244743317257793753147209875458127340875400367081865762286565978620979196410411241442894450955280237513249393612603560410291825805553536595543937</span><br><span class="hljs-string">g = 101172011079013273946711882340439823149055809449035744718659818796135714101721641190114954130041477714466321498903210220694435354795744225843314447645623337668697058127975104586375292636080114347294697007231487782548846095107329445479367324424672776003899748234353857872627585595343736452088156885081907758727085723312506489549364721644636251780350312413098132506051531311685636921117457469745637347738336829350634994271419554741425590636953154753970902976959308323838617091060754826727417688836026597614894745348808019654100196615719730109909578899299246848916182034705259206906552769087038179288139086772719994577168184701096922291610523676039127012518100023765548552210944426749474888311751069936144583375194023227887848704267587915237057432609663328145608194550736074250822416779448467084842127165553649513397606464059847361880649213934069715996589751778384513724306521043255299443480482640183740131563318058454711913397533436985618182923646192481486120942073719321372236539019107909910597047133371708017755744495134116771999521953654596632221519266339372439452558083199640035069852530373510758859460350025736629801086757717838159774542506755335660607766677992105601518694405113552321342152041808586187181800679845672788746273313</span><br><span class="hljs-string">n = 90106928919727272173474070618911951313216606598108495724382284361415375454490594410306345748069424740100772955015304592942129026096113424198209327375124576666577469761124470792842854884924199449996929134613382626394351988541980388358156143332979538058465890179760337315789398915560641465656968797050755849799</span><br><span class="hljs-string">c = 51609249982849856103564442566936515708380814106997783395400669324617748952940831076546581735494963467680719842859574144530848473300102236821201997786375946601413660428461473204032985053128283751860315027843200214217715401391736262811016964783589439740884991543059175666298728428567481043422497862838127903980</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>有如下公式<br>$$<br>g &#x3D; p*s^{-2}\quad mod\ N^2\quad&#x3D;&#x3D;&gt;\quad g*s^2&#x3D;p\quad mod\ N \tag{1}<br>$$<br>所以构造格如下<br>$$<br>M&#x3D;\left[<br>\matrix{<br>  1&amp; g\\<br>  0 &amp; N<br>}<br>\right]<br>$$<br>稍微解释一下。根据公式(1)有<br>$$<br>g*s^2-k*N&#x3D;p<br>$$<br>那么<br>$$<br>\left[<br>\matrix{<br>  s^2&amp;-k<br>}<br>\right]<br>*<br>\left[<br>\matrix{<br>  1&amp; g\\<br>  0 &amp; N<br>}<br>\right]<br>&#x3D;<br>\left[<br>\matrix{<br>  s^2&amp;p<br>}<br>\right]<br>$$<br>也就是说可以通过对矩阵M进行格基规约得到含p的向量。</p><p>详细参考：<a href="https://xz.aliyun.com/t/7163">从一道CTF题初探NTRU格密码 - 先知社区 (aliyun.com)</a>（经典且详细，非常受用）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>N = <span class="hljs-number">19351301035801508116955552063316327463227928638319284082504070745230119792307421099534903837766317639913937954784857576991401214861067471772614753337821871108189780331081099041824669243928056765115068764246765680962348646383991303828426125303844394268682191775232611288039200316595279055408827296256289143602827525373267536643865729646353071637054367702218515803980122435811129935450486950137279824491461041391572264371799797200331838690523349105589985032730668315787318829244743317257793753147209875458127340875400367081865762286565978620979196410411241442894450955280237513249393612603560410291825805553536595543937</span><br>g = <span class="hljs-number">101172011079013273946711882340439823149055809449035744718659818796135714101721641190114954130041477714466321498903210220694435354795744225843314447645623337668697058127975104586375292636080114347294697007231487782548846095107329445479367324424672776003899748234353857872627585595343736452088156885081907758727085723312506489549364721644636251780350312413098132506051531311685636921117457469745637347738336829350634994271419554741425590636953154753970902976959308323838617091060754826727417688836026597614894745348808019654100196615719730109909578899299246848916182034705259206906552769087038179288139086772719994577168184701096922291610523676039127012518100023765548552210944426749474888311751069936144583375194023227887848704267587915237057432609663328145608194550736074250822416779448467084842127165553649513397606464059847361880649213934069715996589751778384513724306521043255299443480482640183740131563318058454711913397533436985618182923646192481486120942073719321372236539019107909910597047133371708017755744495134116771999521953654596632221519266339372439452558083199640035069852530373510758859460350025736629801086757717838159774542506755335660607766677992105601518694405113552321342152041808586187181800679845672788746273313</span><br>n = <span class="hljs-number">90106928919727272173474070618911951313216606598108495724382284361415375454490594410306345748069424740100772955015304592942129026096113424198209327375124576666577469761124470792842854884924199449996929134613382626394351988541980388358156143332979538058465890179760337315789398915560641465656968797050755849799</span><br>c = <span class="hljs-number">51609249982849856103564442566936515708380814106997783395400669324617748952940831076546581735494963467680719842859574144530848473300102236821201997786375946601413660428461473204032985053128283751860315027843200214217715401391736262811016964783589439740884991543059175666298728428567481043422497862838127903980</span><br><br><span class="hljs-string">&#x27;&#x27;&#x27;sage</span><br><span class="hljs-string">g = 101172011079013273946711882340439823149055809449035744718659818796135714101721641190114954130041477714466321498903210220694435354795744225843314447645623337668697058127975104586375292636080114347294697007231487782548846095107329445479367324424672776003899748234353857872627585595343736452088156885081907758727085723312506489549364721644636251780350312413098132506051531311685636921117457469745637347738336829350634994271419554741425590636953154753970902976959308323838617091060754826727417688836026597614894745348808019654100196615719730109909578899299246848916182034705259206906552769087038179288139086772719994577168184701096922291610523676039127012518100023765548552210944426749474888311751069936144583375194023227887848704267587915237057432609663328145608194550736074250822416779448467084842127165553649513397606464059847361880649213934069715996589751778384513724306521043255299443480482640183740131563318058454711913397533436985618182923646192481486120942073719321372236539019107909910597047133371708017755744495134116771999521953654596632221519266339372439452558083199640035069852530373510758859460350025736629801086757717838159774542506755335660607766677992105601518694405113552321342152041808586187181800679845672788746273313</span><br><span class="hljs-string">N = 19351301035801508116955552063316327463227928638319284082504070745230119792307421099534903837766317639913937954784857576991401214861067471772614753337821871108189780331081099041824669243928056765115068764246765680962348646383991303828426125303844394268682191775232611288039200316595279055408827296256289143602827525373267536643865729646353071637054367702218515803980122435811129935450486950137279824491461041391572264371799797200331838690523349105589985032730668315787318829244743317257793753147209875458127340875400367081865762286565978620979196410411241442894450955280237513249393612603560410291825805553536595543937</span><br><span class="hljs-string">v1 = vector(ZZ, [1, g])</span><br><span class="hljs-string">v2 = vector(ZZ, [0, N])</span><br><span class="hljs-string">m = matrix([v1,v2])</span><br><span class="hljs-string">shortest_vector = m.LLL()[0]</span><br><span class="hljs-string">print(shortest_vector)</span><br><span class="hljs-string">#(-1703096866219569817841710120722024801172129285713276062493657151527831376599274719653327578175460913670322546273486052217558990179451330534956630028900812517189053457400581665150009, -8640002811717397823892474058167788615113205903077061861590520377451867637348771860824972890020165996777729868251869232382053496274304375769436361474547973)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>p = <span class="hljs-number">8640002811717397823892474058167788615113205903077061861590520377451867637348771860824972890020165996777729868251869232382053496274304375769436361474547973</span><br><span class="hljs-keyword">assert</span> n%p == <span class="hljs-number">0</span><br>q = n//p<br>e = <span class="hljs-number">65537</span><br>d = gmpy2.invert(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>m = <span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h2 id="easySignIn"><a href="#easySignIn" class="headerlink" title="easySignIn"></a>easySignIn</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>p = getPrime(<span class="hljs-number">512</span>)<br>d = getPrime(<span class="hljs-number">40</span>)<br>m = libnum.s2n(flag)<br>a = randint(<span class="hljs-number">2</span>,p)<br>b = randint(<span class="hljs-number">2</span>,p)<br>c = randint(<span class="hljs-number">2</span>,p)<br>g = d<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    g = (c*d^<span class="hljs-number">2</span> + b*g + a)%p<br>    a = (a*b - c) % p<br>    b = (b*c - a) % p <br>    c = (c*a - b) % p <br><br>t = (m+d)^<span class="hljs-number">2</span> %p<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;p=&#x27;</span>,p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;a=&#x27;</span>,a)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b=&#x27;</span>,b)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c=&#x27;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;g=&#x27;</span>,g)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;t=&#x27;</span>,t)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">p= 7591656713055743077369340861541583433090841738590989539280316533530045331013958613146671718809022799047779468311222607020894006899032327866283558110087799</span><br><span class="hljs-string">a= 4392865163304254999527172406061971162689920565151840813033448791785156740502864894051809689255751412382468345217962713758808061870635744521996229554057672</span><br><span class="hljs-string">b= 2119856022628544669301306700581535843188073099896481101405665476192582614655960576092254118367775147735092457551317887281026710342124525625026559538165667</span><br><span class="hljs-string">c= 3370586754351688470908526079815435343732016329743637661764947106415792049906966624513736208696137655804912688128186282852926377345819134856707156640355705</span><br><span class="hljs-string">g= 2221154642536617375933147254663757148609834736621720750750043572054496685087600339999953459509198087870095805651320901316659013390557077204194753685935362</span><br><span class="hljs-string">t= 6426975621182152052236088849377616252912408340750729257254509090637526282051064469268808395760737262115678691330037039061905028548054911000486882481093832</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>根据<br>$$<br>t &#x3D; (m+d)^2\quad mod\ p<br>$$<br>通过平方剩余可以求出<code>m+d</code>。然后是求<code>d</code>。</p><p>观察循环中的代码，很明显可以通过给出的<code>a,b,c</code>推出<code>i=8</code>这一轮的<code>a,b,c</code>，但并不能解出d，因为<code>i=8</code>这一轮的<code>g</code>未知，也就是说有两个未知数。因此我们需要消除掉一个未知数，根据最初的<code>g=d</code>可知，如果我们从最初开始推<code>g</code>的生成式，那么最终就只有未知数<code>d</code>，通过sage解这个方程就可以得到<code>d</code>。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes,inverse<br><br>p= <span class="hljs-number">7591656713055743077369340861541583433090841738590989539280316533530045331013958613146671718809022799047779468311222607020894006899032327866283558110087799</span><br>a= <span class="hljs-number">4392865163304254999527172406061971162689920565151840813033448791785156740502864894051809689255751412382468345217962713758808061870635744521996229554057672</span><br>b= <span class="hljs-number">2119856022628544669301306700581535843188073099896481101405665476192582614655960576092254118367775147735092457551317887281026710342124525625026559538165667</span><br>c= <span class="hljs-number">3370586754351688470908526079815435343732016329743637661764947106415792049906966624513736208696137655804912688128186282852926377345819134856707156640355705</span><br>g= <span class="hljs-number">2221154642536617375933147254663757148609834736621720750750043572054496685087600339999953459509198087870095805651320901316659013390557077204194753685935362</span><br>t= <span class="hljs-number">6426975621182152052236088849377616252912408340750729257254509090637526282051064469268808395760737262115678691330037039061905028548054911000486882481093832</span><br><br>R.&lt;x&gt; = PolynomialRing(Zmod(p))<br>f = x^<span class="hljs-number">2</span> - t<br>result = f.roots()<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#[(7591656713055743077369340861541583433090841738590989539280316533529914669358031382351028958377643759269145794938649787861165963022699333466670422633862441, 1), (130661655927230795642760431379039778633673372572819159728043876332994399613135476225358, 1)]</span><br><br>m = <span class="hljs-number">130661655927230795642760431379039778633673372572819159728043876332994399613135476225358</span><br><br>_a = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br>_b = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br>_c = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>)]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    c = (c+b)*inverse(a,p) % p<br>    b = (b+a)*inverse(c,p) % p<br>    a = (a+c)*inverse(b,p) % p<br>    _a[i] = a<br>    _b[i] = b<br>    _c[i] = c<br><br>_a = _a[::-<span class="hljs-number">1</span>]<br>_b = _b[::-<span class="hljs-number">1</span>]<br>_c = _c[::-<span class="hljs-number">1</span>]<br><br>R.&lt;x&gt; = PolynomialRing(Zmod(p))<br>y = x<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    y = _c[i]*x^<span class="hljs-number">2</span> + _b[i]*y + _a[i]<br><br>y = y - g<br>result = y.roots()<br><span class="hljs-built_in">print</span>(result)<br><span class="hljs-keyword">for</span> ans <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-keyword">if</span> ans[<span class="hljs-number">0</span>] &lt; <span class="hljs-number">2</span>**<span class="hljs-number">40</span>:<br>        flag = long_to_bytes(m-<span class="hljs-built_in">int</span>(ans[<span class="hljs-number">0</span>]))<br>        <span class="hljs-built_in">print</span>(flag)<br><br></code></pre></td></tr></table></figure><h2 id="easyRSA"><a href="#easyRSA" class="headerlink" title="easyRSA"></a>easyRSA</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>bitlen = <span class="hljs-number">512</span><br>p = getPrime(bitlen)<br>q = getPrime(bitlen)<br>r = getPrime(bitlen)<br><br><span class="hljs-keyword">assert</span> p != q <span class="hljs-keyword">and</span> q != r <span class="hljs-keyword">and</span> p != r<br><br>n = p*q*r<br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)*(r-<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    d = getPrime(<span class="hljs-number">256</span>)<br>    <span class="hljs-keyword">try</span>:<br>        e = <span class="hljs-built_in">int</span>(gmpy2.invert(d,phi))<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> gmpy2.gcd(e,phi) == <span class="hljs-number">1</span> :<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-keyword">assert</span> flag.startswith(<span class="hljs-string">b&#x27;CBCTF&#123;&#x27;</span>)<br>m = bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;c =&#x27;</span>,c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;e =&#x27;</span>,e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;n =&#x27;</span>,n)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">c = 262857004135341325365954795119195630698138090729973647118817900621693212191529885499646534515610526918027363734446577563494752228693708806585707918542489830672358210151020370518277425565514835701391091303404848540885538503732425887366285924392127448359616405690101810030200914619945580943356783421516140571033192987307744023953015589089516394737132984255621681367783910322351237287242642322145388520883300325056201966188529192590458358240120864932085960411656176</span><br><span class="hljs-string">e = 543692319895782434793586873362429927694979810701836714789970907812484502410531778466160541800747280593649956771388714635910591027174563094783670038038010184716677689452322851994224499684261265932205144517234930255520680863639225944193081925826378155392210125821339725503707170148367775432197885080200905199759978521133059068268880934032358791127722994561887633750878103807550657534488433148655178897962564751738161286704558463757099712005140968975623690058829135</span><br><span class="hljs-string">n = 836627566032090527121140632018409744681773229395209292887236112065366141357802504651617810307617423900626216577416313395633967979093729729146808472187283672097414226162248255028374822667730942095319401316780150886857701380015637144123656111055773881542557503200322153966380830297951374202391216434278247679934469711771381749572937777892991364186158273504206025260342916835148914378411684678800808038832601224951586507845486535271925600310647409016210737881912119</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p> $e$比$n$还大？可能是<code>Wiener&#39;s Attack</code>，不过三个素数的$n$用<code>Wiener&#39;s Attack</code>我还没见到过。</p><p>根据<code>Wiener&#39;s Attack</code>，对$\dfrac{e}{N}$进行连分数展开，可以近似得到$k，d*g$。</p><p>如果可以得到多个$d*g$，那么可以通过贝祖等式求出公约数$d$。因为是连分数的性质，所以如果存在多个$d*g$，那么这些是连续存在的。</p><p>（代码搬过来了）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">plus</span>(<span class="hljs-params">e, n</span>):<br>    m = <span class="hljs-number">2</span><br>    c = <span class="hljs-built_in">pow</span>(m, e, n)<br>    q0 = <span class="hljs-number">1</span><br><br>    list1 = continued_fraction(Integer(e)/Integer(n))<br>    conv = list1.convergents()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> conv:<br>        k = i.numerator()<br>        <span class="hljs-comment">#print(k)</span><br>        q1 = i.denominator()<br>        <span class="hljs-comment">#print(q1)</span><br><br>        <span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>            <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">20</span>):<br>                d = r*q1 + s*q0<br>                m1 = <span class="hljs-built_in">pow</span>(c, d, n)<br>                <span class="hljs-keyword">if</span> m1 == m:<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;q1=<span class="hljs-subst">&#123;q1&#125;</span>,q0=<span class="hljs-subst">&#123;q0&#125;</span>&quot;</span>)<br>                    <span class="hljs-built_in">print</span>(r,s)<br>                    <span class="hljs-keyword">return</span> d<br>     <br>        q0 = q1<br>        <br>c = <span class="hljs-number">262857004135341325365954795119195630698138090729973647118817900621693212191529885499646534515610526918027363734446577563494752228693708806585707918542489830672358210151020370518277425565514835701391091303404848540885538503732425887366285924392127448359616405690101810030200914619945580943356783421516140571033192987307744023953015589089516394737132984255621681367783910322351237287242642322145388520883300325056201966188529192590458358240120864932085960411656176</span><br>e = <span class="hljs-number">543692319895782434793586873362429927694979810701836714789970907812484502410531778466160541800747280593649956771388714635910591027174563094783670038038010184716677689452322851994224499684261265932205144517234930255520680863639225944193081925826378155392210125821339725503707170148367775432197885080200905199759978521133059068268880934032358791127722994561887633750878103807550657534488433148655178897962564751738161286704558463757099712005140968975623690058829135</span><br>n = <span class="hljs-number">836627566032090527121140632018409744681773229395209292887236112065366141357802504651617810307617423900626216577416313395633967979093729729146808472187283672097414226162248255028374822667730942095319401316780150886857701380015637144123656111055773881542557503200322153966380830297951374202391216434278247679934469711771381749572937777892991364186158273504206025260342916835148914378411684678800808038832601224951586507845486535271925600310647409016210737881912119</span><br><br>d = plus(e, n)<br><span class="hljs-built_in">print</span>(d)<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(c,d,n))))<br></code></pre></td></tr></table></figure><hr><p>参考：</p><p><a href="http://www.ctfiot.com/57949.html">DASCTF X CBCTF 2022｜ 九月挑战赛官方Write Up | CTF导航 (ctfiot.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RSA</tag>
      
      <tag>Wiener&#39;s Attack</tag>
      
      <tag>Lattice</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第二届长城杯</title>
    <link href="/2022/09/12/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AF/"/>
    <url>/2022/09/12/%E7%AC%AC%E4%BA%8C%E5%B1%8A%E9%95%BF%E5%9F%8E%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="known-phi"><a href="#known-phi" class="headerlink" title="known_phi"></a>known_phi</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime, bytes_to_long, inverse, long_to_bytes<br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> DSA<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>(<span class="hljs-params">a</span>):<br>    p = getPrime(a) <br>    q = getPrime(a)<br>    r = getPrime(a)<br>    x = getPrime(a)<br>    n = p*q*r*x<br>    phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)*(r-<span class="hljs-number">1</span>)*(x-<span class="hljs-number">1</span>)<br><br>    <span class="hljs-keyword">return</span> n, phi, [p, q, r, x]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sign</span>(<span class="hljs-params">m, k, x, p, q, g</span>):<br>    hm = bytes_to_long(sha256(m).digest())<br>    r = <span class="hljs-built_in">pow</span>(g, k, p) % q<br>    s = (hm + x*r) * inverse(k, q) % q<br><br>    <span class="hljs-keyword">return</span> r,s<br><br>e = <span class="hljs-number">65537</span><br>a = <span class="hljs-number">256</span><br>x = bytes_to_long(flag)<br><span class="hljs-comment"># print(x)</span><br><br>n, phi, n_factors = gen(a)<br>n_factors = <span class="hljs-built_in">sorted</span>(n_factors)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;phi = <span class="hljs-subst">&#123;phi&#125;</span>&#x27;</span>)<br>m1 = long_to_bytes(n_factors[<span class="hljs-number">0</span>] + n_factors[<span class="hljs-number">3</span>])<br>m2 = long_to_bytes(n_factors[<span class="hljs-number">1</span>] + n_factors[<span class="hljs-number">2</span>])<br><span class="hljs-comment"># print(f&#x27;m1 = &#123;m1&#125;&#x27;)</span><br><span class="hljs-comment"># print(f&#x27;m2 = &#123;m2&#125;&#x27;)</span><br><br>key = DSA.generate(<span class="hljs-built_in">int</span>(<span class="hljs-number">2048</span>))<br>q = key.q<br>p = key.p<br>g = key.g<br><span class="hljs-keyword">assert</span> q &gt; x<br>k = random.randint(<span class="hljs-number">1</span>, q-<span class="hljs-number">1</span>)<br>r1, s1 = sign(m1, k, x, p, q, g)<br>r2, s2 = sign(m2, k, x, p, q, g)<br><span class="hljs-comment"># print(f&#x27;k = &#123;k&#125;&#x27;)</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;q = <span class="hljs-subst">&#123;q&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;s1 = <span class="hljs-subst">&#123;s1&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;r1 = <span class="hljs-subst">&#123;r1&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;s1 = <span class="hljs-subst">&#123;s1&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;r2 = <span class="hljs-subst">&#123;r2&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;s2 = <span class="hljs-subst">&#123;s2&#125;</span>&#x27;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 104228256293611313959676852310116852553951496121352860038971098657350022997841589403091722735802150153734050783858816709247647536393314564077002364012463220999962114186339228164032217361145009468516448617173972835797623658266515762201804936729547278758839604969469770650218191574897316410254695420895895051693</span><br><span class="hljs-string">phi = 104228256293611313959676852310116852553951496121352860038971098657350022997837434645707418205268240995284026522165519145773852565112344453740579163420312890001524537570675468046604347184376661743552799809753709321949095844960227307733389258381950812717245522599433727311919405966404418872873961877021696812800</span><br><span class="hljs-string">q = 24513014442114004234202354110477737650785387286781126308169912007819</span><br><span class="hljs-string">s1 = 764450933738974696530033347966845551587903750431946039815672438603</span><br><span class="hljs-string">r1 = 8881880595434882344509893789458546908449907797285477983407324325035</span><br><span class="hljs-string">s1 = 764450933738974696530033347966845551587903750431946039815672438603</span><br><span class="hljs-string">r2 = 8881880595434882344509893789458546908449907797285477983407324325035#r1==r2</span><br><span class="hljs-string">s2 = 22099482232399385060035569388467035727015978742301259782677969649659</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>个人认为题目分为两部分，第一部分通过n和phi分解n，第二部分则是DSA。</p><p>分解n找到了相应的论文和代码（<a href="https://link.springer.com/content/pdf/10.1007/3-540-36492-7_25.pdf">3-540-36492-7_25.pdf (springer.com)</a>）</p><p>DSA部分比较简单，是私钥k复用问题，有如下式子<br>$$<br>\begin{cases}<br>s_1&#x3D;(hm_1+x*r_1)k^{-1}\quad mod\ q\\<br>s_2&#x3D;(hm_2+x*r_2)k^{-1}\quad mod\ q<br>\end{cases}<br>$$<br>两式相乘有<br>$$<br>s_1*(hm_2+x*r_2)k^{-1}≡s_2*(hm_1+x*r_1)k^{-1}\quad mod\ q<br>$$<br>化简<br>$$<br>x≡(hm_1*s_2-hm_2*s_1)*(r_2*s_1-r_1*s_2)^{-1}\quad mod\ q<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long, long_to_bytes<br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> DSA<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> is_prime, invert<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> gcd<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randrange<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">factorize_multi_prime</span>(<span class="hljs-params">N, phi</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    Recovers the prime factors from a modulus if Euler&#x27;s totient is known.</span><br><span class="hljs-string">    This method works for a modulus consisting of any number of primes, but is considerably be slower than factorize.</span><br><span class="hljs-string">    More information: Hinek M. J., Low M. K., Teske E., &quot;On Some Attacks on Multi-prime RSA&quot; (Section 3)</span><br><span class="hljs-string">    :param N: the modulus</span><br><span class="hljs-string">    :param phi: Euler&#x27;s totient, the order of the multiplicative group modulo N</span><br><span class="hljs-string">    :return: a tuple containing the prime factors</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    prime_factors = <span class="hljs-built_in">set</span>()<br>    factors = [N]<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(factors) &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-comment"># Element to factorize.</span><br>        N = factors[<span class="hljs-number">0</span>]<br><br>        w = randrange(<span class="hljs-number">2</span>, N - <span class="hljs-number">1</span>)<br>        i = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> phi % (<span class="hljs-number">2</span> ** i) == <span class="hljs-number">0</span>:<br>            sqrt_1 = <span class="hljs-built_in">pow</span>(w, phi // (<span class="hljs-number">2</span> ** i), N)<br>            <span class="hljs-keyword">if</span> sqrt_1 &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> sqrt_1 != N - <span class="hljs-number">1</span>:<br>                <span class="hljs-comment"># We can remove the element to factorize now, because we have a factorization.</span><br>                factors = factors[<span class="hljs-number">1</span>:]<br><br>                p = gcd(N, sqrt_1 + <span class="hljs-number">1</span>)<br>                q = N // p<br><br>                <span class="hljs-keyword">if</span> is_prime(p):<br>                    prime_factors.add(p)<br>                <span class="hljs-keyword">elif</span> p &gt; <span class="hljs-number">1</span>:<br>                    factors.append(p)<br><br>                <span class="hljs-keyword">if</span> is_prime(q):<br>                    prime_factors.add(q)<br>                <span class="hljs-keyword">elif</span> q &gt; <span class="hljs-number">1</span>:<br>                    factors.append(q)<br><br>                <span class="hljs-comment"># Continue in the outer loop</span><br>                <span class="hljs-keyword">break</span><br><br>            i += <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">list</span>(prime_factors)<br><br>n = <span class="hljs-number">104228256293611313959676852310116852553951496121352860038971098657350022997841589403091722735802150153734050783858816709247647536393314564077002364012463220999962114186339228164032217361145009468516448617173972835797623658266515762201804936729547278758839604969469770650218191574897316410254695420895895051693</span><br>phi = <span class="hljs-number">104228256293611313959676852310116852553951496121352860038971098657350022997837434645707418205268240995284026522165519145773852565112344453740579163420312890001524537570675468046604347184376661743552799809753709321949095844960227307733389258381950812717245522599433727311919405966404418872873961877021696812800</span><br>q = <span class="hljs-number">24513014442114004234202354110477737650785387286781126308169912007819</span><br>s1 = <span class="hljs-number">764450933738974696530033347966845551587903750431946039815672438603</span><br>r1 = <span class="hljs-number">8881880595434882344509893789458546908449907797285477983407324325035</span><br>r2 = <span class="hljs-number">8881880595434882344509893789458546908449907797285477983407324325035</span> <span class="hljs-comment">#r1==r2</span><br>s2 = <span class="hljs-number">22099482232399385060035569388467035727015978742301259782677969649659</span><br><br>n_factors = factorize_multi_prime(n,phi)<br>n_factors = <span class="hljs-built_in">sorted</span>(n_factors)<br>m1 = long_to_bytes(n_factors[<span class="hljs-number">0</span>] + n_factors[<span class="hljs-number">3</span>])<br>m2 = long_to_bytes(n_factors[<span class="hljs-number">1</span>] + n_factors[<span class="hljs-number">2</span>])<br>hm1 = bytes_to_long(sha256(m1).digest())<br>hm2 = bytes_to_long(sha256(m2).digest())<br><br>tmp = (hm1*s2 - hm2*s1)<br>inv = invert(r2*s1-r1*s2, q)<br>x = inv*tmp%q<br><span class="hljs-built_in">print</span>(long_to_bytes(x))<br></code></pre></td></tr></table></figure><h1 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long, getPrime, isPrime<br><span class="hljs-keyword">import</span> win32gui,PIL,numpy,operator,pymouse<br><span class="hljs-keyword">from</span> Crypto.Random <span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> getrandbits<br><span class="hljs-keyword">from</span> sympy.ntheory.residue_ntheory <span class="hljs-keyword">import</span> nthroot_mod<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> nextprime<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_primes</span>(<span class="hljs-params">m</span>):<br>    p = getPrime(Bits)<br>    pl = p &amp; <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;f&#x27;</span>*(m//<span class="hljs-number">4</span>), <span class="hljs-number">16</span>)<span class="hljs-comment">#p&amp;(2**(200)-1)</span><br>    q = (getrandbits(Bits - m) &lt;&lt; m)^^pl<span class="hljs-comment">#rand+p的低200bit</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> isPrime(q):<br>        q = (getrandbits(Bits - m) &lt;&lt; m)^^pl<br>    <span class="hljs-keyword">return</span> (p, q)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_key</span>(<span class="hljs-params">p, q, delta, beta, Bits</span>):<br>    phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>    d1 = getPrime(floor(<span class="hljs-number">2</span> * Bits * delta))<br>    e1 = inverse_mod(d1, phi)<br>    d2 = nextprime(d1 ^^ getrandbits(floor(<span class="hljs-number">2</span> * Bits * beta)))<br>    e2 = inverse_mod(d2, phi)<br>    d3 = getPrime(floor(<span class="hljs-number">2</span> * Bits * delta))<br>    e3 = inverse_mod(d3, phi)<br>    <span class="hljs-keyword">return</span> (e1, e2, e3, d1, d2, d3)<br><br>    <br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    Bits = <span class="hljs-number">1024</span> <br>    alpha = <span class="hljs-number">0.098</span><br>    delta = <span class="hljs-number">0.536</span><br>    beta = delta<br>    gamma = <span class="hljs-number">1</span><br>    m = floor(<span class="hljs-number">2</span> * alpha * Bits)<span class="hljs-comment">#200bit&lt;n^(1/4)</span><br><br>    p, q = get_primes(m)<br>    n = p * q<br>    <span class="hljs-keyword">assert</span> n % <span class="hljs-number">2</span>^<span class="hljs-number">3</span> == <span class="hljs-number">1</span><br>    u0 = nthroot_mod(n, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>^m, all_roots=<span class="hljs-literal">False</span>)<br>    v0 = (<span class="hljs-number">2</span>*u0 + ((n - u0^<span class="hljs-number">2</span>) * inverse_mod(u0, <span class="hljs-number">2</span>^(<span class="hljs-number">2</span>*m)) % <span class="hljs-number">2</span>^(<span class="hljs-number">2</span>*m)))<br>    e1, e2, e3, d1, d2, d3 = get_key(p, q, delta, beta, Bits)<br><br>    flag = bytes_to_long(flag)<br>    c = <span class="hljs-built_in">pow</span>(flag, e3, n)<br>    l0 = d1 - d2<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;N = <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(n)&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e1 = <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(e1)&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e2 = <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(e2)&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e3 = <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(e3)&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(c)&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;v0 = <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(v0)&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;l0 = <span class="hljs-subst">&#123;<span class="hljs-built_in">hex</span>(l0)&#125;</span>&#x27;</span>)<br><br><span class="hljs-comment"># N = 0x62c048bc886075bffb9ad01255786dd8ef2480ba510f13689c1e84ffaaf21dfb5695a4d83f4ba22093bdd75bfc8f5979185d29724ecccf045e1857b1b2a4757dd82dc44318c054c9fce9bc451e6beecb97bbda6562420fc8c295521c5455443413f90403cf1af6271fb6d2d54378b86ced18ae6844a877890ea853a215880a09c68c517a75c1183c067b706ce630f3f0913591f7354cfa60c8f6b7ab2f15e466a1ea6e8034417a5fc3c11b8ba746596c22c734b09257e9a6fb18358738d416eda0ba0e7b028dd2d550b1e018b180916ac25f47910657a5db2410946c0593b7e23ed1659a811083f363ad4eb65642091a040befbd643089bbee376634d2394d11</span><br><span class="hljs-comment"># e1 = 0x124241a12ea2be53f9b9b1fd92e10d089cfa32aa07e6c2cace848aaa6c73ff06d4c6c92b7d1f29160b2eef95a5f580915d3f15c0ea23975cbadfe8347a10daab2bd0827d7e909b329ec53c5eb306f0a5125b3817e7ea0c15b2317a46c36c4f34fc626dadc6c769bcc7be18ddf7954fae8dde3fd4ce3c5146c019bdb0d9552af1dc9ef7186e06b1d59e763fb05c7cd21fbb3f509fee52d4e24921ebfa76bb8302ea6760e92606e440907cc1c110946af53900904e84dbc309fcef15ea060c667070e5e0310891606df151609ff609bcc6125c6043c35119b25df78b4d5ca61ab6492753cc5e5b32e044fce0aeb0442464f36298add254e9fb6505fa4cddae1cf7</span><br><span class="hljs-comment"># e2 = 0x17b3937cec3ca5fdddad8db29c6dc4efae1408bf5b4aa2ff602112c50f302e9698c79c7ab79fef0210c621dcc218d91d358b7f93a978c4e3f2b982794697c4797cef89189d1464ed1c767bf72433092922352885f8e355952c558ad2c9ade58a19375ddc5dcf3f9fa28c68a5cff158734d94224b85f77bd939133f39ab7884ece61d9fb3496373008827c2ae694dfe7da08eee348ef99c3a6737a4b088b62978cf209ef3d1140a30d42872615b94378108266e3d344caf51b497a585a4b5ef8619cc46959bad9b89f59f36175fbf9b64363443f3f7743896c72a198decedf89c518fa07b1d401d0359578a4926b7d67de86232ee24751f17dafbc749c0783b33</span><br><span class="hljs-comment"># e3 = 0x5647c4490bda9e7e497651551600572c5ef4e2d889b9b1ba0e9a493660497e10877e975c01da9aebae5e3ba9aad976a1a783b39191e8fd799689dfa26b069264d60543602d514ac412ac75d827d67c78ad544bda633f0fa69fb5bbc37e0f6b95714576ff53bae3f7f991d143a4b1e841730d5d580d4effeb8fb02e8b3c3c9a1f1899d2eb411ce37f16d30cfa1f7af7322be4f42f5d012f484a1181fa4aa0b5f420a472030a5c08c80bff76ab82ef5768bfd495abcdc5f22aae1891561322dfb28ff63c4e467411c8b73c11d64b05f411e2a1de0c7754c6a62d1f72cded9e2592ccc21be3fce4ea6f083a617a246fd3fe464ef2487adbfabfb628c882ea991675</span><br><span class="hljs-comment"># c = 0x45f2ee650d622d1e0f0e2e2e861001e9866c541f9f1dd2ec1dec18194f8b7224914916ecd68bbc74b28a000d2664e671586aed63b54c0928a939caf28d39eeba03c0ce3afcf2cdc5805e8e2792d76e88545aa4dee11078ba1e2e5b56ee23d58e443d7aff180d4e7463ae66ea8e96e0c8d4e1443e7664b99599af14e591e28cf2f833bd30b44b89c396b5fc1ee81ea3f7bc08dab426b1871eb66829c81d57e2ebf5c7a3e9c593ce496f0b0c4237906b019ae75ca551d6b0b1adfe64958c2ead6c39e517eb75eaf4b4d72402bea40f043cf0a80317aa2f1a996c727e195e15f903c0cac618f668af1015ee479d1c7b1c1b370fd4a5a76f5bf295e6bd7d0f4ae56f</span><br><span class="hljs-comment"># v0 = 0x2c77a013f2595a90c4e10a53a0f863d02b361c7407dad7d59db7c98df427da00c8d8627dbaef9557279ca31227cdb402d2d2</span><br><span class="hljs-comment"># l0 = 0x3dbabf6ea5b801221c283bd234f04264d292c8f3048c8b59c21e003cda983a3a41e4392c6ea77a706631de60d261f2b367027e037d37fda5a13a8e01b2c6c0f48a3112315cffe7420a50a3ebada09aba61f8e6da793654a467b9f780c20c5085012e064ab9205c076073b4fb4895e01d0d568fd5c30159879180093855d39d5548a1389a94f57c680c</span><br></code></pre></td></tr></table></figure><p>有等式如下<br>$$<br>\begin{cases}<br>e_1*d_1 ≡ 1\quad mod\ phi\\<br>e_2*d_2 ≡ 1\quad mod\ phi\\<br>d_1-d_2&#x3D;l_0<br>\end{cases}<br>$$<br>化简有<br>$$<br>e_1*e_2*l_0 ≡ (e_2-e_1)\quad mod\ phi\quad &#x3D;&#x3D;&gt;\quad k*phi&#x3D;e_1*e_2*l_0 - (e_2 - e_1)<br>$$<br>在模为<code>k*phi</code>的域上，有<br>$$<br>e_3*d_3’≡1\quad mod\ (k*phi)\<br>$$<br>根据RSA的加解密公式推导有<br>$$<br>\begin{align}<br>c &amp;≡ m^{e_3} \\<br>&#x3D;&#x3D;&gt;c^{d_3’} &amp;≡ m^{e_3*d_3’}\\<br>&amp;≡ m^{1+k_1*k*phi}\\<br>&amp;≡ m^{1+K*phi}\\<br>&amp;&#x3D; m \quad mod\ (N)<br>\end{align}<br>$$</p><p>代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes, inverse<br><br>N = <span class="hljs-number">0x62c048bc886075bffb9ad01255786dd8ef2480ba510f13689c1e84ffaaf21dfb5695a4d83f4ba22093bdd75bfc8f5979185d29724ecccf045e1857b1b2a4757dd82dc44318c054c9fce9bc451e6beecb97bbda6562420fc8c295521c5455443413f90403cf1af6271fb6d2d54378b86ced18ae6844a877890ea853a215880a09c68c517a75c1183c067b706ce630f3f0913591f7354cfa60c8f6b7ab2f15e466a1ea6e8034417a5fc3c11b8ba746596c22c734b09257e9a6fb18358738d416eda0ba0e7b028dd2d550b1e018b180916ac25f47910657a5db2410946c0593b7e23ed1659a811083f363ad4eb65642091a040befbd643089bbee376634d2394d11</span><br>e1 = <span class="hljs-number">0x124241a12ea2be53f9b9b1fd92e10d089cfa32aa07e6c2cace848aaa6c73ff06d4c6c92b7d1f29160b2eef95a5f580915d3f15c0ea23975cbadfe8347a10daab2bd0827d7e909b329ec53c5eb306f0a5125b3817e7ea0c15b2317a46c36c4f34fc626dadc6c769bcc7be18ddf7954fae8dde3fd4ce3c5146c019bdb0d9552af1dc9ef7186e06b1d59e763fb05c7cd21fbb3f509fee52d4e24921ebfa76bb8302ea6760e92606e440907cc1c110946af53900904e84dbc309fcef15ea060c667070e5e0310891606df151609ff609bcc6125c6043c35119b25df78b4d5ca61ab6492753cc5e5b32e044fce0aeb0442464f36298add254e9fb6505fa4cddae1cf7</span><br>e2 = <span class="hljs-number">0x17b3937cec3ca5fdddad8db29c6dc4efae1408bf5b4aa2ff602112c50f302e9698c79c7ab79fef0210c621dcc218d91d358b7f93a978c4e3f2b982794697c4797cef89189d1464ed1c767bf72433092922352885f8e355952c558ad2c9ade58a19375ddc5dcf3f9fa28c68a5cff158734d94224b85f77bd939133f39ab7884ece61d9fb3496373008827c2ae694dfe7da08eee348ef99c3a6737a4b088b62978cf209ef3d1140a30d42872615b94378108266e3d344caf51b497a585a4b5ef8619cc46959bad9b89f59f36175fbf9b64363443f3f7743896c72a198decedf89c518fa07b1d401d0359578a4926b7d67de86232ee24751f17dafbc749c0783b33</span><br>e3 = <span class="hljs-number">0x5647c4490bda9e7e497651551600572c5ef4e2d889b9b1ba0e9a493660497e10877e975c01da9aebae5e3ba9aad976a1a783b39191e8fd799689dfa26b069264d60543602d514ac412ac75d827d67c78ad544bda633f0fa69fb5bbc37e0f6b95714576ff53bae3f7f991d143a4b1e841730d5d580d4effeb8fb02e8b3c3c9a1f1899d2eb411ce37f16d30cfa1f7af7322be4f42f5d012f484a1181fa4aa0b5f420a472030a5c08c80bff76ab82ef5768bfd495abcdc5f22aae1891561322dfb28ff63c4e467411c8b73c11d64b05f411e2a1de0c7754c6a62d1f72cded9e2592ccc21be3fce4ea6f083a617a246fd3fe464ef2487adbfabfb628c882ea991675</span><br>c = <span class="hljs-number">0x45f2ee650d622d1e0f0e2e2e861001e9866c541f9f1dd2ec1dec18194f8b7224914916ecd68bbc74b28a000d2664e671586aed63b54c0928a939caf28d39eeba03c0ce3afcf2cdc5805e8e2792d76e88545aa4dee11078ba1e2e5b56ee23d58e443d7aff180d4e7463ae66ea8e96e0c8d4e1443e7664b99599af14e591e28cf2f833bd30b44b89c396b5fc1ee81ea3f7bc08dab426b1871eb66829c81d57e2ebf5c7a3e9c593ce496f0b0c4237906b019ae75ca551d6b0b1adfe64958c2ead6c39e517eb75eaf4b4d72402bea40f043cf0a80317aa2f1a996c727e195e15f903c0cac618f668af1015ee479d1c7b1c1b370fd4a5a76f5bf295e6bd7d0f4ae56f</span><br>v0 = <span class="hljs-number">0x2c77a013f2595a90c4e10a53a0f863d02b361c7407dad7d59db7c98df427da00c8d8627dbaef9557279ca31227cdb402d2d2</span><br>l0 = <span class="hljs-number">0x3dbabf6ea5b801221c283bd234f04264d292c8f3048c8b59c21e003cda983a3a41e4392c6ea77a706631de60d261f2b367027e037d37fda5a13a8e01b2c6c0f48a3112315cffe7420a50a3ebada09aba61f8e6da793654a467b9f780c20c5085012e064ab9205c076073b4fb4895e01d0d568fd5c30159879180093855d39d5548a1389a94f57c680c</span><br><br>kphi = e1*e2*l0 - (e2 - e1)<br>d3 = inverse(e3, kphi)<br>m = <span class="hljs-built_in">pow</span>(c, d3, N)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RSA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022第三届网鼎杯青龙组</title>
    <link href="/2022/08/26/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84/"/>
    <url>/2022/08/26/2022%E7%AC%AC%E4%B8%89%E5%B1%8A%E7%BD%91%E9%BC%8E%E6%9D%AF%E9%9D%92%E9%BE%99%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="crypto405"><a href="#crypto405" class="headerlink" title="crypto405"></a>crypto405</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randrange<br><br><span class="hljs-keyword">from</span> grassfield <span class="hljs-keyword">import</span> flag<br><br>p = getPrime(<span class="hljs-number">16</span>)<br><br>k = [randrange(<span class="hljs-number">1</span>,p) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>)]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>    grasshopper = flag[i]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>        k[j] = grasshopper = grasshopper * k[j] % p<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Grasshopper#&#x27;</span>+<span class="hljs-built_in">str</span>(i).zfill(<span class="hljs-number">2</span>)+<span class="hljs-string">&#x27;:&#x27;</span>+<span class="hljs-built_in">hex</span>(grasshopper)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">4</span>))<br></code></pre></td></tr></table></figure><p>利用好flag的格式进行分析。</p><p>将前5个<code>grasshopper</code>的产生过程列出公式来，有：</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031009312.png"/><p>我们已知$k_{14},k_{24},k_{34},k_{44},k_{54}$，就可以推出$k_{23},k_{33},k_{43},k_{53}$，如$k_{23}&#x3D;k_{24}*invert(k_{14},p)\%p$，同理可以求出$k_{32},k_{42},k_{52}$，继续有$k_{41},k_{51}$，最后求出$k_{50}$，这样一来，我们就求出了$k_{50},k_{51},k_{52},k_{53},k_{54}$，即加密 ‘{‘ 之后的密钥<code>k</code>。</p><p>知道密钥<code>k</code>，通过<code>g_i*invert(k0*k1*k2*k3*k4,p)%p</code>求得明文字符，然后重复一遍加密过程可以得到下一轮的密钥<code>k</code>。</p><p>p的值可以进行爆破。</p><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert,gcd<br><span class="hljs-comment">#利用flag格式flag&#123;      &#125;</span><br>know = <span class="hljs-string">b&#x27;flag&#123;&#x27;</span><br><span class="hljs-comment">#爆破p</span><br>g = [<span class="hljs-number">0x2066</span>, <span class="hljs-number">0xa222</span>, <span class="hljs-number">0xcbb1</span>, <span class="hljs-number">0xdbb4</span>, <span class="hljs-number">0xdeb4</span>, <span class="hljs-number">0xb1c5</span>, <span class="hljs-number">0x33a4</span>, <span class="hljs-number">0xc051</span>, <span class="hljs-number">0x3b79</span>, <span class="hljs-number">0x6bf8</span>, <span class="hljs-number">0x2131</span>, <span class="hljs-number">0x2c40</span>, <span class="hljs-number">0x91ba</span>, <span class="hljs-number">0x7b44</span>, <span class="hljs-number">0x5f25</span>, <span class="hljs-number">0x0208</span>, <span class="hljs-number">0x7edb</span>, <span class="hljs-number">0x62b5</span>, <span class="hljs-number">0xcec5</span>, <span class="hljs-number">0x5ab3</span>, <span class="hljs-number">0x3c46</span>, <span class="hljs-number">0xc272</span>, <span class="hljs-number">0x714b</span>, <span class="hljs-number">0x9e0b</span>, <span class="hljs-number">0x48ee</span>, <span class="hljs-number">0x44cc</span>, <span class="hljs-number">0x05a0</span>, <span class="hljs-number">0x3da3</span>, <span class="hljs-number">0x11b1</span>, <span class="hljs-number">0x259f</span>, <span class="hljs-number">0x899d</span>, <span class="hljs-number">0xa130</span>, <span class="hljs-number">0xe58f</span>, <span class="hljs-number">0x23f3</span>, <span class="hljs-number">0x5829</span>, <span class="hljs-number">0x6beb</span>, <span class="hljs-number">0x3681</span>, <span class="hljs-number">0x0054</span>, <span class="hljs-number">0xa189</span>, <span class="hljs-number">0x2765</span>, <span class="hljs-number">0xc63d</span>, <span class="hljs-number">0xbc68</span>]<br>maxg = <span class="hljs-built_in">max</span>(g)<br><span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(maxg+<span class="hljs-number">1</span>, <span class="hljs-number">2</span>**<span class="hljs-number">16</span>):<br>    <span class="hljs-keyword">if</span> gcd(know[<span class="hljs-number">0</span>], p) == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> gcd(know[<span class="hljs-number">1</span>], p) == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> gcd(know[<span class="hljs-number">2</span>], p) == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> gcd(know[<span class="hljs-number">3</span>], p) == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> gcd(know[<span class="hljs-number">4</span>], p) == <span class="hljs-number">1</span>:<br>        g04 = g[<span class="hljs-number">0</span>]<br><br>        g14 = g[<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> gcd(g04,p) != <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">continue</span><br>        g13 = g14 * invert(g04, p) % p<br><br>        g24 = g[<span class="hljs-number">2</span>]<br>        <span class="hljs-keyword">if</span> gcd(g14,p) != <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> gcd(g13,p) != <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">continue</span><br>        g23 = g24 * invert(g14, p) % p<br>        g22 = g23 * invert(g13, p) % p<br><br>        g34 = g[<span class="hljs-number">3</span>]<br>        <span class="hljs-keyword">if</span> gcd(g24,p) != <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> gcd(g23,p) != <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> gcd(g22,p) != <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">continue</span><br>        g33 = g34 * invert(g24, p) % p<br>        g32 = g33 * invert(g23, p) % p<br>        g31 = g32 * invert(g22, p) % p<br><br>        g44 = g[<span class="hljs-number">4</span>]<br>        <span class="hljs-keyword">if</span> gcd(g34,p) != <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> gcd(g33,p) != <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> gcd(g32,p) != <span class="hljs-number">1</span> <span class="hljs-keyword">or</span> gcd(g31,p) != <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">continue</span><br>        g43 = g44 * invert(g34, p) % p<br>        g42 = g43 * invert(g33, p) % p<br>        g41 = g42 * invert(g32, p) % p<br>        g40 = g41 * invert(g31, p) % p<br><br>        k = [g40, g41, g42, g43, g44]<br>        flag = <span class="hljs-string">&#x27;&#x27;</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>,<span class="hljs-number">42</span>):<br>            _k = k[<span class="hljs-number">0</span>]*k[<span class="hljs-number">1</span>]*k[<span class="hljs-number">2</span>]*k[<span class="hljs-number">3</span>]*k[<span class="hljs-number">4</span>]<br>            <span class="hljs-keyword">if</span> gcd(_k, p) != <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">break</span><br>            alp = g[i] * invert(_k, p) % p<br>            flag += <span class="hljs-built_in">chr</span>(alp)<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>                k[j] = alp = alp * k[j] % p<br><br>        <span class="hljs-keyword">if</span> flag.endswith(<span class="hljs-string">&#x27;&#125;&#x27;</span>):<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p = <span class="hljs-subst">&#123;p&#125;</span>&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(flag.encode())<br><span class="hljs-comment">#flag&#123;749d39d4-78db-4c55-b4ff-bca873d0f18e&#125;</span><br></code></pre></td></tr></table></figure><h1 id="crypto162"><a href="#crypto162" class="headerlink" title="crypto162"></a>crypto162</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5,sha256<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br>cof_t = [[<span class="hljs-number">353</span>, -<span class="hljs-number">1162</span>, <span class="hljs-number">32767</span>], [<span class="hljs-number">206</span>, -<span class="hljs-number">8021</span>, <span class="hljs-number">42110</span>], [<span class="hljs-number">262</span>, -<span class="hljs-number">7088</span>, <span class="hljs-number">31882</span>], [<span class="hljs-number">388</span>, -<span class="hljs-number">6394</span>, <span class="hljs-number">21225</span>], [<span class="hljs-number">295</span>, -<span class="hljs-number">9469</span>, <span class="hljs-number">44468</span>], [<span class="hljs-number">749</span>, -<span class="hljs-number">3501</span>, <span class="hljs-number">40559</span>], [<span class="hljs-number">528</span>, -<span class="hljs-number">2690</span>, <span class="hljs-number">10210</span>], [<span class="hljs-number">354</span>, -<span class="hljs-number">5383</span>, <span class="hljs-number">18437</span>], [<span class="hljs-number">491</span>, -<span class="hljs-number">8467</span>, <span class="hljs-number">26892</span>], [<span class="hljs-number">932</span>, -<span class="hljs-number">6984</span>, <span class="hljs-number">20447</span>], [<span class="hljs-number">731</span>, -<span class="hljs-number">6281</span>, <span class="hljs-number">11340</span>], [<span class="hljs-number">420</span>, -<span class="hljs-number">5392</span>, <span class="hljs-number">44071</span>], [<span class="hljs-number">685</span>, -<span class="hljs-number">6555</span>, <span class="hljs-number">40938</span>], [<span class="hljs-number">408</span>, -<span class="hljs-number">8070</span>, <span class="hljs-number">47959</span>], [<span class="hljs-number">182</span>, -<span class="hljs-number">9857</span>, <span class="hljs-number">49477</span>], [<span class="hljs-number">593</span>, -<span class="hljs-number">3584</span>, <span class="hljs-number">49243</span>], [<span class="hljs-number">929</span>, -<span class="hljs-number">7410</span>, <span class="hljs-number">31929</span>], [<span class="hljs-number">970</span>, -<span class="hljs-number">4549</span>, <span class="hljs-number">17160</span>], [<span class="hljs-number">141</span>, -<span class="hljs-number">2435</span>, <span class="hljs-number">36408</span>], [<span class="hljs-number">344</span>, -<span class="hljs-number">3814</span>, <span class="hljs-number">18949</span>], [<span class="hljs-number">291</span>, -<span class="hljs-number">7457</span>, <span class="hljs-number">40587</span>], [<span class="hljs-number">765</span>, -<span class="hljs-number">7011</span>, <span class="hljs-number">32097</span>], [<span class="hljs-number">700</span>, -<span class="hljs-number">8534</span>, <span class="hljs-number">18013</span>], [<span class="hljs-number">267</span>, -<span class="hljs-number">2541</span>, <span class="hljs-number">33488</span>], [<span class="hljs-number">249</span>, -<span class="hljs-number">8934</span>, <span class="hljs-number">12321</span>], [<span class="hljs-number">589</span>, -<span class="hljs-number">9617</span>, <span class="hljs-number">41998</span>], [<span class="hljs-number">840</span>, -<span class="hljs-number">1166</span>, <span class="hljs-number">22814</span>], [<span class="hljs-number">947</span>, -<span class="hljs-number">5660</span>, <span class="hljs-number">41003</span>], [<span class="hljs-number">206</span>, -<span class="hljs-number">7195</span>, <span class="hljs-number">46261</span>], [<span class="hljs-number">784</span>, -<span class="hljs-number">9270</span>, <span class="hljs-number">28410</span>], [<span class="hljs-number">338</span>, -<span class="hljs-number">3690</span>, <span class="hljs-number">19608</span>], [<span class="hljs-number">559</span>, -<span class="hljs-number">2078</span>, <span class="hljs-number">44397</span>], [<span class="hljs-number">534</span>, -<span class="hljs-number">3438</span>, <span class="hljs-number">47830</span>], [<span class="hljs-number">515</span>, -<span class="hljs-number">2139</span>, <span class="hljs-number">39546</span>], [<span class="hljs-number">603</span>, -<span class="hljs-number">6460</span>, <span class="hljs-number">49953</span>], [<span class="hljs-number">234</span>, -<span class="hljs-number">6824</span>, <span class="hljs-number">12579</span>], [<span class="hljs-number">805</span>, -<span class="hljs-number">8793</span>, <span class="hljs-number">36465</span>], [<span class="hljs-number">245</span>, -<span class="hljs-number">5886</span>, <span class="hljs-number">21077</span>], [<span class="hljs-number">190</span>, -<span class="hljs-number">7658</span>, <span class="hljs-number">20396</span>], [<span class="hljs-number">392</span>, -<span class="hljs-number">7053</span>, <span class="hljs-number">19739</span>], [<span class="hljs-number">609</span>, -<span class="hljs-number">5399</span>, <span class="hljs-number">39959</span>], [<span class="hljs-number">479</span>, -<span class="hljs-number">8172</span>, <span class="hljs-number">45734</span>], [<span class="hljs-number">321</span>, -<span class="hljs-number">7102</span>, <span class="hljs-number">41224</span>], [<span class="hljs-number">720</span>, -<span class="hljs-number">4487</span>, <span class="hljs-number">11055</span>], [<span class="hljs-number">208</span>, -<span class="hljs-number">1897</span>, <span class="hljs-number">15237</span>], [<span class="hljs-number">890</span>, -<span class="hljs-number">4427</span>, <span class="hljs-number">35168</span>], [<span class="hljs-number">513</span>, -<span class="hljs-number">5106</span>, <span class="hljs-number">45849</span>], [<span class="hljs-number">666</span>, -<span class="hljs-number">1137</span>, <span class="hljs-number">23725</span>], [<span class="hljs-number">755</span>, -<span class="hljs-number">6732</span>, <span class="hljs-number">39995</span>], [<span class="hljs-number">589</span>, -<span class="hljs-number">6421</span>, <span class="hljs-number">43716</span>], [<span class="hljs-number">866</span>, -<span class="hljs-number">3265</span>, <span class="hljs-number">30017</span>], [<span class="hljs-number">416</span>, -<span class="hljs-number">6540</span>, <span class="hljs-number">34979</span>], [<span class="hljs-number">840</span>, -<span class="hljs-number">1305</span>, <span class="hljs-number">18242</span>], [<span class="hljs-number">731</span>, -<span class="hljs-number">6844</span>, <span class="hljs-number">13781</span>], [<span class="hljs-number">561</span>, -<span class="hljs-number">2728</span>, <span class="hljs-number">10298</span>], [<span class="hljs-number">863</span>, -<span class="hljs-number">5953</span>, <span class="hljs-number">23132</span>], [<span class="hljs-number">204</span>, -<span class="hljs-number">4208</span>, <span class="hljs-number">27492</span>], [<span class="hljs-number">158</span>, -<span class="hljs-number">8701</span>, <span class="hljs-number">12720</span>], [<span class="hljs-number">802</span>, -<span class="hljs-number">4740</span>, <span class="hljs-number">16628</span>], [<span class="hljs-number">491</span>, -<span class="hljs-number">6874</span>, <span class="hljs-number">29057</span>], [<span class="hljs-number">531</span>, -<span class="hljs-number">4829</span>, <span class="hljs-number">29205</span>], [<span class="hljs-number">363</span>, -<span class="hljs-number">4775</span>, <span class="hljs-number">41711</span>], [<span class="hljs-number">319</span>, -<span class="hljs-number">9206</span>, <span class="hljs-number">46164</span>], [<span class="hljs-number">317</span>, -<span class="hljs-number">9270</span>, <span class="hljs-number">18290</span>], [<span class="hljs-number">680</span>, -<span class="hljs-number">5136</span>, <span class="hljs-number">12009</span>], [<span class="hljs-number">880</span>, -<span class="hljs-number">2940</span>, <span class="hljs-number">34900</span>], [<span class="hljs-number">162</span>, -<span class="hljs-number">2587</span>, <span class="hljs-number">49881</span>], [<span class="hljs-number">997</span>, -<span class="hljs-number">5265</span>, <span class="hljs-number">20890</span>], [<span class="hljs-number">485</span>, -<span class="hljs-number">9395</span>, <span class="hljs-number">23048</span>], [<span class="hljs-number">867</span>, -<span class="hljs-number">1652</span>, <span class="hljs-number">18926</span>], [<span class="hljs-number">691</span>, -<span class="hljs-number">7844</span>, <span class="hljs-number">11180</span>], [<span class="hljs-number">355</span>, -<span class="hljs-number">5990</span>, <span class="hljs-number">13172</span>], [<span class="hljs-number">923</span>, -<span class="hljs-number">2018</span>, <span class="hljs-number">23110</span>], [<span class="hljs-number">214</span>, -<span class="hljs-number">4719</span>, <span class="hljs-number">23005</span>], [<span class="hljs-number">921</span>, -<span class="hljs-number">9528</span>, <span class="hljs-number">29351</span>], [<span class="hljs-number">349</span>, -<span class="hljs-number">7957</span>, <span class="hljs-number">20161</span>], [<span class="hljs-number">470</span>, -<span class="hljs-number">1889</span>, <span class="hljs-number">46170</span>], [<span class="hljs-number">244</span>, -<span class="hljs-number">6106</span>, <span class="hljs-number">23879</span>], [<span class="hljs-number">419</span>, -<span class="hljs-number">5440</span>, <span class="hljs-number">43576</span>], [<span class="hljs-number">930</span>, -<span class="hljs-number">1123</span>, <span class="hljs-number">29859</span>], [<span class="hljs-number">151</span>, -<span class="hljs-number">5759</span>, <span class="hljs-number">23405</span>], [<span class="hljs-number">843</span>, -<span class="hljs-number">6770</span>, <span class="hljs-number">36558</span>], [<span class="hljs-number">574</span>, -<span class="hljs-number">6171</span>, <span class="hljs-number">33778</span>], [<span class="hljs-number">772</span>, -<span class="hljs-number">1073</span>, <span class="hljs-number">44718</span>], [<span class="hljs-number">932</span>, -<span class="hljs-number">4037</span>, <span class="hljs-number">40088</span>], [<span class="hljs-number">848</span>, -<span class="hljs-number">5813</span>, <span class="hljs-number">27304</span>], [<span class="hljs-number">194</span>, -<span class="hljs-number">6016</span>, <span class="hljs-number">39770</span>], [<span class="hljs-number">966</span>, -<span class="hljs-number">6789</span>, <span class="hljs-number">14217</span>], [<span class="hljs-number">219</span>, -<span class="hljs-number">6849</span>, <span class="hljs-number">40922</span>], [<span class="hljs-number">352</span>, -<span class="hljs-number">6046</span>, <span class="hljs-number">18558</span>], [<span class="hljs-number">794</span>, -<span class="hljs-number">8254</span>, <span class="hljs-number">29748</span>], [<span class="hljs-number">618</span>, -<span class="hljs-number">5887</span>, <span class="hljs-number">15535</span>], [<span class="hljs-number">202</span>, -<span class="hljs-number">9288</span>, <span class="hljs-number">26590</span>], [<span class="hljs-number">611</span>, -<span class="hljs-number">4341</span>, <span class="hljs-number">46682</span>], [<span class="hljs-number">155</span>, -<span class="hljs-number">7909</span>, <span class="hljs-number">16654</span>], [<span class="hljs-number">935</span>, -<span class="hljs-number">5739</span>, <span class="hljs-number">39342</span>], [<span class="hljs-number">998</span>, -<span class="hljs-number">6538</span>, <span class="hljs-number">24363</span>], [<span class="hljs-number">125</span>, -<span class="hljs-number">5679</span>, <span class="hljs-number">36725</span>], [<span class="hljs-number">507</span>, -<span class="hljs-number">7074</span>, <span class="hljs-number">15475</span>], [<span class="hljs-number">699</span>, -<span class="hljs-number">5836</span>, <span class="hljs-number">47549</span>]]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cal</span>(<span class="hljs-params">i,cof</span>):<br>    <span class="hljs-keyword">if</span> i &lt; <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">return</span> i+<span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> cof[<span class="hljs-number">2</span>]*cal(i-<span class="hljs-number">3</span>,cof)+cof[<span class="hljs-number">1</span>]*cal(i-<span class="hljs-number">2</span>,cof)+cof[<span class="hljs-number">0</span>]*cal(i-<span class="hljs-number">1</span>,cof)<br><br>s = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    s += cal(<span class="hljs-number">200000</span>,cof_t[i])<br><br><span class="hljs-built_in">print</span>(s)<br>s = <span class="hljs-built_in">str</span>(s)[-<span class="hljs-number">2000</span>:-<span class="hljs-number">1000</span>]<br>key = md5(s).hexdigest().decode(<span class="hljs-string">&#x27;hex&#x27;</span>)<br>check = sha256(key).hexdigest()<br>verify = <span class="hljs-string">&#x27;2cf44ec396e3bb9ed0f2f3bdbe4fab6325ae9d9ec3107881308156069452a6d5&#x27;</span><br><span class="hljs-keyword">assert</span>(check == verify)<br>aes = AES.new(key,AES.MODE_ECB)<br>data = flag + (<span class="hljs-number">16</span>-<span class="hljs-built_in">len</span>(flag)%<span class="hljs-number">16</span>)*<span class="hljs-string">&quot;\x00&quot;</span><br><span class="hljs-built_in">print</span> (aes.encrypt(data).encode(<span class="hljs-string">&#x27;hex&#x27;</span>))<br><span class="hljs-comment">#4f12b3a3eadc4146386f4732266f02bd03114a404ba4cb2dabae213ecec451c9d52c70dc3d25154b5af8a304afafed87</span><br></code></pre></td></tr></table></figure><p>根据题目提示，想到将递归公式转换成矩阵（参考<a href="https://blog.csdn.net/wdq347/article/details/8919645"> 线性代数求解递推形式数列的通项公式_wdq347的博客-CSDN博客</a>）</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031009349.png"/><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sagemath</span><br>cof_t = [[<span class="hljs-number">353</span>, -<span class="hljs-number">1162</span>, <span class="hljs-number">32767</span>], [<span class="hljs-number">206</span>, -<span class="hljs-number">8021</span>, <span class="hljs-number">42110</span>], [<span class="hljs-number">262</span>, -<span class="hljs-number">7088</span>, <span class="hljs-number">31882</span>], [<span class="hljs-number">388</span>, -<span class="hljs-number">6394</span>, <span class="hljs-number">21225</span>], [<span class="hljs-number">295</span>, -<span class="hljs-number">9469</span>, <span class="hljs-number">44468</span>], [<span class="hljs-number">749</span>, -<span class="hljs-number">3501</span>, <span class="hljs-number">40559</span>], [<span class="hljs-number">528</span>, -<span class="hljs-number">2690</span>, <span class="hljs-number">10210</span>], [<span class="hljs-number">354</span>, -<span class="hljs-number">5383</span>, <span class="hljs-number">18437</span>], [<span class="hljs-number">491</span>, -<span class="hljs-number">8467</span>, <span class="hljs-number">26892</span>], [<span class="hljs-number">932</span>, -<span class="hljs-number">6984</span>, <span class="hljs-number">20447</span>], [<span class="hljs-number">731</span>, -<span class="hljs-number">6281</span>, <span class="hljs-number">11340</span>], [<span class="hljs-number">420</span>, -<span class="hljs-number">5392</span>, <span class="hljs-number">44071</span>], [<span class="hljs-number">685</span>, -<span class="hljs-number">6555</span>, <span class="hljs-number">40938</span>], [<span class="hljs-number">408</span>, -<span class="hljs-number">8070</span>, <span class="hljs-number">47959</span>], [<span class="hljs-number">182</span>, -<span class="hljs-number">9857</span>, <span class="hljs-number">49477</span>], [<span class="hljs-number">593</span>, -<span class="hljs-number">3584</span>, <span class="hljs-number">49243</span>], [<span class="hljs-number">929</span>, -<span class="hljs-number">7410</span>, <span class="hljs-number">31929</span>], [<span class="hljs-number">970</span>, -<span class="hljs-number">4549</span>, <span class="hljs-number">17160</span>], [<span class="hljs-number">141</span>, -<span class="hljs-number">2435</span>, <span class="hljs-number">36408</span>], [<span class="hljs-number">344</span>, -<span class="hljs-number">3814</span>, <span class="hljs-number">18949</span>], [<span class="hljs-number">291</span>, -<span class="hljs-number">7457</span>, <span class="hljs-number">40587</span>], [<span class="hljs-number">765</span>, -<span class="hljs-number">7011</span>, <span class="hljs-number">32097</span>], [<span class="hljs-number">700</span>, -<span class="hljs-number">8534</span>, <span class="hljs-number">18013</span>], [<span class="hljs-number">267</span>, -<span class="hljs-number">2541</span>, <span class="hljs-number">33488</span>], [<span class="hljs-number">249</span>, -<span class="hljs-number">8934</span>, <span class="hljs-number">12321</span>], [<span class="hljs-number">589</span>, -<span class="hljs-number">9617</span>, <span class="hljs-number">41998</span>], [<span class="hljs-number">840</span>, -<span class="hljs-number">1166</span>, <span class="hljs-number">22814</span>], [<span class="hljs-number">947</span>, -<span class="hljs-number">5660</span>, <span class="hljs-number">41003</span>], [<span class="hljs-number">206</span>, -<span class="hljs-number">7195</span>, <span class="hljs-number">46261</span>], [<span class="hljs-number">784</span>, -<span class="hljs-number">9270</span>, <span class="hljs-number">28410</span>], [<span class="hljs-number">338</span>, -<span class="hljs-number">3690</span>, <span class="hljs-number">19608</span>], [<span class="hljs-number">559</span>, -<span class="hljs-number">2078</span>, <span class="hljs-number">44397</span>], [<span class="hljs-number">534</span>, -<span class="hljs-number">3438</span>, <span class="hljs-number">47830</span>], [<span class="hljs-number">515</span>, -<span class="hljs-number">2139</span>, <span class="hljs-number">39546</span>], [<span class="hljs-number">603</span>, -<span class="hljs-number">6460</span>, <span class="hljs-number">49953</span>], [<span class="hljs-number">234</span>, -<span class="hljs-number">6824</span>, <span class="hljs-number">12579</span>], [<span class="hljs-number">805</span>, -<span class="hljs-number">8793</span>, <span class="hljs-number">36465</span>], [<span class="hljs-number">245</span>, -<span class="hljs-number">5886</span>, <span class="hljs-number">21077</span>], [<span class="hljs-number">190</span>, -<span class="hljs-number">7658</span>, <span class="hljs-number">20396</span>], [<span class="hljs-number">392</span>, -<span class="hljs-number">7053</span>, <span class="hljs-number">19739</span>], [<span class="hljs-number">609</span>, -<span class="hljs-number">5399</span>, <span class="hljs-number">39959</span>], [<span class="hljs-number">479</span>, -<span class="hljs-number">8172</span>, <span class="hljs-number">45734</span>], [<span class="hljs-number">321</span>, -<span class="hljs-number">7102</span>, <span class="hljs-number">41224</span>], [<span class="hljs-number">720</span>, -<span class="hljs-number">4487</span>, <span class="hljs-number">11055</span>], [<span class="hljs-number">208</span>, -<span class="hljs-number">1897</span>, <span class="hljs-number">15237</span>], [<span class="hljs-number">890</span>, -<span class="hljs-number">4427</span>, <span class="hljs-number">35168</span>], [<span class="hljs-number">513</span>, -<span class="hljs-number">5106</span>, <span class="hljs-number">45849</span>], [<span class="hljs-number">666</span>, -<span class="hljs-number">1137</span>, <span class="hljs-number">23725</span>], [<span class="hljs-number">755</span>, -<span class="hljs-number">6732</span>, <span class="hljs-number">39995</span>], [<span class="hljs-number">589</span>, -<span class="hljs-number">6421</span>, <span class="hljs-number">43716</span>], [<span class="hljs-number">866</span>, -<span class="hljs-number">3265</span>, <span class="hljs-number">30017</span>], [<span class="hljs-number">416</span>, -<span class="hljs-number">6540</span>, <span class="hljs-number">34979</span>], [<span class="hljs-number">840</span>, -<span class="hljs-number">1305</span>, <span class="hljs-number">18242</span>], [<span class="hljs-number">731</span>, -<span class="hljs-number">6844</span>, <span class="hljs-number">13781</span>], [<span class="hljs-number">561</span>, -<span class="hljs-number">2728</span>, <span class="hljs-number">10298</span>], [<span class="hljs-number">863</span>, -<span class="hljs-number">5953</span>, <span class="hljs-number">23132</span>], [<span class="hljs-number">204</span>, -<span class="hljs-number">4208</span>, <span class="hljs-number">27492</span>], [<span class="hljs-number">158</span>, -<span class="hljs-number">8701</span>, <span class="hljs-number">12720</span>], [<span class="hljs-number">802</span>, -<span class="hljs-number">4740</span>, <span class="hljs-number">16628</span>], [<span class="hljs-number">491</span>, -<span class="hljs-number">6874</span>, <span class="hljs-number">29057</span>], [<span class="hljs-number">531</span>, -<span class="hljs-number">4829</span>, <span class="hljs-number">29205</span>], [<span class="hljs-number">363</span>, -<span class="hljs-number">4775</span>, <span class="hljs-number">41711</span>], [<span class="hljs-number">319</span>, -<span class="hljs-number">9206</span>, <span class="hljs-number">46164</span>], [<span class="hljs-number">317</span>, -<span class="hljs-number">9270</span>, <span class="hljs-number">18290</span>], [<span class="hljs-number">680</span>, -<span class="hljs-number">5136</span>, <span class="hljs-number">12009</span>], [<span class="hljs-number">880</span>, -<span class="hljs-number">2940</span>, <span class="hljs-number">34900</span>], [<span class="hljs-number">162</span>, -<span class="hljs-number">2587</span>, <span class="hljs-number">49881</span>], [<span class="hljs-number">997</span>, -<span class="hljs-number">5265</span>, <span class="hljs-number">20890</span>], [<span class="hljs-number">485</span>, -<span class="hljs-number">9395</span>, <span class="hljs-number">23048</span>], [<span class="hljs-number">867</span>, -<span class="hljs-number">1652</span>, <span class="hljs-number">18926</span>], [<span class="hljs-number">691</span>, -<span class="hljs-number">7844</span>, <span class="hljs-number">11180</span>], [<span class="hljs-number">355</span>, -<span class="hljs-number">5990</span>, <span class="hljs-number">13172</span>], [<span class="hljs-number">923</span>, -<span class="hljs-number">2018</span>, <span class="hljs-number">23110</span>], [<span class="hljs-number">214</span>, -<span class="hljs-number">4719</span>, <span class="hljs-number">23005</span>], [<span class="hljs-number">921</span>, -<span class="hljs-number">9528</span>, <span class="hljs-number">29351</span>], [<span class="hljs-number">349</span>, -<span class="hljs-number">7957</span>, <span class="hljs-number">20161</span>], [<span class="hljs-number">470</span>, -<span class="hljs-number">1889</span>, <span class="hljs-number">46170</span>], [<span class="hljs-number">244</span>, -<span class="hljs-number">6106</span>, <span class="hljs-number">23879</span>], [<span class="hljs-number">419</span>, -<span class="hljs-number">5440</span>, <span class="hljs-number">43576</span>], [<span class="hljs-number">930</span>, -<span class="hljs-number">1123</span>, <span class="hljs-number">29859</span>], [<span class="hljs-number">151</span>, -<span class="hljs-number">5759</span>, <span class="hljs-number">23405</span>], [<span class="hljs-number">843</span>, -<span class="hljs-number">6770</span>, <span class="hljs-number">36558</span>], [<span class="hljs-number">574</span>, -<span class="hljs-number">6171</span>, <span class="hljs-number">33778</span>], [<span class="hljs-number">772</span>, -<span class="hljs-number">1073</span>, <span class="hljs-number">44718</span>], [<span class="hljs-number">932</span>, -<span class="hljs-number">4037</span>, <span class="hljs-number">40088</span>], [<span class="hljs-number">848</span>, -<span class="hljs-number">5813</span>, <span class="hljs-number">27304</span>], [<span class="hljs-number">194</span>, -<span class="hljs-number">6016</span>, <span class="hljs-number">39770</span>], [<span class="hljs-number">966</span>, -<span class="hljs-number">6789</span>, <span class="hljs-number">14217</span>], [<span class="hljs-number">219</span>, -<span class="hljs-number">6849</span>, <span class="hljs-number">40922</span>], [<span class="hljs-number">352</span>, -<span class="hljs-number">6046</span>, <span class="hljs-number">18558</span>], [<span class="hljs-number">794</span>, -<span class="hljs-number">8254</span>, <span class="hljs-number">29748</span>], [<span class="hljs-number">618</span>, -<span class="hljs-number">5887</span>, <span class="hljs-number">15535</span>], [<span class="hljs-number">202</span>, -<span class="hljs-number">9288</span>, <span class="hljs-number">26590</span>], [<span class="hljs-number">611</span>, -<span class="hljs-number">4341</span>, <span class="hljs-number">46682</span>], [<span class="hljs-number">155</span>, -<span class="hljs-number">7909</span>, <span class="hljs-number">16654</span>], [<span class="hljs-number">935</span>, -<span class="hljs-number">5739</span>, <span class="hljs-number">39342</span>], [<span class="hljs-number">998</span>, -<span class="hljs-number">6538</span>, <span class="hljs-number">24363</span>], [<span class="hljs-number">125</span>, -<span class="hljs-number">5679</span>, <span class="hljs-number">36725</span>], [<span class="hljs-number">507</span>, -<span class="hljs-number">7074</span>, <span class="hljs-number">15475</span>], [<span class="hljs-number">699</span>, -<span class="hljs-number">5836</span>, <span class="hljs-number">47549</span>]]<br>B = [[<span class="hljs-number">3</span>],[<span class="hljs-number">2</span>],[<span class="hljs-number">1</span>]]<br>B = matrix(B)<br>s = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>    A = [cof_t[i],[<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>,<span class="hljs-number">0</span>]]<br>    A = matrix(A)<br>    C = A^(<span class="hljs-number">200000</span>-<span class="hljs-number">2</span>)*B<br>    s += C[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br>    <br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(s)[-<span class="hljs-number">2000</span>:-<span class="hljs-number">1000</span>])<br><br><br><span class="hljs-comment">#python</span><br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5,sha256<br><span class="hljs-keyword">from</span> binascii <span class="hljs-keyword">import</span> unhexlify<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br>s = <span class="hljs-string">&#x27;8365222366127410597598169954399481033882921410074214649102398062373189165630613993923060190128768377015697889610969869189338768501949778819512483009804114510646333513147157016729806311717181191848898389803672575716843797638777123435881498143998689577186959772296072473194533856870919617472555638920296793205581043222881816090693269730028856738454951305575065708823347157677411074157254186955326531403441609073128679935513392779152628590893913048822608749327034655805831509883357484164977115164240733564895591006693108254829407400850621646091808483228634435805213269066211974452289769022399418497986464430356041737753404266468993201044272042844144895601296459104534111416147795404108912440106970848660340526207025880755825643455720871621993251258247195860214917957713359490024807893442884343732717743882154397539800059579470352302688717025991780505564794824908605015195865226780305658376169579983423732703921876787723921599023795922881747318116849413935343800909756656082327558085457335537828343666748&#x27;</span><br>key = unhexlify(md5(s.encode()).hexdigest())<br><span class="hljs-built_in">print</span>(key)<br>check = sha256(key).hexdigest()<br>verify = <span class="hljs-string">&#x27;2cf44ec396e3bb9ed0f2f3bdbe4fab6325ae9d9ec3107881308156069452a6d5&#x27;</span><br><span class="hljs-keyword">assert</span> check == verify<br>aes = AES.new(key, AES.MODE_ECB)<br>cipher = unhexlify(<span class="hljs-string">&#x27;4f12b3a3eadc4146386f4732266f02bd03114a404ba4cb2dabae213ecec451c9d52c70dc3d25154b5af8a304afafed87&#x27;</span>)<br><span class="hljs-built_in">print</span>(aes.decrypt(cipher))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线代</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>羊城杯-2020-Simple</title>
    <link href="/2022/08/20/%5B%E7%BE%8A%E5%9F%8E%E6%9D%AF%202020%5DSimple/"/>
    <url>/2022/08/20/%5B%E7%BE%8A%E5%9F%8E%E6%9D%AF%202020%5DSimple/</url>
    
    <content type="html"><![CDATA[<h1 id="羊城杯-2020-Simple"><a href="#羊城杯-2020-Simple" class="headerlink" title="[羊城杯 2020]Simple"></a>[羊城杯 2020]Simple</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> random<br><br>key = <span class="hljs-string">&quot;abcdefgh&quot;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">des_encrypt</span>(<span class="hljs-params">m</span>):<br>    des = DES.new(key, DES.MODE_ECB)<br>    res = des.encrypt(m)<br>    <span class="hljs-keyword">return</span> res<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_key</span>():<br>    p = getPrime(<span class="hljs-number">2048</span>)<br>    q = getPrime(<span class="hljs-number">2048</span>)<br>    n = p * q<br>    bit = n.bit_length()<br>    phi_n = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<span class="hljs-comment">#4096bits</span><br>    num = random.randint(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        u = getPrime(bit / <span class="hljs-number">4</span> - num)<span class="hljs-comment">#1024bits左右</span><br>        <span class="hljs-keyword">if</span> gmpy2.gcd(u, phi_n) != <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">continue</span><br>        t = gmpy2.invert(u, phi_n)<br>        e = bytes_to_long(des_encrypt(long_to_bytes(t)))<br>        <span class="hljs-keyword">if</span> gmpy2.gcd(e, phi_n) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">return</span> (n, e)<br><br>P = getPrime(<span class="hljs-number">1024</span>)<br>Q = getPrime(<span class="hljs-number">1024</span>)<br>N = P * Q<br>E = <span class="hljs-number">65537</span><br>lcm = gmpy2.lcm(P-<span class="hljs-number">1</span>, Q-<span class="hljs-number">1</span>)<br>e1 = gmpy2.invert(getPrime(<span class="hljs-number">730</span>), lcm)<br>e2 = gmpy2.invert(getPrime(<span class="hljs-number">730</span>), lcm)<br>m = bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m, E, N)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;N = &quot;</span> + <span class="hljs-built_in">str</span>(N)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;e2 = &quot;</span> + <span class="hljs-built_in">str</span>(e2)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;c = &quot;</span> + <span class="hljs-built_in">str</span>(c)<br>_n, _e = gen_key()<br>_c = <span class="hljs-built_in">pow</span>(e1, _e, _n)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;_n = &quot;</span> + <span class="hljs-built_in">str</span>(_n)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;_e = &quot;</span> + <span class="hljs-built_in">str</span>(_e)<br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;_c = &quot;</span> + <span class="hljs-built_in">str</span>(_c)<br><br><span class="hljs-comment"># N = 14922959775784066499316528935316325825140011208871830627653191549546959775167708525042423039865322548420928571524120743831693550123563493981797950912895893476200447083386549353336086899064921878582074346791320104106139965010480614879592357793053342577850761108944086318475849882440272688246818022209356852924215237481460229377544297224983887026669222885987323082324044645883070916243439521809702674295469253723616677245762242494478587807402688474176102093482019417118703747411862420536240611089529331148684440513934609412884941091651594861530606086982174862461739604705354416587503836130151492937714365614194583664241</span><br><span class="hljs-comment"># e2 = 27188825731727584656624712988703151030126350536157477591935558508817722580343689565924329442151239649607993377452763119541243174650065563589438911911135278704499670302489754540301886312489410648471922645773506837251600244109619850141762795901696503387880058658061490595034281884089265487336373011424883404499124002441860870291233875045675212355287622948427109362925199018383535259913549859747158348931847041907910313465531703810313472674435425886505383646969400166213185676876969805238803587967334447878968225219769481841748776108219650785975942208190380614555719233460250841332020054797811415069533137170950762289</span><br><span class="hljs-comment"># c = 6472367338832635906896423990323542537663849304314171581554107495210830026660211696089062916158894195561723047864604633460433867838687338370676287160274165915800235253640690510046066541445140501917731026596427080558567366267665887665459901724487706983166070740324307268574128474775026837827907818762764766069631267853742422247229582756256253175941899099898884656334598790711379305490419932664114615010382094572854799421891622789614614720442708271653376485660139560819668239118588069312179293488684403404385715780406937817124588773689921642802703005341324008483201528345805611493251791950304129082313093168732415486813</span><br><span class="hljs-comment"># _n = 440489238264900860776949063845200558734341182253911040104689726634414488997095518284964514078079911856352824174173937251558842251349762631716798307360995414545464514355957499460396352456341058329671470384493547042182238690727766731554287411757022792467324815342497916894285866240516524768645049867582541899123632009100512965460004548382054578461249990158442675234477122521189649316341623637146867589119951831385717513964941787562068891523060843170463600255518728070958509224053460041184869943038887434435024428311063533345514827827485121055022245800823723487812635502090530820946638405345755666124356919178290008475459419571761406117827422883820901663916276191422633940699113760516149002609672230610575442643822241126824287790055264162725209120192661985259423924307785452001927701323647247782658775780117642900694831475681037634691806232211286493187121464506122012889644137364079403183353774265910554863733455161820449073656744610495110838881353269890437984975607744603113572453211439334880155671730821755361054781243639407912133971530394031933785051770725331242932929244719594830548310768937037042243794551163891451545574837838357398072638709907958216067999891842395376953596940377457308329336524488962532620850237570279134567668379</span><br><span class="hljs-comment"># _e = 861605654852236668414010386016782729745549477722901970933220380452652052018502113737968204529790495739233258572209422774257139256367928649554562561889013164344608269555777150446651170697255381344437283003508476336814132594917061838422072660017477530465048729471603537912401826065081663165440462979219418291010867656746870617893935758241591032350010782861988742885918015532494020406350897048575155800941991107973433915573030255070411073793489218782862225921465295055907689734413881263179029741870520797816282420230090879687287575328294171448819803530205292587159921154471289747571107461754730577787617451127061265552788125691266357724955508391085485034126227212788895416902189479587194999818764639403752596165043883295506465916277734482380252399557395621566461322664559344483889187037851178431011220134914560438657522787409632677020269086895142488669203469256629173438313487046130238010206678820035631793666627274457756812810094004185303422637897314225624079032617334487815628021058997628511963565055629435278956251869329025544623291223984190562109149316159243565323565271491356378189561005084676592786453581431393651385181326525455441155960432946682976515756161038293313433862078763004704003356983371787414787104076401121444383911561</span><br><span class="hljs-comment"># _c = 305937839546594439230463861584604201077374759167468410827830943528403007941779658881672477705113617614828611332427199124217887937391378281943856159571057598203709366891547401974326016980711130197275312149966105151573748299654404630150641461765232935912266448303266990247145252052886920248198006212876273661195636104435277145396636985516064154534488750879453474211852461463041960835745695368577903786702607508492658563272121038693371752289017330781719235752018697635304458321008407930986565779826278048082764754367267460637798512780153281325733348999426407049795270044819657399403071013496169060640127279409914638535996355848933378734045908205536540619564723586905257569498716707820544351092379516465943537383422680357333849248129118148543389733395686399565999586899123087310025442994131218237679518267106194962305629529210402269726736072967966518381350920965727690274018080619332676536005722214955949897632990356174168234408837737546230730400434240785496100281815168806724358191550743656843853383646410487436540166360406982096949178466861150173527305369007546917550634679211293496458282787881244581230558011582720632502886494712233308474151958909251857281750741736910202763888790654287328846201724930302778996046434656839999091303411</span><br><br></code></pre></td></tr></table></figure><p>通过<code>_e</code>求出<code>t</code>。观察<code>u = getPrime(bit / 4 - num)</code>可知 $u&lt;_n^{\dfrac{1}{4}}$，可以尝试用<code>Wienner Attack</code>分解<code>_n</code>，然后求出<code>e1</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> DES<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> iroot<br><br>key = <span class="hljs-string">&quot;abcdefgh&quot;</span>.encode()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">des_decrypt</span>(<span class="hljs-params">c</span>):<br>    des = DES.new(key, DES.MODE_ECB)<br>    res = des.decrypt(c)<br>    <span class="hljs-keyword">return</span> res<br><br>n = <span class="hljs-number">440489238264900860776949063845200558734341182253911040104689726634414488997095518284964514078079911856352824174173937251558842251349762631716798307360995414545464514355957499460396352456341058329671470384493547042182238690727766731554287411757022792467324815342497916894285866240516524768645049867582541899123632009100512965460004548382054578461249990158442675234477122521189649316341623637146867589119951831385717513964941787562068891523060843170463600255518728070958509224053460041184869943038887434435024428311063533345514827827485121055022245800823723487812635502090530820946638405345755666124356919178290008475459419571761406117827422883820901663916276191422633940699113760516149002609672230610575442643822241126824287790055264162725209120192661985259423924307785452001927701323647247782658775780117642900694831475681037634691806232211286493187121464506122012889644137364079403183353774265910554863733455161820449073656744610495110838881353269890437984975607744603113572453211439334880155671730821755361054781243639407912133971530394031933785051770725331242932929244719594830548310768937037042243794551163891451545574837838357398072638709907958216067999891842395376953596940377457308329336524488962532620850237570279134567668379</span><br>e = <span class="hljs-number">861605654852236668414010386016782729745549477722901970933220380452652052018502113737968204529790495739233258572209422774257139256367928649554562561889013164344608269555777150446651170697255381344437283003508476336814132594917061838422072660017477530465048729471603537912401826065081663165440462979219418291010867656746870617893935758241591032350010782861988742885918015532494020406350897048575155800941991107973433915573030255070411073793489218782862225921465295055907689734413881263179029741870520797816282420230090879687287575328294171448819803530205292587159921154471289747571107461754730577787617451127061265552788125691266357724955508391085485034126227212788895416902189479587194999818764639403752596165043883295506465916277734482380252399557395621566461322664559344483889187037851178431011220134914560438657522787409632677020269086895142488669203469256629173438313487046130238010206678820035631793666627274457756812810094004185303422637897314225624079032617334487815628021058997628511963565055629435278956251869329025544623291223984190562109149316159243565323565271491356378189561005084676592786453581431393651385181326525455441155960432946682976515756161038293313433862078763004704003356983371787414787104076401121444383911561</span><br>c = <span class="hljs-number">305937839546594439230463861584604201077374759167468410827830943528403007941779658881672477705113617614828611332427199124217887937391378281943856159571057598203709366891547401974326016980711130197275312149966105151573748299654404630150641461765232935912266448303266990247145252052886920248198006212876273661195636104435277145396636985516064154534488750879453474211852461463041960835745695368577903786702607508492658563272121038693371752289017330781719235752018697635304458321008407930986565779826278048082764754367267460637798512780153281325733348999426407049795270044819657399403071013496169060640127279409914638535996355848933378734045908205536540619564723586905257569498716707820544351092379516465943537383422680357333849248129118148543389733395686399565999586899123087310025442994131218237679518267106194962305629529210402269726736072967966518381350920965727690274018080619332676536005722214955949897632990356174168234408837737546230730400434240785496100281815168806724358191550743656843853383646410487436540166360406982096949178466861150173527305369007546917550634679211293496458282787881244581230558011582720632502886494712233308474151958909251857281750741736910202763888790654287328846201724930302778996046434656839999091303411</span><br><br>t = bytes_to_long(des_decrypt(long_to_bytes(e)))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wienerAttack</span>(<span class="hljs-params">_e, _n</span>):<br>    con_frac = continued_fraction(_e / _n)<br>    conv = con_frac.convergents()<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> conv:<br>        k, dg = _.numerator(), _.denominator()<br>        <span class="hljs-keyword">if</span> k == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> dg == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        _phi = _e * dg // k<br>        <span class="hljs-keyword">if</span> (_n - _phi + <span class="hljs-number">1</span>) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> iroot(<span class="hljs-built_in">abs</span>(<span class="hljs-built_in">pow</span>((_n - _phi + <span class="hljs-number">1</span>) // <span class="hljs-number">2</span>, <span class="hljs-number">2</span>) - _n), <span class="hljs-number">2</span>)[<span class="hljs-number">1</span>]:<br>            delta = (_phi - _n - <span class="hljs-number">1</span>) ** <span class="hljs-number">2</span> - <span class="hljs-number">4</span> * _n<br>            _p = (_n + <span class="hljs-number">1</span> - _phi - <span class="hljs-built_in">int</span>(iroot(delta, <span class="hljs-number">2</span>)[<span class="hljs-number">0</span>])) // <span class="hljs-number">2</span><br>            _q = _n // _p<br>            <span class="hljs-keyword">assert</span> _n % _q == <span class="hljs-number">0</span><br>            <span class="hljs-keyword">return</span> _p, _q<br><br>p, q = wienerAttack(t, n)<br>phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>d = gmpy2.invert(e, phi)<br>e1 = <span class="hljs-built_in">pow</span>(c, d, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e1 = <span class="hljs-subst">&#123;e1&#125;</span>&#x27;</span>)<br><span class="hljs-comment">#e1 = 114552459553730357961013268333698879659007919035942930313432809776799669181481660306531243618160127922304264986001501784564575128319884991774542682853466808329973362019677284072646678280051091964555611220961719302320547405880386113519147076299481594997799884384012548506240748042365643212774215730304047871679706035596550898944580314923260982768858133395187777029914150064371998328788068888440803565964567662563652062845388379897799506439389461619422933318625765603423604615137217375612091221578339493263160670355032898186792479034771118678394464854413824347305505135625135428816394053078365603937337271798774138959</span><br></code></pre></td></tr></table></figure><p>这里需要参考论文(<a href="https://dunkirkturbo.github.io/2020/05/04/WriteUp-De1CTF2020-Crypto/howgrave-graham1999.pdf">Extending Wiener’s Attack in the Presence of Many Decrypting Exponents</a>)，利用<code>e1,e2</code>分解<code>N</code>。</p><p>根据论文中，结合<code>Wiener</code>和<code>Guo</code>的想法。</p><p>令$λ(N)&#x3D;(p − 1)(q − 1)&#x2F;g$ ， $s &#x3D; 1 − p − q$，按题意有<br>$$<br>\begin{cases}<br>e_1d_1 &#x3D; 1\quad mod\ λ(N)\\<br>e_2d_2 &#x3D; 1\quad mod\ λ(N)<br>\end{cases}<br>&#x3D;&#x3D;&gt;<br>\begin{cases}<br>e_1d_1 &#x3D; 1+k_1λ(N)\\<br>e_2d_2 &#x3D; 1+k_2λ(N)<br>\end{cases}<br>$$<br>根据<code>Wiener</code>的想法，有等式<br>$$<br>\begin{cases}<br>e_1d_1g−k_1N&#x3D;g+k_1s\\<br>e_2d_2g − k_2N &#x3D; g+k_2s<br>\end{cases}\tag{1}<br>$$<br>根据<code>Guo</code>的想法，有等式(上面的式子做变换)<br>$$<br>k_1e_2d_2 − k_2d_1e_1 &#x3D; k_1 − k_2\tag{2}<br>$$<br>由(1)(2)可得 (第三个等式由(1)中两个式子相乘的来的)<br>$$<br>\begin{cases}<br>e_1d_1g − k_1N &#x3D; g + k_1s\\<br>k_1e_2d_2 − k_2d_1e_1 &#x3D; k_1 − k_2\\<br>d_1d_2g^2e_1e_2 − d_1gk_2e_1N − d_2gk_1e_2N + k_1k_2N_2 &#x3D; (g + k_1s)(g + k_2s)<br>\end{cases}<br>$$<br>转换成矩阵方程($k_1k_2$拿来凑方阵)<br>$$<br>A &#x3D; [k_1k_2, d_1gk_2, d_2gk_1, d_1d_2g_2]<br>$$</p><p>$$<br>L &#x3D; \left[<br>\matrix{<br>1 &amp; −N &amp; 0 &amp; N^2\\<br> &amp; e_1 &amp; −e_1 &amp; −e_1N\\<br> &amp; &amp; e_2 &amp; −e_2N\\<br>&amp; &amp; &amp;e_1e_2<br>}<br>\right]<br>$$</p><p>$$<br>B&#x3D;[k_1k_2, k_2(g + k_1s), g(k_1 − k_2),(g + k_1s)(g + k_2s)]<br>$$</p><p>$$<br>A×L&#x3D;B<br>$$</p><p>如果B是L的最短向量，可以通过LLL算法求出B，但是上式并不满足<code>Minkowoski’s first theorem</code>（啊吧啊吧），需要进行调整。</p><p>令$M_1&#x3D;N^{1&#x2F;2}$，$M_2&#x3D;N^{1+α}$ (其中$α&lt;5&#x2F;14$)<br>$$<br>L_2 &#x3D; \left[<br>\matrix{<br>N &amp; −M_1N &amp; 0 &amp; N^2\\<br> &amp; M_1e_1 &amp; −M_2e_1 &amp; −e_1N\\<br> &amp; &amp; M_2e_2 &amp; −e_2N\\<br>&amp; &amp; &amp;e_1e_2<br>}<br>\right]<br>$$<br>$$<br>B_2&#x3D;[k_1k_2N, k_2(g + k_1s)M_1, g(k_1 − k_2)M_2,(g + k_1s)(g + k_2s)]<br>$$</p><p>$$<br>A×L_2&#x3D;B_2<br>$$</p><p>然后对$L_2$进行LLL求出B，解矩阵方程求出A，然后<br>$$<br>\dfrac{e_1×A[1]}{A[0]}&#x3D;\dfrac{e_1d_1gk_2}{k_1k_2}&#x3D;\dfrac{k_1φ(N)+g}{k_1}&#x3D;φ(N)+\dfrac{g}{k_1}≈φ(N)<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">import</span> gmpy2<br>N = <span class="hljs-number">14922959775784066499316528935316325825140011208871830627653191549546959775167708525042423039865322548420928571524120743831693550123563493981797950912895893476200447083386549353336086899064921878582074346791320104106139965010480614879592357793053342577850761108944086318475849882440272688246818022209356852924215237481460229377544297224983887026669222885987323082324044645883070916243439521809702674295469253723616677245762242494478587807402688474176102093482019417118703747411862420536240611089529331148684440513934609412884941091651594861530606086982174862461739604705354416587503836130151492937714365614194583664241</span><br>e1 = <span class="hljs-number">114552459553730357961013268333698879659007919035942930313432809776799669181481660306531243618160127922304264986001501784564575128319884991774542682853466808329973362019677284072646678280051091964555611220961719302320547405880386113519147076299481594997799884384012548506240748042365643212774215730304047871679706035596550898944580314923260982768858133395187777029914150064371998328788068888440803565964567662563652062845388379897799506439389461619422933318625765603423604615137217375612091221578339493263160670355032898186792479034771118678394464854413824347305505135625135428816394053078365603937337271798774138959</span><br>e2 = <span class="hljs-number">27188825731727584656624712988703151030126350536157477591935558508817722580343689565924329442151239649607993377452763119541243174650065563589438911911135278704499670302489754540301886312489410648471922645773506837251600244109619850141762795901696503387880058658061490595034281884089265487336373011424883404499124002441860870291233875045675212355287622948427109362925199018383535259913549859747158348931847041907910313465531703810313472674435425886505383646969400166213185676876969805238803587967334447878968225219769481841748776108219650785975942208190380614555719233460250841332020054797811415069533137170950762289</span><br>c = <span class="hljs-number">6472367338832635906896423990323542537663849304314171581554107495210830026660211696089062916158894195561723047864604633460433867838687338370676287160274165915800235253640690510046066541445140501917731026596427080558567366267665887665459901724487706983166070740324307268574128474775026837827907818762764766069631267853742422247229582756256253175941899099898884656334598790711379305490419932664114615010382094572854799421891622789614614720442708271653376485660139560819668239118588069312179293488684403404385715780406937817124588773689921642802703005341324008483201528345805611493251791950304129082313093168732415486813</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1000</span>):<br>    alpha2 = i/<span class="hljs-number">1000</span><br>    M1 = <span class="hljs-built_in">int</span>(gmpy2.mpz(N)**<span class="hljs-number">0.5</span>)<br>    M2 = <span class="hljs-built_in">int</span>( gmpy2.mpz(N)**(<span class="hljs-number">1</span>+alpha2) )<br>    D = diagonal_matrix(ZZ, [N, M1, M2, <span class="hljs-number">1</span>])<br>    B = Matrix(ZZ, [ [<span class="hljs-number">1</span>, -N,   <span class="hljs-number">0</span>,  N**<span class="hljs-number">2</span>],<br>                 [<span class="hljs-number">0</span>, e1, -e1, -e1*N],<br>                 [<span class="hljs-number">0</span>,  <span class="hljs-number">0</span>,  e2, -e2*N],<br>                 [<span class="hljs-number">0</span>,  <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>, e1*e2] ]) * D<br>    L = B.LLL()<br>    v = Matrix(ZZ, L[<span class="hljs-number">0</span>])<br>    x = v * B**(-<span class="hljs-number">1</span>)<br>    phi = (x[<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]/x[<span class="hljs-number">0</span>,<span class="hljs-number">0</span>]*e1).floor()<br>    <span class="hljs-keyword">try</span>:<br>        d = inverse_mod( <span class="hljs-number">65537</span>, phi)<br>        m = long_to_bytes(power_mod(c, d, N))<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;GWHT&#x27;</span> <span class="hljs-keyword">in</span> m <span class="hljs-keyword">or</span> <span class="hljs-string">b&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> m:<br>            <span class="hljs-built_in">print</span>(i)<br>            <span class="hljs-built_in">print</span>(m)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-keyword">pass</span><br><br></code></pre></td></tr></table></figure><hr><p>参考：</p><p><a href="https://dunkirkturbo.github.io/2020/05/04/WriteUp-De1CTF2020-Crypto/howgrave-graham1999.pdf">Extending Wiener’s Attack in the Presence of Many Decrypting Exponents</a></p><p><a href="https://lazzzaro.github.io/2020/05/06/crypto-RSA/#%E5%A4%9A%E7%BB%84%E4%BD%8E%E8%A7%A3%E5%AF%86%E6%8C%87%E6%95%B0%E6%94%BB%E5%87%BB">RSA | Lazzaro (lazzzaro.github.io)</a></p><p><a href="https://4xwi11.github.io/posts/1b1ce809/?highlight=simple#Extending-Wiener%E2%80%99s-Attack">Wiener’s Attack | 4XWi11’s Blog</a></p>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RSA</tag>
      
      <tag>Wiener&#39;s Attack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022-巅峰极客-网络安全技能挑战赛</title>
    <link href="/2022/08/20/2022-%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <url>/2022/08/20/2022-%E5%B7%85%E5%B3%B0%E6%9E%81%E5%AE%A2-%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="point-power"><a href="#point-power" class="headerlink" title="point-power"></a>point-power</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secrets <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag)==<span class="hljs-number">42</span><br>p=getPrime(<span class="hljs-number">600</span>)<br>a=bytes_to_long(flag)<br>b=randrange(<span class="hljs-number">2</span>,p-<span class="hljs-number">1</span>)<br>E=EllipticCurve(GF(p),[a,b])<br>G=E.random_element()<br><br>x1,y1,_=G<br>G=<span class="hljs-number">2</span>*G<br>x2,y2,_=G<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;p = <span class="hljs-subst">&#123;p&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;b = <span class="hljs-subst">&#123;b&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;x1 = <span class="hljs-subst">&#123;x1&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;x2 = <span class="hljs-subst">&#123;x2&#125;</span>&quot;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">p = 3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623</span><br><span class="hljs-string">b = 1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147</span><br><span class="hljs-string">x1 = 2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740</span><br><span class="hljs-string">x2 = 1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>椭圆曲线基础知识</p><p>一般方程：$ y^2&#x3D;x^3+ax+b $ (忘记了左边是平方，搞了蛮久还不知道自己错哪了)</p><p>因为有$(x2,y2)&#x3D;2(x1,y1)$，所以可以连立方程</p><p>有如下等式<br>$$<br>\begin{cases} y_1^2&#x3D;x_1^2+ax_1+b\\<br>y_2^2&#x3D;x_2^2+ax_2+b\\<br>k&#x3D;\dfrac{3x_1^2+a}{2y_1}\\<br>x_2&#x3D;-2x_1+k^2 \end{cases}<br>$$<br>化简有<br>$$<br> 4(x_1^3+ax_1+b)(2x_1+x_2)-(3x_1^2+a)&#x3D;0<br>$$<br>在$GF(p)$上解该方程即可得到 $a$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>p = <span class="hljs-number">3660057339895840489386133099442699911046732928957592389841707990239494988668972633881890332850396642253648817739844121432749159024098337289268574006090698602263783482687565322890623</span><br>b = <span class="hljs-number">1515231655397326550194746635613443276271228200149130229724363232017068662367771757907474495021697632810542820366098372870766155947779533427141016826904160784021630942035315049381147</span><br>x1 = <span class="hljs-number">2157670468952062330453195482606118809236127827872293893648601570707609637499023981195730090033076249237356704253400517059411180554022652893726903447990650895219926989469443306189740</span><br>x2 = <span class="hljs-number">1991876990606943816638852425122739062927245775025232944491452039354255349384430261036766896859410449488871048192397922549895939187691682643754284061389348874990018070631239671589727</span><br>R.&lt;a&gt; = PolynomialRing(Zmod(p), implementation=<span class="hljs-string">&#x27;NTL&#x27;</span>)<br><br>f = <span class="hljs-number">4</span>*(<span class="hljs-number">2</span>*x1+x2)*(x1^<span class="hljs-number">3</span> + a*x1 + b) - (<span class="hljs-number">3</span>*x1^<span class="hljs-number">2</span>+a)^<span class="hljs-number">2</span><br>f = f.monic()<br>root = f.roots()<br><span class="hljs-built_in">print</span>(root)<br><span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> root:<br>    m = <span class="hljs-built_in">int</span>(each[<span class="hljs-number">0</span>])<br>    <span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h1 id="strange-curve"><a href="#strange-curve" class="headerlink" title="strange curve"></a>strange curve</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secrets <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">P,Q</span>):<br>    (x1,y1)=P<br>    (x2,y2)=Q<br><br><br>    x3=(x1+x2)*(<span class="hljs-number">1</span>+y1*y2)*invert((<span class="hljs-number">1</span>+x1*x2)*(<span class="hljs-number">1</span>-y1*y2),p)%p<br>    y3=(y1+y2)*(<span class="hljs-number">1</span>+x1*x2)*invert((<span class="hljs-number">1</span>-x1*x2)*(<span class="hljs-number">1</span>+y1*y2),p)%p<br><br>    <span class="hljs-keyword">return</span> (x3,y3)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mul</span>(<span class="hljs-params">e,P</span>):<br>    Q=(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>)<br>    e=e%p<br>    <span class="hljs-keyword">while</span> e:<br>        <span class="hljs-keyword">if</span> e&amp;<span class="hljs-number">1</span>:<br>            Q=add(Q,P)<br>        P=add(P,P)<br>        e&gt;&gt;=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> Q<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Legendre</span>(<span class="hljs-params">a,p</span>):<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">pow</span>((a%p+p)%p,(p-<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>,p))%p<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_ts</span>(<span class="hljs-params">p</span>):<br>    p=p-<span class="hljs-number">1</span><br>    count=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> p%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:<br>        count+=<span class="hljs-number">1</span><br>        p=p//<span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> count,p<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_nonre</span>(<span class="hljs-params">p</span>):<br>    a=random.randint(<span class="hljs-number">1</span>,p)<br>    <span class="hljs-keyword">while</span> Legendre(a,p)==<span class="hljs-number">1</span>:<br>        a=random.randint(<span class="hljs-number">1</span>,p)<br>    <span class="hljs-keyword">return</span> a<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">amm2</span>(<span class="hljs-params">a,p</span>):<br>    t,s=get_ts(p)<br>    ta=<span class="hljs-built_in">pow</span>(get_nonre(p),s,p)<br>    tb=<span class="hljs-built_in">pow</span>(a,s,p)<br>    h=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,t):<br>        d=<span class="hljs-built_in">pow</span>(tb,<span class="hljs-number">2</span>**t-<span class="hljs-number">1</span>-i,p)<br>        <span class="hljs-keyword">if</span> d==<span class="hljs-number">1</span>:<br>            k=<span class="hljs-number">0</span><br>        <span class="hljs-keyword">else</span>:<br>            k=<span class="hljs-number">1</span><br>        tb=(tb*<span class="hljs-built_in">pow</span>(ta,<span class="hljs-number">2</span>*k,p))%p<br>        h=(h*<span class="hljs-built_in">pow</span>(ta,k,p))%p<br>        ta=<span class="hljs-built_in">pow</span>(ta,<span class="hljs-number">2</span>,p)<br>    <span class="hljs-keyword">return</span> h*<span class="hljs-built_in">pow</span>(a,(s+<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>,p)%p  <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>(<span class="hljs-params">a,b,c,p</span>):<br>    tmpa=<span class="hljs-number">1</span><br>    tmpb=b*inverse(a,p)%p<br>    tmpc=c*inverse(a,p)%p<br>    <span class="hljs-keyword">assert</span> Legendre(tmpb**<span class="hljs-number">2</span>*inverse(<span class="hljs-number">4</span>,p)-tmpc,p)==<span class="hljs-number">1</span><br>    res1=(amm2(tmpb**<span class="hljs-number">2</span>*inverse(<span class="hljs-number">4</span>,p)-tmpc,p)-tmpb*inverse(<span class="hljs-number">2</span>,p))%p<br>    res2=(-amm2(tmpb**<span class="hljs-number">2</span>*inverse(<span class="hljs-number">4</span>,p)-tmpc,p)-tmpb*inverse(<span class="hljs-number">2</span>,p))%p<br>    <span class="hljs-keyword">return</span> (res1,res2)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">lift</span>(<span class="hljs-params">x,a,b,p</span>):<br>    tmp=b*(x**<span class="hljs-number">2</span>-<span class="hljs-number">1</span>)*inverse(a*x,p)%p<br>    <span class="hljs-keyword">return</span> solve(<span class="hljs-number">1</span>,-tmp,-<span class="hljs-number">1</span>,p)[<span class="hljs-number">0</span>]<br><br>p=<span class="hljs-number">9410547699903726871336507117271550134683191140146415131394654141737636910570480327296351841515571767317596027931492843621727002889086193529096531342265353</span><br>a=<span class="hljs-number">54733430689690725746438325219044741824500093621550218736194675295708808435509</span><br>b=<span class="hljs-number">75237024593957256761258687646797952793573177095902495908321724558796076392871</span><br>x=bytes_to_long(flag)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        y=lift(x,a,b,p)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">except</span>:<br>        x+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">continue</span><br><br><span class="hljs-keyword">assert</span> a*x*(y**<span class="hljs-number">2</span>-<span class="hljs-number">1</span>)%p == b*y*(x**<span class="hljs-number">2</span>-<span class="hljs-number">1</span>)%p<br><br>P=(x,y)<br>e=<span class="hljs-number">65537</span><br><br>eP=mul(e,P)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;P = <span class="hljs-subst">&#123;P&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;eP = <span class="hljs-subst">&#123;eP&#125;</span>&quot;</span>)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">P = (56006392793427940134514899557008545913996191831278248640996846111183757392968770895731003245209281149, 5533217632352976155681815016236825302418119286774481415122941272968513081846849158651480192550482691343283818244963282636939305751909505213138032238524899)</span><br><span class="hljs-string">eP = (mpz(8694229840573103722999959579565187489450818138005222030156495740841851804943200684116883831426548909867463656993852596745698999492932194245562062558787005), mpz(9279986963919197374405152604360936066932975197577643570458423456304679111057526702737279809805694360981565554506626018364382736924914907001214909905449002))</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>    <br></code></pre></td></tr></table></figure><p>非预期解。根据下面代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    <span class="hljs-keyword">try</span>:<br>        y=lift(x,a,b,p)<br>        <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">except</span>:<br>        x+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">continue</span><br></code></pre></td></tr></table></figure><p>所以我们只要对 $x$ 往下爆破就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>m = <span class="hljs-number">56006392793427940134514899557008545913996191831278248640996846111183757392968770895731003245209281149</span><br><span class="hljs-keyword">while</span> m!=<span class="hljs-number">0</span>:<br>    flag = long_to_bytes(m)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>        <span class="hljs-built_in">print</span>(flag)<br>        <span class="hljs-keyword">break</span><br>    m -= <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h1 id="learning-with-fault"><a href="#learning-with-fault" class="headerlink" title="learning_with_fault"></a>learning_with_fault</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secrets <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RSA</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,p,q,e</span>):<br>        self.p=p<br>        self.q=q<br>        self.e=e<br>        self.phi=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>        self.d=invert(self.e,self.phi)<br>        self.dp=self.d%(p-<span class="hljs-number">1</span>)<br>        self.dq=self.d%(q-<span class="hljs-number">1</span>)<br>        self.n=p*q<br>        self.N=getPrime(<span class="hljs-number">512</span>)*getPrime(<span class="hljs-number">512</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">sign</span>(<span class="hljs-params">self,message</span>):<br>        m=bytes_to_long(message)<br>        sig_p=<span class="hljs-built_in">pow</span>(m,self.dp,self.p)<br>        sig_q=<span class="hljs-built_in">pow</span>(m,self.dq,self.q)<br>        alpha=q*invert(q,p)<br>        beta=p*invert(p,q)<br>        <span class="hljs-keyword">return</span> long_to_bytes((alpha*sig_p+beta*sig_q)%self.n)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">corrupt_sign</span>(<span class="hljs-params">self,message</span>):<br>        m=bytes_to_long(message)<br>        sig_p=<span class="hljs-built_in">pow</span>(m,self.dp,self.p)<br>        sig_q=<span class="hljs-built_in">pow</span>(m,self.dq,self.q)<br>        alpha=q*invert(q,p)<br>        beta=p*invert(p,q)<br>        <span class="hljs-keyword">return</span> long_to_bytes((alpha*sig_p+beta*sig_q)%self.N)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">verify</span>(<span class="hljs-params">self,message,sign</span>):<br>        <span class="hljs-keyword">return</span> long_to_bytes(<span class="hljs-built_in">pow</span>(bytes_to_long(sign),self.e,self.n)) == message<br><br>p=getPrime(<span class="hljs-number">512</span>)<br>q=getPrime(<span class="hljs-number">512</span>)<br>e=<span class="hljs-number">65537</span><br>rsa=RSA(p,q,e)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;sign.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f1:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;corrupted_sign.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f2:<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>            message=os.urandom(<span class="hljs-number">64</span>)<br>            sign=rsa.sign(message)<br>            corrupted_sign=rsa.corrupt_sign(message)<br>            <span class="hljs-keyword">assert</span> rsa.verify(message,sign)<br>            f1.write(<span class="hljs-built_in">str</span>(sign)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br>            f2.write(<span class="hljs-built_in">str</span>(corrupted_sign)+<span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>enc=<span class="hljs-built_in">pow</span>(bytes_to_long(flag),rsa.e,rsa.n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;rsa.n&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;N = <span class="hljs-subst">&#123;rsa.N&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;e = <span class="hljs-subst">&#123;rsa.e&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;enc = <span class="hljs-subst">&#123;enc&#125;</span>&quot;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 99670316685463632788041383175090257045961799409733877510733415402955763322569510896091638507050126669571444467488936880059210773298729542608112756526719533574432327269721804307073353651955251188547245641771980139488000798458617636759823027148955008149512692983471670488580994385743789385091027299901520585729</span><br><span class="hljs-string">N = 81332992898551792936282861980393365170738006789835182134055801566584228471896473385776004610279937176800796971820133195300006470892468060034368863410462219133248069442508287516929262751427926825122839525496671527936622212986733708071962237633082743396115729744192159064241674410003857168101669882043743570731</span><br><span class="hljs-string">e = 65537</span><br><span class="hljs-string">enc = 2476965183785968993595493003363618829317072815989584886372189393899395623714779397354978469504773556228655475355703015337932838278988328384587983506790841663233499939173166353582189202860394411808445422387063648198432242875738065748287034529713834303346017134249834382745931627301273142828893469374138264396</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>踏破铁鞋无觅处，得来全不费功夫。还得是La佬的博客香！😭</p><p><a href="https://lazzzaro.github.io/2020/05/06/crypto-RSA/#RSA-CRT">RSA | Lazzaro (lazzzaro.github.io)</a></p><p>论文参考：<a href="https://eprint.iacr.org/2011/388.pdf">CMBX12 (iacr.org)</a></p><p>看完之后并不是很懂（太菜了）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">import</span> gmpy2,sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">orthogonal_lattice</span>(<span class="hljs-params">B</span>):<br>    LB = B.transpose().left_kernel(basis=<span class="hljs-string">&quot;LLL&quot;</span>).basis_matrix()<br>    <span class="hljs-keyword">return</span> LB<br><br>n = <span class="hljs-number">99670316685463632788041383175090257045961799409733877510733415402955763322569510896091638507050126669571444467488936880059210773298729542608112756526719533574432327269721804307073353651955251188547245641771980139488000798458617636759823027148955008149512692983471670488580994385743789385091027299901520585729</span><br>N = <span class="hljs-number">81332992898551792936282861980393365170738006789835182134055801566584228471896473385776004610279937176800796971820133195300006470892468060034368863410462219133248069442508287516929262751427926825122839525496671527936622212986733708071962237633082743396115729744192159064241674410003857168101669882043743570731</span><br>e = <span class="hljs-number">65537</span><br>enc = <span class="hljs-number">2476965183785968993595493003363618829317072815989584886372189393899395623714779397354978469504773556228655475355703015337932838278988328384587983506790841663233499939173166353582189202860394411808445422387063648198432242875738065748287034529713834303346017134249834382745931627301273142828893469374138264396</span><br><br>cs_ = [<br>    <span class="hljs-string">b&quot;\x17\x8bb3\x11\x1b\xb9\xb9\xc6M\xb0\xaa\x07-\x1ar\xff\xfb\xb4&amp;H7!\xb8\xa1\xce\x07\x8b\x84M\x0bw=m\x193Oc\x97w\x8f\xffy4\xa1\x99\xfcW\xf9|\xeb\xa4\x00\x1eD*\xe8-&#x27;\xa9\xef\x9d\x13*\xf4\xbe\x9d\x9b&amp;w\xcb\xfd\xb3\xb6\xa3n\xb8\xb4\x97vT\xec@\x86\xd1R\xb0\n\xe1uC\xbc\x14\xeb\xceSu&amp;&#x27;&#123;\xb9\x12\x90\x82\xc7,\xdbr\xebP\xe1j\x11E\xd5\x17\xe1\xd0D\xe7z\x94vt\xbf\x1a\xc4+&quot;</span><br>    ,<span class="hljs-string">b&#x27;\x1dJ\xc5\xb2\xbe\x05\xe6\xc8T\n\xbe&quot;\xbeU\xed\xba\xec\x85\x05\x8b\x8ayE\xa3&#125;0\x1dk\xa7\x10\xe2E\x19\xfe\x10\x90\xef\r\xdbV\x8b\x87|(\xd1\xb5\xfd\xb9\x14\x84\x05\x03\x81\xc8\xf6\xe5\x8a\x92\xa0\x01I\x8aG:\xc19\x9e\xf0\x8eZ\\Yx\x80|\xb7\x80\x0e\xcd\xa3\xba6\xf8\x98\xb1pB\x05\x8aT#\xbf\x1e\x1b~\xcb\xf5\t\xa2H9\xc9n\x81e\xa2\x15\x97\x11\xe4\x93\xf2\xe6\x80\x97\x99G\xb5\xfe\x07/\xd2\xbd\xad\xcf\x04\x9e\xd0&#x27;</span><br>    ,<span class="hljs-string">b&#x27;Gs\xda\xb8\x8a\x85\xccK\xf7\xa8y\x16\xa5\xf0\x06\xbe\xeb\x83&amp;&#125;a\x85q\x8d:\x1fSb\xb8\xc5\x84\xba*[\xe7\xbb&#123;\x86\xd3\xb3r\xb6\xaaCN\x93\x1d&lt;(\xe2\x1c;\x8crU\x8fD=W\xa7\x0b\xc7\xeag\x96\x06\xd6\xbb\xe4\x04b\xd8\x02\x12\xd6\xfa2\x1e#\xf0\xde\x8b\x88M\xd2\xf47\\\x98\xe0\x04Fu\x1bsy\xf2\xc4\xad\xd6Y\x81u~B:\xd2\x1f\xb3\xab\x01:\xfa\xdf\x19J8\xd0\x18RN\xfe,CA\x15\xb3\xe0&#x27;</span><br>    ,<span class="hljs-string">b&quot;0I\xda5\x9f\x05v\x17\xdc\xd4q\xd6\x83,\x9d\r\xccc\x8a\xa1\xd4U\xd3\x18\xc9\xc6g\xcd\nX\x99Ah\xed&#125;\xf3\xb1(\xd5I\xc6\x0f@yw9\x9d\xfdv\x15x\xeaRA\xd6\xb0\x1e\xb5B\xe5\x05cc\x06m\xf4NN&#x27;\x02q\x1a\x11\xe4\x87P:\xc8\x11a\x9f\xbd\x9c\x98x\xda\xea\xc4\xa8f\x89s\xcaJ\x7f\xeb\xd8\xc1G#\xf4\xdc\xe2\x01\xf2\xa5\x95\x19`)2!\xf5\xb9\xf0\xf2\xbb\xf8\x0bF&amp;&amp;`\xfd*\xe1\xf2\x9c&quot;</span><br>    ,<span class="hljs-string">b&#x27;:\x99/Hxt\xd1\xd4\xaaB\xd6H\x16\xe1\xc9\xe2\xb3\xc3\xa9b\xd3\x96\x9c\x05x6\xf1\xc3d\xa2\xd1U+.\x1b\xac^\xf6Mh7\xb7\x03\x8e\xdc\xca\x0bn\xac\xed\x92\xb8x\x04)\x0f|\x11\xcc\xfa\xf2\\\xba\xee\xc4X\xa8(\x05\xf2\xb5\x8f&amp;\xf3\xff\x1eB\xe7\x94\xf4\xa6\x00!\xe5v\xd9x\xf0s\x94\xf4D(\xa9g\x118\xa7z\x83\xad\xdb\xe6\xe3\xe7\xf8\xf2\xef\xe5@\xe9\x13\x00OB\xcc\x05\xd1,_=\xd2/Og\x81\xa6+&#x27;</span><br>    ,<span class="hljs-string">b&#x27;\x1c|\xb6\xcc\xdfj\xc5\xa0s\xac w\xa6\xf2\x87D\xe3\xf9Y\xf5=\xf0\x0b\xd9\xea\x89,+e\x1e\xb7m#\x99\xd1\x87\x17Z\xed\x1d\xc8\x97;\xa0K\x05.\xaa&lt;\xc6s\xcf\xa2\xa2\\PO\x12&amp;\xb4\x11\xec\xad\x10\xf8\xf7\xd1\xd3_\x80\x17\xe0\x1eP\x93\xe3\xc2\x1e\x03\xea]^\xc6a\x9c\xcb\x90\xbb\x9f\x8by\xa5dhM\xce\xc7\xbc\xf7\xafe\xcf\xc1\xf1\x18@\x1e\xe2\xdb\xfb\xe4^\xc8\xe7\x19\xccnY\xc6o\x7fL\x9fV\xd4\xc4\x15\xe8&#x27;</span><br>]<br>s_ = [<br>    <span class="hljs-string">b&#x27;\t\x8b\xde\x98\x84\x1d\x9e\xd4\xa0\xb7f\xe0\x05\xb1\xbd8\xb9G\xe3\x0c\x83\x8a\xe5\xf0G7\x12\x1eT\x85o-B\xe4_\xd2\x04\xd9:\xab\xdf\xa1 \x8f\xedt+\x0f\xce\xb5\x90\xaaK\xf0U~v=\x84\xe7$G\xf5\xfb\xd3ok~V\x1a\xec&amp;\x15\x18Y\x0c\x80u\xafF\xf1\x10\x9f\xf2\xe6\xa6\x9a\xbb\xbd+\xa4l\xa9\x11\xd5\t\x13\x16\xa3\xde\xe1\xdfZ\xa9$r\xb5`\xc9&quot;\x11\xab\xc5\x87\xc4\x1d@\x9e\xa4t\xdb#\xbdj\xcb\x95\xefK&#x27;</span><br>    ,<span class="hljs-string">b&#x27;z/\xd6\xfb\xd8\xfa\xc4\xed\xbd\x99\xd0\xa0\x90\xcb\xca\x83\xd8B\xa7\xf4\xbd\xe0\xc2&amp;\x1aQl(\xd6p\x8f\x89=tT\xf1(\xeb\xab\x84[oR\x1fl=\xda\xf5\x18q\x8f\xa7k\x00\x1b\x1a\x0ei\x1fa.ho\x15\x04\x12\xe4\xc2\xd7\x19\x92\xc3\x9b\xfe\xd5\xb6R\xf8\x95\x9fr\x93\xddD\x1c[\x873\xd5\x06\x1b\xa5\x82/6\x9a\x13\xcf\xa4\xcd\x0e]\t\xad?\xd6\x84\r\x90\xef\x86\xf15)\xe34\xf7\xb77\xef\x0c&amp;\xdb8\xa6\xe0\xa5a&#x27;</span><br>    ,<span class="hljs-string">b&#x27;U\x0b\xf6\x9cm])1\xe2\xad\xf9G\x8f\xa2\xbc&#125;\xd7\x18\x89\xa4\xfdFQ\x80m&quot;\xf9\to^\xd9A\x98\xd2\xca\x1e(b\xa8\xbe\xc2m\xf7\n[O\x00\xbc\x87\x17\xed\x0cG\xf2=H\x0e\xc0\x14+\xcb\xd0\x1feT2\xf2Th\xec\xc2\xcf&gt;6,&lt;\x88X\x8f\xe9g\xa8\x00\xafr\x05\x95\rj\x9c\xc6\n\xbb\x8a\x019\xc1\x1ef#\x02[Rh\xd8\xdc|&#123;6\xeb\xe8U\x91\xa4\xeb&#125;\xf4s;E\xe72$i\xdft\xff\&#x27;&#x27;</span><br>    ,<span class="hljs-string">b&#x27;[\x94\x95T\xf4\xc4\xca\x8drO\x80\x14\xc9&lt;H\xa2a\xdc\xf4`\xac&gt;\xab\x03\xfa\x80Sx\x99\x14\x83$U\x0b\xfa\x8fv\xfd\xda\x1a\xa0\xebY\xaa\x01\xe2XsG\t\xcf\xae\xa0\xbf\x82iG\tQ \xb1\xfe\xa5k\x12\xd9\x12\xf7\x95\xa3\xa5\x8d`z\x19\x1a\x90-\x9aj\x15\xf6f&gt;\x18\x08\xb8\x1f\x88\x1a\x80Th\xd0\x15\x9bw#\&#x27;`K\xa5\xf1\xbf&quot;\xe79\xaf\xc7z%p\xa5\x9f\x14\xef\&#x27;1\x11\x05Gg\xe9\xda\xc9\x18~[&#x27;</span><br>    ,<span class="hljs-string">b&#x27;:\xefRE\xd7\xa1?\xf3\xb5\xf7\xdd\xe2\xb6~\x85014\xc0\x8a\x80\xe1\xb5#\x94\x10\xb2\xa0\xfe\x87\xd1t\xc3$&amp;\xde8\x195\xcd\xf4@3\x15\xcaK\xcc\xcd\r:\x83*\xd7l\xb6\xf2&#125; \tJ\xb5xKfjh.\xfb\xb5\x91\xc6\xf2x\x8e\x83\xdc\xc3\xef\x8b\x8dW\xa6\xa6\xb0w\xd8\xf2G\xa5-\xc3\x87\x17;\xedH`:\xcd\x08ts\x9eqPE\xd7\xfc\xc4\x98\xb5\xe0\xad\xb7A\x7f\xcb\x01\xbd\x98\xd3Ea\xb9\x07\x80\xf8\x19&#x27;</span><br>    ,<span class="hljs-string">b&quot;8\xca\x7f!;\\\xde\x1b\x80i\x9b!\x1c??u\x13\x955\xd0xG\xff\xd7\xba\xfe+\x95\x0eu^\x15\x1a\x0e*\xfe\x8a\xafM\xc0\xd1Ty\xd7\xf1\xa7@\xd6\xa6\xee\x0c:It\x1a\xeag\xfc\x0c\xaf\x02&lt;\x03T)\xeb\xb0\x15\x1cz\x85\x992\xa9\xbe\x9bm\xc4D\x83\xf7\xb5T\xdd9?\x94\xd4\x13\xb4\xb3\x8d\xa9\x92\x9dt\x86\xdb\x0b$\x19l\xb1\xb9\x05&#x27;o\xf3!\t\x01\x93&#x27;z\x15P\x88\xd7iN\n\x8bA\xb5\xd2&#125;\xe8\x10&quot;</span><br>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">6</span>):<br>    s_[i] = bytes_to_long(s_[i])<br>    cs_[i] = bytes_to_long(cs_[i])<br><br>l = <span class="hljs-number">6</span><br><br>v = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(cs_)):<br>    v.append(<span class="hljs-built_in">int</span>(crt([s_[i], cs_[i]], [n, N])))<br>    <br>v = vector(ZZ, v)<br>Lv = orthogonal_lattice(Matrix(v))<br>L1 = orthogonal_lattice(Lv.submatrix(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, l-<span class="hljs-number">2</span>, l))<br>x, y = L1<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">333</span>)):<br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(<span class="hljs-number">333</span>)):<br>        z = a*x+b*y<br>        <span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> (v-z):<br>            tmp =  gcd(each,n)<br>            <span class="hljs-keyword">if</span> tmp&gt;<span class="hljs-number">1</span>:<br>                p = tmp<br>                <span class="hljs-built_in">print</span>(p)<br>                q = n//p<br>                <span class="hljs-keyword">assert</span> p*q == n<br>                phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>                d = gmpy2.invert(e,phi)<br>                m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(enc,d,n))<br>                <span class="hljs-built_in">print</span>(long_to_bytes(m))<br>                sys.exit()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ECC</tag>
      
      <tag>RSA-CRT Fault Attack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第六届“强网杯”全国网络安全挑战赛  线上赛</title>
    <link href="/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E2%80%9C%E5%BC%BA%E7%BD%91%E6%9D%AF%E2%80%9D%E5%85%A8%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%91%E6%88%98%E8%B5%9B-%E7%BA%BF%E4%B8%8A%E8%B5%9B/"/>
    <url>/2022/08/04/%E7%AC%AC%E5%85%AD%E5%B1%8A%E2%80%9C%E5%BC%BA%E7%BD%91%E6%9D%AF%E2%80%9D%E5%85%A8%E5%9B%BD%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8C%91%E6%88%98%E8%B5%9B-%E7%BA%BF%E4%B8%8A%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="polydiv"><a href="#polydiv" class="headerlink" title="polydiv"></a>polydiv</h1><p>4位哈希爆破 + 手撸40遍求b(x) （sagemath上下载pwn库报错）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#4位哈希爆破</span><br>part = <span class="hljs-string">&#x27;dSyotqgg1qNFrKru&#x27;</span><br>hashstr = <span class="hljs-string">&#x27;3c678965931a61af1a4950bb0da7fc02980bbf4524dbff107a941aabccc8bf8e&#x27;</span><br><br>table = string.ascii_letters+string.digits<br><br><span class="hljs-keyword">for</span> XXXX <span class="hljs-keyword">in</span> permutations(table, <span class="hljs-number">4</span>):<span class="hljs-comment">#全排列</span><br>    XXXX = <span class="hljs-string">&#x27;&#x27;</span>.join(XXXX)<br>    <span class="hljs-keyword">if</span>( sha256((XXXX + part).encode()).hexdigest() == hashstr ):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;XXXX = <span class="hljs-subst">&#123;XXXX&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br>        <br><span class="hljs-comment">#求b(x),因给出的系数都为1，故在Zmod(2)上求解</span><br>R.&lt;x&gt; = Zmod(<span class="hljs-number">2</span>)[]<br>r = <br>a = <br>c = <br><br><span class="hljs-built_in">print</span>((r-c)/(a))<span class="hljs-comment">#print((r-c).quo_rem(a))</span><br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031039767.png"/><h1 id="ASR"><a href="#ASR" class="headerlink" title="ASR"></a>ASR</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getPrime<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> falg<br>pad = <span class="hljs-keyword">lambda</span> s:s + <span class="hljs-built_in">bytes</span>([(<span class="hljs-built_in">len</span>(s)-<span class="hljs-number">1</span>)%<span class="hljs-number">16</span>+<span class="hljs-number">1</span>]*((<span class="hljs-built_in">len</span>(s)-<span class="hljs-number">1</span>)%<span class="hljs-number">16</span>+<span class="hljs-number">1</span>))<br><br>n = getPrime(<span class="hljs-number">128</span>)**<span class="hljs-number">2</span> * getPrime(<span class="hljs-number">128</span>)**<span class="hljs-number">2</span> * getPrime(<span class="hljs-number">128</span>)**<span class="hljs-number">2</span> * getPrime(<span class="hljs-number">128</span>)**<span class="hljs-number">2</span><br>e = <span class="hljs-number">3</span><br><br>flag = pad(flag)<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(flag) &gt;= <span class="hljs-number">48</span>)<br>m = <span class="hljs-built_in">int</span>.from_bytes(flag,<span class="hljs-string">&#x27;big&#x27;</span>)<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e = <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p><code>yafu</code>分解。<code>phi</code> 与 <code>e</code> 不互素，可以重组模数也可以在有限域上开根求<code>m_i</code>，再<code>CRT</code>组合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#Sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br>e = <span class="hljs-number">3</span><br>c = <span class="hljs-number">945272793717722090962030960824180726576357481511799904903841312265308706852971155205003971821843069272938250385935597609059700446530436381124650731751982419593070224310399320617914955227288662661442416421725698368791013785074809691867988444306279231013360024747585261790352627234450209996422862329513284149</span><br>p1 = <span class="hljs-number">225933944608558304529179430753170813347</span><br>p2 = <span class="hljs-number">223213222467584072959434495118689164399</span><br>p3 = <span class="hljs-number">260594583349478633632570848336184053653</span><br>p4 = <span class="hljs-number">218566259296037866647273372633238739089</span><br><br>P.&lt;x&gt;=PolynomialRing(Zmod(p1),implementation=<span class="hljs-string">&#x27;NTL&#x27;</span>)<br>f=x^e-c<br>root1=f.monic().roots()<br><br>P.&lt;x&gt;=PolynomialRing(Zmod(p2),implementation=<span class="hljs-string">&#x27;NTL&#x27;</span>)<br>f=x^e-c<br>root2=f.monic().roots()<br><br>P.&lt;x&gt;=PolynomialRing(Zmod(p3),implementation=<span class="hljs-string">&#x27;NTL&#x27;</span>)<br>f=x^e-c<br>root3=f.monic().roots()<br><br>P.&lt;x&gt;=PolynomialRing(Zmod(p4),implementation=<span class="hljs-string">&#x27;NTL&#x27;</span>)<br>f=x^e-c<br>root4=f.monic().roots()<br><br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> root1:<br>    x=a[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> root2:<br>        y=b[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> root3:<br>            z = c[<span class="hljs-number">0</span>]<br>            <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> root4:<br>                s = d[<span class="hljs-number">0</span>]<br>                solution = long_to_bytes(CRT_list([<span class="hljs-built_in">int</span>(x), <span class="hljs-built_in">int</span>(y),<span class="hljs-built_in">int</span>(z),<span class="hljs-built_in">int</span>(s)], [p1,p2,p3,p4]))<br>                <span class="hljs-keyword">if</span> solution.startswith(<span class="hljs-string">b&#x27;flag&#x27;</span>):<br>                    <span class="hljs-built_in">print</span>(solution)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = p2**2 * p3**2</span><br><span class="hljs-string">phi = p2*(p2-1)*p3*(p3-1)</span><br><span class="hljs-string">d = gmpy2.invert(e,phi)</span><br><span class="hljs-string">m = pow(c,d,n)</span><br><span class="hljs-string">print(long_to_bytes(m))</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>                    <br>                    <br></code></pre></td></tr></table></figure><h1 id="Factor"><a href="#Factor" class="headerlink" title="Factor"></a>Factor</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#encoding:utf-8</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen1</span>():<br>r = <span class="hljs-number">2</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>p2 = getPrime(<span class="hljs-number">1792</span>)<br>p1 = getPrime(<span class="hljs-number">1792</span>)<br><br>q1 = getPrime(<span class="hljs-number">512</span>)<br>q2 = getPrime(<span class="hljs-number">512</span>)<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">abs</span>(p1-p2) &lt; (p1//(<span class="hljs-number">2</span>*r*q1*q2))):<br>n1, n2 = (p1**r)*q1, (p2**r)*q2<br><span class="hljs-keyword">break</span><br><br>phi1 = (p1**(r-<span class="hljs-number">1</span>))*(p1-<span class="hljs-number">1</span>)*(q1-<span class="hljs-number">1</span>)<br>phi2 = (p2**(r-<span class="hljs-number">1</span>))*(p2-<span class="hljs-number">1</span>)*(q2-<span class="hljs-number">1</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>e1 = randint(<span class="hljs-number">5</span>, (p1-<span class="hljs-number">1</span>)*(q1-<span class="hljs-number">1</span>))<br>e2 = randint(<span class="hljs-number">5</span>, (p2-<span class="hljs-number">1</span>)*(q2-<span class="hljs-number">1</span>))<br><span class="hljs-keyword">if</span> gcd(e1, e2) == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> gcd(phi1, e1) == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> gcd(phi2, e2) == <span class="hljs-number">1</span>:<br><span class="hljs-keyword">break</span><br><span class="hljs-keyword">return</span> n11, n12, e11, e12<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen2</span>():<br>r = <span class="hljs-number">7</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>p = getPrime(<span class="hljs-number">512</span>)<br>q =getPrime(<span class="hljs-number">512</span>)<br>N = (p**r)*q<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(N)) == <span class="hljs-number">4096</span>:<br><span class="hljs-keyword">break</span><br><br>idx = (r*(r-<span class="hljs-number">1</span>)) / ((r+<span class="hljs-number">1</span>)*(r+<span class="hljs-number">1</span>))<br>delta = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(mpz(N), idx))<br>phi = (p**(r-<span class="hljs-number">1</span>))*(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>d1 = getPrime(<span class="hljs-built_in">int</span>(<span class="hljs-number">2048</span>*idx)//<span class="hljs-number">2</span>)<br>d2 = getPrime(<span class="hljs-built_in">int</span>(<span class="hljs-number">2048</span>*idx)//<span class="hljs-number">2</span>)<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">abs</span>(d1-d2) &lt; delta:<br>m1 = invert(d1, phi)<br>m2 = invert(d2, phi)<br><span class="hljs-keyword">break</span><br><br>e2 = <span class="hljs-number">0x10001</span><br><span class="hljs-keyword">return</span> n2, e2, m1, m2<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen3</span>():<br>r = <span class="hljs-number">7</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>p = getPrime(<span class="hljs-number">512</span>)<br>q =getPrime(<span class="hljs-number">512</span>)<br>N = (p**r)*q<br>phi = (p**(r-<span class="hljs-number">1</span>))*(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(N))-<span class="hljs-number">2</span> == <span class="hljs-number">4096</span>:<br><span class="hljs-keyword">break</span><br><br>idx = (r*(r-<span class="hljs-number">1</span>)) / ((r+<span class="hljs-number">1</span>)*(r+<span class="hljs-number">1</span>))<br>delta = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(mpz(N), idx))<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>b = getRandomNBitInteger(<span class="hljs-built_in">int</span>(<span class="hljs-number">2048</span>*idx)//<span class="hljs-number">2</span>)<br>a = getRandomNBitInteger(<span class="hljs-built_in">int</span>(<span class="hljs-number">2048</span>*idx)//<span class="hljs-number">2</span>)<br><span class="hljs-keyword">if</span> a*b &lt; delta:<br>e = invert(a, phi)*b<br><span class="hljs-keyword">return</span> n3, e3, b<br><br><br>n11, n12, e11, e12 = gen1()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n11=<span class="hljs-subst">&#123;n11&#125;</span>\nn12=<span class="hljs-subst">&#123;n12&#125;</span>\ne11=<span class="hljs-subst">&#123;e11&#125;</span>\ne12=<span class="hljs-subst">&#123;e12&#125;</span>\n&quot;</span>)<br>n2, e2, m1, m2 = gen2()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n2=<span class="hljs-subst">&#123;n2&#125;</span>\ne2=<span class="hljs-subst">&#123;e2&#125;</span>\n&quot;</span>)<br>n3, e3, b = gen3()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n3=<span class="hljs-subst">&#123;n3&#125;</span>\ne3=<span class="hljs-subst">&#123;e3&#125;</span>\n&quot;</span>)<br><br>m3 = bytes_to_long(flag)<br>c11 = powmod(m1, e11, n11)<br>c12 = powmod(m2, e12, n12)<br>c2 = powmod(b, e2, n2)<br>c3 = powmod(m3, e3, n3)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c11=<span class="hljs-subst">&#123;c11&#125;</span>\nc12=<span class="hljs-subst">&#123;c12&#125;</span>\nc2=<span class="hljs-subst">&#123;c2&#125;</span>\nc3=<span class="hljs-subst">&#123;c3&#125;</span>\n&quot;</span>)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n11=801049932940568005269978912396585741498810389425615966036828877784238116634177290247194019425111606811005728521368879065336038221361037062407029836155148874719789714345603547779284558101833801155509762818376470874215789574939002212274399950433269775325144015468620263028557804618774240232988157961712628677901130814703917513004114547234375629747176834581166306552311075522669403347828095831520693563291249869832390698646691647204371133362254846234990175138047928703289833460734235302093916147489509206061923877623300596194317059884824322527532662470348274079800781120104946546063500763852622187404608639542858285661288293918912184354236687975919510300221932074135531028314170475917110204254042336116619335841213418990605590620842511615815443114612333881430920769002933370887494558640833005339906706603497809846863863967391543647049224309556936909768179259581851520214669904560467640473144481633920438487615788689262961741053146610554997224861331949716721056553499531186695425439163222802917813140266513735841447717418846360096652592844940362932171019143434080184728093326143821165097895058935372215708948088248596585127475770021962501262915274497478428868130455122612016408381607561200802267038869516896665387576895570245272035575637</span><br><span class="hljs-string">nspan><br><span class="hljs-string">e11=1898839980562048754607069073527844852132536432440793106124181406514770178066775988232362054809850074774981836898118651469424148725970708199461113088705044905633592578936333918328544505910996746428679299419879472444790941363558025887620570856598548320246426354974395765243741646121743413447132297230365355148066914830856904433750379114692122900723772114991199979638987571559860550883470977246459523068862898859694461427148626628283198896659337135438506574799585378178678790308410266713256003479022699264568844505977513537013529212961573269494683740987283682608189406719573301573662696753903050991812884192192569737274321828986847640839813424701894578472933385727757445011291134961124822612239865</span><br><span class="hljs-string">e12=1262647419018930022617189608995712260095623047273893811529510754596636390255564988827821761126917976430978175522450277907063247981106405519094560616378241247111698915199999363948015703788616554657275147338766805289909261129165025156078136718573006479030827585347458143645738353716189131209398056741864848486818076440355778886993462012533397208330925057305502653219173629466948635110352752162442552541812665607516753186595817376029707777599029040724727499952161261179707271814405907165207904499722122779096230563548011491932378429654764486855147873135769116637484240454596231092684424572258119768093562747249251518965380465994055049411715353547147466711949391814550591591830515262296556050946881</span><br><span class="hljs-string"></span><br><span class="hljs-string">nspan><br><span class="hljs-string">e2=65537</span><br><span class="hljs-string"></span><br><span class="hljs-string">nspan><br><span class="hljs-string">espan><br><span class="hljs-string"></span><br><span class="hljs-string">cspan><br><span class="hljs-string">cspan><br><span class="hljs-string">cspan><br><span class="hljs-string">cspan><br><span class="hljs-string"></span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>论文题：<a href="https://eprint.iacr.org/2015/399.pdf">https://eprint.iacr.org/2015/399.pdf</a></p><p>注意参数选取，这里的<code>d1,d2,a,b</code>都是<code>672bits</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> mpz<br><span class="hljs-comment">#gen1</span><br>n11 = <span class="hljs-number">801049932940568005269978912396585741498810389425615966036828877784238116634177290247194019425111606811005728521368879065336038221361037062407029836155148874719789714345603547779284558101833801155509762818376470874215789574939002212274399950433269775325144015468620263028557804618774240232988157961712628677901130814703917513004114547234375629747176834581166306552311075522669403347828095831520693563291249869832390698646691647204371133362254846234990175138047928703289833460734235302093916147489509206061923877623300596194317059884824322527532662470348274079800781120104946546063500763852622187404608639542858285661288293918912184354236687975919510300221932074135531028314170475917110204254042336116619335841213418990605590620842511615815443114612333881430920769002933370887494558640833005339906706603497809846863863967391543647049224309556936909768179259581851520214669904560467640473144481633920438487615788689262961741053146610554997224861331949716721056553499531186695425439163222802917813140266513735841447717418846360096652592844940362932171019143434080184728093326143821165097895058935372215708948088248596585127475770021962501262915274497478428868130455122612016408381607561200802267038869516896665387576895570245272035575637</span><br>n12 = <span class="hljs-number">635401970340205725139325006504978344512744926958688031423448003992072769931808217486709574151492230879374574313457662436423263437792389711379687512056391117410807565492548718691166183372633151644917135272259770997096195518489056319350258673723095417922153182423913759272893696867426193704479752772511081457729513843682588951499551132432923147997238597538055902932123792252593514225328196541483451747314048080824405530742533473914329294346486691684904100406972073037050089861816604505650042953778360621934380815999541183067585498606053857125775979915077329566722531830089714823979965934190338538564188253271016367299890015449611141166780048763403252309160517164569110740561584100839212138661881615351382946813818078899882595313362934594951895560189003438775450675343590147821186953526262224973333962454561275321925151619178204499342339749637758100126893330994252902926509705617882239610380420830791088907378397226817514095468815228186716220057075095711894070032344613244803934541318573847029365563159918970404057137270884587905766828750387753130065274147902379993224780149663600462492281891320702134153853359393588902750423972068679293373333869389393970353760507436913233657422185531482023237384247535554666481760197851108297145147371</span><br>_frac = continued_fraction(n11/n12)<span class="hljs-comment">#连分数形式</span><br>_frac = _frac.convergents()<span class="hljs-comment">#渐进分数形式</span><br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> _frac:<br>    q11 = _.numerator()<span class="hljs-comment">#取分子</span><br>    q12 = _.denominator()<span class="hljs-comment">#取分母</span><br>    <span class="hljs-keyword">if</span> q11 == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> q12 == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> n11 % q11 == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> q11 != <span class="hljs-number">1</span>:<span class="hljs-comment">#防 1/2</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;q11 = <span class="hljs-subst">&#123;q11&#125;</span>&#x27;</span>)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;q12 = <span class="hljs-subst">&#123;q12&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">break</span><br><br>e11=<span class="hljs-number">1898839980562048754607069073527844852132536432440793106124181406514770178066775988232362054809850074774981836898118651469424148725970708199461113088705044905633592578936333918328544505910996746428679299419879472444790941363558025887620570856598548320246426354974395765243741646121743413447132297230365355148066914830856904433750379114692122900723772114991199979638987571559860550883470977246459523068862898859694461427148626628283198896659337135438506574799585378178678790308410266713256003479022699264568844505977513537013529212961573269494683740987283682608189406719573301573662696753903050991812884192192569737274321828986847640839813424701894578472933385727757445011291134961124822612239865</span><br>e12=<span class="hljs-number">1262647419018930022617189608995712260095623047273893811529510754596636390255564988827821761126917976430978175522450277907063247981106405519094560616378241247111698915199999363948015703788616554657275147338766805289909261129165025156078136718573006479030827585347458143645738353716189131209398056741864848486818076440355778886993462012533397208330925057305502653219173629466948635110352752162442552541812665607516753186595817376029707777599029040724727499952161261179707271814405907165207904499722122779096230563548011491932378429654764486855147873135769116637484240454596231092684424572258119768093562747249251518965380465994055049411715353547147466711949391814550591591830515262296556050946881</span><br>c11=<span class="hljs-number">18979511327426975645936984732782737165217332092805655747550406443960209507493506811471688957217003792679188427155591583024966608843371190136274378868083075515877811693937328204553788450031542610082653080302874606750443090466407543829279067099563572849101374714795279414177737277837595409805721290786607138569322435729584574023597293220443351227559400618351504654781318871214405850541820427562291662456382362148698864044961814456827646881685994720468255382299912036854657082505810206237294593538092338544641919051145900715456411365065867357857347860000894624247098719102875782712030938806816332901861114078070638796157513248160442185781635520426230183818695937457557248160135402734489627723104008584934936245208116232179751448263136309595931691285743580695792601141363221346329077184688857290503770641398917586422369221744736905117499140140651493031622040723274355292502182795605723573863581253354922291984335841915632076694172921289489383700174864888664946302588049384130628381766560976143458735712162489811693014419190718601945154153130272620025118408017441490090252674737105557818759190934585829634273698371996797545908125156282869589331913665938038870431655063063535672001112420959158339261862052308986374193671007982914711432579</span><br>c12=<span class="hljs-number">336587005671304527566745948355290412636261748969581976214239578621816863343117433524033533838636941679300497270909696775021031004312477997130741361709262822736904340641138652359632950455651920464042448022467664596484055174270895170499076347333381222768518599018520948098943626229061996126260154604038101543546588917619576702866444998578555907070990331574722135141778182631559802154493815687284077524469331290249057291163803290619701104007028836609832847351748020354798788508790258935718399783002069490123663345156902440501507117289747695510266461539019431610123351176227443612317037899257774045751487135646052309277098939919088029284437221840182769808850184827681307611389353392683707516141736067793897378911235819049432542758429901945202632117089595899280390575706266239252841152490534353760118231918190110043319877744119083811214707593122757409240645257409097436061825613686773916466122693168971062418046703969144004779270391320645495586024342668002497155358623795942692477164489475917351003149045087283510728981096449890130735055015075557614253867698702479920619299919816768972581273507837309179450374634916567083251630203067065663910073926990517108921490442919372774170201239734064819301693527366233007925670043499415100789027665</span><br>p11 = gmpy2.iroot(n11//q11,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br>p12 = gmpy2.iroot(n12//q12,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-keyword">assert</span> p11**<span class="hljs-number">2</span>*q11 == n11 <span class="hljs-keyword">and</span> p12**<span class="hljs-number">2</span>*q12 == n12<br>d11 = gmpy2.invert(e11, p11*(p11-<span class="hljs-number">1</span>)*(q11-<span class="hljs-number">1</span>))<br>d12 = gmpy2.invert(e12, p12*(p12-<span class="hljs-number">1</span>)*(q12-<span class="hljs-number">1</span>))<br>m1 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(c11,d11,n11))<br>m2 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(c12,d12,n12))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;m1 = <span class="hljs-subst">&#123;m1&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;m2 = <span class="hljs-subst">&#123;m2&#125;</span>&#x27;</span>)<br>        <br><span class="hljs-comment">#gen2</span><br>n2 = <span class="hljs-number">209798341155088334158217087474227805455138848036904381404809759100627849272231840321985747935471287990313456209656625928356468120896887536235496490078123448217785939608443507649096688546074968476040552137270080120417769906047001451239544719039212180059396791491281787790213953488743488306241516010351179070869410418232801398578982244984544906579574766534671056023774009163991804748763929626213884208260660722705479782932001102089367261720194650874553305179520889083170973755913964440175393646890791491057655226024046525748177999422035469428780228224800114202385209306803288475439775037067014297973202621118959024226798935588827359265962780792266516120013602384766460619793738405476219362508944225007365127768741191310079985425349292613888185378948854602285379329682053663283534930182589905986063348509703027498270111412063194971956202729807710253369312175636837558252924035002153389909587349043986253518050303628071319876207392440085675892353421232158925122721273720564784886530611286461575045181073744696415657043278123662980166364494583141297996445429477446442693717498789391918530672770193730629928408766563592081857706608049076318165712479742423149330311238462044666384622153280310696667586565906758451118241914402257039981388209</span><br>c2 = <span class="hljs-number">18352572608055902550350386950073774530453857897248738030380007830701135570310622004368605208336922266513238134127496822199799761713782366178177809597137102612444147565578155260524747439899150012223027218489946124086276814899675563837669559795153349686434242738207425653079514376089070980797596457151965772460109519623572502109592612394316680202287712465721767341302234806130244551387296133051760893033194962691942040228545508895009195291106297581470066545991352668826197346830561010198417527057944507902143965634058848276017283478933675052993657822322866778994956205033704582047618324071045349072526540250707463112668579342537349567247810715604220690215313641329522674080146047291570752430231923566302463491877377617044768978997438596643458475128936850994934029476030136643053997549253792076260765459166618369864942681056864815996253315631930002738854235841120321870075261782250357506436825550088826469396508045912258303652912217151127280959435741419961721418428605515096160344688795655562889755165362006775317188009008288782691705879510655892181975003485714604340542378477388225736316682379616676770234557939471098919647053799313777248678455620231721202780830980063824003076308811540534492317719811588898727134190545533822501681653</span><br>e = <span class="hljs-number">65537</span><br>r = <span class="hljs-number">7</span><br>R.&lt;x&gt; = PolynomialRing(Zmod(n2), implementation=<span class="hljs-string">&#x27;NTL&#x27;</span>)<br>f = m1*m2*x -(m2 - m1)<br>f = f.monic()<br>root = f.small_roots(X = <span class="hljs-number">2</span>^<span class="hljs-number">672</span>,beta = <span class="hljs-number">0.4</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-comment">#print(root)</span><br>tmp = mpz(f(root))<br>g = <span class="hljs-built_in">int</span>(gmpy2.gcd(tmp,n2))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;gen2_g = <span class="hljs-subst">&#123;g&#125;</span>&#x27;</span>)<br><span class="hljs-comment">#print(gmpy2.iroot(g,r))#false</span><br><span class="hljs-comment">#print(gmpy2.iroot(g,r-1))#true</span><br>p2 = <span class="hljs-built_in">int</span>(gmpy2.iroot(g,r-<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>])<br>q2 = n2 // g // p2<br>phi2 = p2^<span class="hljs-number">6</span>*(p2-<span class="hljs-number">1</span>)*(q2-<span class="hljs-number">1</span>)<br>d2 = gmpy2.invert(e,phi2)<br>b = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(c2,d2,n2))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;b = <span class="hljs-subst">&#123;b&#125;</span>&#x27;</span>)<br><br><span class="hljs-comment">#gen3</span><br>n3 = <span class="hljs-number">539779851369541956878655738599584730199799866957191805784596190682932284216781781433367450841202917758999300635019369629627621029957135109806205877317954671312041249493462048283611940752235036153024920172209763260723728345918562258401803973624430150143563078517485996070862532682695228590709019451174548520135142052216785774589096706631010293690859363524584240662502290912412366366114571976050857239915691266377257797199583543940504695517331512813468837128344612227973709974625418257243011036826241599265375741977853552204640800449679679351666009764297016524814036295707311913711955324055690490892097177271718850857268982130811714517356073266905474635370690445031512184247179039751734276906533177939993769044135143389748416635981226449566039039202521305851567296884751935162651063209779647359922622084851547605090230221057349511482738300221222563908357379545905837110168948295030747460300104202323692732549831403834387939156877086852393515817984772384147449841124275061609701453997579569931391166586163299940486204581696722731952467570857217406030804590055255431828403195798003509083922294733709507134156466158642941338493323430671502043066148246348074878064089651235355282144209668143249348243220714471988019011613749340243917652821</span><br>c3 = <span class="hljs-number">113097822337683973761068913398570777162211043704088253732500045618770280334319497174908657828372816818344430304314992760410247741225285170975119344962728883084314382093407445567724674775086423808679124143380073906159023182353116556175251427048715466914368972746661938211846262612414049036821553068430149530397389927209475908905748728402722287875974303298260579839357610962198145974153609818939841880084892796820949226354126424023144300953584658958900737493704530725894948802258740332090822797815745616247879170037794873059391625680745994045522420168248552864215035136318711240256011217929372430302003068882829637056296413462078222453765071094277727760527662423010417144554652783429899139309180017349156600053882338180319473460877576898373222480215735280046214925463242092830060830764299787309912687294672319845054775281463150375545716818434962456139485501224661520991156961587158843064393883274763714930309353593180897123378717852182761518709151878662808890356934477932099818218743384674756674800089177733447066489275506387382342429495897972218764782517198727316942685748481956118012927027254979181519862451112593068440686462293151078537886822555211870303467014484443432209106264020502334805536091587252238173816637270028678636848763</span><br>e3 = <span class="hljs-number">8179300978753084587812861894047395225516049110376948812109811319430275614612773726672345893359691900281432484382670047044697374818043512731533402576374645405477207239801498428774783768163880078495448747421425078521981578408638790336528372019271073712013371141939808017049399434858687299480461753638164719404612128939787055797762174745092074547412183349192156638711750872083313795551439465507724807626674514935170104573715458782366469587138508845980490673890245713729782917089910271980557159592807350504157192913530007199510144004848020221181558472160543018733124225266127379373751910439604459368078652499029070936707349862139053913745186413782066470461478961703013591655136140060879250067379283913798867648758171004535775565306842444545755351202796833177560656564652632975685912935281581268141803696686952259539945588609591385807620108279333498170028167338690235117003515264281843953984997958878272347778561933726792473981855755454522886321669676790813189668084373153897754540290867346751033567500922477317530445967753955221454744946208555394588111484610700789566547507402309549957740815535069057837915204852490930168843605732632328017129154852857227895362549146737618906180651623216848500491438142456250653458053922622240299736136335179639180898730269690699965799644757774472147210271111150769048976871249731156387939260749192370361488285775377622944817570292095201906142567403539151179209316853493906909989301225903409448461436855145</span><br>r = <span class="hljs-number">7</span><br>R.&lt;x&gt; = PolynomialRing(Zmod(n3), implementation=<span class="hljs-string">&#x27;NTL&#x27;</span>)<br>f = e3*x - b<br>f = f.monic()<br>root = f.small_roots(X = <span class="hljs-number">2</span>^<span class="hljs-number">672</span>,beta = <span class="hljs-number">0.4</span>)[<span class="hljs-number">0</span>]<br>tmp = <span class="hljs-built_in">int</span>(f(root))<br>g = gmpy2.gcd(tmp,n3)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;gen3_g = <span class="hljs-subst">&#123;g&#125;</span>&#x27;</span>)<br><span class="hljs-comment">#print(gmpy2.iroot(g,r))#false</span><br><span class="hljs-comment">#print(gmpy2.iroot(g,r-1))#true</span><br>p3 = <span class="hljs-built_in">int</span>(gmpy2.iroot(g,r-<span class="hljs-number">1</span>)[<span class="hljs-number">0</span>])<br>q3 = n3 // g // p3<br>phi3 = p3^<span class="hljs-number">6</span>*(p3-<span class="hljs-number">1</span>)*(q3-<span class="hljs-number">1</span>)<br>d3 = gmpy2.invert(e3,phi3)<br>m = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">pow</span>(c3,d3,n3))<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RSA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DASCTF2022.07赋能赛</title>
    <link href="/2022/07/24/DASCTF2022.07%E8%B5%8B%E8%83%BD%E8%B5%9B/"/>
    <url>/2022/07/24/DASCTF2022.07%E8%B5%8B%E8%83%BD%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="babysign"><a href="#babysign" class="headerlink" title="babysign"></a>babysign</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> ecdsa<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> os<br><br>flag = <span class="hljs-string">b&quot;xxx&quot;</span><br><br><span class="hljs-keyword">assert</span> flag.startswith(<span class="hljs-string">b&#x27;DASCTF&#123;&#x27;</span>) <span class="hljs-keyword">and</span> flag.endswith(<span class="hljs-string">b&#x27;&#125;&#x27;</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(flag) == <span class="hljs-number">40</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">init</span>():<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    initiation</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    <span class="hljs-keyword">global</span> pub_key, priv_key, order, base,secret<br>    gen = ecdsa.NIST256p.generator<br>    order = gen.order()<br>    secret = bytes_to_long(flag[<span class="hljs-number">7</span>:-<span class="hljs-number">1</span>])<br>    <br>    pub_key = ecdsa.ecdsa.Public_key(gen, gen * secret)<br>    priv_key = ecdsa.ecdsa.Private_key(pub_key, secret)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sign</span>(<span class="hljs-params">msg, nonce</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    sign msg</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>    msg = <span class="hljs-built_in">int</span>(hashlib.sha256(msg).hexdigest(), <span class="hljs-number">16</span>)<br>    <br>    sign = priv_key.sign(msg, nonce)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;R:&quot;</span>, <span class="hljs-built_in">hex</span>(sign.r)[<span class="hljs-number">2</span>:])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;S:&quot;</span>, <span class="hljs-built_in">hex</span>(sign.s)[<span class="hljs-number">2</span>:])<br><br>init()<br>nonce = random.getrandbits(order.bit_length())<br>sign(<span class="hljs-string">b&#x27;welcome to ecdsa&#x27;</span>, nonce)<br><span class="hljs-built_in">print</span>(nonce)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">R: 7b35712a50d463ac5acf7af1675b4b63ba0da23b6452023afddd58d4891ef6e5</span><br><span class="hljs-string">S: a452fc44cc36fa6964d1b4f47392ff0a91350cfd58f11a4645c084d56e387e5c</span><br><span class="hljs-string">57872441580840888721108499129165088876046881204464784483281653404168342111855</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>参考：</p><p><a href="https://lazzzaro.github.io/2020/11/07/crypto-ECC/">ECC | Lazzaro (lazzzaro.github.io)</a></p><p><a href="https://blog.csdn.net/qq_51999772/article/details/122626382">ECDSA算法_M3ng@L的博客-CSDN博客_ecdsa</a></p><p>给定了曲线，可以直接知道它的阶(order或n)。给出了签名 (R,S)和msg，我们要求解的m是$d_A$。</p><p>根据数字签名公式<br>$$<br>S ≡ K^{-1}*(H(m)+d_A*R)\quad (mod\ n)<br>$$<br>推出<br>$$<br>d_A ≡ R^{ -1 }*( S*K - H( m ) )\quad ( mod\ n )<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>order = <span class="hljs-number">115792089210356248762697446949407573529996955224135760342422259061068512044369</span><br>R = <span class="hljs-number">0x7b35712a50d463ac5acf7af1675b4b63ba0da23b6452023afddd58d4891ef6e5</span><br>S = <span class="hljs-number">0xa452fc44cc36fa6964d1b4f47392ff0a91350cfd58f11a4645c084d56e387e5c</span><br>k = <span class="hljs-number">57872441580840888721108499129165088876046881204464784483281653404168342111855</span><br>msg = <span class="hljs-string">b&#x27;welcome to ecdsa&#x27;</span><br>msg = <span class="hljs-built_in">int</span>(hashlib.sha256(msg).hexdigest(), <span class="hljs-number">16</span>)<br>da = (S*k-msg)*invert(R,order)%order<br><span class="hljs-built_in">print</span>(da)<br><span class="hljs-built_in">print</span>(long_to_bytes(da))<br></code></pre></td></tr></table></figure><h1 id="easyNTRU"><a href="#easyNTRU" class="headerlink" title="easyNTRU"></a>easyNTRU</h1><p>非预期，对m进行爆破。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> Crypto.Hash <span class="hljs-keyword">import</span> SHA3_256<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">from</span> Crypto.Util.Padding <span class="hljs-keyword">import</span> pad<br><br>N = <span class="hljs-number">10</span><br>p = <span class="hljs-number">3</span><br>q = <span class="hljs-number">512</span><br>d = <span class="hljs-number">3</span><br>     <br>R.&lt;x&gt; = ZZ[]<br>may = [-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>]<br>maykey = []<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> may:<br>    <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> may:<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> may:<br>            <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> may:<br>                <span class="hljs-keyword">for</span> e <span class="hljs-keyword">in</span> may:<br>                    <span class="hljs-keyword">for</span> f <span class="hljs-keyword">in</span> may:<br>                        <span class="hljs-keyword">for</span> g <span class="hljs-keyword">in</span> may:<br>                            <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> may:<br>                                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> may:<br>                                    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> may:<br>                                        result = [a,b,c,d,e,f,g,h,i,j]<br>                                        maykey.append(R(result))<br><br>c = <span class="hljs-string">b&#x27;\xb9W\x8c\x8b\x0cG\xde\x7fl\xf7\x03\xbb9m\x0c\xc4L\xfe\xe9Q\xad\xfd\xda!\x1a\xea@&#125;U\x9ay4\x8a\xe3y\xdf\xd5BV\xa7\x06\xf9\x08\x96=&quot;f\xc1\x1b\xd7\xdb\xc1j\x82F\x0b\x16\x06\xbcJMB\xc8\x80&#x27;</span><br><span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> maykey:<br>    sha3 = SHA3_256.new()<br>    sha3.update(<span class="hljs-built_in">bytes</span>(<span class="hljs-built_in">str</span>(m).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)))<br>    key = sha3.digest()<br><br>    cypher = AES.new(key, AES.MODE_ECB)<br>    flag = cypher.decrypt(pad(c, <span class="hljs-number">32</span>))<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;DASCTF&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>        <span class="hljs-built_in">print</span>(key)<br>        <span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h1 id="NTRURSA"><a href="#NTRURSA" class="headerlink" title="NTRURSA"></a>NTRURSA</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>():<br>    p1 = getPrime(<span class="hljs-number">256</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        f = getRandomRange(<span class="hljs-number">1</span>, iroot(p1 // <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)[<span class="hljs-number">0</span>])<br>        g = getRandomRange(iroot(p1 // <span class="hljs-number">4</span>, <span class="hljs-number">2</span>)[<span class="hljs-number">0</span>], iroot(p1 // <span class="hljs-number">2</span>, <span class="hljs-number">2</span>)[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">if</span> gcd(f, p1) == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> gcd(f, g) == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> isPrime(g) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">break</span><br>    rand = getRandomRange(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> ^ <span class="hljs-number">20</span>)<br>    g1 = g ^^ rand<br>    h = (inverse(f, p1) * g1) % p1<br>    <span class="hljs-keyword">return</span> h, p1, g, f, g1<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_irreducable_poly</span>(<span class="hljs-params">deg</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        out = R.random_element(degree=deg)<br>        <span class="hljs-keyword">if</span> out.is_irreducible():<br>            <span class="hljs-keyword">return</span> out<br><br><br>h, p1, g, f, g1 = gen()<br>q = getPrime(<span class="hljs-number">1024</span>)<br>n = g * q <br>e = <span class="hljs-number">0x10001</span><br>c1 = <span class="hljs-built_in">pow</span>(bytes_to_long(flag), e, n)<br><br>hint = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">str</span>(h))<br>length = <span class="hljs-built_in">len</span>(hint)<span class="hljs-comment">#len(h)</span><br>bits = <span class="hljs-number">16</span><br>p2 = random_prime(<span class="hljs-number">2</span> ^ bits - <span class="hljs-number">1</span>, <span class="hljs-literal">False</span>, <span class="hljs-number">2</span> ^ (bits - <span class="hljs-number">1</span>))<br>R.&lt;x&gt; = PolynomialRing(GF(p2))<br>P = gen_irreducable_poly(ZZ.random_element(length, <span class="hljs-number">2</span> * length))<br>Q = gen_irreducable_poly(ZZ.random_element(length, <span class="hljs-number">2</span> * length))<br>N = P * Q<br>S.&lt;x&gt; = R.quotient(N)<span class="hljs-comment">#以N为模的商环</span><br>m = S(hint)<span class="hljs-comment">#以hint为系数的多项式</span><br>c2 = m ^ e<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p1 =&quot;</span>, p1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c1 =&quot;</span>, c1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;p2 =&quot;</span>, p2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c2 =&quot;</span>, c2)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;N =&quot;</span>, N)<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">p1 = 106472061241112922861460644342336453303928202010237284715354717630502168520267</span><br><span class="hljs-string">c1 = 20920247107738496784071050239422540936224577122721266141057957551603705972966457203177812404896852110975768315464852962210648535130235298413611598658659777108920014929632531307409885868941842921815735008981335582297975794108016151210394446009890312043259167806981442425505200141283138318269058818777636637375101005540308736021976559495266332357714</span><br><span class="hljs-string">p2 = 64621</span><br><span class="hljs-string">c2 = 19921*x^174 + 49192*x^173 + 18894*x^172 + 61121*x^171 + 50271*x^170 + 11860*x^169 + 53128*x^168 + 38658*x^167 + 14191*x^166 + 9671*x^165 + 40879*x^164 + 15187*x^163 + 33523*x^162 + 62270*x^161 + 64211*x^160 + 54518*x^159 + 50446*x^158 + 2597*x^157 + 32216*x^156 + 10500*x^155 + 63276*x^154 + 27916*x^153 + 55316*x^152 + 30898*x^151 + 43706*x^150 + 5734*x^149 + 35616*x^148 + 14288*x^147 + 18282*x^146 + 22788*x^145 + 48188*x^144 + 34176*x^143 + 55952*x^142 + 9578*x^141 + 9177*x^140 + 22083*x^139 + 14586*x^138 + 9748*x^137 + 21118*x^136 + 155*x^135 + 64224*x^134 + 18193*x^133 + 33732*x^132 + 38135*x^131 + 51992*x^130 + 8203*x^129 + 8538*x^128 + 55203*x^127 + 5003*x^126 + 2009*x^125 + 45023*x^124 + 12311*x^123 + 21428*x^122 + 24110*x^121 + 43537*x^120 + 21885*x^119 + 50212*x^118 + 40445*x^117 + 17768*x^116 + 46616*x^115 + 4771*x^114 + 20903*x^113 + 47764*x^112 + 13056*x^111 + 50837*x^110 + 22313*x^109 + 39698*x^108 + 60377*x^107 + 59357*x^106 + 24051*x^105 + 5888*x^104 + 29414*x^103 + 31726*x^102 + 4906*x^101 + 23968*x^100 + 52360*x^99 + 58063*x^98 + 706*x^97 + 31420*x^96 + 62468*x^95 + 18557*x^94 + 1498*x^93 + 17590*x^92 + 62990*x^91 + 27200*x^90 + 7052*x^89 + 39117*x^88 + 46944*x^87 + 45535*x^86 + 28092*x^85 + 1981*x^84 + 4377*x^83 + 34419*x^82 + 33754*x^81 + 2640*x^80 + 44427*x^79 + 32179*x^78 + 57721*x^77 + 9444*x^76 + 49374*x^75 + 21288*x^74 + 44098*x^73 + 57744*x^72 + 63457*x^71 + 43300*x^70 + 1508*x^69 + 13775*x^68 + 23197*x^67 + 43070*x^66 + 20751*x^65 + 47479*x^64 + 18496*x^63 + 53392*x^62 + 10387*x^61 + 2317*x^60 + 57492*x^59 + 25441*x^58 + 52532*x^57 + 27150*x^56 + 33788*x^55 + 43371*x^54 + 30972*x^53 + 39583*x^52 + 36407*x^51 + 35564*x^50 + 44564*x^49 + 1505*x^48 + 47519*x^47 + 38695*x^46 + 43107*x^45 + 1676*x^44 + 42057*x^43 + 49879*x^42 + 29083*x^41 + 42241*x^40 + 8853*x^39 + 33546*x^38 + 48954*x^37 + 30352*x^36 + 62020*x^35 + 39864*x^34 + 9519*x^33 + 24828*x^32 + 34696*x^31 + 2387*x^30 + 27413*x^29 + 55829*x^28 + 40217*x^27 + 30205*x^26 + 42328*x^25 + 6210*x^24 + 52442*x^23 + 58495*x^22 + 2014*x^21 + 26452*x^20 + 33547*x^19 + 19840*x^18 + 5995*x^17 + 16850*x^16 + 37855*x^15 + 7221*x^14 + 32200*x^13 + 8121*x^12 + 23767*x^11 + 46563*x^10 + 51673*x^9 + 19372*x^8 + 4157*x^7 + 48421*x^6 + 41096*x^5 + 45735*x^4 + 53022*x^3 + 35475*x^2 + 47521*x + 27544</span><br><span class="hljs-string">n = 31398174203566229210665534094126601315683074641013205440476552584312112883638278390105806127975406224783128340041129316782549009811196493319665336016690985557862367551545487842904828051293613836275987595871004601968935866634955528775536847402581734910742403788941725304146192149165731194199024154454952157531068881114411265538547462017207361362857</span><br><span class="hljs-string">N = 25081*x^175 + 8744*x^174 + 9823*x^173 + 9037*x^172 + 6343*x^171 + 42205*x^170 + 28573*x^169 + 55714*x^168 + 17287*x^167 + 11229*x^166 + 42630*x^165 + 64363*x^164 + 50759*x^163 + 3368*x^162 + 20900*x^161 + 55947*x^160 + 7082*x^159 + 23171*x^158 + 48510*x^157 + 20013*x^156 + 16798*x^155 + 60438*x^154 + 58779*x^153 + 9289*x^152 + 10623*x^151 + 1085*x^150 + 23473*x^149 + 13795*x^148 + 2071*x^147 + 31515*x^146 + 42832*x^145 + 38152*x^144 + 37559*x^143 + 47653*x^142 + 37371*x^141 + 39128*x^140 + 48750*x^139 + 16638*x^138 + 60320*x^137 + 56224*x^136 + 41870*x^135 + 63961*x^134 + 47574*x^133 + 63954*x^132 + 9668*x^131 + 62360*x^130 + 15244*x^129 + 20599*x^128 + 28704*x^127 + 26857*x^126 + 34885*x^125 + 33107*x^124 + 17693*x^123 + 52753*x^122 + 60744*x^121 + 21305*x^120 + 63785*x^119 + 54400*x^118 + 17812*x^117 + 64549*x^116 + 20035*x^115 + 37567*x^114 + 38607*x^113 + 32783*x^112 + 24385*x^111 + 5387*x^110 + 5134*x^109 + 45893*x^108 + 58307*x^107 + 33821*x^106 + 54902*x^105 + 14236*x^104 + 58044*x^103 + 41257*x^102 + 46881*x^101 + 42834*x^100 + 1693*x^99 + 46058*x^98 + 15636*x^97 + 27111*x^96 + 3158*x^95 + 41012*x^94 + 26028*x^93 + 3576*x^92 + 37958*x^91 + 33273*x^90 + 60228*x^89 + 41229*x^88 + 11232*x^87 + 12635*x^86 + 17942*x^85 + 4*x^84 + 25397*x^83 + 63526*x^82 + 54872*x^81 + 40318*x^80 + 37498*x^79 + 52182*x^78 + 48817*x^77 + 10763*x^76 + 46542*x^75 + 36060*x^74 + 49972*x^73 + 63603*x^72 + 46506*x^71 + 44788*x^70 + 44905*x^69 + 46112*x^68 + 5297*x^67 + 26440*x^66 + 28470*x^65 + 15525*x^64 + 11566*x^63 + 15781*x^62 + 36098*x^61 + 44402*x^60 + 55331*x^59 + 61583*x^58 + 16406*x^57 + 59089*x^56 + 53161*x^55 + 43695*x^54 + 49580*x^53 + 62685*x^52 + 31447*x^51 + 26755*x^50 + 14810*x^49 + 3281*x^48 + 27371*x^47 + 53392*x^46 + 2648*x^45 + 10095*x^44 + 25977*x^43 + 22912*x^42 + 41278*x^41 + 33236*x^40 + 57792*x^39 + 7169*x^38 + 29250*x^37 + 16906*x^36 + 4436*x^35 + 2729*x^34 + 29736*x^33 + 19383*x^32 + 11921*x^31 + 26075*x^30 + 54616*x^29 + 739*x^28 + 38509*x^27 + 19118*x^26 + 20062*x^25 + 21280*x^24 + 12594*x^23 + 14974*x^22 + 27795*x^21 + 54107*x^20 + 1890*x^19 + 13410*x^18 + 5381*x^17 + 19500*x^16 + 47481*x^15 + 58488*x^14 + 26433*x^13 + 37803*x^12 + 60232*x^11 + 34772*x^10 + 1505*x^9 + 63760*x^8 + 20890*x^7 + 41533*x^6 + 16130*x^5 + 29769*x^4 + 49142*x^3 + 64184*x^2 + 55443*x + 45925</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>NTRU + 多项式RSA</p><h2 id="step1"><a href="#step1" class="headerlink" title="step1"></a>step1</h2><p>求解h。参考<a href="https://4xwi11.github.io/posts/a0a0f5aa/">多项式RSA | 4XWi11的博客</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">p2 = <span class="hljs-number">64621</span><br>e = <span class="hljs-number">0x10001</span><br>R.&lt;x&gt; = PolynomialRing(GF(p2))<br>N = <span class="hljs-number">25081</span>*x^<span class="hljs-number">175</span> + <span class="hljs-number">8744</span>*x^<span class="hljs-number">174</span> + <span class="hljs-number">9823</span>*x^<span class="hljs-number">173</span> + <span class="hljs-number">9037</span>*x^<span class="hljs-number">172</span> + <span class="hljs-number">6343</span>*x^<span class="hljs-number">171</span> + <span class="hljs-number">42205</span>*x^<span class="hljs-number">170</span> + <span class="hljs-number">28573</span>*x^<span class="hljs-number">169</span> + <span class="hljs-number">55714</span>*x^<span class="hljs-number">168</span> + <span class="hljs-number">17287</span>*x^<span class="hljs-number">167</span> + <span class="hljs-number">11229</span>*x^<span class="hljs-number">166</span> + <span class="hljs-number">42630</span>*x^<span class="hljs-number">165</span> + <span class="hljs-number">64363</span>*x^<span class="hljs-number">164</span> + <span class="hljs-number">50759</span>*x^<span class="hljs-number">163</span> + <span class="hljs-number">3368</span>*x^<span class="hljs-number">162</span> + <span class="hljs-number">20900</span>*x^<span class="hljs-number">161</span> + <span class="hljs-number">55947</span>*x^<span class="hljs-number">160</span> + <span class="hljs-number">7082</span>*x^<span class="hljs-number">159</span> + <span class="hljs-number">23171</span>*x^<span class="hljs-number">158</span> + <span class="hljs-number">48510</span>*x^<span class="hljs-number">157</span> + <span class="hljs-number">20013</span>*x^<span class="hljs-number">156</span> + <span class="hljs-number">16798</span>*x^<span class="hljs-number">155</span> + <span class="hljs-number">60438</span>*x^<span class="hljs-number">154</span> + <span class="hljs-number">58779</span>*x^<span class="hljs-number">153</span> + <span class="hljs-number">9289</span>*x^<span class="hljs-number">152</span> + <span class="hljs-number">10623</span>*x^<span class="hljs-number">151</span> + <span class="hljs-number">1085</span>*x^<span class="hljs-number">150</span> + <span class="hljs-number">23473</span>*x^<span class="hljs-number">149</span> + <span class="hljs-number">13795</span>*x^<span class="hljs-number">148</span> + <span class="hljs-number">2071</span>*x^<span class="hljs-number">147</span> + <span class="hljs-number">31515</span>*x^<span class="hljs-number">146</span> + <span class="hljs-number">42832</span>*x^<span class="hljs-number">145</span> + <span class="hljs-number">38152</span>*x^<span class="hljs-number">144</span> + <span class="hljs-number">37559</span>*x^<span class="hljs-number">143</span> + <span class="hljs-number">47653</span>*x^<span class="hljs-number">142</span> + <span class="hljs-number">37371</span>*x^<span class="hljs-number">141</span> + <span class="hljs-number">39128</span>*x^<span class="hljs-number">140</span> + <span class="hljs-number">48750</span>*x^<span class="hljs-number">139</span> + <span class="hljs-number">16638</span>*x^<span class="hljs-number">138</span> + <span class="hljs-number">60320</span>*x^<span class="hljs-number">137</span> + <span class="hljs-number">56224</span>*x^<span class="hljs-number">136</span> + <span class="hljs-number">41870</span>*x^<span class="hljs-number">135</span> + <span class="hljs-number">63961</span>*x^<span class="hljs-number">134</span> + <span class="hljs-number">47574</span>*x^<span class="hljs-number">133</span> + <span class="hljs-number">63954</span>*x^<span class="hljs-number">132</span> + <span class="hljs-number">9668</span>*x^<span class="hljs-number">131</span> + <span class="hljs-number">62360</span>*x^<span class="hljs-number">130</span> + <span class="hljs-number">15244</span>*x^<span class="hljs-number">129</span> + <span class="hljs-number">20599</span>*x^<span class="hljs-number">128</span> + <span class="hljs-number">28704</span>*x^<span class="hljs-number">127</span> + <span class="hljs-number">26857</span>*x^<span class="hljs-number">126</span> + <span class="hljs-number">34885</span>*x^<span class="hljs-number">125</span> + <span class="hljs-number">33107</span>*x^<span class="hljs-number">124</span> + <span class="hljs-number">17693</span>*x^<span class="hljs-number">123</span> + <span class="hljs-number">52753</span>*x^<span class="hljs-number">122</span> + <span class="hljs-number">60744</span>*x^<span class="hljs-number">121</span> + <span class="hljs-number">21305</span>*x^<span class="hljs-number">120</span> + <span class="hljs-number">63785</span>*x^<span class="hljs-number">119</span> + <span class="hljs-number">54400</span>*x^<span class="hljs-number">118</span> + <span class="hljs-number">17812</span>*x^<span class="hljs-number">117</span> + <span class="hljs-number">64549</span>*x^<span class="hljs-number">116</span> + <span class="hljs-number">20035</span>*x^<span class="hljs-number">115</span> + <span class="hljs-number">37567</span>*x^<span class="hljs-number">114</span> + <span class="hljs-number">38607</span>*x^<span class="hljs-number">113</span> + <span class="hljs-number">32783</span>*x^<span class="hljs-number">112</span> + <span class="hljs-number">24385</span>*x^<span class="hljs-number">111</span> + <span class="hljs-number">5387</span>*x^<span class="hljs-number">110</span> + <span class="hljs-number">5134</span>*x^<span class="hljs-number">109</span> + <span class="hljs-number">45893</span>*x^<span class="hljs-number">108</span> + <span class="hljs-number">58307</span>*x^<span class="hljs-number">107</span> + <span class="hljs-number">33821</span>*x^<span class="hljs-number">106</span> + <span class="hljs-number">54902</span>*x^<span class="hljs-number">105</span> + <span class="hljs-number">14236</span>*x^<span class="hljs-number">104</span> + <span class="hljs-number">58044</span>*x^<span class="hljs-number">103</span> + <span class="hljs-number">41257</span>*x^<span class="hljs-number">102</span> + <span class="hljs-number">46881</span>*x^<span class="hljs-number">101</span> + <span class="hljs-number">42834</span>*x^<span class="hljs-number">100</span> + <span class="hljs-number">1693</span>*x^<span class="hljs-number">99</span> + <span class="hljs-number">46058</span>*x^<span class="hljs-number">98</span> + <span class="hljs-number">15636</span>*x^<span class="hljs-number">97</span> + <span class="hljs-number">27111</span>*x^<span class="hljs-number">96</span> + <span class="hljs-number">3158</span>*x^<span class="hljs-number">95</span> + <span class="hljs-number">41012</span>*x^<span class="hljs-number">94</span> + <span class="hljs-number">26028</span>*x^<span class="hljs-number">93</span> + <span class="hljs-number">3576</span>*x^<span class="hljs-number">92</span> + <span class="hljs-number">37958</span>*x^<span class="hljs-number">91</span> + <span class="hljs-number">33273</span>*x^<span class="hljs-number">90</span> + <span class="hljs-number">60228</span>*x^<span class="hljs-number">89</span> + <span class="hljs-number">41229</span>*x^<span class="hljs-number">88</span> + <span class="hljs-number">11232</span>*x^<span class="hljs-number">87</span> + <span class="hljs-number">12635</span>*x^<span class="hljs-number">86</span> + <span class="hljs-number">17942</span>*x^<span class="hljs-number">85</span> + <span class="hljs-number">4</span>*x^<span class="hljs-number">84</span> + <span class="hljs-number">25397</span>*x^<span class="hljs-number">83</span> + <span class="hljs-number">63526</span>*x^<span class="hljs-number">82</span> + <span class="hljs-number">54872</span>*x^<span class="hljs-number">81</span> + <span class="hljs-number">40318</span>*x^<span class="hljs-number">80</span> + <span class="hljs-number">37498</span>*x^<span class="hljs-number">79</span> + <span class="hljs-number">52182</span>*x^<span class="hljs-number">78</span> + <span class="hljs-number">48817</span>*x^<span class="hljs-number">77</span> + <span class="hljs-number">10763</span>*x^<span class="hljs-number">76</span> + <span class="hljs-number">46542</span>*x^<span class="hljs-number">75</span> + <span class="hljs-number">36060</span>*x^<span class="hljs-number">74</span> + <span class="hljs-number">49972</span>*x^<span class="hljs-number">73</span> + <span class="hljs-number">63603</span>*x^<span class="hljs-number">72</span> + <span class="hljs-number">46506</span>*x^<span class="hljs-number">71</span> + <span class="hljs-number">44788</span>*x^<span class="hljs-number">70</span> + <span class="hljs-number">44905</span>*x^<span class="hljs-number">69</span> + <span class="hljs-number">46112</span>*x^<span class="hljs-number">68</span> + <span class="hljs-number">5297</span>*x^<span class="hljs-number">67</span> + <span class="hljs-number">26440</span>*x^<span class="hljs-number">66</span> + <span class="hljs-number">28470</span>*x^<span class="hljs-number">65</span> + <span class="hljs-number">15525</span>*x^<span class="hljs-number">64</span> + <span class="hljs-number">11566</span>*x^<span class="hljs-number">63</span> + <span class="hljs-number">15781</span>*x^<span class="hljs-number">62</span> + <span class="hljs-number">36098</span>*x^<span class="hljs-number">61</span> + <span class="hljs-number">44402</span>*x^<span class="hljs-number">60</span> + <span class="hljs-number">55331</span>*x^<span class="hljs-number">59</span> + <span class="hljs-number">61583</span>*x^<span class="hljs-number">58</span> + <span class="hljs-number">16406</span>*x^<span class="hljs-number">57</span> + <span class="hljs-number">59089</span>*x^<span class="hljs-number">56</span> + <span class="hljs-number">53161</span>*x^<span class="hljs-number">55</span> + <span class="hljs-number">43695</span>*x^<span class="hljs-number">54</span> + <span class="hljs-number">49580</span>*x^<span class="hljs-number">53</span> + <span class="hljs-number">62685</span>*x^<span class="hljs-number">52</span> + <span class="hljs-number">31447</span>*x^<span class="hljs-number">51</span> + <span class="hljs-number">26755</span>*x^<span class="hljs-number">50</span> + <span class="hljs-number">14810</span>*x^<span class="hljs-number">49</span> + <span class="hljs-number">3281</span>*x^<span class="hljs-number">48</span> + <span class="hljs-number">27371</span>*x^<span class="hljs-number">47</span> + <span class="hljs-number">53392</span>*x^<span class="hljs-number">46</span> + <span class="hljs-number">2648</span>*x^<span class="hljs-number">45</span> + <span class="hljs-number">10095</span>*x^<span class="hljs-number">44</span> + <span class="hljs-number">25977</span>*x^<span class="hljs-number">43</span> + <span class="hljs-number">22912</span>*x^<span class="hljs-number">42</span> + <span class="hljs-number">41278</span>*x^<span class="hljs-number">41</span> + <span class="hljs-number">33236</span>*x^<span class="hljs-number">40</span> + <span class="hljs-number">57792</span>*x^<span class="hljs-number">39</span> + <span class="hljs-number">7169</span>*x^<span class="hljs-number">38</span> + <span class="hljs-number">29250</span>*x^<span class="hljs-number">37</span> + <span class="hljs-number">16906</span>*x^<span class="hljs-number">36</span> + <span class="hljs-number">4436</span>*x^<span class="hljs-number">35</span> + <span class="hljs-number">2729</span>*x^<span class="hljs-number">34</span> + <span class="hljs-number">29736</span>*x^<span class="hljs-number">33</span> + <span class="hljs-number">19383</span>*x^<span class="hljs-number">32</span> + <span class="hljs-number">11921</span>*x^<span class="hljs-number">31</span> + <span class="hljs-number">26075</span>*x^<span class="hljs-number">30</span> + <span class="hljs-number">54616</span>*x^<span class="hljs-number">29</span> + <span class="hljs-number">739</span>*x^<span class="hljs-number">28</span> + <span class="hljs-number">38509</span>*x^<span class="hljs-number">27</span> + <span class="hljs-number">19118</span>*x^<span class="hljs-number">26</span> + <span class="hljs-number">20062</span>*x^<span class="hljs-number">25</span> + <span class="hljs-number">21280</span>*x^<span class="hljs-number">24</span> + <span class="hljs-number">12594</span>*x^<span class="hljs-number">23</span> + <span class="hljs-number">14974</span>*x^<span class="hljs-number">22</span> + <span class="hljs-number">27795</span>*x^<span class="hljs-number">21</span> + <span class="hljs-number">54107</span>*x^<span class="hljs-number">20</span> + <span class="hljs-number">1890</span>*x^<span class="hljs-number">19</span> + <span class="hljs-number">13410</span>*x^<span class="hljs-number">18</span> + <span class="hljs-number">5381</span>*x^<span class="hljs-number">17</span> + <span class="hljs-number">19500</span>*x^<span class="hljs-number">16</span> + <span class="hljs-number">47481</span>*x^<span class="hljs-number">15</span> + <span class="hljs-number">58488</span>*x^<span class="hljs-number">14</span> + <span class="hljs-number">26433</span>*x^<span class="hljs-number">13</span> + <span class="hljs-number">37803</span>*x^<span class="hljs-number">12</span> + <span class="hljs-number">60232</span>*x^<span class="hljs-number">11</span> + <span class="hljs-number">34772</span>*x^<span class="hljs-number">10</span> + <span class="hljs-number">1505</span>*x^<span class="hljs-number">9</span> + <span class="hljs-number">63760</span>*x^<span class="hljs-number">8</span> + <span class="hljs-number">20890</span>*x^<span class="hljs-number">7</span> + <span class="hljs-number">41533</span>*x^<span class="hljs-number">6</span> + <span class="hljs-number">16130</span>*x^<span class="hljs-number">5</span> + <span class="hljs-number">29769</span>*x^<span class="hljs-number">4</span> + <span class="hljs-number">49142</span>*x^<span class="hljs-number">3</span> + <span class="hljs-number">64184</span>*x^<span class="hljs-number">2</span> + <span class="hljs-number">55443</span>*x + <span class="hljs-number">45925</span><br>c2 = <span class="hljs-number">19921</span>*x^<span class="hljs-number">174</span> + <span class="hljs-number">49192</span>*x^<span class="hljs-number">173</span> + <span class="hljs-number">18894</span>*x^<span class="hljs-number">172</span> + <span class="hljs-number">61121</span>*x^<span class="hljs-number">171</span> + <span class="hljs-number">50271</span>*x^<span class="hljs-number">170</span> + <span class="hljs-number">11860</span>*x^<span class="hljs-number">169</span> + <span class="hljs-number">53128</span>*x^<span class="hljs-number">168</span> + <span class="hljs-number">38658</span>*x^<span class="hljs-number">167</span> + <span class="hljs-number">14191</span>*x^<span class="hljs-number">166</span> + <span class="hljs-number">9671</span>*x^<span class="hljs-number">165</span> + <span class="hljs-number">40879</span>*x^<span class="hljs-number">164</span> + <span class="hljs-number">15187</span>*x^<span class="hljs-number">163</span> + <span class="hljs-number">33523</span>*x^<span class="hljs-number">162</span> + <span class="hljs-number">62270</span>*x^<span class="hljs-number">161</span> + <span class="hljs-number">64211</span>*x^<span class="hljs-number">160</span> + <span class="hljs-number">54518</span>*x^<span class="hljs-number">159</span> + <span class="hljs-number">50446</span>*x^<span class="hljs-number">158</span> + <span class="hljs-number">2597</span>*x^<span class="hljs-number">157</span> + <span class="hljs-number">32216</span>*x^<span class="hljs-number">156</span> + <span class="hljs-number">10500</span>*x^<span class="hljs-number">155</span> + <span class="hljs-number">63276</span>*x^<span class="hljs-number">154</span> + <span class="hljs-number">27916</span>*x^<span class="hljs-number">153</span> + <span class="hljs-number">55316</span>*x^<span class="hljs-number">152</span> + <span class="hljs-number">30898</span>*x^<span class="hljs-number">151</span> + <span class="hljs-number">43706</span>*x^<span class="hljs-number">150</span> + <span class="hljs-number">5734</span>*x^<span class="hljs-number">149</span> + <span class="hljs-number">35616</span>*x^<span class="hljs-number">148</span> + <span class="hljs-number">14288</span>*x^<span class="hljs-number">147</span> + <span class="hljs-number">18282</span>*x^<span class="hljs-number">146</span> + <span class="hljs-number">22788</span>*x^<span class="hljs-number">145</span> + <span class="hljs-number">48188</span>*x^<span class="hljs-number">144</span> + <span class="hljs-number">34176</span>*x^<span class="hljs-number">143</span> + <span class="hljs-number">55952</span>*x^<span class="hljs-number">142</span> + <span class="hljs-number">9578</span>*x^<span class="hljs-number">141</span> + <span class="hljs-number">9177</span>*x^<span class="hljs-number">140</span> + <span class="hljs-number">22083</span>*x^<span class="hljs-number">139</span> + <span class="hljs-number">14586</span>*x^<span class="hljs-number">138</span> + <span class="hljs-number">9748</span>*x^<span class="hljs-number">137</span> + <span class="hljs-number">21118</span>*x^<span class="hljs-number">136</span> + <span class="hljs-number">155</span>*x^<span class="hljs-number">135</span> + <span class="hljs-number">64224</span>*x^<span class="hljs-number">134</span> + <span class="hljs-number">18193</span>*x^<span class="hljs-number">133</span> + <span class="hljs-number">33732</span>*x^<span class="hljs-number">132</span> + <span class="hljs-number">38135</span>*x^<span class="hljs-number">131</span> + <span class="hljs-number">51992</span>*x^<span class="hljs-number">130</span> + <span class="hljs-number">8203</span>*x^<span class="hljs-number">129</span> + <span class="hljs-number">8538</span>*x^<span class="hljs-number">128</span> + <span class="hljs-number">55203</span>*x^<span class="hljs-number">127</span> + <span class="hljs-number">5003</span>*x^<span class="hljs-number">126</span> + <span class="hljs-number">2009</span>*x^<span class="hljs-number">125</span> + <span class="hljs-number">45023</span>*x^<span class="hljs-number">124</span> + <span class="hljs-number">12311</span>*x^<span class="hljs-number">123</span> + <span class="hljs-number">21428</span>*x^<span class="hljs-number">122</span> + <span class="hljs-number">24110</span>*x^<span class="hljs-number">121</span> + <span class="hljs-number">43537</span>*x^<span class="hljs-number">120</span> + <span class="hljs-number">21885</span>*x^<span class="hljs-number">119</span> + <span class="hljs-number">50212</span>*x^<span class="hljs-number">118</span> + <span class="hljs-number">40445</span>*x^<span class="hljs-number">117</span> + <span class="hljs-number">17768</span>*x^<span class="hljs-number">116</span> + <span class="hljs-number">46616</span>*x^<span class="hljs-number">115</span> + <span class="hljs-number">4771</span>*x^<span class="hljs-number">114</span> + <span class="hljs-number">20903</span>*x^<span class="hljs-number">113</span> + <span class="hljs-number">47764</span>*x^<span class="hljs-number">112</span> + <span class="hljs-number">13056</span>*x^<span class="hljs-number">111</span> + <span class="hljs-number">50837</span>*x^<span class="hljs-number">110</span> + <span class="hljs-number">22313</span>*x^<span class="hljs-number">109</span> + <span class="hljs-number">39698</span>*x^<span class="hljs-number">108</span> + <span class="hljs-number">60377</span>*x^<span class="hljs-number">107</span> + <span class="hljs-number">59357</span>*x^<span class="hljs-number">106</span> + <span class="hljs-number">24051</span>*x^<span class="hljs-number">105</span> + <span class="hljs-number">5888</span>*x^<span class="hljs-number">104</span> + <span class="hljs-number">29414</span>*x^<span class="hljs-number">103</span> + <span class="hljs-number">31726</span>*x^<span class="hljs-number">102</span> + <span class="hljs-number">4906</span>*x^<span class="hljs-number">101</span> + <span class="hljs-number">23968</span>*x^<span class="hljs-number">100</span> + <span class="hljs-number">52360</span>*x^<span class="hljs-number">99</span> + <span class="hljs-number">58063</span>*x^<span class="hljs-number">98</span> + <span class="hljs-number">706</span>*x^<span class="hljs-number">97</span> + <span class="hljs-number">31420</span>*x^<span class="hljs-number">96</span> + <span class="hljs-number">62468</span>*x^<span class="hljs-number">95</span> + <span class="hljs-number">18557</span>*x^<span class="hljs-number">94</span> + <span class="hljs-number">1498</span>*x^<span class="hljs-number">93</span> + <span class="hljs-number">17590</span>*x^<span class="hljs-number">92</span> + <span class="hljs-number">62990</span>*x^<span class="hljs-number">91</span> + <span class="hljs-number">27200</span>*x^<span class="hljs-number">90</span> + <span class="hljs-number">7052</span>*x^<span class="hljs-number">89</span> + <span class="hljs-number">39117</span>*x^<span class="hljs-number">88</span> + <span class="hljs-number">46944</span>*x^<span class="hljs-number">87</span> + <span class="hljs-number">45535</span>*x^<span class="hljs-number">86</span> + <span class="hljs-number">28092</span>*x^<span class="hljs-number">85</span> + <span class="hljs-number">1981</span>*x^<span class="hljs-number">84</span> + <span class="hljs-number">4377</span>*x^<span class="hljs-number">83</span> + <span class="hljs-number">34419</span>*x^<span class="hljs-number">82</span> + <span class="hljs-number">33754</span>*x^<span class="hljs-number">81</span> + <span class="hljs-number">2640</span>*x^<span class="hljs-number">80</span> + <span class="hljs-number">44427</span>*x^<span class="hljs-number">79</span> + <span class="hljs-number">32179</span>*x^<span class="hljs-number">78</span> + <span class="hljs-number">57721</span>*x^<span class="hljs-number">77</span> + <span class="hljs-number">9444</span>*x^<span class="hljs-number">76</span> + <span class="hljs-number">49374</span>*x^<span class="hljs-number">75</span> + <span class="hljs-number">21288</span>*x^<span class="hljs-number">74</span> + <span class="hljs-number">44098</span>*x^<span class="hljs-number">73</span> + <span class="hljs-number">57744</span>*x^<span class="hljs-number">72</span> + <span class="hljs-number">63457</span>*x^<span class="hljs-number">71</span> + <span class="hljs-number">43300</span>*x^<span class="hljs-number">70</span> + <span class="hljs-number">1508</span>*x^<span class="hljs-number">69</span> + <span class="hljs-number">13775</span>*x^<span class="hljs-number">68</span> + <span class="hljs-number">23197</span>*x^<span class="hljs-number">67</span> + <span class="hljs-number">43070</span>*x^<span class="hljs-number">66</span> + <span class="hljs-number">20751</span>*x^<span class="hljs-number">65</span> + <span class="hljs-number">47479</span>*x^<span class="hljs-number">64</span> + <span class="hljs-number">18496</span>*x^<span class="hljs-number">63</span> + <span class="hljs-number">53392</span>*x^<span class="hljs-number">62</span> + <span class="hljs-number">10387</span>*x^<span class="hljs-number">61</span> + <span class="hljs-number">2317</span>*x^<span class="hljs-number">60</span> + <span class="hljs-number">57492</span>*x^<span class="hljs-number">59</span> + <span class="hljs-number">25441</span>*x^<span class="hljs-number">58</span> + <span class="hljs-number">52532</span>*x^<span class="hljs-number">57</span> + <span class="hljs-number">27150</span>*x^<span class="hljs-number">56</span> + <span class="hljs-number">33788</span>*x^<span class="hljs-number">55</span> + <span class="hljs-number">43371</span>*x^<span class="hljs-number">54</span> + <span class="hljs-number">30972</span>*x^<span class="hljs-number">53</span> + <span class="hljs-number">39583</span>*x^<span class="hljs-number">52</span> + <span class="hljs-number">36407</span>*x^<span class="hljs-number">51</span> + <span class="hljs-number">35564</span>*x^<span class="hljs-number">50</span> + <span class="hljs-number">44564</span>*x^<span class="hljs-number">49</span> + <span class="hljs-number">1505</span>*x^<span class="hljs-number">48</span> + <span class="hljs-number">47519</span>*x^<span class="hljs-number">47</span> + <span class="hljs-number">38695</span>*x^<span class="hljs-number">46</span> + <span class="hljs-number">43107</span>*x^<span class="hljs-number">45</span> + <span class="hljs-number">1676</span>*x^<span class="hljs-number">44</span> + <span class="hljs-number">42057</span>*x^<span class="hljs-number">43</span> + <span class="hljs-number">49879</span>*x^<span class="hljs-number">42</span> + <span class="hljs-number">29083</span>*x^<span class="hljs-number">41</span> + <span class="hljs-number">42241</span>*x^<span class="hljs-number">40</span> + <span class="hljs-number">8853</span>*x^<span class="hljs-number">39</span> + <span class="hljs-number">33546</span>*x^<span class="hljs-number">38</span> + <span class="hljs-number">48954</span>*x^<span class="hljs-number">37</span> + <span class="hljs-number">30352</span>*x^<span class="hljs-number">36</span> + <span class="hljs-number">62020</span>*x^<span class="hljs-number">35</span> + <span class="hljs-number">39864</span>*x^<span class="hljs-number">34</span> + <span class="hljs-number">9519</span>*x^<span class="hljs-number">33</span> + <span class="hljs-number">24828</span>*x^<span class="hljs-number">32</span> + <span class="hljs-number">34696</span>*x^<span class="hljs-number">31</span> + <span class="hljs-number">2387</span>*x^<span class="hljs-number">30</span> + <span class="hljs-number">27413</span>*x^<span class="hljs-number">29</span> + <span class="hljs-number">55829</span>*x^<span class="hljs-number">28</span> + <span class="hljs-number">40217</span>*x^<span class="hljs-number">27</span> + <span class="hljs-number">30205</span>*x^<span class="hljs-number">26</span> + <span class="hljs-number">42328</span>*x^<span class="hljs-number">25</span> + <span class="hljs-number">6210</span>*x^<span class="hljs-number">24</span> + <span class="hljs-number">52442</span>*x^<span class="hljs-number">23</span> + <span class="hljs-number">58495</span>*x^<span class="hljs-number">22</span> + <span class="hljs-number">2014</span>*x^<span class="hljs-number">21</span> + <span class="hljs-number">26452</span>*x^<span class="hljs-number">20</span> + <span class="hljs-number">33547</span>*x^<span class="hljs-number">19</span> + <span class="hljs-number">19840</span>*x^<span class="hljs-number">18</span> + <span class="hljs-number">5995</span>*x^<span class="hljs-number">17</span> + <span class="hljs-number">16850</span>*x^<span class="hljs-number">16</span> + <span class="hljs-number">37855</span>*x^<span class="hljs-number">15</span> + <span class="hljs-number">7221</span>*x^<span class="hljs-number">14</span> + <span class="hljs-number">32200</span>*x^<span class="hljs-number">13</span> + <span class="hljs-number">8121</span>*x^<span class="hljs-number">12</span> + <span class="hljs-number">23767</span>*x^<span class="hljs-number">11</span> + <span class="hljs-number">46563</span>*x^<span class="hljs-number">10</span> + <span class="hljs-number">51673</span>*x^<span class="hljs-number">9</span> + <span class="hljs-number">19372</span>*x^<span class="hljs-number">8</span> + <span class="hljs-number">4157</span>*x^<span class="hljs-number">7</span> + <span class="hljs-number">48421</span>*x^<span class="hljs-number">6</span> + <span class="hljs-number">41096</span>*x^<span class="hljs-number">5</span> + <span class="hljs-number">45735</span>*x^<span class="hljs-number">4</span> + <span class="hljs-number">53022</span>*x^<span class="hljs-number">3</span> + <span class="hljs-number">35475</span>*x^<span class="hljs-number">2</span> + <span class="hljs-number">47521</span>*x + <span class="hljs-number">27544</span><br>S.&lt;x&gt; = R.quotient(N)<br>P,Q= N.factor()<br>P, Q = P[<span class="hljs-number">0</span>], Q[<span class="hljs-number">0</span>]<br>phi = (p2 ** P.degree() - <span class="hljs-number">1</span>) * (p2 ** Q.degree() - <span class="hljs-number">1</span>)<br>d = inverse_mod(e, phi)<br>m = <span class="hljs-built_in">pow</span>(c2,d,N)<br>h = <span class="hljs-built_in">int</span>(<span class="hljs-string">&quot;&quot;</span>.join([<span class="hljs-built_in">str</span>(i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> m.<span class="hljs-built_in">list</span>()]))<br><span class="hljs-built_in">print</span>(h)<br><span class="hljs-comment">#88520242910362871448352317137540300262448941340486475602003226117035863930302</span><br></code></pre></td></tr></table></figure><h2 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h2><p>求解f，g。参考<a href="https://xz.aliyun.com/t/7163#toc-4">从一道CTF题初探NTRU格密码 - 先知社区 (aliyun.com)</a></p><p>构造格如下所示</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031022463.png"/><p>进行LLL()即可得到(f,g)。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">h = <span class="hljs-number">88520242910362871448352317137540300262448941340486475602003226117035863930302</span><br>p1 = <span class="hljs-number">106472061241112922861460644342336453303928202010237284715354717630502168520267</span><br>v1 = vector(ZZ, [<span class="hljs-number">1</span>, h])<br>v2 = vector(ZZ, [<span class="hljs-number">0</span>, p1])<br>m = matrix([v1,v2])<br>shortest_vector = m.LLL()[<span class="hljs-number">0</span>]<br>f, g = shortest_vector<br><span class="hljs-built_in">print</span>(f,g)<br><span class="hljs-comment">#183610829622016944154542682943585488074 228679177303871981036829786447405151037</span><br></code></pre></td></tr></table></figure><h2 id="step3"><a href="#step3" class="headerlink" title="step3"></a>step3</h2><p>求g。对g的低20位爆破。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><br>e = <span class="hljs-number">0x10001</span><br>g1 = <span class="hljs-number">228679177303871981036829786447405151037</span><br>c1 = <span class="hljs-number">20920247107738496784071050239422540936224577122721266141057957551603705972966457203177812404896852110975768315464852962210648535130235298413611598658659777108920014929632531307409885868941842921815735008981335582297975794108016151210394446009890312043259167806981442425505200141283138318269058818777636637375101005540308736021976559495266332357714</span><br>n = <span class="hljs-number">31398174203566229210665534094126601315683074641013205440476552584312112883638278390105806127975406224783128340041129316782549009811196493319665336016690985557862367551545487842904828051293613836275987595871004601968935866634955528775536847402581734910742403788941725304146192149165731194199024154454952157531068881114411265538547462017207361362857</span><br>g = (g1&gt;&gt;<span class="hljs-number">20</span>)&lt;&lt;<span class="hljs-number">20</span><br>g = next_prime(g)<br>end = g ^ (<span class="hljs-number">2</span>**<span class="hljs-number">20</span>-<span class="hljs-number">1</span>)<br><span class="hljs-keyword">while</span> g &lt;= end:<br>    <span class="hljs-keyword">if</span> n%g == <span class="hljs-number">0</span>:<br>        q = n//g<br>        d = invert(e,(q-<span class="hljs-number">1</span>)*(g-<span class="hljs-number">1</span>))<br>        m = <span class="hljs-built_in">pow</span>(c1,d,n)<br>        <span class="hljs-built_in">print</span>(long_to_bytes(m))<br>    g = next_prime(g)<br></code></pre></td></tr></table></figure><h1 id="LWE"><a href="#LWE" class="headerlink" title="LWE?"></a>LWE?</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> secret<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(secret)==<span class="hljs-number">66</span>*<span class="hljs-number">3</span><br>sec = [<span class="hljs-built_in">ord</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> secret]<br><br>DEBUG = <span class="hljs-literal">False</span><br>m = <span class="hljs-number">66</span><br>n = <span class="hljs-number">200</span><br>p = <span class="hljs-number">3</span><br>q = <span class="hljs-number">2</span>^<span class="hljs-number">20</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">errorV</span>():<br>  <span class="hljs-keyword">return</span> vector(ZZ, [<span class="hljs-number">1</span> - randrange(p) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">matrixMn</span>():<br>  <span class="hljs-keyword">return</span> matrix(ZZ, [[q//<span class="hljs-number">2</span> - randrange(q) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m)])<br><br>A, B, C = matrixMn(), matrixMn(), matrixMn()<br>x = vector(ZZ, sec[<span class="hljs-number">0</span>:m])<br>y = vector(ZZ, sec[m:<span class="hljs-number">2</span>*m])<br>z = vector(ZZ, sec[<span class="hljs-number">2</span>*m:<span class="hljs-number">3</span>*m])<br>e = errorV()<br>b = x*A+y*B+z*C+e<br><br><span class="hljs-keyword">if</span> DEBUG:<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x = %s&#x27;</span> % x)<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;y = %s&#x27;</span> % y)<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;z = %s&#x27;</span> % z)<br>  <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;e = %s&#x27;</span> % e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;A = \n%s&#x27;</span> % A)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;B = \n%s&#x27;</span> % B)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;C = \n%s&#x27;</span> % C)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;b = %s&#x27;</span> % b)<br></code></pre></td></tr></table></figure><p>将$b &#x3D; x*A+y*B+z*C+e$改造一下，可以得到一个常见的式子：<br>$$<br>b &#x3D; [x,y,z]* \left[\matrix{A \\B\\C}\right] + e<br>$$<br>e取自[-1,0,1]，误差很小，按照常规解法就可以得到flag了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">str_to_int</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">return</span> [<span class="hljs-built_in">int</span>(each) <span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> s]<br><br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;out&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>f.readline()<br>matA=[]<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">66</span>):<br>    s = f.readline()[<span class="hljs-number">1</span>:-<span class="hljs-number">2</span>].split()<br>    row = str_to_int(s)<br>    matA.append(row)<br><br>f.readline()<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">66</span>):<br>    s = f.readline()[<span class="hljs-number">1</span>:-<span class="hljs-number">2</span>].split()<br>    row = str_to_int(s)<br>    matA.append(row)<br><br>f.readline()<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">66</span>):<br>    s = f.readline()[<span class="hljs-number">1</span>:-<span class="hljs-number">2</span>].split()<br>    row = str_to_int(s)<br>    matA.append(row)<br><br>row= [-<span class="hljs-number">19786291</span>, -<span class="hljs-number">713104590</span>, <span class="hljs-number">79700973</span>, <span class="hljs-number">23261288</span>, <span class="hljs-number">203038164</span>, <span class="hljs-number">430352288</span>, <span class="hljs-number">147848301</span>, <span class="hljs-number">633183638</span>, <span class="hljs-number">188651439</span>, <span class="hljs-number">243206160</span>, -<span class="hljs-number">654830271</span>, <span class="hljs-number">335642059</span>, -<span class="hljs-number">100511588</span>, <span class="hljs-number">180023362</span>, <span class="hljs-number">130607831</span>, <span class="hljs-number">227597861</span>, <span class="hljs-number">188424473</span>, <span class="hljs-number">175518170</span>, -<span class="hljs-number">246987997</span>, <span class="hljs-number">180879649</span>, <span class="hljs-number">421934976</span>, -<span class="hljs-number">227575274</span>, -<span class="hljs-number">628937118</span>, <span class="hljs-number">5466646</span>, -<span class="hljs-number">254939474</span>, -<span class="hljs-number">438417079</span>, <span class="hljs-number">150434624</span>, <span class="hljs-number">327054986</span>, <span class="hljs-number">163561829</span>, <span class="hljs-number">816959939</span>, -<span class="hljs-number">265298657</span>, <span class="hljs-number">82651050</span>, <span class="hljs-number">176899880</span>, <span class="hljs-number">174020455</span>, -<span class="hljs-number">419656325</span>, -<span class="hljs-number">101606182</span>, <span class="hljs-number">300413909</span>, <span class="hljs-number">237169571</span>, -<span class="hljs-number">589213744</span>, <span class="hljs-number">121803611</span>, -<span class="hljs-number">38080334</span>, -<span class="hljs-number">255712509</span>, -<span class="hljs-number">133782964</span>, <span class="hljs-number">106220001</span>, <span class="hljs-number">195767251</span>, -<span class="hljs-number">397096116</span>, -<span class="hljs-number">583305587</span>, -<span class="hljs-number">182462561</span>, -<span class="hljs-number">271478737</span>, -<span class="hljs-number">32014717</span>, <span class="hljs-number">114385188</span>, <span class="hljs-number">437506115</span>, -<span class="hljs-number">1165732</span>, <span class="hljs-number">179349265</span>, -<span class="hljs-number">77761751</span>, -<span class="hljs-number">233976783</span>, <span class="hljs-number">410153356</span>, <span class="hljs-number">476453640</span>, <span class="hljs-number">91892631</span>, -<span class="hljs-number">242168750</span>, <span class="hljs-number">506769243</span>, -<span class="hljs-number">384438362</span>, <span class="hljs-number">131852532</span>, <span class="hljs-number">586202810</span>, <span class="hljs-number">376719791</span>, <span class="hljs-number">578215353</span>, <span class="hljs-number">874304742</span>, <span class="hljs-number">163584566</span>, <span class="hljs-number">434260863</span>, <span class="hljs-number">98013671</span>, <span class="hljs-number">213627784</span>, <span class="hljs-number">59622886</span>, -<span class="hljs-number">84912852</span>, <span class="hljs-number">156744856</span>, <span class="hljs-number">169652328</span>, <span class="hljs-number">178143615</span>, <span class="hljs-number">400046730</span>, <span class="hljs-number">408163110</span>, -<span class="hljs-number">357990863</span>, -<span class="hljs-number">269552089</span>, -<span class="hljs-number">199410809</span>, <span class="hljs-number">187503858</span>, -<span class="hljs-number">853206157</span>, <span class="hljs-number">134901027</span>, <span class="hljs-number">313984185</span>, -<span class="hljs-number">162544217</span>, -<span class="hljs-number">69722073</span>, <span class="hljs-number">43817388</span>, -<span class="hljs-number">47389463</span>, <span class="hljs-number">210346729</span>, -<span class="hljs-number">46516961</span>, <span class="hljs-number">72002967</span>, <span class="hljs-number">327714191</span>, <span class="hljs-number">45052266</span>, <span class="hljs-number">1010509210</span>, <span class="hljs-number">110937225</span>, <span class="hljs-number">448179404</span>, <span class="hljs-number">341448936</span>, <span class="hljs-number">446550865</span>, <span class="hljs-number">221914340</span>, -<span class="hljs-number">804918424</span>, -<span class="hljs-number">12007071</span>, <span class="hljs-number">151215468</span>, <span class="hljs-number">440279795</span>, -<span class="hljs-number">73408566</span>, -<span class="hljs-number">112121988</span>, <span class="hljs-number">40294376</span>, <span class="hljs-number">283179449</span>, -<span class="hljs-number">193812410</span>, -<span class="hljs-number">30061804</span>, <span class="hljs-number">20326854</span>, <span class="hljs-number">65412625</span>, -<span class="hljs-number">260020045</span>, -<span class="hljs-number">570090340</span>, <span class="hljs-number">1546454</span>, <span class="hljs-number">548030557</span>, <span class="hljs-number">618148316</span>, <span class="hljs-number">290333796</span>, <span class="hljs-number">665474379</span>, <span class="hljs-number">301709165</span>, -<span class="hljs-number">104726821</span>, -<span class="hljs-number">503111899</span>, <span class="hljs-number">480689642</span>, -<span class="hljs-number">331192606</span>, -<span class="hljs-number">518345784</span>, -<span class="hljs-number">314602459</span>, <span class="hljs-number">25354403</span>, <span class="hljs-number">410995568</span>, <span class="hljs-number">179675848</span>, -<span class="hljs-number">207010027</span>, <span class="hljs-number">400838662</span>, <span class="hljs-number">125916880</span>, <span class="hljs-number">501112567</span>, <span class="hljs-number">578261227</span>, <span class="hljs-number">24802586</span>, <span class="hljs-number">493171331</span>, <span class="hljs-number">383306766</span>, -<span class="hljs-number">390093502</span>, -<span class="hljs-number">389822626</span>, -<span class="hljs-number">303615722</span>, <span class="hljs-number">20813851</span>, -<span class="hljs-number">399678371</span>, -<span class="hljs-number">566907567</span>, -<span class="hljs-number">432647113</span>, -<span class="hljs-number">280465568</span>, <span class="hljs-number">1002042393</span>, -<span class="hljs-number">510901339</span>, <span class="hljs-number">316603766</span>, -<span class="hljs-number">139701243</span>, <span class="hljs-number">211217523</span>, <span class="hljs-number">108545545</span>, -<span class="hljs-number">12948109</span>, -<span class="hljs-number">569199543</span>, <span class="hljs-number">37065919</span>, -<span class="hljs-number">150542603</span>, <span class="hljs-number">417851006</span>, -<span class="hljs-number">470173530</span>, -<span class="hljs-number">628557669</span>, -<span class="hljs-number">128339015</span>, -<span class="hljs-number">427978763</span>, <span class="hljs-number">381402990</span>, <span class="hljs-number">205835334</span>, -<span class="hljs-number">30976552</span>, -<span class="hljs-number">357466556</span>, -<span class="hljs-number">104985580</span>, -<span class="hljs-number">115366372</span>, <span class="hljs-number">296031071</span>, -<span class="hljs-number">8036087</span>, <span class="hljs-number">79340491</span>, <span class="hljs-number">650365147</span>, <span class="hljs-number">295521125</span>, <span class="hljs-number">885900267</span>, <span class="hljs-number">133049758</span>, <span class="hljs-number">217970062</span>, <span class="hljs-number">237420894</span>, <span class="hljs-number">358760095</span>, -<span class="hljs-number">2684469</span>, <span class="hljs-number">475711698</span>, <span class="hljs-number">316770575</span>, -<span class="hljs-number">25024622</span>, -<span class="hljs-number">193442003</span>, <span class="hljs-number">200260606</span>, <span class="hljs-number">89183826</span>, <span class="hljs-number">567491985</span>, <span class="hljs-number">726371428</span>, <span class="hljs-number">222116554</span>, <span class="hljs-number">87397506</span>, -<span class="hljs-number">29529094</span>, <span class="hljs-number">125968479</span>, -<span class="hljs-number">50793004</span>, <span class="hljs-number">218035181</span>, -<span class="hljs-number">210376687</span>, <span class="hljs-number">1025673749</span>, -<span class="hljs-number">262390458</span>, <span class="hljs-number">467412984</span>, -<span class="hljs-number">71097225</span>, <span class="hljs-number">259125517</span>, -<span class="hljs-number">337232810</span>, <span class="hljs-number">143359550</span>, <span class="hljs-number">27115363</span>]<br>matA.append(row)<br>L=Matrix(ZZ,matA)<br>e=vector(ZZ,L.LLL()[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(e)<br>b=vector(ZZ,row)<br>s=b-e<br>m=L.solve_left(s)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(<span class="hljs-built_in">list</span>(m)))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">b&quot;Oh, you get it?? Here is the flag: &#x27;DASCTF&#123;uuid&#125;&#x27;. What? You don&#x27;t know the uuid? The first part is &#x27;dcf41556&#x27;, second part-&gt; &#x27;c194&#x27;, and then &#x27;4c66&#x27;, &#x27;9092&#x27;. And finally, it&#x27;s &#x27;059e0bf8b84e&#x27;!!! 0v0\x00&quot;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ECDSA</tag>
      
      <tag>NTRU</tag>
      
      <tag>多项式RSA</tag>
      
      <tag>LWE</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NepCTF 2022</title>
    <link href="/2022/07/21/NepCTF%202022/"/>
    <url>/2022/07/21/NepCTF%202022/</url>
    
    <content type="html"><![CDATA[<h1 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h1><p>p,q极其近似，对n开根号取前后素数求出p,q</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> sympy<br><br>n = <span class="hljs-number">19955580242010925349026385826277356862322608500430230515928936214328341334162349408990409245298441768036250429913772953915537485025323789254947881868366911379717813713406996010824562645958646441589124825897348626601466594149743648589703323284919806371555688798726766034226044561171215392728880842964598154362131942585577722616354074267803330013886538511795383890371097812191816934883393255463554256887559394146851379087386846398690114807642170885445050850978579391063585254346364297374019309370189128443081285875218288166996242359495992824824109894071316525623741755423467173894812627595135675814789191820979950786791</span><br>e = <span class="hljs-number">65537</span><br>c_mod_p = <span class="hljs-number">32087476819370469840242617415402189007173583393431940289526096277088796498999849060235750455260897143027010566292541554247738211165214410052782944239055659645055068913404216441100218886028415095562520911677409842046139862877354601487378542714918065194110094824176055917454013488494374453496445104680546085816</span><br>c_mod_q = <span class="hljs-number">59525076096565721328350936302014853798695106815890830036017737946936659488345231377005951566231961079087016626410792549096788255680730275579842963019533111895111371299157077454009624496993522735647049730706272867590368692485377454608513865895352910757518148630781337674813729235453169946609851250274688614922</span><br>tmp = gmpy2.iroot(n,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br>q = sympy.nextprime(tmp)<br>p = n // q<br>d = gmpy2.invert(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br><span class="hljs-string">&#x27;&#x27;&#x27;m一般都不会很长，完全可以用p,q作为模数</span><br><span class="hljs-string">m = pow(c_mod_p,gmpy2.invert(e,p-1),p)</span><br><span class="hljs-string">print(long_to_bytes(m))</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>invq = gmpy2.invert(q,p)<br>invp = gmpy2.invert(p,q)<br>c = (c_mod_p*invq*q + c_mod_q*invp*p)%n<br>m = <span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><h1 id="中学数学"><a href="#中学数学" class="headerlink" title="中学数学"></a>中学数学</h1><p>已知$q&#x3D;next_prime(p+(p&gt;&gt;500))$，则<br>$$<br>q&#x3D;\lfloor (1+\frac{1}{2^{500}})p\rfloor+r<br>$$<br>其中r是满足q为素数的最小整数，<br>$$<br>n&#x3D;pq&#x3D;\lfloor (1+\dfrac{1}{2^{500}})p^2\rfloor+rp<br>$$<br>于是<br>$$<br>⌊(1+\dfrac{1}{2^{500}})n⌋&#x3D;⌊(1+\dfrac{1}{2^{500}})p⌋^2+⌊(1+\dfrac{1}{2^{500}})rp⌋&gt;⌊(1+\dfrac{1}{2^{500}})p⌋^2<br>$$<br>又有<br>$$<br>⌊(1+\dfrac{1}{2^{500}})n⌋&#x3D;⌊(1+\dfrac{1}{2^{500}})p⌋^2+⌊(1+\dfrac{1}{2^{500}})rp⌋&lt;⌊(1+\dfrac{1}{2^{500}})p⌋^2+2⌊(1+\dfrac{1}{2^{500}})rp⌋+r^2 &#x3D; q^2<br>$$<br>所以<br>$$<br>⌊(1+\dfrac{1}{2^{500}})p⌋&lt;\sqrt{\lfloor(1+\frac{1}{2^{500}})n\rfloor}&lt;\lfloor(1+\frac{1}{2^{500}})p\rfloor+r<br>$$<br>即<br>$$<br>q−r&lt;\sqrt{⌊(1+\dfrac{1}{2^{500}})n⌋}<br>$$<br>所以<br>$$<br>\lfloor(1+\frac{1}{2^{500}})p\rfloor&lt;\sqrt{\lfloor(1+\frac{1}{2^{500}})n\rfloor}&lt;\lfloor(1+\frac{1}{2^{500}})p\rfloor+r<br>$$<br>得到了无需爆破的形式。</p><p>但注意到next_prime算法的本质逻辑即是通过不断枚举奇数判断是否为素数，而这里n的分解保证了其必为素数，再判断素数的话属于是多此一举（浪费计算资源），所以我们可以根据素数分布公式或next_prime的方案向下枚举，得到唯一分解即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> next_prime,iroot,invert<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>n= <span class="hljs-number">13776679754786305830793674359562910178503525293501875259698297791987196248336062506951151345232816992904634767521007443634017633687862289928715870204388479258679577315915061740028494078672493226329115247979108035669870651598111762906959057540508657823948600824548819666985698501483261504641066030188603032714383272686110228221709062681957025702835354151145335986966796484545336983392388743498515384930244837403932600464428196236533563039992819408281355416477094656741439388971695931526610641826910750926961557362454734732247864647404836037293509009829775634926600458845832805085222154851310850740227722601054242115507</span><br>c= <span class="hljs-number">6253975396639688013947622483271226838902346034187241970785550830715516801386404802832796746428068354515287579293520381463797045055114065533348514688044281004266071342722261719304097175009672596062130939189624163728328429608123325223000160428261082507446604698345173189268359115612698883860396660563679801383563588818099088505120717238037463747828729693649297904035253985982099474025883550074375828799938384533606092448272306356003096283602697757642323962299153853559914553690456801745940925602411053578841756504799815771173679267389055390097241148454899265156705442028845650177138185876173539754631720573266723359186</span><br>e = <span class="hljs-number">0x10001</span><br><br>q = iroot((n + (n &gt;&gt; <span class="hljs-number">500</span>)),<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(isPrime(q))<span class="hljs-comment">#False</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    q = next_prime(q)<br>    <span class="hljs-keyword">if</span> n % q == <span class="hljs-number">0</span>:<br>        p = n//q<br>        d = invert(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>        m = <span class="hljs-built_in">pow</span>(c, d, n)<br>        flag = long_to_bytes(m)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;flag&#x27;</span> <span class="hljs-keyword">in</span> flag <span class="hljs-keyword">or</span> <span class="hljs-string">b&#x27;NepCTF&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h1 id="bd-key"><a href="#bd-key" class="headerlink" title="bd_key"></a>bd_key</h1><p><a href="https://eprint.iacr.org/2015/767.pdf">767.pdf (iacr.org)</a></p><p><a href="https://asecuritysite.com/encryption/dualec">Dual EC (asecuritysite.com)</a></p><p>比赛时思路:</p><hr><p>分析代码发现，<code>do_schnorr_identification()</code>能影响（或有作用）的是<code>challenge()</code>，分析<code>getRandomNBytes()</code>，发现给出的<code>c = __Dual_EC_DRBG(0)  </code>。</p><p>在忽略<code>s_i</code>等其他变量的，通过<code>getRandomNBytes()</code>分析<code>key</code>和<code>c</code>的获取：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">c = <span class="hljs-constructor">__Dual_EC_DRBG(<span class="hljs-params">self</span>.<span class="hljs-params">h_adin</span>)</span><br>key = <span class="hljs-constructor">__Dual_EC_DRBG(<span class="hljs-params">self</span>.<span class="hljs-params">h_adin</span>)</span> &gt;&gt; <span class="hljs-number">128</span><br></code></pre></td></tr></table></figure><p>虽然看上去可以通过<code>c</code>求<code>key</code>，但是在执行上面两个函数时会影响<code>s_i</code>,进而影响到<code>key</code>。</p><p>于是乎大致思路就是通过<code>c</code>来求出<code>r_i</code>之前的<code>s_i</code>，然后走一遍流程就可以得到<code>key</code>。</p><p>分析<code>__Dual_EC_DRBG()</code>，得出以下公式</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">s_i <span class="hljs-operator">=</span> (s_i*P)[<span class="hljs-number">0</span>]<br><span class="hljs-attribute">c</span> <span class="hljs-operator">=</span> r_i <span class="hljs-operator">=</span> (s_i*Q)[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>我们知道<code>P,Q,c</code>，利用P,Q和生成的点都在椭圆曲线上，兴许可以联立方程求出<code>s_i</code>？</p><p> 利用椭圆曲线方程，已知<code>x</code>求<code>y</code>，求出生成点，然后利用ECDLP求解<code>s_i</code>（好像跑不出来）</p><hr><p>注意类名，放网上一搜就有相关内容！！！</p><hr><p><code>Dual_EC_DBRG</code>问题，有兴趣的可以搜一搜其背后的故事，真有点魔幻。</p><p>整合一下上面的分析，生成<code>c</code>的过程有方程如下：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-comment">(1)</span>s_i = <span class="hljs-comment">(s_i*P)</span>[<span class="hljs-number">0</span>]<br><span class="hljs-comment">(2)</span>c = r_i = <span class="hljs-comment">(s_i*Q)</span>[<span class="hljs-number">0</span>]<br><span class="hljs-comment">(3)</span>s_i = <span class="hljs-comment">(s_i*P)</span>[<span class="hljs-number">0</span>]<br></code></pre></td></tr></table></figure><p>我们知道<code>d</code>，这就相当于给了个后门。</p><p>假设横坐标为<code>c</code>的点为<code>R = (c,y)</code>，根据上面的(1)(2)(3)公式以及$P&#x3D;d*Q$，有<br>$$<br>d*R &#x3D; d*(s_i*Q) &#x3D; s_i*(d*Q) &#x3D; s_i*P<br>$$<br>于是可以直接得到(3)的$s_i$ ，再走一遍流程就可以得到<code>key</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># sagemath</span><br><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br>p = <span class="hljs-number">115792089210356248762697446949407573530086143415290314195533631308867097853951</span><br>n = <span class="hljs-number">115792089210356248762697446949407573529996955224135760342422259061068512044369</span><br>b = <span class="hljs-number">0x5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b</span><br>E = EllipticCurve(GF(p), [-<span class="hljs-number">3</span>, b])<br>Qx = <span class="hljs-number">0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296</span><br>Qy = <span class="hljs-number">0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5</span><br>Q = E(Qx, Qy)<br>d = <span class="hljs-number">66604141534275704476445937214374130642068729921454877238730830814793201802544</span><br>P = d * Q<br>c = <span class="hljs-number">59100197418944667413449341413044666843726352095054393072750502893110293231642</span><br>ct = <span class="hljs-number">25645992443585671366815910836517434170297823176311632150463962979581372384075859802765045877741181123347569267185176</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dec_flag</span>(<span class="hljs-params">ct, key</span>):<br>    cipher = AES.new(key, AES.MODE_ECB)<br>    ct = long_to_bytes(ct)<br>    flag = cipher.decrypt(ct)<br>    <span class="hljs-built_in">print</span>(flag)<br><br><span class="hljs-keyword">assert</span> E.is_x_coord(c)<span class="hljs-comment">#检测c是否是x坐标，即存在点，x坐标为c</span><br>s1_Q = E.lift_x(c)<span class="hljs-comment">#找点</span><br>s2 = (d * s1_Q)[<span class="hljs-number">0</span>].lift()<br>s3 = (s2 * P)[<span class="hljs-number">0</span>].lift()<br>r3 = (s3 * Q)[<span class="hljs-number">0</span>].lift()<br>k = r3 &gt;&gt; ((<span class="hljs-number">32</span> - <span class="hljs-number">16</span>) * <span class="hljs-number">8</span>)<br>key = long_to_bytes(k)<br>dec_flag(ct, key)  <br></code></pre></td></tr></table></figure><h1 id="P-or-S"><a href="#P-or-S" class="headerlink" title="P or S"></a>P or S</h1><p>分析<code>enc()</code>函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">enc</span>(<span class="hljs-params">v</span>):<br>    t = v<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> keys:<br>        q = []<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> Pbox:<br>            q.append(<span class="hljs-built_in">sum</span>([t[k] <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> j]) % <span class="hljs-number">2</span>)<br>        t = [<span class="hljs-built_in">int</span>(q[j]) ^ <span class="hljs-built_in">int</span>(i[j]) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>)]<br>    <span class="hljs-keyword">return</span> t<br></code></pre></td></tr></table></figure><p>细心点可以发现 $q$ 的生成可以看成 $GF(2)$ 上的矩阵运算（行乘列，很像吧），假设 $Pbox$ 的矩阵为 $P$ (32×32)，传入的明文的矩阵为 $M$ (32×1)，则中间生成矩阵为 $T&#x3D;P*M$ ，$t$ 这一步就是额外加一个矩阵 $K_i$(32×1)，于是6次循环有如下公式<br>$$<br>c &#x3D; P*(P*(P*(P*(P*(P*M+K_1)+K_2)+K_3)+K_4)+K_5)+K_6 &#x3D; P^6*M+\sum_{i&#x3D;0}^{n&#x3D;6}P^{6-i}K_i<br>$$<br>通过已知一组明密文可以计算出对应的$\sum_{i&#x3D;0}^{n&#x3D;6}P^{6-i}K_i$ 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>Pbox = [<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">16</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>, <span class="hljs-number">16</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">22</span>, <span class="hljs-number">25</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">31</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>, <span class="hljs-number">16</span>, <span class="hljs-number">19</span>, <span class="hljs-number">21</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>],<br>    [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">27</span>, <span class="hljs-number">31</span>],<br>    [<span class="hljs-number">2</span>, <span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">29</span>, <span class="hljs-number">31</span>],<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">8</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>],<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">19</span>, <span class="hljs-number">23</span>, <span class="hljs-number">25</span>, <span class="hljs-number">27</span>, <span class="hljs-number">31</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">16</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">10</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">21</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>],<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">22</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">29</span>, <span class="hljs-number">31</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">17</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">30</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">11</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">30</span>],<br>    [<span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>, <span class="hljs-number">16</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">24</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">25</span>, <span class="hljs-number">29</span>, <span class="hljs-number">31</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>],<br>    [<span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">24</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>],<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">12</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">21</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">23</span>, <span class="hljs-number">26</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>],<br>    [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">16</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">25</span>, <span class="hljs-number">31</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">7</span>, <span class="hljs-number">10</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">25</span>, <span class="hljs-number">29</span>, <span class="hljs-number">31</span>],<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">25</span>, <span class="hljs-number">31</span>],<br>    [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">16</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">21</span>, <span class="hljs-number">23</span>, <span class="hljs-number">31</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">8</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">16</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">21</span>, <span class="hljs-number">26</span>, <span class="hljs-number">27</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>],<br>    [<span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>, <span class="hljs-number">15</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">28</span>],<br>    [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">14</span>, <span class="hljs-number">16</span>, <span class="hljs-number">17</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">21</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">25</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>],<br>    [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">17</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">20</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">26</span>, <span class="hljs-number">28</span>, <span class="hljs-number">29</span>, <span class="hljs-number">30</span>, <span class="hljs-number">31</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>, <span class="hljs-number">16</span>, <span class="hljs-number">19</span>, <span class="hljs-number">22</span>, <span class="hljs-number">23</span>, <span class="hljs-number">24</span>, <span class="hljs-number">25</span>, <span class="hljs-number">27</span>],<br>    [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">12</span>, <span class="hljs-number">16</span>, <span class="hljs-number">18</span>, <span class="hljs-number">19</span>, <span class="hljs-number">26</span>, <span class="hljs-number">30</span>]<br>]<br><br><span class="hljs-comment">#get Matrix P</span><br>P = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    t = [<span class="hljs-number">0</span>]*<span class="hljs-number">32</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(Pbox[i])):<br>        t[Pbox[i][j]] = <span class="hljs-number">1</span><br>    P.append(t)<br>P = Matrix(GF(<span class="hljs-number">2</span>),P)<br>P6 = P^<span class="hljs-number">6</span><br>inv_P6 = P6^(-<span class="hljs-number">1</span>)<br><br><span class="hljs-comment">#get sum of key_i*P^j</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getsum</span>(<span class="hljs-params">data,cipher</span>):<br>    A = [[<span class="hljs-built_in">int</span>(i)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data]<span class="hljs-comment">#A = matrix(32,1,A)</span><br>    A = Matrix(GF(<span class="hljs-number">2</span>),A)<br>    C = [[<span class="hljs-built_in">int</span>(i)] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cipher]<br>    C = Matrix(GF(<span class="hljs-number">2</span>),C)<br>    <span class="hljs-built_in">sum</span> = C - P6*A<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span><br><br><span class="hljs-comment">#to decrypto</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>(<span class="hljs-params">B,C</span>):<span class="hljs-comment">#B is key_sum,C is cipher</span><br>    C = Matrix(GF(<span class="hljs-number">2</span>),C)<br>    f = inv_P6*(C-B)<br>    <span class="hljs-keyword">return</span> f.<span class="hljs-built_in">list</span>()<br><br><br>ciphertext = <span class="hljs-string">&#x27;0111110000100101000001101011110111101100000010110011101111000101111110111111100100100010001011000101000110110011111101000001001000000101111000001110001111001001100100111000011011101111111101001011100000100100110011111101100111001100111111110001111011101100&#x27;</span><br><span class="hljs-built_in">format</span> = <span class="hljs-built_in">bin</span>(bytes_to_long(<span class="hljs-string">b&#x27;flag&#x27;</span>))[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">32</span>)<br><span class="hljs-built_in">sum</span> = getsum(<span class="hljs-built_in">format</span>,ciphertext[:<span class="hljs-number">32</span>])<br><br>fb = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(ciphertext), <span class="hljs-number">32</span>):<br>    t = solve(<span class="hljs-built_in">sum</span>,[[<span class="hljs-built_in">int</span>(j)] <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> ciphertext[i:i + <span class="hljs-number">32</span>]])<br>    fb += <span class="hljs-string">&quot;&quot;</span>.join(<span class="hljs-built_in">str</span>(j) <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> t)<br><br>flag = long_to_bytes(<span class="hljs-built_in">int</span>(fb,<span class="hljs-number">2</span>))<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><hr><p>参考：</p><p><a href="https://www.wolai.com/nepnep/g2DTj6mRtBk2mikVuCyaE6">NepCTF 2022 (wolai.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Dual_EC</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022 DSCTF</title>
    <link href="/2022/07/19/2022-dsctf/"/>
    <url>/2022/07/19/2022-dsctf/</url>
    
    <content type="html"><![CDATA[<h1 id="picproblem"><a href="#picproblem" class="headerlink" title="picproblem"></a>picproblem</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> array, zeros, uint8<br><span class="hljs-keyword">import</span> gmpy2 <span class="hljs-keyword">as</span> gp<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">from</span> key <span class="hljs-keyword">import</span> x,y,kn,hint<br>image = cv2.imread(<span class="hljs-string">&quot;flag.jpg&quot;</span>)<br>img_gray = cv2.cvtColor(image,cv2.COLOR_RGB2GRAY)<br>imagearray = array(img_gray)<br>h = <span class="hljs-built_in">len</span>(imagearray)<br>w = <span class="hljs-built_in">len</span>(imagearray[<span class="hljs-number">0</span>])<br><br><span class="hljs-keyword">assert</span> <span class="hljs-number">1301149798051259562945444365741194129602596348352064372203373</span>*<span class="hljs-built_in">pow</span>(x, <span class="hljs-number">2</span>) == <span class="hljs-number">1175915431138623881271508290982969935822476052419526528443170552123</span>*<span class="hljs-built_in">pow</span>(y, <span class="hljs-number">2</span>) + <span class="hljs-number">1301149798051259562945444365741194129602596348352064372203373</span><br>x1 = <span class="hljs-built_in">round</span>(x/y*<span class="hljs-number">0.001</span>, <span class="hljs-number">16</span>)<br>u1 = y*<span class="hljs-number">3650</span>/x<br>x2 = <span class="hljs-built_in">round</span>(x/y*<span class="hljs-number">0.00101</span>, <span class="hljs-number">16</span>)<br>u2 = y*<span class="hljs-number">3675</span>/x<br>x3 = <span class="hljs-built_in">round</span>(x/y*<span class="hljs-number">0.00102</span>, <span class="hljs-number">16</span>)<br>u3 = y*<span class="hljs-number">3680</span>/x<br>kt = [x1, x2, x3]<br><br>temp_image = zeros(shape=[h, w, <span class="hljs-number">3</span>], dtype=uint8)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(temp_image))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(temp_image[<span class="hljs-number">0</span>]))<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(temp_image[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]))<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, kn):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, h):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, w):<br>            x1 = u1 * x1 * (<span class="hljs-number">1</span> - x1)<br>            x2 = u2 * x2 * (<span class="hljs-number">1</span> - x2)<br>            x3 = u3 * x3 * (<span class="hljs-number">1</span> - x3)<br>            r1 = <span class="hljs-built_in">int</span>(x1*<span class="hljs-number">255</span>)<br>            r2 = <span class="hljs-built_in">int</span>(x2*<span class="hljs-number">255</span>)<br>            r3 = <span class="hljs-built_in">int</span>(x3*<span class="hljs-number">255</span>)<br>            <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>):<br>                temp_image[i][j][t] = (((r1+r2) ^ r3)+imagearray[i][j][t]) % <span class="hljs-number">256</span><br>    x1 = kt[<span class="hljs-number">0</span>]<br>    x2 = kt[<span class="hljs-number">1</span>]<br>    x3 = kt[<span class="hljs-number">2</span>]<br><br>encflagarray = Image.fromarray(temp_image)<br>encflagarray.show()<br>encflagarray.save(<span class="hljs-string">&quot;encflag.jpg&quot;</span>)<br><span class="hljs-comment">#************************************hint**************************************</span><br>m = hint<br>p = getPrime(<span class="hljs-number">512</span>)<br>q = getPrime(<span class="hljs-number">512</span>)<br>n = p * q<br>e = <span class="hljs-number">65537</span><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>dp = gp.invert(e, p-<span class="hljs-number">1</span>)<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><span class="hljs-comment">#n =  85413323752199019806030766630760449394238054889872415531186815348349883843039718091361611175963675771467536496812507338620957273406076058263122453235926619595761737396698699834116678598534261542535530241537247151318756003375573850725841254167462648747492270335084402716816450008370008491069875351593380154253</span><br><span class="hljs-comment">#dp =  1576424214336939000475035870826282526256046059505538052583882122452307602095912733650442447289122473348318614749578285418144935611098423641334952097553125</span><br><span class="hljs-comment">#c =  53653254613997095145108444611576166902006080900281661447007750088487109015427510365774527924664116641019490904245926171500894236952984157500461367769566121581870986304353174732328118576440353500038670030097108081972287049673200783198844842527470746431369314585103203118824985764754487936404004696485346196488</span><br><br></code></pre></td></tr></table></figure><p>hint部分求解简单，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br>e = <span class="hljs-number">65537</span><br>n =  <span class="hljs-number">85413323752199019806030766630760449394238054889872415531186815348349883843039718091361611175963675771467536496812507338620957273406076058263122453235926619595761737396698699834116678598534261542535530241537247151318756003375573850725841254167462648747492270335084402716816450008370008491069875351593380154253</span><br>dp =  <span class="hljs-number">1576424214336939000475035870826282526256046059505538052583882122452307602095912733650442447289122473348318614749578285418144935611098423641334952097553125</span><br>c =  <span class="hljs-number">53653254613997095145108444611576166902006080900281661447007750088487109015427510365774527924664116641019490904245926171500894236952984157500461367769566121581870986304353174732328118576440353500038670030097108081972287049673200783198844842527470746431369314585103203118824985764754487936404004696485346196488</span><br>pd = e*dp-<span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ext_euclid</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">if</span> b == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, a<br>    <span class="hljs-keyword">else</span>:<br>        x, y, q = ext_euclid(b, a % b)<br>        x, y = y, (x - (a // b) * y)<br>        <span class="hljs-keyword">return</span> x, y, q<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mod_inv</span>(<span class="hljs-params">a, b</span>):<br>    <span class="hljs-keyword">return</span> ext_euclid(a, b)[<span class="hljs-number">0</span>] % b   <span class="hljs-comment">#函数返回的第一个数%b</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,e):<br>    <span class="hljs-keyword">if</span> pd % i == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> n % (pd//i+<span class="hljs-number">1</span>) == <span class="hljs-number">0</span>:<br>            p = pd//i+<span class="hljs-number">1</span><br>            q = n//p<br>            fn = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>            d = mod_inv(e,fn)<br>            m = <span class="hljs-built_in">pow</span>(c,d,n)<br>            <span class="hljs-built_in">print</span>(libnum.n2s(m))<br><span class="hljs-comment">#b&#x27;*********** kn = 8 **************&#x27;</span><br></code></pre></td></tr></table></figure><p>找到相关文章：<a href="https://icode.best/i/74795139605126">Logistic映射在图像加密中的应用-爱代码爱编程 (icode.best)</a></p><p>但差解x,y的方程。x，y的方程化简如下：<br>$$<br>x^2 &#x3D; 903751*y^2 + 1<br>$$<br>查阅发现是<a href="https://oi-wiki.org/math/number-theory/pell-equation/">Pell 方程 (oi-wiki.org)</a>，利用连分数对其求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">Pell</span>(<span class="hljs-params">D</span>):<br>    temp = continued_fraction(sqrt(D))<br>    i=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        i+=<span class="hljs-number">1</span><br>        denom = temp.denominator(i)<br>        num = temp.numerator(i)<br>        <span class="hljs-keyword">if</span> num^<span class="hljs-number">2</span> - D*denom^<span class="hljs-number">2</span> == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> num,denom<br><br>Pell(<span class="hljs-number">903751</span>)<br><span class="hljs-comment">#(1524993807674193841904821512553946379967374698278296055158206699585083472817489721493862711615915407326315660670541801753616900039772802728925226091475860689682871555641241500183892397513037971186709123629077584204226084524811673794984687840178772052545441242927492902583547355565525538664836516589721942980577095421561886873928634330640979800040574060218872787212426630202508118484269553983399179155489583316400107655564222453437462724749097265122300644936717434151331633092585140183510349369422527440264746843972834927860065578557836150798690530172694679514231722613822246810010130005324032492360889531553803832398604563088256410481865243771216990603166993198935358471831328395618477974126824762560872337594997394218234427050399655270848385995088586420526886397320949350980406936200217112040971433660322179072288438842964957568719036794320203116263329623589339367497303140938070334557345834226085189140858264388063745189833584962825509843279678826240558480527560, 1604145232044543633656616254647708451166351104281510395737885491696385806407267633308545985473789119651681711082023113933085624628557168423578747544761597312012713558891523798820667618256495398479378172124019360339427592449217208805888502769358288779859969965560832505104388955091637704481336716722418336373334467787371085728212260231330510705797124224353810509272250940285165605853594811893804251478850270703294638335268305881655491870226553141286503109543313414279220480589704210363277523457948607498351377843904335637032510420141505975997452077477296326035048463179997347136990808017374750824810458605412236391952910679246288287664717533857743462935708681309073915761377477454479206054016260422865457862565353002789887917196437750618212918420129464330488021272187952177063175896447842395209693304502304253471733746765257510395226972224876277717457205220726240042035259947453816668460757995771018155703600926745905595162857982860955545877343914746294034180707)</span><br></code></pre></td></tr></table></figure><p>最后解密</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">from</span> numpy <span class="hljs-keyword">import</span> array, zeros, uint8<br><br>image = cv2.imread(<span class="hljs-string">&quot;encflag.jpg&quot;</span>)<br>imagearray = array(image)<br><span class="hljs-built_in">print</span>(imagearray.shape)<br>h = <span class="hljs-built_in">len</span>(imagearray)<span class="hljs-comment">#35</span><br>w = <span class="hljs-built_in">len</span>(imagearray[<span class="hljs-number">0</span>])<span class="hljs-comment">#261</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">img,key</span>):<br>    <span class="hljs-comment"># 混沌系统初始条件</span><br>    x1 = key[<span class="hljs-number">0</span>]<br>    x2 = key[<span class="hljs-number">1</span>]<br>    x3 = key[<span class="hljs-number">2</span>]<br>    <span class="hljs-comment"># 分岔参数u</span><br>    u1 = key[<span class="hljs-number">3</span>]<br>    u2 = key[<span class="hljs-number">4</span>]<br>    u3 = key[<span class="hljs-number">5</span>]<br>    <span class="hljs-comment"># 加密次数</span><br>    n = key[<span class="hljs-number">6</span>]<br>    <span class="hljs-comment"># 一个临时数组用于返回加密后的图像，可以不影响传入的加密图像</span><br>    img_tmp = zeros(shape=[h, w, <span class="hljs-number">3</span>], dtype=uint8)<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, n):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, h):<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, w):<br>                x1 = u1 * x1 * (<span class="hljs-number">1</span> - x1)<br>                x2 = u2 * x2 * (<span class="hljs-number">1</span> - x2)<br>                x3 = u3 * x3 * (<span class="hljs-number">1</span> - x3)<br>                r1 = <span class="hljs-built_in">int</span>(x1 * <span class="hljs-number">255</span>)<br>                r2 = <span class="hljs-built_in">int</span>(x2 * <span class="hljs-number">255</span>)<br>                r3 = <span class="hljs-built_in">int</span>(x3 * <span class="hljs-number">255</span>)<br>                <span class="hljs-keyword">for</span> t <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>):<br>                    img_tmp[i][j][t] = (img[i][j][t] - ((r1 + r2) ^ r3)) % <span class="hljs-number">256</span><br>        x1 = key[<span class="hljs-number">0</span>]<br>        x2 = key[<span class="hljs-number">1</span>]<br>        x3 = key[<span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">return</span> img_tmp<br><br><br>x, y = (<span class="hljs-number">1524993807674193841904821512553946379967374698278296055158206699585083472817489721493862711615915407326315660670541801753616900039772802728925226091475860689682871555641241500183892397513037971186709123629077584204226084524811673794984687840178772052545441242927492902583547355565525538664836516589721942980577095421561886873928634330640979800040574060218872787212426630202508118484269553983399179155489583316400107655564222453437462724749097265122300644936717434151331633092585140183510349369422527440264746843972834927860065578557836150798690530172694679514231722613822246810010130005324032492360889531553803832398604563088256410481865243771216990603166993198935358471831328395618477974126824762560872337594997394218234427050399655270848385995088586420526886397320949350980406936200217112040971433660322179072288438842964957568719036794320203116263329623589339367497303140938070334557345834226085189140858264388063745189833584962825509843279678826240558480527560</span>, <span class="hljs-number">1604145232044543633656616254647708451166351104281510395737885491696385806407267633308545985473789119651681711082023113933085624628557168423578747544761597312012713558891523798820667618256495398479378172124019360339427592449217208805888502769358288779859969965560832505104388955091637704481336716722418336373334467787371085728212260231330510705797124224353810509272250940285165605853594811893804251478850270703294638335268305881655491870226553141286503109543313414279220480589704210363277523457948607498351377843904335637032510420141505975997452077477296326035048463179997347136990808017374750824810458605412236391952910679246288287664717533857743462935708681309073915761377477454479206054016260422865457862565353002789887917196437750618212918420129464330488021272187952177063175896447842395209693304502304253471733746765257510395226972224876277717457205220726240042035259947453816668460757995771018155703600926745905595162857982860955545877343914746294034180707</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-number">1301149798051259562945444365741194129602596348352064372203373</span>*<span class="hljs-built_in">pow</span>(x, <span class="hljs-number">2</span>) == <span class="hljs-number">1175915431138623881271508290982969935822476052419526528443170552123</span>*<span class="hljs-built_in">pow</span>(y, <span class="hljs-number">2</span>) + <span class="hljs-number">1301149798051259562945444365741194129602596348352064372203373</span><br>x1 = <span class="hljs-built_in">round</span>(x/y*<span class="hljs-number">0.001</span>, <span class="hljs-number">16</span>)<br>u1 = y*<span class="hljs-number">3650</span>/x<br>x2 = <span class="hljs-built_in">round</span>(x/y*<span class="hljs-number">0.00101</span>, <span class="hljs-number">16</span>)<br>u2 = y*<span class="hljs-number">3675</span>/x<br>x3 = <span class="hljs-built_in">round</span>(x/y*<span class="hljs-number">0.00102</span>, <span class="hljs-number">16</span>)<br>u3 = y*<span class="hljs-number">3680</span>/x<br>kn = <span class="hljs-number">8</span><br>kt = [x1, x2, x3, u1, u2, u3, kn]<br><span class="hljs-built_in">print</span>(kt)<br>temp_image = decrypt(imagearray, kt)<br>flagarray = Image.fromarray(temp_image)<br>flagarray.show()<br>flagarray.save(<span class="hljs-string">&quot;flag.jpg&quot;</span>)<br></code></pre></td></tr></table></figure><h1 id="RSA330"><a href="#RSA330" class="headerlink" title="RSA330"></a>RSA330</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python">alarm(<span class="hljs-number">10</span>)<br>PoWp = random_prime(<span class="hljs-number">2</span>^<span class="hljs-number">100</span>)<br>PoWq = random_prime(<span class="hljs-number">2</span>^<span class="hljs-number">100</span>)<br>PoW = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">f&quot;Factor <span class="hljs-subst">&#123;PoWp*PoWq&#125;</span>:\n&quot;</span>))<br><span class="hljs-keyword">assert</span> PoW == PoWp + PoWq<br><br>alarm(<span class="hljs-number">60</span>)<br>se = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;plz select the size of e: &quot;</span>))<br><span class="hljs-keyword">assert</span> se &gt; <span class="hljs-number">16</span> <span class="hljs-keyword">and</span> se &lt; <span class="hljs-number">1024</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    p = random_prime(<span class="hljs-number">2</span>^<span class="hljs-number">512</span>)<br>    q = random_prime(<span class="hljs-number">2</span>^<span class="hljs-number">512</span>)<br>    e = ZZ.random_element(<span class="hljs-number">2</span>^(se-<span class="hljs-number">1</span>),<span class="hljs-number">2</span>^se)<br>    <span class="hljs-keyword">if</span> gcd(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">break</span><br>        <br><span class="hljs-built_in">print</span>(e, e.inverse_mod(p-<span class="hljs-number">1</span>)&gt;&gt;<span class="hljs-number">330</span>, e.inverse_mod(q-<span class="hljs-number">1</span>)&gt;&gt;<span class="hljs-number">330</span>)<br>pq = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">f&quot;RSA330 - <span class="hljs-subst">&#123;p*q&#125;</span>:\n&quot;</span>))<br><span class="hljs-keyword">assert</span> pq == p + q<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>).read())<br></code></pre></td></tr></table></figure><p>sage中有大数分解的函数，牛哇！</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">qsieve</span>(<span class="hljs-number">184378666276085226424026508072440771590659834511908100578309</span>)#<br><span class="hljs-built_in">factor</span>(<span class="hljs-number">184378666276085226424026508072440771590659834511908100578309</span>)#所有素数<br><span class="hljs-built_in">divisors</span>(<span class="hljs-number">184378666276085226424026508072440771590659834511908100578309</span>)#所有因数<br></code></pre></td></tr></table></figure><p>参考论文：[Approximate Divisor Multiples](<a href="https://eprint.iacr.org/2022/271.pdf">271.pdf (iacr.org)</a>)</p><p>根据论文，选取$e&gt;N^{\dfrac{1}{12}}$，即$e.bit_length()&gt;85.333$。</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031020776.png"/><p>构造上述<code>A</code>可以得到<code>k*l</code>，然后对等式(5)对<code>e</code>取余得到：<br>$$<br>k+l &#x3D; 1-kl(N-1)\quad mod\ e<br>$$<br>得到<code>k+l</code>，解方程 $(x-k)(x-l)&#x3D;0$ 可以求出<code>k,l</code>。</p><p>利用<code>Howgrave-Graham</code>定理，构建如下格：</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031020366.png"/><p>其中每行为 $g_i(x) :&#x3D; f^i(x)k^{m-i}N^{max(0,t-i)}$ ，$f(x):&#x3D;x+a$，$f(x)$的构造过程如下</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031021553.png"/><p>也就是将 域为<code>kp</code>上的待解方程$f &#x3D; e(dp^{(M)}*2^{330}+x)+k-1$ （其中 $x &#x3D; dp^{(L)}$ ）的未知数的系数化为1（f.monic()）就得到了。</p><p>用待求得范围($2^{330}$)先代替$x$进行LLL()，再替换回来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">C</span>(<span class="hljs-params">a,b</span>):<br>    ret = <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(b):<br>        ret*=(a-i)<br>        ret/=(b-i)<br>    <span class="hljs-keyword">return</span> ret<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dec</span>(<span class="hljs-params">e,dp,k,n</span>):<br>    m,t=<span class="hljs-number">20</span>,<span class="hljs-number">10</span><br>    P = Zmod(k*n)[<span class="hljs-string">&#x27;x&#x27;</span>]<br>    x = P.gen()<br>    f = e*(dp+x) - <span class="hljs-number">1</span> + k<br>    f = f.monic()<br>    f = f.change_ring(ZZ)<br>    a = <span class="hljs-built_in">list</span>(f)[<span class="hljs-number">0</span>]<span class="hljs-comment">#常数a</span><br>    L=matrix(ZZ,m+<span class="hljs-number">1</span>,m+<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i+<span class="hljs-number">1</span>):<br>            L[i,j] = k^(m-i)*n^<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,t-i)*C(i,j)*<span class="hljs-built_in">pow</span>(a,i-j)*<span class="hljs-built_in">pow</span>((<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">330</span>),j)<br>    L = L.LLL()<br>    P = ZZ[<span class="hljs-string">&#x27;y&#x27;</span>]<br>    y = P.gen()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m+<span class="hljs-number">1</span>):<br>            L[i,j]=L[i,j]//<span class="hljs-built_in">pow</span>(<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">330</span>,j)<span class="hljs-comment">#矩阵并不能直接乘pow(y,j)，但取其行，对其中每一列可以操作</span><br>    <br>    L = L*vector([y^i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m+<span class="hljs-number">1</span>)])<span class="hljs-comment">#对应多个多项式方程</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> L:<br>        r = i.roots()<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(r) &gt; <span class="hljs-number">0</span>:<br>            <span class="hljs-comment">#print(r)</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(r[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]+dp)<br><br>e = <span class="hljs-number">715817461603291345056500257</span> <br>dpm = <span class="hljs-number">443241367152182375089742080168879750401826010196673998</span> <br>dqm = <span class="hljs-number">976237271910199872999512149615932692866377555493664771</span><br>n = <span class="hljs-number">27691523316352200817507757939445581338449495137376447632107748594499386764483747774332325018477605530261133431823935050480971625479504155045304870831284969481372795315373409317596161046086158910790777312868535076795758303488626394277433645375132000508031171867198231228726163618498261234493051930360826747417</span><br>kbits = <span class="hljs-number">330</span><br>A = (<span class="hljs-number">2</span>^(<span class="hljs-number">2</span>*kbits)*e^<span class="hljs-number">2</span>*dpm*dqm)//n + <span class="hljs-number">1</span><br>b = (<span class="hljs-number">1</span> - A*(n-<span class="hljs-number">1</span>))%e<br>delta = b^<span class="hljs-number">2</span> - <span class="hljs-number">4</span>*A<br><span class="hljs-keyword">if</span> delta &gt; <span class="hljs-number">0</span>:<br>    <span class="hljs-keyword">assert</span> sqrt(delta)^<span class="hljs-number">2</span> == delta<br>    k = (b+sqrt(delta))//<span class="hljs-number">2</span><br>    l = (b-sqrt(delta))//<span class="hljs-number">2</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;k = <span class="hljs-subst">&#123;k&#125;</span>&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;l = <span class="hljs-subst">&#123;l&#125;</span>&#x27;</span>)<br><br>result = [dec(e,dpm&lt;&lt;kbits,k,n),dec(e,dqm&lt;&lt;kbits,l,n),dec(e,dpm&lt;&lt;kbits,l,n),dec(e,dqm&lt;&lt;kbits,k,n)]<br><span class="hljs-built_in">print</span>(result)<br>dp = result[<span class="hljs-number">2</span>]<br>dq = result[<span class="hljs-number">3</span>]<br>p = (e*dp-<span class="hljs-number">1</span>)//l+<span class="hljs-number">1</span><br>q = (e*dq-<span class="hljs-number">1</span>)//k+<span class="hljs-number">1</span><br><span class="hljs-keyword">assert</span> n == p*q<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p = <span class="hljs-subst">&#123;p&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;q = <span class="hljs-subst">&#123;q&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><hr><p>参考：</p><p><a href="https://icode.best/i/74795139605126">Logistic映射在图像加密中的应用-爱代码爱编程 (icode.best)</a></p><p><a href="https://oi-wiki.org/math/number-theory/pell-equation/">Pell 方程 (oi-wiki.org)</a></p><p>[Approximate Divisor Multiples](<a href="https://eprint.iacr.org/2022/271.pdf">271.pdf (iacr.org)</a>)</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzMTQ4NzE2Ng==&mid=2247492424&idx=1&sn=c1fc72dc278300d0e3935a781bb334e5&chksm=e8a1c099dfd6498f46cdd747027c56d620e728d73b260683c6ed9705eb7d3ab54e7597b38dcc&mpshare=1&scene=23&srcid=0716WzO8bts7RjWc7ooGARI4&sharer_sharetime=1657983613471&sharer_shareid=122e5be9c4961e59957c3603ed41e762#rd">2022DSCTF-wp (qq.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pell</tag>
      
      <tag>RSA</tag>
      
      <tag>LLL</tag>
      
      <tag>Logistic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2022DASCTF MAY 出题人挑战赛</title>
    <link href="/2022/07/13/2022DASCTF%20MAY%20%E5%87%BA%E9%A2%98%E4%BA%BA%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <url>/2022/07/13/2022DASCTF%20MAY%20%E5%87%BA%E9%A2%98%E4%BA%BA%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="Yusa的密码学课堂——一见如故"><a href="#Yusa的密码学课堂——一见如故" class="headerlink" title="Yusa的密码学课堂——一见如故"></a>Yusa的密码学课堂——一见如故</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Myrand</span>():<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,seed</span>):<br>self.index = <span class="hljs-number">0</span><br>self.isInit = <span class="hljs-number">1</span><br>self.MT = [seed] + [<span class="hljs-number">0</span>] * <span class="hljs-number">623</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">624</span>):<br>t = <span class="hljs-number">1314433253</span> * (self.MT[i-<span class="hljs-number">1</span>] ^ (self.MT[i-<span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">30</span>)) + <span class="hljs-number">1</span><br>self.MT[i] = t &amp; <span class="hljs-number">0xffffffff</span><span class="hljs-comment">#32bit</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>y = (self.MT[i] &amp; <span class="hljs-number">0x80000000</span>) + (self.MT[(i+<span class="hljs-number">1</span>)%<span class="hljs-number">624</span>] &amp; <span class="hljs-number">0x7fffffff</span>)<br>self.MT[i] = self.MT[(i+<span class="hljs-number">397</span>)%<span class="hljs-number">624</span>] ^ (y &gt;&gt; <span class="hljs-number">1</span>)<br><span class="hljs-keyword">if</span> y &amp; <span class="hljs-number">1</span>:<br>self.MT[i] ^= <span class="hljs-number">2567483520</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">rand</span>(<span class="hljs-params">self</span>):<br><span class="hljs-keyword">if</span> self.index == <span class="hljs-number">0</span>:<br>self.generate()<br>y = self.MT[self.index]<br>y = y ^ self.cs2l(y, <span class="hljs-number">11</span>) ^ self.cs2l(y,<span class="hljs-number">15</span>)<br>y = y ^ self.cs2r(y,<span class="hljs-number">7</span>) ^ self.cs2r(y,<span class="hljs-number">19</span>)<br>self.index = (self.index + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span><br><span class="hljs-keyword">return</span> y<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cs2l</span>(<span class="hljs-params">self, y, shift</span>):<br><span class="hljs-keyword">return</span> ((y &lt;&lt; shift) ^ (y &gt;&gt; (<span class="hljs-number">32</span> - shift))) &amp; <span class="hljs-number">0xffffffff</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cs2r</span>(<span class="hljs-params">self, y, shift</span>):<br><span class="hljs-keyword">return</span> ((y &gt;&gt; shift) ^ (y &lt;&lt; (<span class="hljs-number">32</span> - shift))) &amp; <span class="hljs-number">0xffffffff</span><br><br><span class="hljs-keyword">import</span> os<br>r = Myrand(<span class="hljs-built_in">int</span>(os.urandom(<span class="hljs-number">4</span>).<span class="hljs-built_in">hex</span>(),<span class="hljs-number">16</span>))<br>out = []<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>out.append(r.rand())<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>f.write(<span class="hljs-built_in">str</span>(out))<br><br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br>flag = <span class="hljs-string">&#x27;DASCTF&#123;&#x27;</span> + md5(<span class="hljs-built_in">str</span>(r.rand()).encode()).hexdigest() + <span class="hljs-string">&#x27;&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>（小声逼逼：之前遇到了类似的题，但是文章因个人原因丢失了）</p><p>不难发现，关键之处在于如何破解 <code>cs2l</code> 和 <code>cs2r</code> ，破解了就可以求出 <code>MT</code> 序列，然后按题目中 <code>flag</code> 部分的操作就可以得出 <code>flag</code> 。</p><p>观察 <code>cs2l</code> 和 <code>cs2r</code> ，发现其功能是循环移位。而且特征如下：<br>$$<br>y &#x3D; x ⊕ (x⋘p) ⊕(x⋘q)\tag 1<br>$$<br>网上觅得一篇文章：<a href="https://www.cnblogs.com/Tf1shC4T/p/15927062.html">循环移位异或加密 - Tf1shC4T - 博客园 (cnblogs.com)</a></p><p>在长度为  $2^n$ 的二进制串中，循环移位异或变换中，如果有奇数项，那么这个变换是可逆的，否则就是不可逆的。</p><p>分析上式，两边同时 $⋘p$ 和 $⋘q$ ，得<br>$$<br>y⋘p &#x3D; (x⋘p)⊕(x⋘2p)⊕(x⋘(p+q))\tag 2<br>$$</p><p>$$<br>y⋘q &#x3D; (x⋘q)⊕(x⋘(p+q))⊕(x⋘2q)\tag 3<br>$$</p><p>$(1)*(2)*(3)$ 得<br>$$<br>y_1 &#x3D; y⊕(y⋘p) ⊕(y⋘q) &#x3D; x⊕(x⋘2p) ⊕(x⋘2q)<br>$$<br>同理<br>$$<br>y_2 &#x3D; y_1⊕(y_1⋘2p) ⊕(y_1⋘2q) &#x3D; x⊕(x⋘4p) ⊕(x⋘4q)<br>$$<br>$$<br>y_n &#x3D; y_{n-1}⊕(y_{n-1}⋘2^{n-1}p) ⊕(y2⋘2^{n-1}q) &#x3D; x⊕(x⋘2^np) ⊕(x⋘2^nq) &#x3D; x\quad (bitlen &#x3D; 2^n)<br>$$</p><p>如此就可以求出原来得 <code>x</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><br>bitlen = <span class="hljs-number">32</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mov</span>(<span class="hljs-params">y,k</span>):<span class="hljs-comment">#循环左移</span><br>    biny = <span class="hljs-built_in">bin</span>(y)[<span class="hljs-number">2</span>:].zfill(bitlen)<br>    k = k % bitlen<br>    biny = biny[k:] + biny[:k]<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(biny,<span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">y,ks</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bitlen):<br>        y = y ^ mov(y,ks[<span class="hljs-number">0</span>]) ^ mov(y,ks[<span class="hljs-number">1</span>])<br>        ks = [ k&lt;&lt;<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> ks]<br>    <span class="hljs-keyword">return</span> y<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Myrand</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,MT</span>):<br>        self.index = <span class="hljs-number">0</span><br>        self.isInit = <span class="hljs-number">1</span><br>        self.MT = MT<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">generate</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>            y = (self.MT[i] &amp; <span class="hljs-number">0x80000000</span>) + (self.MT[(i+<span class="hljs-number">1</span>)%<span class="hljs-number">624</span>] &amp; <span class="hljs-number">0x7fffffff</span>)<br>            self.MT[i] = self.MT[(i+<span class="hljs-number">397</span>)%<span class="hljs-number">624</span>] ^ (y &gt;&gt; <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">if</span> y &amp; <span class="hljs-number">1</span>:<br>                self.MT[i] ^= <span class="hljs-number">2567483520</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">rand</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> self.index == <span class="hljs-number">0</span>:<br>            self.generate()<br>        y = self.MT[self.index]<br>        y = y ^ self.cs2l(y, <span class="hljs-number">11</span>) ^ self.cs2l(y,<span class="hljs-number">15</span>)<br>        y = y ^ self.cs2r(y,<span class="hljs-number">7</span>) ^ self.cs2r(y,<span class="hljs-number">19</span>)<br>        self.index = (self.index + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span><br>        <span class="hljs-keyword">return</span> y<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cs2l</span>(<span class="hljs-params">self, y, shift</span>):<br>        <span class="hljs-keyword">return</span> ((y &lt;&lt; shift) ^ (y &gt;&gt; (<span class="hljs-number">32</span> - shift))) &amp; <span class="hljs-number">0xffffffff</span><span class="hljs-comment">#循环移位</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">cs2r</span>(<span class="hljs-params">self, y, shift</span>):<br>        <span class="hljs-keyword">return</span> ((y &gt;&gt; shift) ^ (y &lt;&lt; (<span class="hljs-number">32</span> - shift))) &amp; <span class="hljs-number">0xffffffff</span><span class="hljs-comment">#循环移位</span><br><br>out = [<span class="hljs-number">3417500333</span>, <span class="hljs-number">4091726338</span>, <span class="hljs-number">652603332</span>, <span class="hljs-number">4187304543</span>, <span class="hljs-number">4293795290</span>, <span class="hljs-number">1622245003</span>, <span class="hljs-number">3383443782</span>, <span class="hljs-number">2420250331</span>, <span class="hljs-number">322010852</span>, <span class="hljs-number">1604005753</span>, <span class="hljs-number">3137930218</span>, <span class="hljs-number">1074571824</span>, <span class="hljs-number">1566336258</span>, <span class="hljs-number">2754341076</span>, <span class="hljs-number">1059426660</span>, <span class="hljs-number">2461569360</span>, <span class="hljs-number">613134153</span>, <span class="hljs-number">860561774</span>, <span class="hljs-number">3003069274</span>, <span class="hljs-number">553387944</span>, <span class="hljs-number">1949778231</span>, <span class="hljs-number">249886857</span>, <span class="hljs-number">2322866121</span>, <span class="hljs-number">3685855175</span>, <span class="hljs-number">1977923546</span>, <span class="hljs-number">1887238269</span>, <span class="hljs-number">253812990</span>, <span class="hljs-number">2188417674</span>, <span class="hljs-number">2718707711</span>, <span class="hljs-number">1599975569</span>, <span class="hljs-number">3254935456</span>, <span class="hljs-number">3199641169</span>, <span class="hljs-number">362166522</span>, <span class="hljs-number">1378687155</span>, <span class="hljs-number">912036995</span>, <span class="hljs-number">3174049018</span>, <span class="hljs-number">780042016</span>, <span class="hljs-number">970421905</span>, <span class="hljs-number">3468971406</span>, <span class="hljs-number">801660807</span>, <span class="hljs-number">833926127</span>, <span class="hljs-number">473587885</span>, <span class="hljs-number">158979812</span>, <span class="hljs-number">405306558</span>, <span class="hljs-number">1363084996</span>, <span class="hljs-number">2023076543</span>, <span class="hljs-number">2069797730</span>, <span class="hljs-number">718155249</span>, <span class="hljs-number">1641186127</span>, <span class="hljs-number">3616747747</span>, <span class="hljs-number">1575693921</span>, <span class="hljs-number">3856591855</span>, <span class="hljs-number">223881884</span>, <span class="hljs-number">3002184567</span>, <span class="hljs-number">1666647440</span>, <span class="hljs-number">617661934</span>, <span class="hljs-number">2673101022</span>, <span class="hljs-number">885332395</span>, <span class="hljs-number">3391329168</span>, <span class="hljs-number">1640225363</span>, <span class="hljs-number">2565685644</span>, <span class="hljs-number">3892963352</span>, <span class="hljs-number">3034627488</span>, <span class="hljs-number">2415435183</span>, <span class="hljs-number">3648712566</span>, <span class="hljs-number">2140877952</span>, <span class="hljs-number">1303506086</span>, <span class="hljs-number">2455662362</span>, <span class="hljs-number">1720382700</span>, <span class="hljs-number">3970268445</span>, <span class="hljs-number">2579167586</span>, <span class="hljs-number">4117229324</span>, <span class="hljs-number">846645263</span>, <span class="hljs-number">3252991293</span>, <span class="hljs-number">79067029</span>, <span class="hljs-number">2756800392</span>, <span class="hljs-number">2212447526</span>, <span class="hljs-number">2203329967</span>, <span class="hljs-number">1270408703</span>, <span class="hljs-number">740176928</span>, <span class="hljs-number">3176125705</span>, <span class="hljs-number">166800854</span>, <span class="hljs-number">3327343902</span>, <span class="hljs-number">2079714725</span>, <span class="hljs-number">3702269956</span>, <span class="hljs-number">3659849279</span>, <span class="hljs-number">3658666909</span>, <span class="hljs-number">797535816</span>, <span class="hljs-number">600857570</span>, <span class="hljs-number">553836307</span>, <span class="hljs-number">2394740468</span>, <span class="hljs-number">1178393549</span>, <span class="hljs-number">2183765310</span>, <span class="hljs-number">4014432190</span>, <span class="hljs-number">652246726</span>, <span class="hljs-number">3693235932</span>, <span class="hljs-number">4046942361</span>, <span class="hljs-number">4105444828</span>, <span class="hljs-number">145386213</span>, <span class="hljs-number">1198390220</span>, <span class="hljs-number">3023119098</span>, <span class="hljs-number">663559283</span>, <span class="hljs-number">225958361</span>, <span class="hljs-number">3893000878</span>, <span class="hljs-number">1615631644</span>, <span class="hljs-number">1941951859</span>, <span class="hljs-number">471085675</span>, <span class="hljs-number">2164362049</span>, <span class="hljs-number">4274234562</span>, <span class="hljs-number">4127314557</span>, <span class="hljs-number">1833529303</span>, <span class="hljs-number">17668093</span>, <span class="hljs-number">3208743142</span>, <span class="hljs-number">3210135945</span>, <span class="hljs-number">1772990736</span>, <span class="hljs-number">3290157875</span>, <span class="hljs-number">3006334453</span>, <span class="hljs-number">3831748800</span>, <span class="hljs-number">1120411838</span>, <span class="hljs-number">690279329</span>, <span class="hljs-number">2436940844</span>, <span class="hljs-number">1440602808</span>, <span class="hljs-number">1552272917</span>, <span class="hljs-number">1321728089</span>, <span class="hljs-number">524486126</span>, <span class="hljs-number">3696307959</span>, <span class="hljs-number">1189129368</span>, <span class="hljs-number">28736041</span>, <span class="hljs-number">3143264315</span>, <span class="hljs-number">3050323849</span>, <span class="hljs-number">1458456612</span>, <span class="hljs-number">389869312</span>, <span class="hljs-number">2360130428</span>, <span class="hljs-number">854837117</span>, <span class="hljs-number">1270423403</span>, <span class="hljs-number">3471650414</span>, <span class="hljs-number">243573262</span>, <span class="hljs-number">3449929772</span>, <span class="hljs-number">2436299611</span>, <span class="hljs-number">420972940</span>, <span class="hljs-number">923873821</span>, <span class="hljs-number">3499748829</span>, <span class="hljs-number">2470333529</span>, <span class="hljs-number">3901870125</span>, <span class="hljs-number">3589884387</span>, <span class="hljs-number">3339475693</span>, <span class="hljs-number">1526947412</span>, <span class="hljs-number">1747516667</span>, <span class="hljs-number">2971536797</span>, <span class="hljs-number">273910310</span>, <span class="hljs-number">2185887289</span>, <span class="hljs-number">2723697010</span>, <span class="hljs-number">1973585459</span>, <span class="hljs-number">1166325256</span>, <span class="hljs-number">1360822059</span>, <span class="hljs-number">416514510</span>, <span class="hljs-number">4038763765</span>, <span class="hljs-number">1816380840</span>, <span class="hljs-number">940152644</span>, <span class="hljs-number">3918708431</span>, <span class="hljs-number">3410593321</span>, <span class="hljs-number">3358844522</span>, <span class="hljs-number">3678637784</span>, <span class="hljs-number">2412834780</span>, <span class="hljs-number">3052967117</span>, <span class="hljs-number">3672611162</span>, <span class="hljs-number">570069042</span>, <span class="hljs-number">95771608</span>, <span class="hljs-number">1210821251</span>, <span class="hljs-number">2163778365</span>, <span class="hljs-number">2739972546</span>, <span class="hljs-number">3094346015</span>, <span class="hljs-number">749719666</span>, <span class="hljs-number">1697477587</span>, <span class="hljs-number">986142486</span>, <span class="hljs-number">2591897292</span>, <span class="hljs-number">1234948693</span>, <span class="hljs-number">3659791160</span>, <span class="hljs-number">3990257960</span>, <span class="hljs-number">501199958</span>, <span class="hljs-number">3029961497</span>, <span class="hljs-number">578415668</span>, <span class="hljs-number">124517322</span>, <span class="hljs-number">1985205894</span>, <span class="hljs-number">3777347400</span>, <span class="hljs-number">1149995545</span>, <span class="hljs-number">290699775</span>, <span class="hljs-number">3399696193</span>, <span class="hljs-number">1062094395</span>, <span class="hljs-number">2896523484</span>, <span class="hljs-number">1562688856</span>, <span class="hljs-number">992098141</span>, <span class="hljs-number">3941170280</span>, <span class="hljs-number">262596967</span>, <span class="hljs-number">2585751001</span>, <span class="hljs-number">3682611205</span>, <span class="hljs-number">530523926</span>, <span class="hljs-number">1202322766</span>, <span class="hljs-number">3777439514</span>, <span class="hljs-number">3051700271</span>, <span class="hljs-number">261632458</span>, <span class="hljs-number">2736123960</span>, <span class="hljs-number">2786338595</span>, <span class="hljs-number">86310784</span>, <span class="hljs-number">2760191516</span>, <span class="hljs-number">1344514731</span>, <span class="hljs-number">350767781</span>, <span class="hljs-number">2858876127</span>, <span class="hljs-number">519088864</span>, <span class="hljs-number">3193340756</span>, <span class="hljs-number">3563489312</span>, <span class="hljs-number">3239917298</span>, <span class="hljs-number">161418824</span>, <span class="hljs-number">470724403</span>, <span class="hljs-number">3310407387</span>, <span class="hljs-number">1743713887</span>, <span class="hljs-number">3064036770</span>, <span class="hljs-number">1175434157</span>, <span class="hljs-number">3029464330</span>, <span class="hljs-number">116086349</span>, <span class="hljs-number">1652489862</span>, <span class="hljs-number">1176236897</span>, <span class="hljs-number">4139800383</span>, <span class="hljs-number">3758499033</span>, <span class="hljs-number">2961626313</span>, <span class="hljs-number">3064683859</span>, <span class="hljs-number">958478146</span>, <span class="hljs-number">596650527</span>, <span class="hljs-number">1000277312</span>, <span class="hljs-number">4102368994</span>, <span class="hljs-number">1480011430</span>, <span class="hljs-number">4001401502</span>, <span class="hljs-number">4004287177</span>, <span class="hljs-number">3202905309</span>, <span class="hljs-number">1754655955</span>, <span class="hljs-number">2064262245</span>, <span class="hljs-number">1840530874</span>, <span class="hljs-number">2284428117</span>, <span class="hljs-number">2281854453</span>, <span class="hljs-number">1023839768</span>, <span class="hljs-number">2166517711</span>, <span class="hljs-number">2709857675</span>, <span class="hljs-number">2005014414</span>, <span class="hljs-number">4161461001</span>, <span class="hljs-number">2932436148</span>, <span class="hljs-number">2411599350</span>, <span class="hljs-number">4267437788</span>, <span class="hljs-number">2132764972</span>, <span class="hljs-number">150665266</span>, <span class="hljs-number">286170947</span>, <span class="hljs-number">2249288787</span>, <span class="hljs-number">3953585886</span>, <span class="hljs-number">1231725143</span>, <span class="hljs-number">2479045931</span>, <span class="hljs-number">2377059462</span>, <span class="hljs-number">281316188</span>, <span class="hljs-number">379113422</span>, <span class="hljs-number">920019004</span>, <span class="hljs-number">163289886</span>, <span class="hljs-number">2210874762</span>, <span class="hljs-number">1578529538</span>, <span class="hljs-number">309521495</span>, <span class="hljs-number">3737017316</span>, <span class="hljs-number">88919917</span>, <span class="hljs-number">559742618</span>, <span class="hljs-number">978230553</span>, <span class="hljs-number">2154491496</span>, <span class="hljs-number">994913727</span>, <span class="hljs-number">498894258</span>, <span class="hljs-number">1355546448</span>, <span class="hljs-number">4023836881</span>, <span class="hljs-number">3014313787</span>, <span class="hljs-number">164044564</span>, <span class="hljs-number">2408825840</span>, <span class="hljs-number">2029992558</span>, <span class="hljs-number">3707778216</span>, <span class="hljs-number">86206872</span>, <span class="hljs-number">3576935874</span>, <span class="hljs-number">185356787</span>, <span class="hljs-number">1774175910</span>, <span class="hljs-number">3145237900</span>, <span class="hljs-number">3497547609</span>, <span class="hljs-number">841914878</span>, <span class="hljs-number">3425254534</span>, <span class="hljs-number">4264030778</span>, <span class="hljs-number">2348022032</span>, <span class="hljs-number">178331591</span>, <span class="hljs-number">943923822</span>, <span class="hljs-number">3384367749</span>, <span class="hljs-number">2806712599</span>, <span class="hljs-number">1178535099</span>, <span class="hljs-number">1251085540</span>, <span class="hljs-number">2410015803</span>, <span class="hljs-number">1480595408</span>, <span class="hljs-number">2732607876</span>, <span class="hljs-number">1579706357</span>, <span class="hljs-number">870791724</span>, <span class="hljs-number">2320512780</span>, <span class="hljs-number">2149666862</span>, <span class="hljs-number">3797999384</span>, <span class="hljs-number">3905363134</span>, <span class="hljs-number">3388169321</span>, <span class="hljs-number">851973359</span>, <span class="hljs-number">1418716205</span>, <span class="hljs-number">207581030</span>, <span class="hljs-number">1740441523</span>, <span class="hljs-number">1173839013</span>, <span class="hljs-number">4280610104</span>, <span class="hljs-number">1769134281</span>, <span class="hljs-number">1758916333</span>, <span class="hljs-number">4061069248</span>, <span class="hljs-number">2147554262</span>, <span class="hljs-number">2749007447</span>, <span class="hljs-number">909878569</span>, <span class="hljs-number">2054562584</span>, <span class="hljs-number">1515003000</span>, <span class="hljs-number">560286390</span>, <span class="hljs-number">2482663802</span>, <span class="hljs-number">2690882951</span>, <span class="hljs-number">3298162668</span>, <span class="hljs-number">2561737261</span>, <span class="hljs-number">167825221</span>, <span class="hljs-number">507375343</span>, <span class="hljs-number">2179952491</span>, <span class="hljs-number">795452860</span>, <span class="hljs-number">2877704207</span>, <span class="hljs-number">3243106071</span>, <span class="hljs-number">1633372043</span>, <span class="hljs-number">2152178033</span>, <span class="hljs-number">2993246714</span>, <span class="hljs-number">4176238981</span>, <span class="hljs-number">3828458887</span>, <span class="hljs-number">695369535</span>, <span class="hljs-number">2514762808</span>, <span class="hljs-number">2251430819</span>, <span class="hljs-number">2743651063</span>, <span class="hljs-number">783239046</span>, <span class="hljs-number">4036497041</span>, <span class="hljs-number">2175424426</span>, <span class="hljs-number">765021321</span>, <span class="hljs-number">897227922</span>, <span class="hljs-number">3192938155</span>, <span class="hljs-number">4173350810</span>, <span class="hljs-number">2290496185</span>, <span class="hljs-number">4215986056</span>, <span class="hljs-number">2448481441</span>, <span class="hljs-number">3114984799</span>, <span class="hljs-number">2920066349</span>, <span class="hljs-number">722868808</span>, <span class="hljs-number">594363801</span>, <span class="hljs-number">4012575088</span>, <span class="hljs-number">454547939</span>, <span class="hljs-number">3331771662</span>, <span class="hljs-number">1267229957</span>, <span class="hljs-number">3170277692</span>, <span class="hljs-number">2446344734</span>, <span class="hljs-number">3730529788</span>, <span class="hljs-number">2621611481</span>, <span class="hljs-number">2972284304</span>, <span class="hljs-number">2580290241</span>, <span class="hljs-number">486727007</span>, <span class="hljs-number">2727955445</span>, <span class="hljs-number">1457071884</span>, <span class="hljs-number">1053028185</span>, <span class="hljs-number">462301682</span>, <span class="hljs-number">3907840756</span>, <span class="hljs-number">1832398102</span>, <span class="hljs-number">3144685297</span>, <span class="hljs-number">3403964915</span>, <span class="hljs-number">4263570498</span>, <span class="hljs-number">792776003</span>, <span class="hljs-number">306771255</span>, <span class="hljs-number">1633688240</span>, <span class="hljs-number">2159479271</span>, <span class="hljs-number">942060576</span>, <span class="hljs-number">1311531808</span>, <span class="hljs-number">3145754189</span>, <span class="hljs-number">4142271069</span>, <span class="hljs-number">2844524541</span>, <span class="hljs-number">4082439147</span>, <span class="hljs-number">2847276716</span>, <span class="hljs-number">1374436698</span>, <span class="hljs-number">2601522390</span>, <span class="hljs-number">529644524</span>, <span class="hljs-number">206090172</span>, <span class="hljs-number">3015114937</span>, <span class="hljs-number">4137169373</span>, <span class="hljs-number">2600331537</span>, <span class="hljs-number">344659140</span>, <span class="hljs-number">155319271</span>, <span class="hljs-number">1724932164</span>, <span class="hljs-number">3187877676</span>, <span class="hljs-number">4020168431</span>, <span class="hljs-number">711431575</span>, <span class="hljs-number">4123955169</span>, <span class="hljs-number">2539963709</span>, <span class="hljs-number">2764832709</span>, <span class="hljs-number">3897838285</span>, <span class="hljs-number">2521203644</span>, <span class="hljs-number">2059212822</span>, <span class="hljs-number">1129046005</span>, <span class="hljs-number">3277260664</span>, <span class="hljs-number">2739869189</span>, <span class="hljs-number">1955591901</span>, <span class="hljs-number">2661672178</span>, <span class="hljs-number">2926355273</span>, <span class="hljs-number">28176978</span>, <span class="hljs-number">706409211</span>, <span class="hljs-number">1432061304</span>, <span class="hljs-number">26517996</span>, <span class="hljs-number">3180196905</span>, <span class="hljs-number">2178525849</span>, <span class="hljs-number">607854674</span>, <span class="hljs-number">3953350517</span>, <span class="hljs-number">3532394548</span>, <span class="hljs-number">4175940932</span>, <span class="hljs-number">626671309</span>, <span class="hljs-number">1273934270</span>, <span class="hljs-number">3481828801</span>, <span class="hljs-number">22643989</span>, <span class="hljs-number">2104739013</span>, <span class="hljs-number">4183577772</span>, <span class="hljs-number">3932721637</span>, <span class="hljs-number">3075788222</span>, <span class="hljs-number">2814353001</span>, <span class="hljs-number">4120869721</span>, <span class="hljs-number">2045506903</span>, <span class="hljs-number">603494333</span>, <span class="hljs-number">335162960</span>, <span class="hljs-number">2069261279</span>, <span class="hljs-number">2278614835</span>, <span class="hljs-number">210140447</span>, <span class="hljs-number">2012566692</span>, <span class="hljs-number">2345710126</span>, <span class="hljs-number">70390387</span>, <span class="hljs-number">457247932</span>, <span class="hljs-number">2764651800</span>, <span class="hljs-number">652766919</span>, <span class="hljs-number">555253440</span>, <span class="hljs-number">864036913</span>, <span class="hljs-number">1720142260</span>, <span class="hljs-number">453262569</span>, <span class="hljs-number">1113437101</span>, <span class="hljs-number">2576419688</span>, <span class="hljs-number">144008475</span>, <span class="hljs-number">1786881829</span>, <span class="hljs-number">2455128823</span>, <span class="hljs-number">2884922345</span>, <span class="hljs-number">4251332234</span>, <span class="hljs-number">58949785</span>, <span class="hljs-number">4206002785</span>, <span class="hljs-number">3374754553</span>, <span class="hljs-number">2976162198</span>, <span class="hljs-number">546450687</span>, <span class="hljs-number">1268444784</span>, <span class="hljs-number">4132330381</span>, <span class="hljs-number">3404894280</span>, <span class="hljs-number">2421962142</span>, <span class="hljs-number">212361299</span>, <span class="hljs-number">2526283704</span>, <span class="hljs-number">1656118437</span>, <span class="hljs-number">1249336298</span>, <span class="hljs-number">305885855</span>, <span class="hljs-number">1090758249</span>, <span class="hljs-number">3752057640</span>, <span class="hljs-number">3508190692</span>, <span class="hljs-number">3637428</span>, <span class="hljs-number">105102422</span>, <span class="hljs-number">2247418237</span>, <span class="hljs-number">1873609555</span>, <span class="hljs-number">1206760240</span>, <span class="hljs-number">3761689119</span>, <span class="hljs-number">3151616638</span>, <span class="hljs-number">1711308858</span>, <span class="hljs-number">1261541178</span>, <span class="hljs-number">1843103377</span>, <span class="hljs-number">3158893523</span>, <span class="hljs-number">1226253110</span>, <span class="hljs-number">3337577909</span>, <span class="hljs-number">126612372</span>, <span class="hljs-number">2239219657</span>, <span class="hljs-number">1415387229</span>, <span class="hljs-number">3657507305</span>, <span class="hljs-number">3330696118</span>, <span class="hljs-number">2304219467</span>, <span class="hljs-number">3782535397</span>, <span class="hljs-number">2523926865</span>, <span class="hljs-number">173770442</span>, <span class="hljs-number">469421316</span>, <span class="hljs-number">4068724979</span>, <span class="hljs-number">567442650</span>, <span class="hljs-number">1996215573</span>, <span class="hljs-number">2071307093</span>, <span class="hljs-number">778899724</span>, <span class="hljs-number">3534102235</span>, <span class="hljs-number">1001138889</span>, <span class="hljs-number">2821812427</span>, <span class="hljs-number">591691317</span>, <span class="hljs-number">1265763678</span>, <span class="hljs-number">2241915660</span>, <span class="hljs-number">3220601768</span>, <span class="hljs-number">653090205</span>, <span class="hljs-number">2367897867</span>, <span class="hljs-number">1393909319</span>, <span class="hljs-number">2691817329</span>, <span class="hljs-number">3098049768</span>, <span class="hljs-number">117121403</span>, <span class="hljs-number">1255294678</span>, <span class="hljs-number">2272844919</span>, <span class="hljs-number">788255921</span>, <span class="hljs-number">2333869622</span>, <span class="hljs-number">4052660679</span>, <span class="hljs-number">2407095869</span>, <span class="hljs-number">2636108242</span>, <span class="hljs-number">2204717619</span>, <span class="hljs-number">1672726444</span>, <span class="hljs-number">2250826426</span>, <span class="hljs-number">258706466</span>, <span class="hljs-number">2295454699</span>, <span class="hljs-number">337308034</span>, <span class="hljs-number">3703973770</span>, <span class="hljs-number">3133498524</span>, <span class="hljs-number">22718827</span>, <span class="hljs-number">3096937679</span>, <span class="hljs-number">2039003308</span>, <span class="hljs-number">1519854757</span>, <span class="hljs-number">568184976</span>, <span class="hljs-number">1986854118</span>, <span class="hljs-number">2888207511</span>, <span class="hljs-number">822307630</span>, <span class="hljs-number">3829301724</span>, <span class="hljs-number">3198527490</span>, <span class="hljs-number">3073739663</span>, <span class="hljs-number">3043580445</span>, <span class="hljs-number">3458239370</span>, <span class="hljs-number">802145890</span>, <span class="hljs-number">376901460</span>, <span class="hljs-number">1251103099</span>, <span class="hljs-number">1143003993</span>, <span class="hljs-number">1280321148</span>, <span class="hljs-number">661386076</span>, <span class="hljs-number">3708710489</span>, <span class="hljs-number">2237151715</span>, <span class="hljs-number">3928104641</span>, <span class="hljs-number">2975550516</span>, <span class="hljs-number">1087492088</span>, <span class="hljs-number">1504028830</span>, <span class="hljs-number">61927086</span>, <span class="hljs-number">3858242888</span>, <span class="hljs-number">1916136658</span>, <span class="hljs-number">2328550074</span>, <span class="hljs-number">3032032377</span>, <span class="hljs-number">2193802260</span>, <span class="hljs-number">3311627503</span>, <span class="hljs-number">3196945045</span>, <span class="hljs-number">3396801792</span>, <span class="hljs-number">806210594</span>, <span class="hljs-number">2449941623</span>, <span class="hljs-number">2514744466</span>, <span class="hljs-number">3922130206</span>, <span class="hljs-number">3245757763</span>, <span class="hljs-number">3128328446</span>, <span class="hljs-number">2335833206</span>, <span class="hljs-number">3205660364</span>, <span class="hljs-number">3527402441</span>, <span class="hljs-number">2174241644</span>, <span class="hljs-number">1262568556</span>, <span class="hljs-number">2360103007</span>, <span class="hljs-number">2490217737</span>, <span class="hljs-number">1485100950</span>, <span class="hljs-number">3407260</span>, <span class="hljs-number">3005226942</span>, <span class="hljs-number">1355314866</span>, <span class="hljs-number">3154763465</span>, <span class="hljs-number">619881867</span>, <span class="hljs-number">2409963438</span>, <span class="hljs-number">2422269402</span>, <span class="hljs-number">205756019</span>, <span class="hljs-number">3300644241</span>, <span class="hljs-number">1157501775</span>, <span class="hljs-number">1229058028</span>, <span class="hljs-number">161050869</span>, <span class="hljs-number">969496287</span>, <span class="hljs-number">3385825249</span>, <span class="hljs-number">2557284067</span>, <span class="hljs-number">4236642714</span>, <span class="hljs-number">169094727</span>, <span class="hljs-number">2698326774</span>, <span class="hljs-number">1863176242</span>, <span class="hljs-number">3532885426</span>, <span class="hljs-number">3046403588</span>, <span class="hljs-number">3869207867</span>, <span class="hljs-number">496104150</span>, <span class="hljs-number">353604631</span>, <span class="hljs-number">1054882225</span>, <span class="hljs-number">152711981</span>, <span class="hljs-number">1362131890</span>, <span class="hljs-number">76912113</span>, <span class="hljs-number">3052177189</span>, <span class="hljs-number">3932252092</span>, <span class="hljs-number">3834713905</span>, <span class="hljs-number">2338378436</span>, <span class="hljs-number">44417325</span>, <span class="hljs-number">117723195</span>, <span class="hljs-number">1089433566</span>, <span class="hljs-number">4166617161</span>, <span class="hljs-number">2848021308</span>, <span class="hljs-number">2229619096</span>, <span class="hljs-number">319957702</span>, <span class="hljs-number">3661655667</span>, <span class="hljs-number">2809620731</span>, <span class="hljs-number">482011930</span>, <span class="hljs-number">3983483016</span>, <span class="hljs-number">82362287</span>, <span class="hljs-number">1518135562</span>, <span class="hljs-number">3490996143</span>, <span class="hljs-number">510129461</span>, <span class="hljs-number">1400609584</span>, <span class="hljs-number">2646113779</span>, <span class="hljs-number">732457215</span>, <span class="hljs-number">3735585198</span>, <span class="hljs-number">3451194227</span>, <span class="hljs-number">959269510</span>, <span class="hljs-number">244188667</span>]<br>ks_l = [<span class="hljs-number">11</span>, <span class="hljs-number">15</span>]<br>ks_r = [bitlen - <span class="hljs-number">7</span>, bitlen - <span class="hljs-number">19</span>]<span class="hljs-comment">#右移转换成左移</span><br>MT = []<br><span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> out:<br>    MT.append(decrypt(decrypt(each,ks_r),ks_l))<br><br>r = Myrand(MT)<br>flag = <span class="hljs-string">&#x27;DASCTF&#123;&#x27;</span> + md5(<span class="hljs-built_in">str</span>(r.rand()).encode()).hexdigest() + <span class="hljs-string">&#x27;&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#DASCTF&#123;49e225e5b1b57a1d3c9803b5ddfd38f9&#125;</span><br></code></pre></td></tr></table></figure><h1 id="Yusa的密码学课堂——二眼深情"><a href="#Yusa的密码学课堂——二眼深情" class="headerlink" title="Yusa的密码学课堂——二眼深情"></a>Yusa的密码学课堂——二眼深情</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python">代码同上，额外有：<br><span class="hljs-keyword">import</span> os<br>secret = <span class="hljs-built_in">int</span>(os.urandom(<span class="hljs-number">4</span>).<span class="hljs-built_in">hex</span>(),<span class="hljs-number">16</span>)<br>r = Myrand(secret)<br>out = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>out.append(r.rand())<br><br><span class="hljs-keyword">try</span>:<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>a = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Your &quot;</span>+[<span class="hljs-string">&#x27;first&#x27;</span>,<span class="hljs-string">&#x27;second&#x27;</span>][i]+ <span class="hljs-string">&quot; see: &quot;</span>))<br><span class="hljs-built_in">print</span>(out[a % <span class="hljs-built_in">len</span>(out)])<br>guess = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;You konw my secret? &quot;</span>))<br><span class="hljs-keyword">if</span> guess == secret:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;For you ~&quot;</span>)<br><span class="hljs-built_in">print</span>(os.getenv(<span class="hljs-string">&quot;DASFLAG&quot;</span>))<br>exit()<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>([<span class="hljs-string">&quot;Try again~ &quot;</span>,<span class="hljs-string">&quot;Bye~&quot;</span>][i])<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>exit()<br></code></pre></td></tr></table></figure><ol><li><p>也就是说要选取两个合适的 $out$ 来反推出 $seed$ 。因此，选取 $out[395]$ 和 $out[622]$ 。通过第一题的方法反推出<code>generate()</code>之后的 $MT[395]$ 和 $MT[622]$ 。</p></li><li><p>根据<code>generate</code>函数，猜测 $bin(y)$ 的最低位(也就是 $bin(MT[623])$ )，这样就可以推出 $bin(MT)[2:][1:]$ ，再次猜测它的最高位，这样就有四种情况。</p></li><li><p>根据<code>__init__()</code>中的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">624</span>):<br>t = <span class="hljs-number">2037740385</span> * (self.MT[i-<span class="hljs-number">1</span>] ^ (self.MT[i-<span class="hljs-number">1</span>] &gt;&gt; <span class="hljs-number">30</span>)) + <span class="hljs-number">1</span><br>self.MT[i] = t &amp; <span class="hljs-number">0xffffffff</span><br></code></pre></td></tr></table></figure><p>可以推出最初始的 $MT$ 。 t &amp; 0xffffffff 相当于 t%$2^{32}$。这样， 求出 $MT[i-1]$只需要 (t-1)*inv(2037740385,$2^{32}$) ，在运行一遍上面这个异或操作就可以了。</p></li><li><p>四种情况，就需要筛选。用上面得出的 $MT$ 运行一遍<code>generate()</code>，看是否匹配步骤(1)中的 $MT[395]$ 和 $MT[622]$ 。</p></li></ol><p>（奇怪了！有时候运行能得出结果，有时候不能！是不是代码有问题？我检查了好久但没发现，希望师傅们能斧正一下！）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br>s = remote(<span class="hljs-string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="hljs-number">25122</span>)<br><span class="hljs-comment">#第一轮</span><br><span class="hljs-built_in">print</span>(s.recv())<br>s.sendline(<span class="hljs-string">b&#x27;395&#x27;</span>)<br>out395 = <span class="hljs-built_in">int</span>(s.recvline()[:-<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(out395)<br><span class="hljs-built_in">print</span>(s.recv())<br>s.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br><span class="hljs-built_in">print</span>(s.recvline())<br><span class="hljs-comment">#第二轮</span><br><span class="hljs-built_in">print</span>(s.recv())<br>s.sendline(<span class="hljs-string">b&#x27;622&#x27;</span>)<br>out622 = <span class="hljs-built_in">int</span>(s.recvline()[:-<span class="hljs-number">1</span>])<br><span class="hljs-built_in">print</span>(out622)<br><span class="hljs-built_in">print</span>(s.recv())<br><br><span class="hljs-comment">#generate()之后的MT</span><br>bitlen = <span class="hljs-number">32</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mov</span>(<span class="hljs-params">y,k</span>):<span class="hljs-comment">#循环左移</span><br>    biny = <span class="hljs-built_in">bin</span>(y)[<span class="hljs-number">2</span>:].zfill(bitlen)<br>    k = k % bitlen<br>    biny = biny[k:] + biny[:k]<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(biny,<span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt</span>(<span class="hljs-params">y,ks</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(bitlen):<br>        y = y ^ mov(y,ks[<span class="hljs-number">0</span>]) ^ mov(y,ks[<span class="hljs-number">1</span>])<br>        ks = [ k&lt;&lt;<span class="hljs-number">1</span> <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> ks]<br>    <span class="hljs-keyword">return</span> y<br><br>ks_l = [<span class="hljs-number">11</span>, <span class="hljs-number">15</span>]<br>ks_r = [bitlen - <span class="hljs-number">7</span>, bitlen - <span class="hljs-number">19</span>]<span class="hljs-comment">#右移转换成左移</span><br>out395 = decrypt(decrypt(out395,ks_r),ks_l)<br>out622 = decrypt(decrypt(out622,ks_r),ks_l)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;out395 = <span class="hljs-subst">&#123;out395&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;out622 = <span class="hljs-subst">&#123;out622&#125;</span>&#x27;</span>)<br><br><span class="hljs-comment">#恢复所有初始MT</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recover</span>(<span class="hljs-params">seed</span>):<br>    seed &amp;= <span class="hljs-number">0xffffffff</span><br>    inv = <span class="hljs-built_in">int</span>(gmpy2.invert(<span class="hljs-number">2037740385</span>,<span class="hljs-number">0xffffffff</span>+<span class="hljs-number">1</span>))<span class="hljs-comment">#</span><br>    re_MT = [seed] + [<span class="hljs-number">0</span>]*<span class="hljs-number">623</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">624</span>):<br>        mt = ((re_MT[i-<span class="hljs-number">1</span>] - <span class="hljs-number">1</span>)*inv) &amp; <span class="hljs-number">0xffffffff</span><br>        <span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">        mt = bin(mt)[2:].zfill(32)</span><br><span class="hljs-string">        tmp1 = mt[:30]</span><br><span class="hljs-string">        tmp2 = int(tmp1[:2],2) ^ int(mt[30:],2)</span><br><span class="hljs-string">        tmp = (int(tmp1,2) &lt;&lt; 2) + tmp2</span><br><span class="hljs-string">        &#x27;&#x27;&#x27;</span><br>        tmp = mt ^ (mt &gt;&gt; <span class="hljs-number">30</span>)<br>        re_MT[i] = tmp<br><br>    <span class="hljs-keyword">return</span> re_MT[::-<span class="hljs-number">1</span>]<br><br><span class="hljs-comment">#检验</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">MT</span>):<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>        y = (MT[i] &amp; <span class="hljs-number">0x80000000</span>) + (MT[(i + <span class="hljs-number">1</span>) % <span class="hljs-number">624</span>] &amp; <span class="hljs-number">0x7fffffff</span>)<br>        MT[i] = MT[(i + <span class="hljs-number">397</span>) % <span class="hljs-number">624</span>] ^ (y &gt;&gt; <span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> y &amp; <span class="hljs-number">1</span>:<br>            MT[i] ^= <span class="hljs-number">25674835200</span><br>    <span class="hljs-comment">#print(f&#x27;checkMT = &#123;MT&#125;&#x27;)</span><br>    <span class="hljs-comment">#print(f&#x27;MT[395] = &#123;MT[395]&#125;,MT[622] = &#123;MT[622]&#125;&#x27;)</span><br>    <span class="hljs-keyword">if</span> MT[<span class="hljs-number">395</span>] == out395 <span class="hljs-keyword">and</span> MT[<span class="hljs-number">622</span>] == out622:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-comment">#恢复MT[623]</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dec_generate</span>(<span class="hljs-params">a,b</span>):<span class="hljs-comment">#a为out622,b为out395</span><br>    maybe = []<br>    <span class="hljs-comment">#MT[623]最后一bit为1</span><br>    tmp1 = a ^ <span class="hljs-number">25674835200</span><br>    y = tmp1 ^ b<br>    y = (y &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">1</span><br>    <span class="hljs-comment">#猜高位0,1</span><br>    mt1 = <span class="hljs-number">0x80000000</span> + (y &amp; <span class="hljs-number">0x7fffffff</span>)<br>    maybe.append(mt1)<br>    mt2 = y &amp; <span class="hljs-number">0x7fffffff</span><br>    maybe.append(mt2)<br>    <span class="hljs-comment"># MT[623]最后一bit为0</span><br>    y = a ^ b<br>    y = (y &lt;&lt; <span class="hljs-number">1</span>) + <span class="hljs-number">0</span><br>    mt3 = <span class="hljs-number">0x80000000</span> + (y &amp; <span class="hljs-number">0x7fffffff</span>)<br>    maybe.append(mt3)<br>    mt4 = y &amp; <span class="hljs-number">0x7fffffff</span><br>    maybe.append(mt4)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;maybe = <span class="hljs-subst">&#123;maybe&#125;</span>&#x27;</span>)<br>    <span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> maybe:<br>        MT = recover(each)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;MT = <span class="hljs-subst">&#123;MT&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">if</span> MT != -<span class="hljs-number">1</span>:<br>            isflag = check(MT.copy())<br>            <span class="hljs-comment">#print(&#x27;3&#x27;,MT)</span><br>            <span class="hljs-keyword">if</span> isflag:<br>                <span class="hljs-keyword">return</span> MT[<span class="hljs-number">0</span>]<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br><br>seed = dec_generate(out622,out395)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;seed = <span class="hljs-subst">&#123;seed&#125;</span>&#x27;</span>)<br>s.sendline(<span class="hljs-built_in">str</span>(seed).encode())<br><span class="hljs-built_in">print</span>(s.recv())<br><span class="hljs-comment">#b&#x27;DASCTF&#123;a448b996-140b-4b06-9bf0-b69c6cde067d&#125;&#x27;</span><br></code></pre></td></tr></table></figure><hr><p>参考：</p><p><a href="https://www.mdlabs.cn/index.php/2022/05/24/dasctf%EF%BD%9C2022dasctf-may%E5%87%BA%E9%A2%98%E4%BA%BA%E6%8C%91%E6%88%98%E8%B5%9B%E5%AE%98%E6%96%B9write/">DASCTF｜2022DASCTF May出题人挑战赛官方Write – MD labs</a></p><p><a href="https://www.cnblogs.com/Tf1shC4T/p/15927062.html">循环移位异或加密 - Tf1shC4T - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MT19937</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dest0g3 520迎新赛</title>
    <link href="/2022/07/10/Dest0g3%20520%E8%BF%8E%E6%96%B0%E8%B5%9B/"/>
    <url>/2022/07/10/Dest0g3%20520%E8%BF%8E%E6%96%B0%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<p>很遗憾，由于暑假需要参与数模，暑假每日一练可能很难实现，但仍会陆续复现一些之前的题目。时间跨度上可能会长一些。</p><hr><h1 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long, getPrime<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> next_prime<br>p = getPrime(<span class="hljs-number">1024</span>)<br>q = next_prime(p)<br>n = p*q<br>flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>m = bytes_to_long(flag)<br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">27272410937497615429184017335437367466288981498585803398561456300019447702001403165885200936510173980380489828828523983388730026101865884520679872671569532101708469344562155718974222196684544003071765625134489632331414011555536130289106822732544904502428727133498239161324625698270381715640332111381465813621908465311076678337695819124178638737015840941223342176563458181918865641701282965455705790456658431641632470787689389714643528968037519265144919465402561959014798324908010947632834281698638848683632113623788303921939908168450492197671761167009855312820364427648296494571794298105543758141065915257674305081267</span><br><span class="hljs-string">14181751948841206148995320731138166924841307246014981115736748934451763670304308496261846056687977917728671991049712129745906089287169170294259856601300717330153987080212591008738712344004443623518040786009771108879196701679833782022875324499201475522241396314392429412747392203809125245393462952461525539673218721341853515099201642769577031724762640317081252046606564108211626446676911167979492329012381654087618979631924439276786566078856385835786995011067720124277812004808431347148593882791476391944410064371926611180496847010107167486521927340045188960373155894717498700488982910217850877130989318706580155251854</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>$p,q$ 近似，对 $n$ 开根号取前后素数即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br>n = <span class="hljs-number">27272410937497615429184017335437367466288981498585803398561456300019447702001403165885200936510173980380489828828523983388730026101865884520679872671569532101708469344562155718974222196684544003071765625134489632331414011555536130289106822732544904502428727133498239161324625698270381715640332111381465813621908465311076678337695819124178638737015840941223342176563458181918865641701282965455705790456658431641632470787689389714643528968037519265144919465402561959014798324908010947632834281698638848683632113623788303921939908168450492197671761167009855312820364427648296494571794298105543758141065915257674305081267</span><br>c = <span class="hljs-number">14181751948841206148995320731138166924841307246014981115736748934451763670304308496261846056687977917728671991049712129745906089287169170294259856601300717330153987080212591008738712344004443623518040786009771108879196701679833782022875324499201475522241396314392429412747392203809125245393462952461525539673218721341853515099201642769577031724762640317081252046606564108211626446676911167979492329012381654087618979631924439276786566078856385835786995011067720124277812004808431347148593882791476391944410064371926611180496847010107167486521927340045188960373155894717498700488982910217850877130989318706580155251854</span><br><br>tmp = gmpy2.iroot(n,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]<br>p = gmpy2.next_prime(tmp)<br>q = n//p<br>e = <span class="hljs-number">65537</span><br>d = gmpy2.invert(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>m = <span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment">#Dest0g3&#123;96411aad-032c-20a8-bc43-b473f6f08536&#125;</span><br></code></pre></td></tr></table></figure><h1 id="babyAES"><a href="#babyAES" class="headerlink" title="babyAES"></a>babyAES</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> os<br>iv = os.urandom(<span class="hljs-number">16</span>)<br>key = os.urandom(<span class="hljs-number">16</span>)<br>my_aes = AES.new(key, AES.MODE_CBC, iv)<br>flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>flag += (<span class="hljs-number">16</span> - <span class="hljs-built_in">len</span>(flag) % <span class="hljs-number">16</span>) * <span class="hljs-string">b&#x27;\x00&#x27;</span><br>c = my_aes.encrypt(flag)<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-built_in">print</span>(iv)<br><span class="hljs-built_in">print</span>(key)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">b&#x27;C4:\x86Q$\xb0\xd1\x1b\xa9L\x00\xad\xa3\xff\x96 hJ\x1b~\x1c\xd1y\x87A\xfe0\xe2\xfb\xc7\xb7\x7f^\xc8\x9aP\xdaX\xc6\xdf\x17l=K\x95\xd07&#x27;</span><br><span class="hljs-string">b&#x27;\xd1\xdf\x8f)\x08w\xde\xf9yX%\xca[\xcb\x18\x80&#x27;</span><br><span class="hljs-string">b&#x27;\xa4\xa6M\xab&#123;\xf6\x97\x94&gt;hK\x9bBe]F&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><p>简单的AES加解密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><br>c = <span class="hljs-string">b&#x27;C4:\x86Q$\xb0\xd1\x1b\xa9L\x00\xad\xa3\xff\x96 hJ\x1b~\x1c\xd1y\x87A\xfe0\xe2\xfb\xc7\xb7\x7f^\xc8\x9aP\xdaX\xc6\xdf\x17l=K\x95\xd07&#x27;</span><br>iv = <span class="hljs-string">b&#x27;\xd1\xdf\x8f)\x08w\xde\xf9yX%\xca[\xcb\x18\x80&#x27;</span><br>key = <span class="hljs-string">b&#x27;\xa4\xa6M\xab&#123;\xf6\x97\x94&gt;hK\x9bBe]F&#x27;</span><br>my_aes = AES.new(key, AES.MODE_CBC, iv)<br>flag = my_aes.decrypt(c)<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#b&#x27;Dest0g3&#123;d0e5fa76-e50f-76f6-9cf1-b6c2d576b6f4&#125;\x00\x00\x00&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="ezDLP"><a href="#ezDLP" class="headerlink" title="ezDLP"></a>ezDLP</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>x = bytes_to_long(flag)<br>g = <span class="hljs-number">19</span><br>p = <span class="hljs-number">335215034881592512312398694238485179340610060759881511231472142277527176340784432381542726029524727833039074808456839870641607412102746854257629226877248337002993023452385472058106944014653401647033456174126976474875859099023703472904735779212010820524934972736276889281087909166017427905825553503050645575935980580803899122224368875197728677516907272452047278523846912786938173456942568602502013001099009776563388736434564541041529106817380347284002060811645842312648498340150736573246893588079033524476111268686138924892091575797329915240849862827621736832883215569687974368499436632617425922744658912248644475097139485785819369867604176912652851123185884810544172785948158330991257118563772736929105360124222843930130347670027236797458715653361366862282591170630650344062377644570729478796795124594909835004189813214758026703689710017334501371279295621820181402191463184275851324378938021156631501330660825566054528793444353</span><br>h = <span class="hljs-built_in">pow</span>(g, x, p)<br><span class="hljs-built_in">print</span>(h)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">199533304296625406955683944856330940256037859126142372412254741689676902594083385071807594584589647225039650850524873289407540031812171301348304158895770989218721006018956756841251888659321582420167478909768740235321161096806581684857660007735707550914742749524818990843357217489433410647994417860374972468061110200554531819987204852047401539211300639165417994955609002932104372266583569468915607415521035920169948704261625320990186754910551780290421057403512785617970138903967874651050299914974180360347163879160470918945383706463326470519550909277678697788304151342226439850677611170439191913555562326538607106089620201074331099713506536192957054173076913374098400489398228161089007898192779738439912595619813699711049380213926849110877231503068464392648816891183318112570732792516076618174144968844351282497993164926346337121313644001762196098432060141494704659769545012678386821212213326455045335220435963683095439867976162</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><p>离散对数问题。用sage或python的sympy库求解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br>g = <span class="hljs-number">19</span><br>p = <span class="hljs-number">335215034881592512312398694238485179340610060759881511231472142277527176340784432381542726029524727833039074808456839870641607412102746854257629226877248337002993023452385472058106944014653401647033456174126976474875859099023703472904735779212010820524934972736276889281087909166017427905825553503050645575935980580803899122224368875197728677516907272452047278523846912786938173456942568602502013001099009776563388736434564541041529106817380347284002060811645842312648498340150736573246893588079033524476111268686138924892091575797329915240849862827621736832883215569687974368499436632617425922744658912248644475097139485785819369867604176912652851123185884810544172785948158330991257118563772736929105360124222843930130347670027236797458715653361366862282591170630650344062377644570729478796795124594909835004189813214758026703689710017334501371279295621820181402191463184275851324378938021156631501330660825566054528793444353</span><br>h = <span class="hljs-number">199533304296625406955683944856330940256037859126142372412254741689676902594083385071807594584589647225039650850524873289407540031812171301348304158895770989218721006018956756841251888659321582420167478909768740235321161096806581684857660007735707550914742749524818990843357217489433410647994417860374972468061110200554531819987204852047401539211300639165417994955609002932104372266583569468915607415521035920169948704261625320990186754910551780290421057403512785617970138903967874651050299914974180360347163879160470918945383706463326470519550909277678697788304151342226439850677611170439191913555562326538607106089620201074331099713506536192957054173076913374098400489398228161089007898192779738439912595619813699711049380213926849110877231503068464392648816891183318112570732792516076618174144968844351282497993164926346337121313644001762196098432060141494704659769545012678386821212213326455045335220435963683095439867976162</span><br>m = discrete_log(mod(h,p),mod(g,p))<br><span class="hljs-built_in">print</span>(m)<br>----------------------------------------------------------------------------------<br><span class="hljs-comment">#python</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> discrete_log<br><br>g = <span class="hljs-number">19</span><br>p = <span class="hljs-number">335215034881592512312398694238485179340610060759881511231472142277527176340784432381542726029524727833039074808456839870641607412102746854257629226877248337002993023452385472058106944014653401647033456174126976474875859099023703472904735779212010820524934972736276889281087909166017427905825553503050645575935980580803899122224368875197728677516907272452047278523846912786938173456942568602502013001099009776563388736434564541041529106817380347284002060811645842312648498340150736573246893588079033524476111268686138924892091575797329915240849862827621736832883215569687974368499436632617425922744658912248644475097139485785819369867604176912652851123185884810544172785948158330991257118563772736929105360124222843930130347670027236797458715653361366862282591170630650344062377644570729478796795124594909835004189813214758026703689710017334501371279295621820181402191463184275851324378938021156631501330660825566054528793444353</span><br>h = <span class="hljs-number">199533304296625406955683944856330940256037859126142372412254741689676902594083385071807594584589647225039650850524873289407540031812171301348304158895770989218721006018956756841251888659321582420167478909768740235321161096806581684857660007735707550914742749524818990843357217489433410647994417860374972468061110200554531819987204852047401539211300639165417994955609002932104372266583569468915607415521035920169948704261625320990186754910551780290421057403512785617970138903967874651050299914974180360347163879160470918945383706463326470519550909277678697788304151342226439850677611170439191913555562326538607106089620201074331099713506536192957054173076913374098400489398228161089007898192779738439912595619813699711049380213926849110877231503068464392648816891183318112570732792516076618174144968844351282497993164926346337121313644001762196098432060141494704659769545012678386821212213326455045335220435963683095439867976162</span><br><br>m = discrete_log(p,h,g)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment">#b&#x27;Dest0g3&#123;07ed2a6f-182f-a05d-c81e-1318af820a78&#125;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="ezStream"><a href="#ezStream" class="headerlink" title="ezStream"></a>ezStream</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>flag = f.read()<br>f.close()<br><span class="hljs-keyword">assert</span> flag[:<span class="hljs-number">8</span>] == <span class="hljs-string">&quot;Dest0g3&#123;&quot;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LCG</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.a = getRandomNBitInteger(<span class="hljs-number">32</span>)<br>        self.b = getRandomNBitInteger(<span class="hljs-number">32</span>)<br>        self.m = getPrime(<span class="hljs-number">32</span>)<br>        self.seed = getRandomNBitInteger(<span class="hljs-number">32</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        self.seed = (self.a * self.seed + self.b) % self.m<br>        <span class="hljs-keyword">return</span> self.seed &gt;&gt; <span class="hljs-number">16</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">output</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;a = &#123;&#125;\nb = &#123;&#125;\nm = &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.a, self.b, self.m))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;state1 = &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.<span class="hljs-built_in">next</span>()))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;state2 = &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(self.<span class="hljs-built_in">next</span>()))<br><br><br>lcg = LCG()<br>lcg.output()<br>c = <span class="hljs-string">b&#x27;&#x27;</span>.join([long_to_bytes(<span class="hljs-built_in">ord</span>(flag[i]) ^ (lcg.<span class="hljs-built_in">next</span>() % <span class="hljs-number">10</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag))])<br><span class="hljs-built_in">print</span>(bytes_to_long(c))<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">a = 3939333498</span><br><span class="hljs-string">b = 3662432446</span><br><span class="hljs-string">m = 2271373817</span><br><span class="hljs-string">state1 = 17362  </span><br><span class="hljs-string">state2 = 20624</span><br><span class="hljs-string">600017039001091357643174067454938198067935635401496485588306838343558125283178792619821966678282131419050878</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>$$<br>\begin{cases}<br>seed1 &#x3D; (a * seed + b)% m,\ state1 &#x3D; seed1&gt;&gt;16<br>\\seed2 &#x3D; (a * seed1 + b)% m,\ state2 &#x3D; seed2&gt;&gt;16<br>\end{cases}<br>$$</p><p>这让我想到了二元copper，不过貌似没求出正解。</p><p>$seed1,seed2$ 缺失位数小，可以进行爆破。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LCG</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,a,b,m,seed</span>):<br>        self.a = a<br>        self.b = b<br>        self.m = m<br>        self.seed = seed<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        self.seed = (self.a * self.seed + self.b) % self.m<br>        <span class="hljs-keyword">return</span> self.seed &gt;&gt; <span class="hljs-number">16</span><br><br>a = <span class="hljs-number">3939333498</span><span class="hljs-comment">#32bit</span><br>b = <span class="hljs-number">3662432446</span><span class="hljs-comment">#32bit</span><br>m = <span class="hljs-number">2271373817</span><br>state1 = <span class="hljs-number">17362</span><br>state2 = <span class="hljs-number">20624</span><br>c = <span class="hljs-number">600017039001091357643174067454938198067935635401496485588306838343558125283178792619821966678282131419050878</span><br>c = long_to_bytes(c)<br><br>end = <span class="hljs-number">2</span>**<span class="hljs-number">16</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(end)):<br>    seed1 = (state1 &lt;&lt; <span class="hljs-number">16</span>) + i<span class="hljs-comment">#打括号！！！</span><br>    seed2 = (a*seed1+b)%m<br>    <span class="hljs-keyword">if</span> seed2 &gt;&gt; <span class="hljs-number">16</span> == state2:<br>        <span class="hljs-built_in">print</span>(seed2)<br>        lcg1 = LCG(a, b, m, seed2)<br>        flag = <span class="hljs-string">b&#x27;&#x27;</span>.join([long_to_bytes(c[i] ^ (lcg1.<span class="hljs-built_in">next</span>() % <span class="hljs-number">10</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(c))])<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;Dest0g3&#123;&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>            <span class="hljs-built_in">print</span>(flag)<br>            <span class="hljs-keyword">break</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">1351677183</span><br><span class="hljs-string">b&#x27;Dest0g3&#123;f21c7180-c35e-f912-e4bc-bfd235759a25&#125;&#x27;</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="Mr-Doctor"><a href="#Mr-Doctor" class="headerlink" title="Mr.Doctor"></a>Mr.Doctor</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">import</span> string<br><br>table = string.ascii_letters + string.digits<br>flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read()[<span class="hljs-number">8</span>:-<span class="hljs-number">1</span>]<br>seed = getRandomNBitInteger(<span class="hljs-number">40</span>)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SHA256</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.proof = []<br>        self.sha = <span class="hljs-number">0</span><br>        self.sha_flag = []<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">encryption</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag) // <span class="hljs-number">4</span>):<br>            self.proof.append(flag[<span class="hljs-number">4</span> * i:<span class="hljs-number">4</span> + <span class="hljs-number">4</span> * i])<span class="hljs-comment">#四个一组</span><br>            self.sha = sha256(self.proof[i]).hexdigest().encode()<span class="hljs-comment">#sha256加密 64bytes</span><br>            self.sha_flag.append(bytes_to_long(self.sha))<br>        <span class="hljs-keyword">return</span> self.sha_flag<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RHODES_ELITE</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.Doctor = getPrime(<span class="hljs-number">64</span>)<br>        self.Amiya = getRandomNBitInteger(<span class="hljs-number">40</span>)<br>        self.Rosmontis = getRandomNBitInteger(<span class="hljs-number">40</span>)<br>        self.Blaze = getRandomNBitInteger(<span class="hljs-number">40</span>)<br>        self.seed = seed<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        self.seed = (self.Amiya * self.seed * self.seed + self.Rosmontis * self.seed + self.Blaze) % self.Doctor<br>        <span class="hljs-keyword">return</span> self.seed &gt;&gt; <span class="hljs-number">12</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">output</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Amiya = &quot;</span>, self.Amiya)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Rosmontis = &quot;</span>, self.Rosmontis)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Blaze = &quot;</span>, self.Blaze)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Doctor = &quot;</span>, self.Doctor)<br><br><br>sha = SHA256()<br>sha_flag = sha.encryption()<br>elite = RHODES_ELITE()<br>elite.output()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Ash = &quot;</span>, elite.<span class="hljs-built_in">next</span>())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;SliverAsh = &quot;</span>, elite.<span class="hljs-built_in">next</span>())<br>W = <span class="hljs-string">b&#x27;&#x27;</span>.join([long_to_bytes(sha_flag[i] % (seed ** <span class="hljs-number">3</span>) ^ (elite.<span class="hljs-built_in">next</span>() % <span class="hljs-number">100</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(sha_flag))])<br><span class="hljs-built_in">print</span>(bytes_to_long(W))<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Amiya =  956366446278</span><br><span class="hljs-string">Rosmontis =  1061992537343</span><br><span class="hljs-string">Blaze =  636205571590</span><br><span class="hljs-string">Doctor =  18068433704538283397</span><br><span class="hljs-string">Ash =  1097363493609113</span><br><span class="hljs-string">SliverAsh =  2051431344160327</span><br><span class="hljs-string">1920358673646340365826516899186299898354902389402251443712585240681673718967552394250439615271108958695077816395789102908554482423707690040360881719002797624203057223577713119411615697309430781610828105111854807558984242631896605944487456402584672441464316236703857236007195673926937583757881853655505218912262929700452404084</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>跟上一题相差不大，同样可以进行二元copper或爆破求出 $seed1,seed2$ ，不过还要求出 $seed$。</p><p>二元copper如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">import</span> itertools<br><br>Amiya = <span class="hljs-number">956366446278</span><br>Rosmontis = <span class="hljs-number">1061992537343</span><br>Blaze = <span class="hljs-number">636205571590</span><br>Doctor = <span class="hljs-number">18068433704538283397</span><br>Ash = <span class="hljs-number">1097363493609113</span><br>SliverAsh = <span class="hljs-number">2051431344160327</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">small_roots</span>(<span class="hljs-params">f, bounds, m=<span class="hljs-number">1</span>, d=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> d:<br>        d = f.degree()<br>    R = f.base_ring()<br>    N = R.cardinality()<br>    f /= f.coefficients().pop(<span class="hljs-number">0</span>)<br>    f = f.change_ring(ZZ)<br>    G = <span class="hljs-type">Sequence</span>([], f.parent())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m+<span class="hljs-number">1</span>):<br>        base = N^(m-i) * f^i<br>        <span class="hljs-keyword">for</span> shifts <span class="hljs-keyword">in</span> itertools.product(<span class="hljs-built_in">range</span>(d), repeat=f.nvariables()):<br>            g = base * prod(<span class="hljs-built_in">map</span>(power, f.variables(), shifts))<br>            G.append(g)<br>    B, monomials = G.coefficient_matrix()<br>    monomials = vector(monomials)<br>    factors = [monomial(*bounds) <span class="hljs-keyword">for</span> monomial <span class="hljs-keyword">in</span> monomials]<br>    <span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>        B.rescale_col(i, factor)<br>    B = B.dense_matrix().LLL()<br>    B = B.change_ring(QQ)<br>    <span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>        B.rescale_col(i, <span class="hljs-number">1</span>/factor)<br>    H = <span class="hljs-type">Sequence</span>([], f.parent().change_ring(QQ))<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">filter</span>(<span class="hljs-literal">None</span>, B*monomials):<br>        H.append(h)<br>        I = H.ideal()<br>        <span class="hljs-keyword">if</span> I.dimension() == -<span class="hljs-number">1</span>:<br>            H.pop()<br>        <span class="hljs-keyword">elif</span> I.dimension() == <span class="hljs-number">0</span>:<br>            roots = []<br>            <span class="hljs-keyword">for</span> root <span class="hljs-keyword">in</span> I.variety(ring=ZZ):<br>                root = <span class="hljs-built_in">tuple</span>(R(root[var]) <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> f.variables())<br>                roots.append(root)<br>            <span class="hljs-keyword">return</span> roots<br>    <span class="hljs-keyword">return</span> []<br><br>R.&lt;x1,x2&gt; = PolynomialRing(Zmod(Doctor))<br>f = Amiya*(Ash*<span class="hljs-number">2</span>^<span class="hljs-number">12</span>+x2)^<span class="hljs-number">2</span> + Rosmontis*(Ash*<span class="hljs-number">2</span>^<span class="hljs-number">12</span>+x2) + Blaze - (SliverAsh*<span class="hljs-number">2</span>^<span class="hljs-number">12</span>+x1)<br>result = small_roots(f,[<span class="hljs-number">2</span>^<span class="hljs-number">12</span>, <span class="hljs-number">2</span>^<span class="hljs-number">12</span>],m =<span class="hljs-number">4</span>,d=<span class="hljs-number">4</span>)<br><span class="hljs-comment">#[(1695, 3324)]，验证了一下，是对的</span><br>low_Ash, low_Sli = result[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>],result[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]<br><span class="hljs-comment">#print(low_Ash)</span><br><span class="hljs-comment">#print(low_Sli)</span><br><br>seed1 = (Ash&lt;&lt;<span class="hljs-number">12</span>)+low_Ash<br>seed2 = (SliverAsh&lt;&lt;<span class="hljs-number">12</span>)+low_Sli<br><br>R.&lt;x&gt; = PolynomialRing(Zmod(Doctor))<br>f = Amiya*x^<span class="hljs-number">2</span> + Rosmontis*x + Blaze - seed1<br>x0 = f.monic().roots()<br><span class="hljs-built_in">print</span>(x0)<br><span class="hljs-comment">#[(12358488364449364025, 1), (626844643882, 1)]</span><br></code></pre></td></tr></table></figure><p>根据 $seed$ 的范围筛选出 $seed$ 。</p><p>还有个麻烦就是不清楚加密的时候有多少组。但可以根据 $seed$ 来判断。$seed$ 40bit，三次方就120bit，故<code>long_to_bytes</code>之后就是15bytes一组，而 $W$ 转字节后正好是135bytes，故分为9组。</p><p>剩下的就是爆破了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha256<br><span class="hljs-keyword">import</span> string<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><br>table = <span class="hljs-string">&#x27;0123456789abcdef-&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">SHA256_decrypt</span>(<span class="hljs-params">state,seed,data</span>):<br>    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> table:<br>        <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> table:<br>            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> table:<br>                <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> table:<br>                    b_string = (a+b+c+d).encode()<br>                    sha = sha256(b_string).hexdigest().encode()<br>                    sha_flag = bytes_to_long(sha)<br>                    <span class="hljs-keyword">if</span> long_to_bytes((sha_flag % (seed ** <span class="hljs-number">3</span>)) ^ (state % <span class="hljs-number">100</span>)) == data:<br>                        <span class="hljs-built_in">print</span>(b_string)<br>                        <span class="hljs-keyword">return</span> b_string<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RHODES_ELITE</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,Doctor,Amiya,Rosmontis,Blaze,seed</span>):<br>        self.Doctor = Doctor<br>        self.Amiya = Amiya<br>        self.Rosmontis = Rosmontis<br>        self.Blaze = Blaze<br>        self.seed = seed<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        self.seed = (self.Amiya * self.seed * self.seed + self.Rosmontis * self.seed + self.Blaze) % self.Doctor<br>        <span class="hljs-keyword">return</span> self.seed &gt;&gt; <span class="hljs-number">12</span><br><br>Amiya = <span class="hljs-number">956366446278</span><br>Rosmontis = <span class="hljs-number">1061992537343</span><br>Blaze = <span class="hljs-number">636205571590</span><br>Doctor = <span class="hljs-number">18068433704538283397</span><br>Ash = <span class="hljs-number">1097363493609113</span><br>SliverAsh = <span class="hljs-number">2051431344160327</span><br>W = <span class="hljs-number">1920358673646340365826516899186299898354902389402251443712585240681673718967552394250439615271108958695077816395789102908554482423707690040360881719002797624203057223577713119411615697309430781610828105111854807558984242631896605944487456402584672441464316236703857236007195673926937583757881853655505218912262929700452404084</span><br>W = long_to_bytes(W)<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">len</span>(W))<br>W = [W[i:i+<span class="hljs-number">15</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">135</span>,<span class="hljs-number">15</span>)]<br><br>low_Ash = <span class="hljs-number">3324</span><br>low_Sli = <span class="hljs-number">1695</span><br>seed = <span class="hljs-number">626844643882</span><br>seed1 = (Ash&lt;&lt;<span class="hljs-number">12</span>)+low_Ash<br>seed2 = (SliverAsh&lt;&lt;<span class="hljs-number">12</span>)+low_Sli<br><br>elite = RHODES_ELITE(Doctor,Amiya,Rosmontis,Blaze,seed2)<br><br>flag = <span class="hljs-string">b&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> tqdm(W):<br>     state = elite.<span class="hljs-built_in">next</span>()<br>     flag += SHA256_decrypt(state,seed,each)<br><br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment">#b&#x27;d2a4d1af-8a80-8794-99ac-635f89494cac&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="Bag"><a href="#Bag" class="headerlink" title="Bag"></a>Bag</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><br>message = bytes_to_long(flag[<span class="hljs-number">8</span>:-<span class="hljs-number">1</span>])<br>Baglenth=<span class="hljs-number">286</span><br>Bag=[<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">6</span>, <span class="hljs-number">12</span>, <span class="hljs-number">24</span>, <span class="hljs-number">48</span>, <span class="hljs-number">96</span>, <span class="hljs-number">192</span>, <span class="hljs-number">384</span>, <span class="hljs-number">768</span>, <span class="hljs-number">1536</span>, <span class="hljs-number">3072</span>, <span class="hljs-number">6144</span>, <span class="hljs-number">12288</span>, <span class="hljs-number">24576</span>, <span class="hljs-number">49152</span>, <span class="hljs-number">98304</span>, <span class="hljs-number">196608</span>, <span class="hljs-number">393216</span>, <span class="hljs-number">786432</span>, <span class="hljs-number">1572864</span>, <span class="hljs-number">3145728</span>, <span class="hljs-number">6291456</span>, <span class="hljs-number">12582912</span>, <span class="hljs-number">25165824</span>, <span class="hljs-number">50331648</span>, <span class="hljs-number">100663296</span>, <span class="hljs-number">201326592</span>, <span class="hljs-number">402653184</span>, <span class="hljs-number">805306368</span>, <span class="hljs-number">1610612736</span>, <span class="hljs-number">3221225472</span>, <span class="hljs-number">6442450944</span>, <span class="hljs-number">12884901888</span>, <span class="hljs-number">25769803776</span>, <span class="hljs-number">51539607552</span>, <span class="hljs-number">103079215104</span>, <span class="hljs-number">206158430208</span>, <span class="hljs-number">412316860416</span>, <span class="hljs-number">824633720832</span>, <span class="hljs-number">1649267441664</span>, <span class="hljs-number">3298534883328</span>, <span class="hljs-number">6597069766656</span>, <span class="hljs-number">13194139533312</span>, <span class="hljs-number">26388279066624</span>, <span class="hljs-number">52776558133248</span>, <span class="hljs-number">105553116266496</span>, <span class="hljs-number">211106232532992</span>, <span class="hljs-number">422212465065984</span>, <span class="hljs-number">844424930131968</span>, <span class="hljs-number">1688849860263936</span>, <span class="hljs-number">3377699720527872</span>, <span class="hljs-number">6755399441055744</span>, <span class="hljs-number">13510798882111488</span>, <span class="hljs-number">27021597764222976</span>, <span class="hljs-number">54043195528445952</span>, <span class="hljs-number">108086391056891904</span>, <span class="hljs-number">216172782113783808</span>, <span class="hljs-number">432345564227567616</span>, <span class="hljs-number">864691128455135232</span>, <span class="hljs-number">1729382256910270464</span>, <span class="hljs-number">3458764513820540928</span>, <span class="hljs-number">6917529027641081856</span>, <span class="hljs-number">13835058055282163712</span>, <span class="hljs-number">27670116110564327424</span>, <span class="hljs-number">55340232221128654848</span>, <span class="hljs-number">110680464442257309696</span>, <span class="hljs-number">221360928884514619392</span>, <span class="hljs-number">442721857769029238784</span>, <span class="hljs-number">885443715538058477568</span>, <span class="hljs-number">1770887431076116955136</span>, <span class="hljs-number">3541774862152233910272</span>, <span class="hljs-number">7083549724304467820544</span>, <span class="hljs-number">14167099448608935641088</span>, <span class="hljs-number">28334198897217871282176</span>, <span class="hljs-number">56668397794435742564352</span>, <span class="hljs-number">113336795588871485128704</span>, <span class="hljs-number">226673591177742970257408</span>, <span class="hljs-number">453347182355485940514816</span>, <span class="hljs-number">906694364710971881029632</span>, <span class="hljs-number">1813388729421943762059264</span>, <span class="hljs-number">3626777458843887524118528</span>, <span class="hljs-number">7253554917687775048237056</span>, <span class="hljs-number">14507109835375550096474112</span>, <span class="hljs-number">29014219670751100192948224</span>, <span class="hljs-number">58028439341502200385896448</span>, <span class="hljs-number">116056878683004400771792896</span>, <span class="hljs-number">232113757366008801543585792</span>, <span class="hljs-number">464227514732017603087171584</span>, <span class="hljs-number">928455029464035206174343168</span>, <span class="hljs-number">1856910058928070412348686336</span>, <span class="hljs-number">3713820117856140824697372672</span>, <span class="hljs-number">7427640235712281649394745344</span>, <span class="hljs-number">14855280471424563298789490688</span>, <span class="hljs-number">29710560942849126597578981376</span>, <span class="hljs-number">59421121885698253195157962752</span>, <span class="hljs-number">118842243771396506390315925504</span>, <span class="hljs-number">237684487542793012780631851008</span>, <span class="hljs-number">475368975085586025561263702016</span>, <span class="hljs-number">950737950171172051122527404032</span>, <span class="hljs-number">1901475900342344102245054808064</span>, <span class="hljs-number">3802951800684688204490109616128</span>, <span class="hljs-number">7605903601369376408980219232256</span>, <span class="hljs-number">15211807202738752817960438464512</span>, <span class="hljs-number">30423614405477505635920876929024</span>, <span class="hljs-number">60847228810955011271841753858048</span>, <span class="hljs-number">121694457621910022543683507716096</span>, <span class="hljs-number">243388915243820045087367015432192</span>, <span class="hljs-number">486777830487640090174734030864384</span>, <span class="hljs-number">973555660975280180349468061728768</span>, <span class="hljs-number">1947111321950560360698936123457536</span>, <span class="hljs-number">3894222643901120721397872246915072</span>, <span class="hljs-number">7788445287802241442795744493830144</span>, <span class="hljs-number">15576890575604482885591488987660288</span>, <span class="hljs-number">31153781151208965771182977975320576</span>, <span class="hljs-number">62307562302417931542365955950641152</span>, <span class="hljs-number">124615124604835863084731911901282304</span>, <span class="hljs-number">249230249209671726169463823802564608</span>, <span class="hljs-number">498460498419343452338927647605129216</span>, <span class="hljs-number">996920996838686904677855295210258432</span>, <span class="hljs-number">1993841993677373809355710590420516864</span>, <span class="hljs-number">3987683987354747618711421180841033728</span>, <span class="hljs-number">7975367974709495237422842361682067456</span>, <span class="hljs-number">15950735949418990474845684723364134912</span>, <span class="hljs-number">31901471898837980949691369446728269824</span>, <span class="hljs-number">63802943797675961899382738893456539648</span>, <span class="hljs-number">127605887595351923798765477786913079296</span>, <span class="hljs-number">255211775190703847597530955573826158592</span>, <span class="hljs-number">510423550381407695195061911147652317184</span>, <span class="hljs-number">1020847100762815390390123822295304634368</span>, <span class="hljs-number">2041694201525630780780247644590609268736</span>, <span class="hljs-number">4083388403051261561560495289181218537472</span>, <span class="hljs-number">8166776806102523123120990578362437074944</span>, <span class="hljs-number">16333553612205046246241981156724874149888</span>, <span class="hljs-number">32667107224410092492483962313449748299776</span>, <span class="hljs-number">65334214448820184984967924626899496599552</span>, <span class="hljs-number">130668428897640369969935849253798993199104</span>, <span class="hljs-number">261336857795280739939871698507597986398208</span>, <span class="hljs-number">522673715590561479879743397015195972796416</span>, <span class="hljs-number">1045347431181122959759486794030391945592832</span>, <span class="hljs-number">2090694862362245919518973588060783891185664</span>, <span class="hljs-number">4181389724724491839037947176121567782371328</span>, <span class="hljs-number">8362779449448983678075894352243135564742656</span>, <span class="hljs-number">16725558898897967356151788704486271129485312</span>, <span class="hljs-number">33451117797795934712303577408972542258970624</span>, <span class="hljs-number">66902235595591869424607154817945084517941248</span>, <span class="hljs-number">133804471191183738849214309635890169035882496</span>, <span class="hljs-number">267608942382367477698428619271780338071764992</span>, <span class="hljs-number">535217884764734955396857238543560676143529984</span>, <span class="hljs-number">1070435769529469910793714477087121352287059968</span>, <span class="hljs-number">2140871539058939821587428954174242704574119936</span>, <span class="hljs-number">4281743078117879643174857908348485409148239872</span>, <span class="hljs-number">8563486156235759286349715816696970818296479744</span>, <span class="hljs-number">17126972312471518572699431633393941636592959488</span>, <span class="hljs-number">34253944624943037145398863266787883273185918976</span>, <span class="hljs-number">68507889249886074290797726533575766546371837952</span>, <span class="hljs-number">137015778499772148581595453067151533092743675904</span>, <span class="hljs-number">274031556999544297163190906134303066185487351808</span>, <span class="hljs-number">548063113999088594326381812268606132370974703616</span>, <span class="hljs-number">1096126227998177188652763624537212264741949407232</span>, <span class="hljs-number">2192252455996354377305527249074424529483898814464</span>, <span class="hljs-number">4384504911992708754611054498148849058967797628928</span>, <span class="hljs-number">8769009823985417509222108996297698117935595257856</span>, <span class="hljs-number">17538019647970835018444217992595396235871190515712</span>, <span class="hljs-number">35076039295941670036888435985190792471742381031424</span>, <span class="hljs-number">70152078591883340073776871970381584943484762062848</span>, <span class="hljs-number">140304157183766680147553743940763169886969524125696</span>, <span class="hljs-number">280608314367533360295107487881526339773939048251392</span>, <span class="hljs-number">561216628735066720590214975763052679547878096502784</span>, <span class="hljs-number">1122433257470133441180429951526105359095756193005568</span>, <span class="hljs-number">2244866514940266882360859903052210718191512386011136</span>, <span class="hljs-number">4489733029880533764721719806104421436383024772022272</span>, <span class="hljs-number">8979466059761067529443439612208842872766049544044544</span>, <span class="hljs-number">17958932119522135058886879224417685745532099088089088</span>, <span class="hljs-number">35917864239044270117773758448835371491064198176178176</span>, <span class="hljs-number">71835728478088540235547516897670742982128396352356352</span>, <span class="hljs-number">143671456956177080471095033795341485964256792704712704</span>, <span class="hljs-number">287342913912354160942190067590682971928513585409425408</span>, <span class="hljs-number">574685827824708321884380135181365943857027170818850816</span>, <span class="hljs-number">1149371655649416643768760270362731887714054341637701632</span>, <span class="hljs-number">2298743311298833287537520540725463775428108683275403264</span>, <span class="hljs-number">4597486622597666575075041081450927550856217366550806528</span>, <span class="hljs-number">9194973245195333150150082162901855101712434733101613056</span>, <span class="hljs-number">18389946490390666300300164325803710203424869466203226112</span>, <span class="hljs-number">36779892980781332600600328651607420406849738932406452224</span>, <span class="hljs-number">73559785961562665201200657303214840813699477864812904448</span>, <span class="hljs-number">147119571923125330402401314606429681627398955729625808896</span>, <span class="hljs-number">294239143846250660804802629212859363254797911459251617792</span>, <span class="hljs-number">588478287692501321609605258425718726509595822918503235584</span>, <span class="hljs-number">1176956575385002643219210516851437453019191645837006471168</span>, <span class="hljs-number">2353913150770005286438421033702874906038383291674012942336</span>, <span class="hljs-number">4707826301540010572876842067405749812076766583348025884672</span>, <span class="hljs-number">9415652603080021145753684134811499624153533166696051769344</span>, <span class="hljs-number">18831305206160042291507368269622999248307066333392103538688</span>, <span class="hljs-number">37662610412320084583014736539245998496614132666784207077376</span>, <span class="hljs-number">75325220824640169166029473078491996993228265333568414154752</span>, <span class="hljs-number">150650441649280338332058946156983993986456530667136828309504</span>, <span class="hljs-number">301300883298560676664117892313967987972913061334273656619008</span>, <span class="hljs-number">602601766597121353328235784627935975945826122668547313238016</span>, <span class="hljs-number">1205203533194242706656471569255871951891652245337094626476032</span>, <span class="hljs-number">2410407066388485413312943138511743903783304490674189252952064</span>, <span class="hljs-number">4820814132776970826625886277023487807566608981348378505904128</span>, <span class="hljs-number">9641628265553941653251772554046975615133217962696757011808256</span>, <span class="hljs-number">19283256531107883306503545108093951230266435925393514023616512</span>, <span class="hljs-number">38566513062215766613007090216187902460532871850787028047233024</span>, <span class="hljs-number">77133026124431533226014180432375804921065743701574056094466048</span>, <span class="hljs-number">154266052248863066452028360864751609842131487403148112188932096</span>, <span class="hljs-number">308532104497726132904056721729503219684262974806296224377864192</span>, <span class="hljs-number">617064208995452265808113443459006439368525949612592448755728384</span>, <span class="hljs-number">1234128417990904531616226886918012878737051899225184897511456768</span>, <span class="hljs-number">2468256835981809063232453773836025757474103798450369795022913536</span>, <span class="hljs-number">4936513671963618126464907547672051514948207596900739590045827072</span>, <span class="hljs-number">9873027343927236252929815095344103029896415193801479180091654144</span>, <span class="hljs-number">19746054687854472505859630190688206059792830387602958360183308288</span>, <span class="hljs-number">39492109375708945011719260381376412119585660775205916720366616576</span>, <span class="hljs-number">78984218751417890023438520762752824239171321550411833440733233152</span>, <span class="hljs-number">157968437502835780046877041525505648478342643100823666881466466304</span>, <span class="hljs-number">315936875005671560093754083051011296956685286201647333762932932608</span>, <span class="hljs-number">631873750011343120187508166102022593913370572403294667525865865216</span>, <span class="hljs-number">1263747500022686240375016332204045187826741144806589335051731730432</span>, <span class="hljs-number">2527495000045372480750032664408090375653482289613178670103463460864</span>, <span class="hljs-number">5054990000090744961500065328816180751306964579226357340206926921728</span>, <span class="hljs-number">10109980000181489923000130657632361502613929158452714680413853843456</span>, <span class="hljs-number">20219960000362979846000261315264723005227858316905429360827707686912</span>, <span class="hljs-number">40439920000725959692000522630529446010455716633810858721655415373824</span>, <span class="hljs-number">80879840001451919384001045261058892020911433267621717443310830747648</span>, <span class="hljs-number">161759680002903838768002090522117784041822866535243434886621661495296</span>, <span class="hljs-number">323519360005807677536004181044235568083645733070486869773243322990592</span>, <span class="hljs-number">647038720011615355072008362088471136167291466140973739546486645981184</span>, <span class="hljs-number">1294077440023230710144016724176942272334582932281947479092973291962368</span>, <span class="hljs-number">2588154880046461420288033448353884544669165864563894958185946583924736</span>, <span class="hljs-number">5176309760092922840576066896707769089338331729127789916371893167849472</span>, <span class="hljs-number">10352619520185845681152133793415538178676663458255579832743786335698944</span>, <span class="hljs-number">20705239040371691362304267586831076357353326916511159665487572671397888</span>, <span class="hljs-number">41410478080743382724608535173662152714706653833022319330975145342795776</span>, <span class="hljs-number">82820956161486765449217070347324305429413307666044638661950290685591552</span>, <span class="hljs-number">165641912322973530898434140694648610858826615332089277323900581371183104</span>, <span class="hljs-number">331283824645947061796868281389297221717653230664178554647801162742366208</span>, <span class="hljs-number">662567649291894123593736562778594443435306461328357109295602325484732416</span>, <span class="hljs-number">1325135298583788247187473125557188886870612922656714218591204650969464832</span>, <span class="hljs-number">2650270597167576494374946251114377773741225845313428437182409301938929664</span>, <span class="hljs-number">5300541194335152988749892502228755547482451690626856874364818603877859328</span>, <span class="hljs-number">10601082388670305977499785004457511094964903381253713748729637207755718656</span>, <span class="hljs-number">21202164777340611954999570008915022189929806762507427497459274415511437312</span>, <span class="hljs-number">42404329554681223909999140017830044379859613525014854994918548831022874624</span>, <span class="hljs-number">84808659109362447819998280035660088759719227050029709989837097662045749248</span>, <span class="hljs-number">169617318218724895639996560071320177519438454100059419979674195324091498496</span>, <span class="hljs-number">339234636437449791279993120142640355038876908200118839959348390648182996992</span>, <span class="hljs-number">678469272874899582559986240285280710077753816400237679918696781296365993984</span>, <span class="hljs-number">1356938545749799165119972480570561420155507632800475359837393562592731987968</span>, <span class="hljs-number">2713877091499598330239944961141122840311015265600950719674787125185463975936</span>, <span class="hljs-number">5427754182999196660479889922282245680622030531201901439349574250370927951872</span>, <span class="hljs-number">10855508365998393320959779844564491361244061062403802878699148500741855903744</span>, <span class="hljs-number">21711016731996786641919559689128982722488122124807605757398297001483711807488</span>, <span class="hljs-number">43422033463993573283839119378257965444976244249615211514796594002967423614976</span>, <span class="hljs-number">86844066927987146567678238756515930889952488499230423029593188005934847229952</span>, <span class="hljs-number">173688133855974293135356477513031861779904976998460846059186376011869694459904</span>, <span class="hljs-number">347376267711948586270712955026063723559809953996921692118372752023739388919808</span>, <span class="hljs-number">694752535423897172541425910052127447119619907993843384236745504047478777839616</span>, <span class="hljs-number">1389505070847794345082851820104254894239239815987686768473491008094957555679232</span>, <span class="hljs-number">2779010141695588690165703640208509788478479631975373536946982016189915111358464</span>, <span class="hljs-number">5558020283391177380331407280417019576956959263950747073893964032379830222716928</span>, <span class="hljs-number">11116040566782354760662814560834039153913918527901494147787928064759660445433856</span>, <span class="hljs-number">22232081133564709521325629121668078307827837055802988295575856129519320890867712</span>, <span class="hljs-number">44464162267129419042651258243336156615655674111605976591151712259038641781735424</span>, <span class="hljs-number">88928324534258838085302516486672313231311348223211953182303424518077283563470848</span>, <span class="hljs-number">177856649068517676170605032973344626462622696446423906364606849036154567126941696</span>, <span class="hljs-number">355713298137035352341210065946689252925245392892847812729213698072309134253883392</span>, <span class="hljs-number">711426596274070704682420131893378505850490785785695625458427396144618268507766784</span>, <span class="hljs-number">1422853192548141409364840263786757011700981571571391250916854792289236537015533568</span>, <span class="hljs-number">2845706385096282818729680527573514023401963143142782501833709584578473074031067136</span>, <span class="hljs-number">5691412770192565637459361055147028046803926286285565003667419169156946148062134272</span>, <span class="hljs-number">11382825540385131274918722110294056093607852572571130007334838338313892296124268544</span>, <span class="hljs-number">22765651080770262549837444220588112187215705145142260014669676676627784592248537088</span>, <span class="hljs-number">45531302161540525099674888441176224374431410290284520029339353353255569184497074176</span>, <span class="hljs-number">91062604323081050199349776882352448748862820580569040058678706706511138368994148352</span>, <span class="hljs-number">182125208646162100398699553764704897497725641161138080117357413413022276737988296704</span>, <span class="hljs-number">364250417292324200797399107529409794995451282322276160234714826826044553475976593408</span>, <span class="hljs-number">728500834584648401594798215058819589990902564644552320469429653652089106951953186816</span>, <span class="hljs-number">1457001669169296803189596430117639179981805129289104640938859307304178213903906373632</span>, <span class="hljs-number">2914003338338593606379192860235278359963610258578209281877718614608356427807812747264</span>, <span class="hljs-number">5828006676677187212758385720470556719927220517156418563755437229216712855615625494528</span>, <span class="hljs-number">11656013353354374425516771440941113439854441034312837127510874458433425711231250989056</span>, <span class="hljs-number">23312026706708748851033542881882226879708882068625674255021748916866851422462501978112</span>, <span class="hljs-number">46624053413417497702067085763764453759417764137251348510043497833733702844925003956224</span>, <span class="hljs-number">93248106826834995404134171527528907518835528274502697020086995667467405689850007912448</span>, <span class="hljs-number">186496213653669990808268343055057815037671056549005394040173991334934811379700015824896</span>]<br>Bag=Bag[::-<span class="hljs-number">1</span>]<br>m=<span class="hljs-number">372992427307339981616536686110115630075342113098010788080347982669869622759400031649792</span><br>w=<span class="hljs-number">274062421102700155372289583695782343443</span><br><br><span class="hljs-keyword">assert</span> gmpy2.gcd(m,w)==<span class="hljs-number">1</span><br>h=<span class="hljs-number">0</span><br>j=<span class="hljs-number">0</span><br><span class="hljs-keyword">if</span> m.bit_length()%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:<br>    h=m.bit_length()<br>    j=<span class="hljs-built_in">int</span>(h//<span class="hljs-number">2</span>)<br><span class="hljs-keyword">else</span>:<br>    h=m.bit_length()<br>    j=<span class="hljs-built_in">int</span>(h//<span class="hljs-number">2</span>+<span class="hljs-number">1</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">m,lenth</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(m)&lt;lenth:<br>        m=<span class="hljs-string">&#x27;0&#x27;</span>+m<br>    <span class="hljs-keyword">return</span> m<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">keygen</span>():<br>    pk=[]<br>    sk=[]<br>    sk.append(m)<br>    sk.append(<span class="hljs-built_in">int</span>(gmpy2.invert(w,m)))<br>    D=[]<br>    binD=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Baglenth):<br>        di=(w*Bag[i])%m<br>        D.append(di)<br>        bindi=<span class="hljs-built_in">bin</span>(di)[<span class="hljs-number">2</span>:]<br>        bindi=pad(bindi,h)<br>        binD.append(bindi)<br>    U=[]<br>    V=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Baglenth):<br>        tempu=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(binD[i][:j]),<span class="hljs-number">2</span>)<br>        U.append(tempu)<br>        tempv=<span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(binD[i][j:]),<span class="hljs-number">2</span>)<br>        V.append(tempv)<br>    e=gmpy2.next_prime(<span class="hljs-built_in">sum</span>(V))+<span class="hljs-number">2</span><br>    f=gmpy2.next_prime(<span class="hljs-built_in">sum</span>(U))<br>    <span class="hljs-keyword">assert</span> gmpy2.gcd(e,f)==<span class="hljs-number">1</span><br>    sk.append(<span class="hljs-built_in">int</span>(e))<br>    sk.append(<span class="hljs-built_in">int</span>(f))<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Baglenth):<br>        ai=e*U[i]+f*V[i]<br>        pk.append(<span class="hljs-built_in">int</span>(ai))<br>    <span class="hljs-keyword">return</span> pk,sk<br><br>Pk,Sk=keygen()<br><span class="hljs-built_in">print</span>(Pk)<br><span class="hljs-built_in">print</span>(Sk)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Encrypt</span>(<span class="hljs-params">plain,pk</span>):<br>    mbin=<span class="hljs-built_in">bin</span>(plain)[<span class="hljs-number">2</span>:]<br>    c=<span class="hljs-number">0</span><br>    mbin=pad(mbin,Baglenth)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(Baglenth):<br>        c=c+<span class="hljs-built_in">int</span>(mbin[i])*pk[i]<br>    <span class="hljs-keyword">return</span> c<br><br>c=Encrypt(message,Pk)<br><span class="hljs-built_in">print</span>(c)<br><br><span class="hljs-comment"># [13427720507293490146512325883268574617159432219330328705146993381673927145360640901644288, 20141580760940235219768488824902861925739148328995493057720490072510890718040961352466432, 10070790380470117609884244412451430962869574164497746528860245036255445359020480676233216, 5035395190235058804942122206225715481434787082248873264430122518127722679510240338116608, 15945418102411019548983386986381432357876825760454765337362054640737788485115761070702592, 7972709051205509774491693493190716178938412880227382668681027320368894242557880535351296, 3986354525602754887245846746595358089469206440113691334340513660184447121278940267675648, 1993177262801377443622923373297679044734603220056845667170256830092223560639470133837824, 14424309138694178868323787569917414139526733829358751538732121796720038925680375968563200, 20639875076640579580674219668227281686922799134009704474513054280033946608200828885925888, 10319937538320289790337109834113640843461399567004852237256527140016973304100414442962944, 5159968769160144895168554917056820421730699783502426118628263570008486652050207221481472, 16007704891873562594096603341796984828024782111081541764461125166678170471385744512385024, 21431572953230271443560627554167067031171823274871099587377555965013012381053513157836800, 24143506983908625868292639660352108132745343856765878498835771364180433335887397480562688, 25499473999247803080658645713444628683532104147713267954564879063764143813304339641925632, 26177457506917391686841648739990888958925484293186962682429432913555999052012810722607104, 13088728753458695843420824369995444479462742146593481341214716456777999526006405361303552, 6544364376729347921710412184997722239731371073296740670607358228388999763003202680651776, 16699902695658164107367531975767435737025117755978699040450672495868427026862242241970176, 8349951347829082053683765987883717868512558877989349520225336247934213513431121120985088, 4174975673914541026841882993941858934256279438994674760112668123967106756715560560492544, 2087487836957270513420941496970929467128139719497337380056334061983553378357780280246272, 1043743918478635256710470748485464733564069859748668690028167030991776689178890140123136, 521871959239317628355235374242732366782034929874334345014083515495888344589445070061568, 260935979619658814177617687121366183391017464937167172507041757747944172294722535030784, 13558188497103319553601134726829257708854940951798912291400514260547899231508002169159680, 20206814755845149923312893246683203471586902695229784850847250511947876761114641986224128, 23531127885216065108168772506610176352952883566945221130570618637647865525917961894756352, 25193284449901522700596712136573662793635874002802939270432302700497859908319621849022464, 12596642224950761350298356068286831396817937001401469635216151350248929954159810924511232, 6298321112475380675149178034143415698408968500700734817608075675124464977079905462255616, 16576881063531180484086914900340282466363916469680696113951031219236159633900593632772096, 21716161039059080388555783333438715850341390454170676762122508991292006962310937718030336, 10858080519529540194277891666719357925170695227085338381061254495646003481155468859015168, 5429040259764770097138945833359678962585347613542669190530627247823001740577734429507584, 2714520129882385048569472916679839481292673806771334595265313623911500870288867214753792, 1357260064941192524284736458339919740646336903385667297632656811955750435144433607376896, 678630032470596262142368229169959870323168451692833648816328405977875217572216803688448, 13767035523528788277583509997853554552321016445176745529555157584662864754146749303488512, 6883517761764394138791754998926777276160508222588372764777578792331432377073374651744256, 16869479388175687215908203382731963255239686330624515087535782777839643333897328227516416, 8434739694087843607954101691365981627619843165312257543767891388919821666948664113758208, 4217369847043921803977050845682990813809921582656128771883945694459910833474332056879104, 2108684923521960901988525422841495406904960791328064385941972847229955416737166028439552, 1054342461760980450994262711420747703452480395664032192970986423614977708368583014219776, 527171230880490225497131355710373851726240197832016096485493211807488854184291507109888, 13691306122733735259260891561123761543022552318246336753389739987577671572452786655199232, 20273373568660357776142771663830455388670708378453497081841863375462762931587034229243904, 10136686784330178888071385831915227694335354189226748540920931687731381465793517114621952, 18496063899458579590548018799226188464327109313943702975607459225539617878257399458955264, 9248031949729289795274009399613094232163554656971851487803729612769808939128699729477632, 4624015974864644897637004699806547116081777328485925743901864806384904469564349864738816, 2312007987432322448818502349903273558040888664242962871950932403192452234782174932369408, 14583724501009651370921577058220211396179876551451810141122459583270153262751728367828992, 7291862250504825685460788529110105698089938275725905070561229791635076631375864183914496, 3645931125252412842730394264555052849044969137862952535280614895817538315687932091957248, 15250686069919696567877523015546101041681916788261804972787300829582696303204606947622912, 7625343034959848283938761507773050520840958394130902486393650414791348151602303473811456, 17240392024773414288481706637155099877579911416395779948343818589069601221161792638550016, 22047916519680197290753179201846124555949387927528218679318902676208727755941537220919296, 24451678767133588791888915484191636895134126183094438044806444719778291023331409512103936, 25653559890860284542456783625364393064726495310877547727550215741563072657026345657696256, 26254500452723632417740717695950771149522679874769102568922101252455463473873813730492416, 26554970733655306355382684731243960191920772156714879989608044007901658882297547766890496, 26705205874121143324203668248890554713119818297687768699951015385624756586509414785089536, 26780323444354061808614160007713851973719341368174213055122501074486305438615348294189056, 13390161722177030904307080003856925986859670684087106527561250537243152719307674147094528, 20122801368382005598665865885197037610589267561373881968927618650295503505014477975191552, 23489121191484492945845258825867093422454066000017269689610802706821678897867879889240064, 11744560595742246472922629412933546711227033000008634844805401353410839448933939944620032, 5872280297871123236461314706466773355613516500004317422402700676705419724466969972310016, 16363860656229051764742983236501961294966190469332487416348343720026637007594125887799296, 8181930328114525882371491618250980647483095234666243708174171860013318503797062943899648, 17518685671350753087698071692394064940900979836663450559234079311680586397259172373594112, 8759342835675376543849035846197032470450489918331725279617039655840293198629586186797056, 17807391925131178418436843806367090852384677178496191344955513209594073744675433995042816, 8903695962565589209218421903183545426192338589248095672477756604797036872337716997521408, 17879568488576284751121536834860347330255601513954376541385871684072445581529499400404992, 8939784244288142375560768417430173665127800756977188270692935842036222790764749700202496, 17897612629437561334292710091983661449723332597818922840493461302692038540743015751745536, 8948806314718780667146355045991830724861666298909461420246730651346019270371507875872768, 4474403157359390333573177522995915362430833149454730710123365325673009635185753937936384, 15664922085973185313298914644766532298374848794057694060208676044510431962953517870612480, 21260181550280082803161783205651840766346856616359175735251331403929143126837399836950528, 24057811282433531548093217486094495000332860527509916572772659083638498708779340820119552, 25456626148510255920558934626315822117325862483085286991533322923493176499750311311704064, 26156033581548618106791793196426485675822363460872972200913654843420515395235796557496320, 26505737298067799199908222481481817455070613949766814805603820803384184842978539180392448, 13252868649033899599954111240740908727535306974883407402801910401692092421489269590196224, 6626434324516949799977055620370454363767653487441703701400955200846046210744634795098112, 3313217162258474899988527810185227181883826743720851850700477600423023105372317397549056, 15084329088422727596506589788361188208101345591190754630497232181885438698046799600418816, 7542164544211363798253294894180594104050672795595377315248616090942719349023399800209408, 3771082272105681899126647447090297052025336397797688657624308045471359674511699900104704, 15313261643346331096075649606813723143172100418229173033959147404409606982616490851696640, 21084351328966655694550150686675436188745482428444915222126567083878730636668886327492608, 10542175664483327847275075343337718094372741214222457611063283541939365318334443163746304, 5271087832241663923637537671668859047186370607111228805531641770969682659167221581873152, 16063264423414322108331094719103004140752617522885943107912814267158768474944251692580864, 21459352719000651200677873242820076687535740980773300259103400515253311382832766747934720, 10729676359500325600338936621410038343767870490386650129551700257626655691416383373967360, 5364838179750162800169468310705019171883935245193325064775850128813327845708191686983680, 16110139597168571546597060038621084203101399841926991237534918446080591068214736745136128, 8055069798584285773298530019310542101550699920963495618767459223040295534107368372568064, 4027534899292142886649265009655271050775349960481747809383729611520147767053684186284032, 2013767449646071443324632504827635525387674980240873904691864805760073883526842093142016, 1006883724823035721662316252413817762693837490120436952345932402880036941763421046571008, 503441862411517860831158126206908881346918745060218476172966201440018470881710523285504, 251720931205758930415579063103454440673459372530109238086483100720009235440855261642752, 125860465602879465207789531551727220336729686265054619043241550360004617720427630821376, 13490650740094929879116220649044438227327797062462856014668614156853929454220854717054976, 6745325370047464939558110324522219113663898531231428007334307078426964727110427358527488, 16800383192317222616291381045529684173991381484946042708814146920887409508915854580908032, 21827912103452101454658016406033416704155122961803350059554066842117631899818568192098304, 24341676559019540873841334086285282969236993700232003734924026802732743095269924997693440, 12170838279509770436920667043142641484618496850116001867462013401366371547634962498846720, 19513139647048375364972659404839895359468680644388329638878000082357112919178122151067648, 9756569823524187682486329702419947679734340322194164819439000041178556459589061075533824, 4878284911762093841243164851209973839867170161097082409719500020589278229794530537766912, 2439142455881046920621582425604986919933585080548541204859750010294639114897265268883456, 14647291735234013606823117096071068077126224759604599307576868386821246702809273536086016, 20751366374910496949923884431304108655722544599132628358935427575084550496765277669687296, 23803403694748738621474268098920628945020704518896642884614707169216202393743279736487936, 11901701847374369310737134049460314472510352259448321442307353584608101196871639868243968, 5950850923687184655368567024730157236255176129724160721153676792304050598435819934121984, 16403145969137082474196609395633653235287020284192409065723831777825952444578550868705280, 21629293491862031383610630581085401234802942361426533238008909270586903367649916335996928, 10814646745931015691805315290542700617401471180713266619004454635293451683824958167998464, 5407323372965507845902657645271350308700735590356633309502227317646725841912479083999232, 2703661686482753922951328822635675154350367795178316654751113658823362920956239541999616, 1351830843241376961475664411317837577175183897589158327375556829411681460478119770999808, 675915421620688480737832205658918788587591948794579163687778414705840730239059885499904, 337957710810344240368916102829459394293795974397289581843889207352920365119529942749952, 168978855405172120184458051414729697146897987198644790921944603676460182559764971374976, 84489427702586060092229025707364848573448993599322395460972301838230091279882485687488, 42244713851293030046114512853682424286724496799661197730486150919115045639941242843744, 21122356925646515023057256426841212143362248399830598865243075459557522819970621421872, 10561178462823257511528628213420606071681124199915299432621537729778761409985310710936, 5280589231411628755764314106710303035840562099957649716310768864889380704992655355468, 2640294615705814377882157053355151517920281049978824858155384432444690352496327677734, 1320147307852907188941078526677575758960140524989412429077692216222345176248163838867, 11376929106527795892898839465621865505177413571970563898745322852504166513570004716585524, 5688464553263897946449419732810932752588706785985281949372661426252083256785002358292762, 2844232276631948973224709866405466376294353392992640974686330713126041628392501179146381, 12798385171189843925916723859561259905445110198204389679873949362959076155178131224239281, 17775461618468791402262730856139156670020488600810264032467758687875593418570946246785731, 20263999842108265140435734354428105052308177802113201208764663350333852050267353758058956, 10131999921054132570217867177214052526154088901056600604382331675166926025133676879029478, 5065999960527066285108933588607026263077044450528300302191165837583463012566838439514739, 13909269013137402581858835720662039848836455726972219343626366925187786847265299854423460, 6954634506568701290929417860331019924418227863486109671813183462593893423632649927211730, 3477317253284350645464708930165509962209113931743054835906591731296946711816324963605865, 13114927659516044762036723391441281698402490467579596610484079872044528696890043116469023, 17933732862631891820322730622079167566499178735497867497772823942418319689426902192900602, 8966866431315945910161365311039583783249589367748933748886411971209159844713451096450301, 15859702248531842394385051581878318608922728185582536066973989992000635263338606182891241, 19306120157139790636496894717297686021759297594499337226017779002396372972651183726111711, 21029329111443764757552816285007369728177582298957737805539673507594241827307472497721946, 10514664555721882378776408142503684864088791149478868902769836753797120913653736248860973, 16633601310734810628692572997610369149342329076447503643915702383294615797808748759096577, 19693069688241274753650655425163711291969098039931821014488635198043363239886255014214379, 21222803876994506816129696638940382363282482521673979699775101605417736960925008141773280, 10611401938497253408064848319470191181641241260836989849887550802708868480462504070886640, 5305700969248626704032424159735095590820620630418494924943775401354434240231252035443320, 2652850484624313352016212079867547795410310315209247462471887700677217120115626017721660, 1326425242312156676008106039933773897705155157604623731235943850338608560057813008860830, 663212621156078338004053019966886948852577578802311865617971925169304280028906504430415, 11707875343451908608306395436341970191724222291109225125339769968980707480996333886881298, 5853937671725954304153197718170985095862111145554612562669884984490353740498166943440649, 14303237868736846591380967785444019265228989074485375473865726498641232211230964106386415, 18527887967242292734994852819080536349912428038950756929463647255716671446597362687859298, 9263943983621146367497426409540268174956214019475378464731823627858335723298681343929649, 16008241024684442623053082131128660804776040511445758424896695820325223202631221306630915, 19380389545216090750830909991922857119685953757430948404979131916558666942297491287981548, 9690194772608045375415454995961428559842976878715474202489565958279333471148745643990774, 4845097386304022687707727497980714279921488439357737101244782979139666735574372821995387, 13798817726025880783158232675348883857258677721386937743153175495965888708769067045663784, 6899408863012940391579116337674441928629338860693468871576587747982944354384533522831892, 3449704431506470195789558168837220964314669430346734435788293873991472177192266761415946, 1724852215753235097894779084418610482157334715173367217894146936995736088596133380707973, 12238695140750486988251758468567831958376600859294752801477857474893923385279947325020077, 17495616603249112933430248160642442696486233931355445593269712743843017033621854297176129, 20124077334498425906019493006679748065541050467385791989165640378317563857792807783254155, 21438307700123082392314115429698400750068458735400965187113604195554837269878284526293168, 10719153850061541196157057714849200375034229367700482593556802097777418634939142263146584, 5359576925030770598078528857424600187517114683850241296778401048888709317469571131573292, 2679788462515385299039264428712300093758557341925120648389200524444354658734785565786646, 1339894231257692649519632214356150046879278670962560324194600262222177329367392782893323, 12046216148502715764064185033536601740737572837189349354628084137507144005665577026112752, 6023108074251357882032092516768300870368786418594674677314042068753572002832788513056376, 3011554037125678941016046258384150435184393209297337338657021034376786001416394256528188, 1505777018562839470508023129192075217592196604648668669328510517188393000708197128264094, 752888509281419735254011564596037608796098302324334334664255258594196500354098564132047, 11752713287514579306931374708656545521695982652870236359862911635693153591158929916732114, 5876356643757289653465687354328272760847991326435118179931455817846576795579464958366057, 14314447354752514266037212603522663097721929164925628282496511915319343738771613113849119, 18533492710250126572322975228119858266158898084170883333779039964055727210367687191590650, 9266746355125063286161487614059929133079449042085441666889519982027863605183843595795325, 16009642210436401082385112733388491283837658022750790025975543997409987143573802432563753, 19381090138092069980496925293052772359216762513083464205518556005101048912768781850947967, 21066814101919904429552831572884912896906314758249801295290062008946579797366271560140074, 10533407050959952214776415786442456448453157379124900647645031004473289898683135780070037, 16642972558353845546692576819579754941524512191270519516353299508632700290323448524701109, 19697755312050792212650657336148404188060189597343328950707433760712405486143604897016645, 21225146688899265545629697594432728811328028300379733667884500886752258084053683083174413, 21988842377323502212119217723574891122961947651897936026473034449772184383008722176253297, 22370690221535620545363977788145972278778907327657037205767301231282147532486241722792739, 22561614143641679711986357820431512856687387165536587795414434622037129107225001496062460, 11280807071820839855993178910215756428343693582768293897707217311018564553612500748031230, 5640403535910419927996589455107878214171846791384146948853608655509282276806250374015615, 14196470800829079403302663653912465824383856897400142666957588334150696479385005821673898, 7098235400414539701651331826956232912191928448700071333478794167075348239692502910836949, 14925386733081139290130034839836643173393897726058104859270181089933729460828132090084565, 18838962399414439084369386346276848303994882364737121622165874551362920071395946679708373, 20795750232581088981489062099496950869295374684076630003613721282077515376679853974520277, 21774144149164413930048899976107002151945620843746384194337644647434813029321807621926229, 22263341107456076404328818914412027793270743923581261289699606330113461855642784445629205, 22507939586601907641468778383564540613933305463498699837380587171452786268803272857480693, 22630238826174823260038758118140797024264586233457419111221077592122448475383517063406437, 22691388445961281069323747985428925229430226618436778748141322802457279578673639166369309, 22721963255854509973966242919072989332013046810926458566601445407624695130318700217850745, 22737250660801124426287490385895021383304456907171298475831506710208402906141230743591463, 22744894363274431652448114119306037408950161955293718430446537361500256794052496006461822, 11372447181637215826224057059653018704475080977646859215223268680750128397026248003230911, 17062492623692477352416397456185036069535473990531498800142418346771119539495004636281546, 8531246311846238676208198728092518034767736995265749400071209173385559769747502318140773, 15641892188796988777408468290404785734681801999340943892566388593088835225855631793736477, 19197215127272363828008603071560919584638834501378541138813978302940472953909696531534329, 20974876596510051353308670462138986509617350752397339761937773157866291817936728900433255, 21863707331128895115958704157428019972106608877906739073499670585329201249950245084882718, 10931853665564447557979352078714009986053304438953369536749835292664600624975122542441359, 16842195865656093218294044965715531710324585721184753960905701652728355653469441905886770, 8421097932828046609147022482857765855162292860592376980452850826364177826734720952943385, 15586817999287892743877880167787409644879079932004257682757209419578144254349241111137783, 19169678032517815811243309010252231539737473467710198033909388716185127468156501190234982, 9584839016258907905621654505126115769868736733855099016954694358092563734078250595117491, 16168688541003323392115196178921584602232301868635618701008131185442337208021005932224836, 8084344270501661696057598089460792301116150934317809350504065592721168604010502966112418, 4042172135250830848028799044730396150558075467158904675252032796360584302005251483056209, 13397355100499284863318768448723724792576971235287521530156800404576347491984506376194195, 18074946583123511870963753150720389113586419119351829957609184208684229086974133822763188, 9037473291561755935481876575360194556793209559675914978804592104342114543487066911381594, 4518736645780877967740938287680097278396604779837957489402296052171057271743533455690797, 13635637355764308423174838070198575356496235891627047937231932032481583976853647362511489, 18194087710756023650891787961457814395546051447521593161146750022636847329408704315921835, 20473312888251881264750262907087433915070959225468865773104159017714479005686232792627008, 10236656444125940632375131453543716957535479612734432886552079508857239502843116396313504, 5118328222062970316187565726771858478767739806367216443276039754428619751421558198156752, 2559164111031485158093782863385929239383869903183608221638019877214309875710779099078376, 1279582055515742579046891431692964619691934951591804110819009938607154937855389549539188, 639791027757871289523445715846482309845967475795902055409504969303577468927694774769594, 319895513878935644761722857923241154922983737897951027704752484651788734463847387384797, 11536216789813337261685230355320147294759425370657044706383160248721949708213804328358489, 17144377427780538070146984104018600364677646187036591545722364130757030195088782798845335, 19948457746764138474377860978367826899636756595226364965391966071774570438526272034088758, 9974228873382069237188930489183913449818378297613182482695983035887285219263136017044379, 16363383469564904057898834170950483442207122650514660433878775524339697950613448643188280, 8181691734782452028949417085475241721103561325257330216939387762169848975306724321594140, 4090845867391226014474708542737620860551780662628665108469693881084924487653362160797070, 2045422933695613007237354271368810430275890331314332554234846940542462243826681080398535, 12398980499721675942923046062042931932435878667365235469648207476667286462895221174865358, 6199490249860837971461523031021465966217939333682617734824103738333643231447610587432679, 14476014157804288425035130441869259700406903168549378059942835875562876956705685928382430, 7238007078902144212517565220934629850203451584274689029971417937781438478352842964191215, 14995272572324941545563151536825841642399659293845413707516492975286774580158302116761698, 7497636286162470772781575768412920821199829646922706853758246487643387290079151058380849, 15125087175955104825695156810564987127897848325169422619409907250217748986021456163856515, 18938812620851421852151947331641020281246857664292780502235737631504929833992608716594348, 9469406310425710926075973665820510140623428832146390251117868815752464916996304358297174, 4734703155212855463037986832910255070311714416073195125558934407876232458498152179148587, 13743620610480297170823362342813654252453790709744666755310251210334171570230956724240384, 6871810305240148585411681171406827126226895354872333377655125605167085785115478362120192, 3435905152620074292705840585703413563113447677436166688827562802583542892557739181060096, 1717952576310037146352920292851706781556723838718083344413781401291771446278869590530048, 858976288155018573176460146425853390778361919359041672206890700645885723139434795265024, 429488144077509286588230073212926695389180959679520836103445350322942861569717397632512, 214744072038754643294115036606463347694590479839760418051722675161471430784858698816256, 107372036019377321647057518303231673847295239919880209025861337580735715392429349408128, 53686018009688660823528759151615836923647619959940104512930668790367857696214674704064, 26843009004844330411764379575807918461823809979970052256465334395183928848107337352032, 13421504502422165205882189787903959230911904989985026128232667197591964424053668676016, 6710752251211082602941094893951979615455952494992513064116333598795982212026834338008, 3355376125605541301470547446975989807727976247496256532058166799397991106013417169004, 1677688062802770650735273723487994903863988123748128266029083399698995553006708584502, 838844031401385325367636861743997451931994061874064133014541699849497776503354292251]</span><br><span class="hljs-comment"># [372992427307339981616536686110115630075342113098010788080347982669869622759400031649792, 284117116837182934114178639859989682847967251175497623662086047895218803240335140835099, 1605652832106941558090105598761930941083559723, 1020259092832776008725259110973662538898604019]</span><br><span class="hljs-comment"># 1475864207352419823225329328555476398971654057144688193866218781853021651529290611526242518</span><br></code></pre></td></tr></table></figure><p>之前没学习过背包密码。现在长长见识。</p><p>参考：<a href="https://jayxv.github.io/2020/06/08/%E5%AF%86%E7%A0%81%E5%AD%A6%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B9%8Bknapsack/">密码学学习笔记 之 knapsack | Van1sh的小屋 (jayxv.github.io)</a></p><p>因为 $Pk$ 是无序的，所以构建矩阵如下：</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031025091.png"/><p>进行LLL格基规约。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br>Pk = [<span class="hljs-number">13427720507293490146512325883268574617159432219330328705146993381673927145360640901644288</span>, <span class="hljs-number">20141580760940235219768488824902861925739148328995493057720490072510890718040961352466432</span>, <span class="hljs-number">10070790380470117609884244412451430962869574164497746528860245036255445359020480676233216</span>, <span class="hljs-number">5035395190235058804942122206225715481434787082248873264430122518127722679510240338116608</span>, <span class="hljs-number">15945418102411019548983386986381432357876825760454765337362054640737788485115761070702592</span>, <span class="hljs-number">7972709051205509774491693493190716178938412880227382668681027320368894242557880535351296</span>, <span class="hljs-number">3986354525602754887245846746595358089469206440113691334340513660184447121278940267675648</span>, <span class="hljs-number">1993177262801377443622923373297679044734603220056845667170256830092223560639470133837824</span>, <span class="hljs-number">14424309138694178868323787569917414139526733829358751538732121796720038925680375968563200</span>, <span class="hljs-number">20639875076640579580674219668227281686922799134009704474513054280033946608200828885925888</span>, <span class="hljs-number">10319937538320289790337109834113640843461399567004852237256527140016973304100414442962944</span>, <span class="hljs-number">5159968769160144895168554917056820421730699783502426118628263570008486652050207221481472</span>, <span class="hljs-number">16007704891873562594096603341796984828024782111081541764461125166678170471385744512385024</span>, <span class="hljs-number">21431572953230271443560627554167067031171823274871099587377555965013012381053513157836800</span>, <span class="hljs-number">24143506983908625868292639660352108132745343856765878498835771364180433335887397480562688</span>, <span class="hljs-number">25499473999247803080658645713444628683532104147713267954564879063764143813304339641925632</span>, <span class="hljs-number">26177457506917391686841648739990888958925484293186962682429432913555999052012810722607104</span>, <span class="hljs-number">13088728753458695843420824369995444479462742146593481341214716456777999526006405361303552</span>, <span class="hljs-number">6544364376729347921710412184997722239731371073296740670607358228388999763003202680651776</span>, <span class="hljs-number">16699902695658164107367531975767435737025117755978699040450672495868427026862242241970176</span>, <span class="hljs-number">8349951347829082053683765987883717868512558877989349520225336247934213513431121120985088</span>, <span class="hljs-number">4174975673914541026841882993941858934256279438994674760112668123967106756715560560492544</span>, <span class="hljs-number">2087487836957270513420941496970929467128139719497337380056334061983553378357780280246272</span>, <span class="hljs-number">1043743918478635256710470748485464733564069859748668690028167030991776689178890140123136</span>, <span class="hljs-number">521871959239317628355235374242732366782034929874334345014083515495888344589445070061568</span>, <span class="hljs-number">260935979619658814177617687121366183391017464937167172507041757747944172294722535030784</span>, <span class="hljs-number">13558188497103319553601134726829257708854940951798912291400514260547899231508002169159680</span>, <span class="hljs-number">20206814755845149923312893246683203471586902695229784850847250511947876761114641986224128</span>, <span class="hljs-number">23531127885216065108168772506610176352952883566945221130570618637647865525917961894756352</span>, <span class="hljs-number">25193284449901522700596712136573662793635874002802939270432302700497859908319621849022464</span>, <span class="hljs-number">12596642224950761350298356068286831396817937001401469635216151350248929954159810924511232</span>, <span class="hljs-number">6298321112475380675149178034143415698408968500700734817608075675124464977079905462255616</span>, <span class="hljs-number">16576881063531180484086914900340282466363916469680696113951031219236159633900593632772096</span>, <span class="hljs-number">21716161039059080388555783333438715850341390454170676762122508991292006962310937718030336</span>, <span class="hljs-number">10858080519529540194277891666719357925170695227085338381061254495646003481155468859015168</span>, <span class="hljs-number">5429040259764770097138945833359678962585347613542669190530627247823001740577734429507584</span>, <span class="hljs-number">2714520129882385048569472916679839481292673806771334595265313623911500870288867214753792</span>, <span class="hljs-number">1357260064941192524284736458339919740646336903385667297632656811955750435144433607376896</span>, <span class="hljs-number">678630032470596262142368229169959870323168451692833648816328405977875217572216803688448</span>, <span class="hljs-number">13767035523528788277583509997853554552321016445176745529555157584662864754146749303488512</span>, <span class="hljs-number">6883517761764394138791754998926777276160508222588372764777578792331432377073374651744256</span>, <span class="hljs-number">16869479388175687215908203382731963255239686330624515087535782777839643333897328227516416</span>, <span class="hljs-number">8434739694087843607954101691365981627619843165312257543767891388919821666948664113758208</span>, <span class="hljs-number">4217369847043921803977050845682990813809921582656128771883945694459910833474332056879104</span>, <span class="hljs-number">2108684923521960901988525422841495406904960791328064385941972847229955416737166028439552</span>, <span class="hljs-number">1054342461760980450994262711420747703452480395664032192970986423614977708368583014219776</span>, <span class="hljs-number">527171230880490225497131355710373851726240197832016096485493211807488854184291507109888</span>, <span class="hljs-number">13691306122733735259260891561123761543022552318246336753389739987577671572452786655199232</span>, <span class="hljs-number">20273373568660357776142771663830455388670708378453497081841863375462762931587034229243904</span>, <span class="hljs-number">10136686784330178888071385831915227694335354189226748540920931687731381465793517114621952</span>, <span class="hljs-number">18496063899458579590548018799226188464327109313943702975607459225539617878257399458955264</span>, <span class="hljs-number">9248031949729289795274009399613094232163554656971851487803729612769808939128699729477632</span>, <span class="hljs-number">4624015974864644897637004699806547116081777328485925743901864806384904469564349864738816</span>, <span class="hljs-number">2312007987432322448818502349903273558040888664242962871950932403192452234782174932369408</span>, <span class="hljs-number">14583724501009651370921577058220211396179876551451810141122459583270153262751728367828992</span>, <span class="hljs-number">7291862250504825685460788529110105698089938275725905070561229791635076631375864183914496</span>, <span class="hljs-number">3645931125252412842730394264555052849044969137862952535280614895817538315687932091957248</span>, <span class="hljs-number">15250686069919696567877523015546101041681916788261804972787300829582696303204606947622912</span>, <span class="hljs-number">7625343034959848283938761507773050520840958394130902486393650414791348151602303473811456</span>, <span class="hljs-number">17240392024773414288481706637155099877579911416395779948343818589069601221161792638550016</span>, <span class="hljs-number">22047916519680197290753179201846124555949387927528218679318902676208727755941537220919296</span>, <span class="hljs-number">24451678767133588791888915484191636895134126183094438044806444719778291023331409512103936</span>, <span class="hljs-number">25653559890860284542456783625364393064726495310877547727550215741563072657026345657696256</span>, <span class="hljs-number">26254500452723632417740717695950771149522679874769102568922101252455463473873813730492416</span>, <span class="hljs-number">26554970733655306355382684731243960191920772156714879989608044007901658882297547766890496</span>, <span class="hljs-number">26705205874121143324203668248890554713119818297687768699951015385624756586509414785089536</span>, <span class="hljs-number">26780323444354061808614160007713851973719341368174213055122501074486305438615348294189056</span>, <span class="hljs-number">13390161722177030904307080003856925986859670684087106527561250537243152719307674147094528</span>, <span class="hljs-number">20122801368382005598665865885197037610589267561373881968927618650295503505014477975191552</span>, <span class="hljs-number">23489121191484492945845258825867093422454066000017269689610802706821678897867879889240064</span>, <span class="hljs-number">11744560595742246472922629412933546711227033000008634844805401353410839448933939944620032</span>, <span class="hljs-number">5872280297871123236461314706466773355613516500004317422402700676705419724466969972310016</span>, <span class="hljs-number">16363860656229051764742983236501961294966190469332487416348343720026637007594125887799296</span>, <span class="hljs-number">8181930328114525882371491618250980647483095234666243708174171860013318503797062943899648</span>, <span class="hljs-number">17518685671350753087698071692394064940900979836663450559234079311680586397259172373594112</span>, <span class="hljs-number">8759342835675376543849035846197032470450489918331725279617039655840293198629586186797056</span>, <span class="hljs-number">17807391925131178418436843806367090852384677178496191344955513209594073744675433995042816</span>, <span class="hljs-number">8903695962565589209218421903183545426192338589248095672477756604797036872337716997521408</span>, <span class="hljs-number">17879568488576284751121536834860347330255601513954376541385871684072445581529499400404992</span>, <span class="hljs-number">8939784244288142375560768417430173665127800756977188270692935842036222790764749700202496</span>, <span class="hljs-number">17897612629437561334292710091983661449723332597818922840493461302692038540743015751745536</span>, <span class="hljs-number">8948806314718780667146355045991830724861666298909461420246730651346019270371507875872768</span>, <span class="hljs-number">4474403157359390333573177522995915362430833149454730710123365325673009635185753937936384</span>, <span class="hljs-number">15664922085973185313298914644766532298374848794057694060208676044510431962953517870612480</span>, <span class="hljs-number">21260181550280082803161783205651840766346856616359175735251331403929143126837399836950528</span>, <span class="hljs-number">24057811282433531548093217486094495000332860527509916572772659083638498708779340820119552</span>, <span class="hljs-number">25456626148510255920558934626315822117325862483085286991533322923493176499750311311704064</span>, <span class="hljs-number">26156033581548618106791793196426485675822363460872972200913654843420515395235796557496320</span>, <span class="hljs-number">26505737298067799199908222481481817455070613949766814805603820803384184842978539180392448</span>, <span class="hljs-number">13252868649033899599954111240740908727535306974883407402801910401692092421489269590196224</span>, <span class="hljs-number">6626434324516949799977055620370454363767653487441703701400955200846046210744634795098112</span>, <span class="hljs-number">3313217162258474899988527810185227181883826743720851850700477600423023105372317397549056</span>, <span class="hljs-number">15084329088422727596506589788361188208101345591190754630497232181885438698046799600418816</span>, <span class="hljs-number">7542164544211363798253294894180594104050672795595377315248616090942719349023399800209408</span>, <span class="hljs-number">3771082272105681899126647447090297052025336397797688657624308045471359674511699900104704</span>, <span class="hljs-number">15313261643346331096075649606813723143172100418229173033959147404409606982616490851696640</span>, <span class="hljs-number">21084351328966655694550150686675436188745482428444915222126567083878730636668886327492608</span>, <span class="hljs-number">10542175664483327847275075343337718094372741214222457611063283541939365318334443163746304</span>, <span class="hljs-number">5271087832241663923637537671668859047186370607111228805531641770969682659167221581873152</span>, <span class="hljs-number">16063264423414322108331094719103004140752617522885943107912814267158768474944251692580864</span>, <span class="hljs-number">21459352719000651200677873242820076687535740980773300259103400515253311382832766747934720</span>, <span class="hljs-number">10729676359500325600338936621410038343767870490386650129551700257626655691416383373967360</span>, <span class="hljs-number">5364838179750162800169468310705019171883935245193325064775850128813327845708191686983680</span>, <span class="hljs-number">16110139597168571546597060038621084203101399841926991237534918446080591068214736745136128</span>, <span class="hljs-number">8055069798584285773298530019310542101550699920963495618767459223040295534107368372568064</span>, <span class="hljs-number">4027534899292142886649265009655271050775349960481747809383729611520147767053684186284032</span>, <span class="hljs-number">2013767449646071443324632504827635525387674980240873904691864805760073883526842093142016</span>, <span class="hljs-number">1006883724823035721662316252413817762693837490120436952345932402880036941763421046571008</span>, <span class="hljs-number">503441862411517860831158126206908881346918745060218476172966201440018470881710523285504</span>, <span class="hljs-number">251720931205758930415579063103454440673459372530109238086483100720009235440855261642752</span>, <span class="hljs-number">125860465602879465207789531551727220336729686265054619043241550360004617720427630821376</span>, <span class="hljs-number">13490650740094929879116220649044438227327797062462856014668614156853929454220854717054976</span>, <span class="hljs-number">6745325370047464939558110324522219113663898531231428007334307078426964727110427358527488</span>, <span class="hljs-number">16800383192317222616291381045529684173991381484946042708814146920887409508915854580908032</span>, <span class="hljs-number">21827912103452101454658016406033416704155122961803350059554066842117631899818568192098304</span>, <span class="hljs-number">24341676559019540873841334086285282969236993700232003734924026802732743095269924997693440</span>, <span class="hljs-number">12170838279509770436920667043142641484618496850116001867462013401366371547634962498846720</span>, <span class="hljs-number">19513139647048375364972659404839895359468680644388329638878000082357112919178122151067648</span>, <span class="hljs-number">9756569823524187682486329702419947679734340322194164819439000041178556459589061075533824</span>, <span class="hljs-number">4878284911762093841243164851209973839867170161097082409719500020589278229794530537766912</span>, <span class="hljs-number">2439142455881046920621582425604986919933585080548541204859750010294639114897265268883456</span>, <span class="hljs-number">14647291735234013606823117096071068077126224759604599307576868386821246702809273536086016</span>, <span class="hljs-number">20751366374910496949923884431304108655722544599132628358935427575084550496765277669687296</span>, <span class="hljs-number">23803403694748738621474268098920628945020704518896642884614707169216202393743279736487936</span>, <span class="hljs-number">11901701847374369310737134049460314472510352259448321442307353584608101196871639868243968</span>, <span class="hljs-number">5950850923687184655368567024730157236255176129724160721153676792304050598435819934121984</span>, <span class="hljs-number">16403145969137082474196609395633653235287020284192409065723831777825952444578550868705280</span>, <span class="hljs-number">21629293491862031383610630581085401234802942361426533238008909270586903367649916335996928</span>, <span class="hljs-number">10814646745931015691805315290542700617401471180713266619004454635293451683824958167998464</span>, <span class="hljs-number">5407323372965507845902657645271350308700735590356633309502227317646725841912479083999232</span>, <span class="hljs-number">2703661686482753922951328822635675154350367795178316654751113658823362920956239541999616</span>, <span class="hljs-number">1351830843241376961475664411317837577175183897589158327375556829411681460478119770999808</span>, <span class="hljs-number">675915421620688480737832205658918788587591948794579163687778414705840730239059885499904</span>, <span class="hljs-number">337957710810344240368916102829459394293795974397289581843889207352920365119529942749952</span>, <span class="hljs-number">168978855405172120184458051414729697146897987198644790921944603676460182559764971374976</span>, <span class="hljs-number">84489427702586060092229025707364848573448993599322395460972301838230091279882485687488</span>, <span class="hljs-number">42244713851293030046114512853682424286724496799661197730486150919115045639941242843744</span>, <span class="hljs-number">21122356925646515023057256426841212143362248399830598865243075459557522819970621421872</span>, <span class="hljs-number">10561178462823257511528628213420606071681124199915299432621537729778761409985310710936</span>, <span class="hljs-number">5280589231411628755764314106710303035840562099957649716310768864889380704992655355468</span>, <span class="hljs-number">2640294615705814377882157053355151517920281049978824858155384432444690352496327677734</span>, <span class="hljs-number">1320147307852907188941078526677575758960140524989412429077692216222345176248163838867</span>, <span class="hljs-number">11376929106527795892898839465621865505177413571970563898745322852504166513570004716585524</span>, <span class="hljs-number">5688464553263897946449419732810932752588706785985281949372661426252083256785002358292762</span>, <span class="hljs-number">2844232276631948973224709866405466376294353392992640974686330713126041628392501179146381</span>, <span class="hljs-number">12798385171189843925916723859561259905445110198204389679873949362959076155178131224239281</span>, <span class="hljs-number">17775461618468791402262730856139156670020488600810264032467758687875593418570946246785731</span>, <span class="hljs-number">20263999842108265140435734354428105052308177802113201208764663350333852050267353758058956</span>, <span class="hljs-number">10131999921054132570217867177214052526154088901056600604382331675166926025133676879029478</span>, <span class="hljs-number">5065999960527066285108933588607026263077044450528300302191165837583463012566838439514739</span>, <span class="hljs-number">13909269013137402581858835720662039848836455726972219343626366925187786847265299854423460</span>, <span class="hljs-number">6954634506568701290929417860331019924418227863486109671813183462593893423632649927211730</span>, <span class="hljs-number">3477317253284350645464708930165509962209113931743054835906591731296946711816324963605865</span>, <span class="hljs-number">13114927659516044762036723391441281698402490467579596610484079872044528696890043116469023</span>, <span class="hljs-number">17933732862631891820322730622079167566499178735497867497772823942418319689426902192900602</span>, <span class="hljs-number">8966866431315945910161365311039583783249589367748933748886411971209159844713451096450301</span>, <span class="hljs-number">15859702248531842394385051581878318608922728185582536066973989992000635263338606182891241</span>, <span class="hljs-number">19306120157139790636496894717297686021759297594499337226017779002396372972651183726111711</span>, <span class="hljs-number">21029329111443764757552816285007369728177582298957737805539673507594241827307472497721946</span>, <span class="hljs-number">10514664555721882378776408142503684864088791149478868902769836753797120913653736248860973</span>, <span class="hljs-number">16633601310734810628692572997610369149342329076447503643915702383294615797808748759096577</span>, <span class="hljs-number">19693069688241274753650655425163711291969098039931821014488635198043363239886255014214379</span>, <span class="hljs-number">21222803876994506816129696638940382363282482521673979699775101605417736960925008141773280</span>, <span class="hljs-number">10611401938497253408064848319470191181641241260836989849887550802708868480462504070886640</span>, <span class="hljs-number">5305700969248626704032424159735095590820620630418494924943775401354434240231252035443320</span>, <span class="hljs-number">2652850484624313352016212079867547795410310315209247462471887700677217120115626017721660</span>, <span class="hljs-number">1326425242312156676008106039933773897705155157604623731235943850338608560057813008860830</span>, <span class="hljs-number">663212621156078338004053019966886948852577578802311865617971925169304280028906504430415</span>, <span class="hljs-number">11707875343451908608306395436341970191724222291109225125339769968980707480996333886881298</span>, <span class="hljs-number">5853937671725954304153197718170985095862111145554612562669884984490353740498166943440649</span>, <span class="hljs-number">14303237868736846591380967785444019265228989074485375473865726498641232211230964106386415</span>, <span class="hljs-number">18527887967242292734994852819080536349912428038950756929463647255716671446597362687859298</span>, <span class="hljs-number">9263943983621146367497426409540268174956214019475378464731823627858335723298681343929649</span>, <span class="hljs-number">16008241024684442623053082131128660804776040511445758424896695820325223202631221306630915</span>, <span class="hljs-number">19380389545216090750830909991922857119685953757430948404979131916558666942297491287981548</span>, <span class="hljs-number">9690194772608045375415454995961428559842976878715474202489565958279333471148745643990774</span>, <span class="hljs-number">4845097386304022687707727497980714279921488439357737101244782979139666735574372821995387</span>, <span class="hljs-number">13798817726025880783158232675348883857258677721386937743153175495965888708769067045663784</span>, <span class="hljs-number">6899408863012940391579116337674441928629338860693468871576587747982944354384533522831892</span>, <span class="hljs-number">3449704431506470195789558168837220964314669430346734435788293873991472177192266761415946</span>, <span class="hljs-number">1724852215753235097894779084418610482157334715173367217894146936995736088596133380707973</span>, <span class="hljs-number">12238695140750486988251758468567831958376600859294752801477857474893923385279947325020077</span>, <span class="hljs-number">17495616603249112933430248160642442696486233931355445593269712743843017033621854297176129</span>, <span class="hljs-number">20124077334498425906019493006679748065541050467385791989165640378317563857792807783254155</span>, <span class="hljs-number">21438307700123082392314115429698400750068458735400965187113604195554837269878284526293168</span>, <span class="hljs-number">10719153850061541196157057714849200375034229367700482593556802097777418634939142263146584</span>, <span class="hljs-number">5359576925030770598078528857424600187517114683850241296778401048888709317469571131573292</span>, <span class="hljs-number">2679788462515385299039264428712300093758557341925120648389200524444354658734785565786646</span>, <span class="hljs-number">1339894231257692649519632214356150046879278670962560324194600262222177329367392782893323</span>, <span class="hljs-number">12046216148502715764064185033536601740737572837189349354628084137507144005665577026112752</span>, <span class="hljs-number">6023108074251357882032092516768300870368786418594674677314042068753572002832788513056376</span>, <span class="hljs-number">3011554037125678941016046258384150435184393209297337338657021034376786001416394256528188</span>, <span class="hljs-number">1505777018562839470508023129192075217592196604648668669328510517188393000708197128264094</span>, <span class="hljs-number">752888509281419735254011564596037608796098302324334334664255258594196500354098564132047</span>, <span class="hljs-number">11752713287514579306931374708656545521695982652870236359862911635693153591158929916732114</span>, <span class="hljs-number">5876356643757289653465687354328272760847991326435118179931455817846576795579464958366057</span>, <span class="hljs-number">14314447354752514266037212603522663097721929164925628282496511915319343738771613113849119</span>, <span class="hljs-number">18533492710250126572322975228119858266158898084170883333779039964055727210367687191590650</span>, <span class="hljs-number">9266746355125063286161487614059929133079449042085441666889519982027863605183843595795325</span>, <span class="hljs-number">16009642210436401082385112733388491283837658022750790025975543997409987143573802432563753</span>, <span class="hljs-number">19381090138092069980496925293052772359216762513083464205518556005101048912768781850947967</span>, <span class="hljs-number">21066814101919904429552831572884912896906314758249801295290062008946579797366271560140074</span>, <span class="hljs-number">10533407050959952214776415786442456448453157379124900647645031004473289898683135780070037</span>, <span class="hljs-number">16642972558353845546692576819579754941524512191270519516353299508632700290323448524701109</span>, <span class="hljs-number">19697755312050792212650657336148404188060189597343328950707433760712405486143604897016645</span>, <span class="hljs-number">21225146688899265545629697594432728811328028300379733667884500886752258084053683083174413</span>, <span class="hljs-number">21988842377323502212119217723574891122961947651897936026473034449772184383008722176253297</span>, <span class="hljs-number">22370690221535620545363977788145972278778907327657037205767301231282147532486241722792739</span>, <span class="hljs-number">22561614143641679711986357820431512856687387165536587795414434622037129107225001496062460</span>, <span class="hljs-number">11280807071820839855993178910215756428343693582768293897707217311018564553612500748031230</span>, <span class="hljs-number">5640403535910419927996589455107878214171846791384146948853608655509282276806250374015615</span>, <span class="hljs-number">14196470800829079403302663653912465824383856897400142666957588334150696479385005821673898</span>, <span class="hljs-number">7098235400414539701651331826956232912191928448700071333478794167075348239692502910836949</span>, <span class="hljs-number">14925386733081139290130034839836643173393897726058104859270181089933729460828132090084565</span>, <span class="hljs-number">18838962399414439084369386346276848303994882364737121622165874551362920071395946679708373</span>, <span class="hljs-number">20795750232581088981489062099496950869295374684076630003613721282077515376679853974520277</span>, <span class="hljs-number">21774144149164413930048899976107002151945620843746384194337644647434813029321807621926229</span>, <span class="hljs-number">22263341107456076404328818914412027793270743923581261289699606330113461855642784445629205</span>, <span class="hljs-number">22507939586601907641468778383564540613933305463498699837380587171452786268803272857480693</span>, <span class="hljs-number">22630238826174823260038758118140797024264586233457419111221077592122448475383517063406437</span>, <span class="hljs-number">22691388445961281069323747985428925229430226618436778748141322802457279578673639166369309</span>, <span class="hljs-number">22721963255854509973966242919072989332013046810926458566601445407624695130318700217850745</span>, <span class="hljs-number">22737250660801124426287490385895021383304456907171298475831506710208402906141230743591463</span>, <span class="hljs-number">22744894363274431652448114119306037408950161955293718430446537361500256794052496006461822</span>, <span class="hljs-number">11372447181637215826224057059653018704475080977646859215223268680750128397026248003230911</span>, <span class="hljs-number">17062492623692477352416397456185036069535473990531498800142418346771119539495004636281546</span>, <span class="hljs-number">8531246311846238676208198728092518034767736995265749400071209173385559769747502318140773</span>, <span class="hljs-number">15641892188796988777408468290404785734681801999340943892566388593088835225855631793736477</span>, <span class="hljs-number">19197215127272363828008603071560919584638834501378541138813978302940472953909696531534329</span>, <span class="hljs-number">20974876596510051353308670462138986509617350752397339761937773157866291817936728900433255</span>, <span class="hljs-number">21863707331128895115958704157428019972106608877906739073499670585329201249950245084882718</span>, <span class="hljs-number">10931853665564447557979352078714009986053304438953369536749835292664600624975122542441359</span>, <span class="hljs-number">16842195865656093218294044965715531710324585721184753960905701652728355653469441905886770</span>, <span class="hljs-number">8421097932828046609147022482857765855162292860592376980452850826364177826734720952943385</span>, <span class="hljs-number">15586817999287892743877880167787409644879079932004257682757209419578144254349241111137783</span>, <span class="hljs-number">19169678032517815811243309010252231539737473467710198033909388716185127468156501190234982</span>, <span class="hljs-number">9584839016258907905621654505126115769868736733855099016954694358092563734078250595117491</span>, <span class="hljs-number">16168688541003323392115196178921584602232301868635618701008131185442337208021005932224836</span>, <span class="hljs-number">8084344270501661696057598089460792301116150934317809350504065592721168604010502966112418</span>, <span class="hljs-number">4042172135250830848028799044730396150558075467158904675252032796360584302005251483056209</span>, <span class="hljs-number">13397355100499284863318768448723724792576971235287521530156800404576347491984506376194195</span>, <span class="hljs-number">18074946583123511870963753150720389113586419119351829957609184208684229086974133822763188</span>, <span class="hljs-number">9037473291561755935481876575360194556793209559675914978804592104342114543487066911381594</span>, <span class="hljs-number">4518736645780877967740938287680097278396604779837957489402296052171057271743533455690797</span>, <span class="hljs-number">13635637355764308423174838070198575356496235891627047937231932032481583976853647362511489</span>, <span class="hljs-number">18194087710756023650891787961457814395546051447521593161146750022636847329408704315921835</span>, <span class="hljs-number">20473312888251881264750262907087433915070959225468865773104159017714479005686232792627008</span>, <span class="hljs-number">10236656444125940632375131453543716957535479612734432886552079508857239502843116396313504</span>, <span class="hljs-number">5118328222062970316187565726771858478767739806367216443276039754428619751421558198156752</span>, <span class="hljs-number">2559164111031485158093782863385929239383869903183608221638019877214309875710779099078376</span>, <span class="hljs-number">1279582055515742579046891431692964619691934951591804110819009938607154937855389549539188</span>, <span class="hljs-number">639791027757871289523445715846482309845967475795902055409504969303577468927694774769594</span>, <span class="hljs-number">319895513878935644761722857923241154922983737897951027704752484651788734463847387384797</span>, <span class="hljs-number">11536216789813337261685230355320147294759425370657044706383160248721949708213804328358489</span>, <span class="hljs-number">17144377427780538070146984104018600364677646187036591545722364130757030195088782798845335</span>, <span class="hljs-number">19948457746764138474377860978367826899636756595226364965391966071774570438526272034088758</span>, <span class="hljs-number">9974228873382069237188930489183913449818378297613182482695983035887285219263136017044379</span>, <span class="hljs-number">16363383469564904057898834170950483442207122650514660433878775524339697950613448643188280</span>, <span class="hljs-number">8181691734782452028949417085475241721103561325257330216939387762169848975306724321594140</span>, <span class="hljs-number">4090845867391226014474708542737620860551780662628665108469693881084924487653362160797070</span>, <span class="hljs-number">2045422933695613007237354271368810430275890331314332554234846940542462243826681080398535</span>, <span class="hljs-number">12398980499721675942923046062042931932435878667365235469648207476667286462895221174865358</span>, <span class="hljs-number">6199490249860837971461523031021465966217939333682617734824103738333643231447610587432679</span>, <span class="hljs-number">14476014157804288425035130441869259700406903168549378059942835875562876956705685928382430</span>, <span class="hljs-number">7238007078902144212517565220934629850203451584274689029971417937781438478352842964191215</span>, <span class="hljs-number">14995272572324941545563151536825841642399659293845413707516492975286774580158302116761698</span>, <span class="hljs-number">7497636286162470772781575768412920821199829646922706853758246487643387290079151058380849</span>, <span class="hljs-number">15125087175955104825695156810564987127897848325169422619409907250217748986021456163856515</span>, <span class="hljs-number">18938812620851421852151947331641020281246857664292780502235737631504929833992608716594348</span>, <span class="hljs-number">9469406310425710926075973665820510140623428832146390251117868815752464916996304358297174</span>, <span class="hljs-number">4734703155212855463037986832910255070311714416073195125558934407876232458498152179148587</span>, <span class="hljs-number">13743620610480297170823362342813654252453790709744666755310251210334171570230956724240384</span>, <span class="hljs-number">6871810305240148585411681171406827126226895354872333377655125605167085785115478362120192</span>, <span class="hljs-number">3435905152620074292705840585703413563113447677436166688827562802583542892557739181060096</span>, <span class="hljs-number">1717952576310037146352920292851706781556723838718083344413781401291771446278869590530048</span>, <span class="hljs-number">858976288155018573176460146425853390778361919359041672206890700645885723139434795265024</span>, <span class="hljs-number">429488144077509286588230073212926695389180959679520836103445350322942861569717397632512</span>, <span class="hljs-number">214744072038754643294115036606463347694590479839760418051722675161471430784858698816256</span>, <span class="hljs-number">107372036019377321647057518303231673847295239919880209025861337580735715392429349408128</span>, <span class="hljs-number">53686018009688660823528759151615836923647619959940104512930668790367857696214674704064</span>, <span class="hljs-number">26843009004844330411764379575807918461823809979970052256465334395183928848107337352032</span>, <span class="hljs-number">13421504502422165205882189787903959230911904989985026128232667197591964424053668676016</span>, <span class="hljs-number">6710752251211082602941094893951979615455952494992513064116333598795982212026834338008</span>, <span class="hljs-number">3355376125605541301470547446975989807727976247496256532058166799397991106013417169004</span>, <span class="hljs-number">1677688062802770650735273723487994903863988123748128266029083399698995553006708584502</span>, <span class="hljs-number">838844031401385325367636861743997451931994061874064133014541699849497776503354292251</span>]<br>c = <span class="hljs-number">1475864207352419823225329328555476398971654057144688193866218781853021651529290611526242518</span><br><br>n = <span class="hljs-built_in">len</span>(Pk)<br><br>M = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    L = [<span class="hljs-number">0</span>]*(n+<span class="hljs-number">1</span>)<br>    L[i] = <span class="hljs-number">2</span><br>    L[n] = Pk[i]<br>    M.append(L)<br>M.append([<span class="hljs-number">1</span>]*n+[c])<br>M = matrix(M)<br>L = M.LLL()<br><span class="hljs-built_in">print</span>(L)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">print(L[-16].list())</span><br><span class="hljs-string">print(L[-8].list())</span><br><span class="hljs-string">print(L[-6].list())</span><br><span class="hljs-string">print(L[-5].list())</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span>               <br></code></pre></td></tr></table></figure><p>很遗憾，并没有完全满足的向量。将向量中的不符合地做一些微小改变，尽量拟合flag。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>L = [<br>    [-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]<br>    ,[<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>]<br>    ,[-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]<br>    ,[-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">3</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>]<br>]<br><br><span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> L:<br>    m = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(each)-<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> each[i] == -<span class="hljs-number">1</span>:<br>            m += <span class="hljs-string">&#x27;0&#x27;</span><br>        <span class="hljs-keyword">elif</span> each[i] == <span class="hljs-number">1</span>:<br>            m += <span class="hljs-string">&#x27;1&#x27;</span><br>        <span class="hljs-keyword">elif</span> each[i] == -<span class="hljs-number">3</span>:<br>            m += <span class="hljs-string">&#x27;0&#x27;</span><br>        <span class="hljs-keyword">elif</span> each[i] == <span class="hljs-number">3</span>:<br>            m += <span class="hljs-string">&#x27;1&#x27;</span><br>    <span class="hljs-built_in">print</span>(m)<br>    <span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">int</span>(m,<span class="hljs-number">2</span>)))<br><span class="hljs-comment">#5090ea29-8cb6-4ad8-ab43-1e6f65cc8eeb</span><br><span class="hljs-comment">#5090ea29-8cb6-4ad7=ab43-1e6f65cc8eeb（-1，+1代表的值互换）</span><br><span class="hljs-comment">#5090ea29-8cb6-4ad75ab43-1e6f65cc8ee\x82</span><br></code></pre></td></tr></table></figure><p>出来的结果有些误差。</p><h1 id="FourThousandRSA"><a href="#FourThousandRSA" class="headerlink" title="FourThousandRSA"></a>FourThousandRSA</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> p, q, flag<br><br>d = (p - <span class="hljs-number">1</span>) * (randint(<span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">895</span>, <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">905</span>)) + getPrime(<span class="hljs-number">66</span>)<br><span class="hljs-keyword">assert</span> GCD(d, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)) == <span class="hljs-number">1</span><br><br>e = inverse(d, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))<br>n = p * q<br>m = bytes_to_long(flag)<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br>lnK = [n, e, d, p, q]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    lnK[i] = lnK[i].bit_length()<br><br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(e)<br><span class="hljs-built_in">print</span>(c)<br><span class="hljs-built_in">print</span>(lnK)<br><span class="hljs-comment"># 2008245202726111195525139787077766845460301971221282725789653525445717877831247040311792229284045975453691272797897794805042646233029706866078707630143984010874126231698685294168749255436126975986003969530103617426741064270423218259588978877370113177828293456561413806780703064713982940589926704665536293631846419385505665983693074491341550629844185026851229010312732921558017787072574777346960912025366025572718687418119633550194015169661191937337614795319500510125026882103589501497847356092372022899906904311120130529291320419495706452187192436497658895872460456299020678691633147066767550340869239242665444676015223859488181778716351439391614896237952082547346751012334359281894362102507693710804521999826603241204878074796474371682930675553715217908515291214108531394832662173298837242969662633805422396059510882443282508140025449969731242643820520540750378151812795959963934842270926945543049483993393288111252859368438315000543965899671606298852910335484127077917071912504701937501178567564695543045503695648983193718396823789188986832546133398012148358369105865469590306905583050200981598525031197740358763416786658682107838491293027639364508979821571709310278056633617824675033779928720051885352835157353803</span><br><span class="hljs-comment"># 807032534004084758580375189157328561548795804530942985115124520531221373527096275904469284031734054835824102563821158171589235747667599272991298059693818077176669425056991292994334793629184405818520272993874070884698385334019049156576500287497429412919772544592662544872484546264801483551861046175807498926198088282017428499839509688184982602419754320550459089738363252159087637831975525246450729834548975894498204691170246637710357850579558483403451912974355124654280116319260254145067344177881377307629659609044861901831073680528402705499960011480684401009582453074445582770870258919978732068123428866624493163278443134701482587357134070124133221075748585768453464832312107505344577054027293922365686198638830956703448628155371973969488855140627118939048137913508744817167302068674632091539914140795622964012240768679911315743790231690924423221631592930482614786389990208367405878537840797769431729477448292378308254306426728498718084148271069061132613717597098762769671154028101328451549784614737777731600209296493017630537336889457808923914655393955515432343410385118818484779667586279513209712795980030600707800342547828383384392042988707358771882529896527356417371670949948690120768388723079299981807646726911</span><br><span class="hljs-comment"># 1479098843223597304786742970274134598770261170942980086038287429905405158086547268458308645377797729404756116803215570224420375863682276378830919895619659050799395956146572726236750711207231799570925819982063426093862796144319017426916290208631746748701116840125309109359766050752569570197143931328071928910272144487415408708111493159410784983656461473802920988821467611079772020575539261046542193167444757825649926376069763390388540651778066220417921640963803183015067230139701713552782995724061821817700770220827885999306389960050273479873187643335537248639494631153812809968161473247467770291102906672062014528600784321726886085505174266116545186131025910553430133389924415555728463048311407897414482070647200465503078473266937663980748718243201906335338839452018573040634977122916044674440902206770428978968958675742011856119772241474589012913197944864164658153691848011206012988704668234612237127302621256390964532600110123457039129898476045860122356186227473879930882612843980001579020344087043771505157047280424063737637399280369256220373591698317585713187436849457927758798371213053969011609925655180333896843921881279342761083499824073913636798612382743862755759722932438784880987705776287623448376091072071</span><br><span class="hljs-comment"># [4038, 4036, 3503, 2599, 1439]</span><br></code></pre></td></tr></table></figure><p>论文题：<a href="https://link.springer.com/content/pdf/10.1007%2F3-540-45708-9_16.pdf">https://link.springer.com/content/pdf/10.1007%2F3-540-45708-9_16.pdf</a></p><p>构造如下矩阵：</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031025357.png"/><p>其中$f_p(x,y) &#x3D; ex - y$。矩阵中的每一行为$g_{m,i,j}(x,y)$。</p><p>至于$n,m$的选取似乎没有很准确的说明。（可能是我没有读透）</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031025301.png"/><p>我不理解的地方有以下几点：</p><ol><li>$x,y$的系数为什么是解。</li><li>得出的解按照论文应该是$(x_0,y_0)&#x3D;(dp,k+1)$，但为什么$k$最后是+1而不是-1。</li></ol><p>如果有清楚的师傅希望能解答我的疑惑！感谢！</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br>N=<span class="hljs-number">2008245202726111195525139787077766845460301971221282725789653525445717877831247040311792229284045975453691272797897794805042646233029706866078707630143984010874126231698685294168749255436126975986003969530103617426741064270423218259588978877370113177828293456561413806780703064713982940589926704665536293631846419385505665983693074491341550629844185026851229010312732921558017787072574777346960912025366025572718687418119633550194015169661191937337614795319500510125026882103589501497847356092372022899906904311120130529291320419495706452187192436497658895872460456299020678691633147066767550340869239242665444676015223859488181778716351439391614896237952082547346751012334359281894362102507693710804521999826603241204878074796474371682930675553715217908515291214108531394832662173298837242969662633805422396059510882443282508140025449969731242643820520540750378151812795959963934842270926945543049483993393288111252859368438315000543965899671606298852910335484127077917071912504701937501178567564695543045503695648983193718396823789188986832546133398012148358369105865469590306905583050200981598525031197740358763416786658682107838491293027639364508979821571709310278056633617824675033779928720051885352835157353803</span><br>e=<span class="hljs-number">807032534004084758580375189157328561548795804530942985115124520531221373527096275904469284031734054835824102563821158171589235747667599272991298059693818077176669425056991292994334793629184405818520272993874070884698385334019049156576500287497429412919772544592662544872484546264801483551861046175807498926198088282017428499839509688184982602419754320550459089738363252159087637831975525246450729834548975894498204691170246637710357850579558483403451912974355124654280116319260254145067344177881377307629659609044861901831073680528402705499960011480684401009582453074445582770870258919978732068123428866624493163278443134701482587357134070124133221075748585768453464832312107505344577054027293922365686198638830956703448628155371973969488855140627118939048137913508744817167302068674632091539914140795622964012240768679911315743790231690924423221631592930482614786389990208367405878537840797769431729477448292378308254306426728498718084148271069061132613717597098762769671154028101328451549784614737777731600209296493017630537336889457808923914655393955515432343410385118818484779667586279513209712795980030600707800342547828383384392042988707358771882529896527356417371670949948690120768388723079299981807646726911</span><br><br>n=<span class="hljs-number">12</span><br>beta = <span class="hljs-number">0.36</span><br>delta = <span class="hljs-number">0.02</span><br><br>X = <span class="hljs-built_in">int</span>(N ** delta*(n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>)<br>Y = <span class="hljs-built_in">int</span>(N ** (delta + beta)*(n+<span class="hljs-number">1</span>)/<span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">C</span>(<span class="hljs-params">a,b</span>):<br>    ret=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(b):<br>        ret*=(a-i)<br>        ret/=(b-i)<br>    <span class="hljs-keyword">return</span> ret<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_Matrix</span>(<span class="hljs-params">n,m</span>):<br>    MM=[[<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> __ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)] <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n)]<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n): <br>        pN=<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>,m-j)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(j+<span class="hljs-number">1</span>):<br>            MM[j][i]=<span class="hljs-built_in">pow</span>(N,pN)*<span class="hljs-built_in">pow</span>(X,n-i-<span class="hljs-number">1</span>)*<span class="hljs-built_in">pow</span>(Y,i)*<span class="hljs-built_in">pow</span>(e,j-i)*C(j,i)*<span class="hljs-built_in">pow</span>(-<span class="hljs-number">1</span>,i)<br>    MM=Matrix(ZZ,MM)<br>    <span class="hljs-keyword">return</span> MM<br><br>M=get_Matrix(n,n//<span class="hljs-number">2</span>+<span class="hljs-number">1</span>)<br>L=M.LLL()[<span class="hljs-number">0</span>]<br><br>x,y = var(<span class="hljs-string">&#x27;x&#x27;</span>),var(<span class="hljs-string">&#x27;y&#x27;</span>)<br>f=<span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>    f+=x**(n-i-<span class="hljs-number">1</span>) * y**i * (L[i] // <span class="hljs-built_in">pow</span>(X,n-i-<span class="hljs-number">1</span>) // <span class="hljs-built_in">pow</span>(Y,i))<span class="hljs-comment">#将x,y参数化</span><br><br><span class="hljs-built_in">print</span>(f.factor())<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><br>n = <span class="hljs-number">2008245202726111195525139787077766845460301971221282725789653525445717877831247040311792229284045975453691272797897794805042646233029706866078707630143984010874126231698685294168749255436126975986003969530103617426741064270423218259588978877370113177828293456561413806780703064713982940589926704665536293631846419385505665983693074491341550629844185026851229010312732921558017787072574777346960912025366025572718687418119633550194015169661191937337614795319500510125026882103589501497847356092372022899906904311120130529291320419495706452187192436497658895872460456299020678691633147066767550340869239242665444676015223859488181778716351439391614896237952082547346751012334359281894362102507693710804521999826603241204878074796474371682930675553715217908515291214108531394832662173298837242969662633805422396059510882443282508140025449969731242643820520540750378151812795959963934842270926945543049483993393288111252859368438315000543965899671606298852910335484127077917071912504701937501178567564695543045503695648983193718396823789188986832546133398012148358369105865469590306905583050200981598525031197740358763416786658682107838491293027639364508979821571709310278056633617824675033779928720051885352835157353803</span><br>e = <span class="hljs-number">807032534004084758580375189157328561548795804530942985115124520531221373527096275904469284031734054835824102563821158171589235747667599272991298059693818077176669425056991292994334793629184405818520272993874070884698385334019049156576500287497429412919772544592662544872484546264801483551861046175807498926198088282017428499839509688184982602419754320550459089738363252159087637831975525246450729834548975894498204691170246637710357850579558483403451912974355124654280116319260254145067344177881377307629659609044861901831073680528402705499960011480684401009582453074445582770870258919978732068123428866624493163278443134701482587357134070124133221075748585768453464832312107505344577054027293922365686198638830956703448628155371973969488855140627118939048137913508744817167302068674632091539914140795622964012240768679911315743790231690924423221631592930482614786389990208367405878537840797769431729477448292378308254306426728498718084148271069061132613717597098762769671154028101328451549784614737777731600209296493017630537336889457808923914655393955515432343410385118818484779667586279513209712795980030600707800342547828383384392042988707358771882529896527356417371670949948690120768388723079299981807646726911</span><br>c = <span class="hljs-number">1479098843223597304786742970274134598770261170942980086038287429905405158086547268458308645377797729404756116803215570224420375863682276378830919895619659050799395956146572726236750711207231799570925819982063426093862796144319017426916290208631746748701116840125309109359766050752569570197143931328071928910272144487415408708111493159410784983656461473802920988821467611079772020575539261046542193167444757825649926376069763390388540651778066220417921640963803183015067230139701713552782995724061821817700770220827885999306389960050273479873187643335537248639494631153812809968161473247467770291102906672062014528600784321726886085505174266116545186131025910553430133389924415555728463048311407897414482070647200465503078473266937663980748718243201906335338839452018573040634977122916044674440902206770428978968958675742011856119772241474589012913197944864164658153691848011206012988704668234612237127302621256390964532600110123457039129898476045860122356186227473879930882612843980001579020344087043771505157047280424063737637399280369256220373591698317585713187436849457927758798371213053969011609925655180333896843921881279342761083499824073913636798612382743862755759722932438784880987705776287623448376091072071</span><br>lnK = [<span class="hljs-number">4038</span>, <span class="hljs-number">4036</span>, <span class="hljs-number">3503</span>, <span class="hljs-number">2599</span>, <span class="hljs-number">1439</span>]<br><br>dp = <span class="hljs-number">53884891560160528919</span><br>k = <span class="hljs-number">302884665515803766011906438013192003712099358870001780564269089035021793994528619923490222376829646206262773174752214834261410191185822844479036873079049649442148949148666170143829689538107319496991988733386708820659360609308128307216254687970393854057754055298044301139034587343570198869912515404392889596455648319972063467359880205558544007697140900913860985852897308920005250016284550898672612541129402073944532028683909649120706671728845700276654410</span><br>k += <span class="hljs-number">1</span><br><br>p = (e * dp - <span class="hljs-number">1</span> ) // k + <span class="hljs-number">1</span><br>q = n // p<br><span class="hljs-built_in">print</span>(p.bit_length())<br><span class="hljs-built_in">print</span>(q.bit_length())<br>d = gmpy2.invert(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>m = <span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment">#b&#x27;Dest0g3&#123;1087fb88-a2da-4d21-d81a-40c6e1f105fa&#125;&#x27;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RSA</tag>
      
      <tag>AES</tag>
      
      <tag>背包密码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SUSCTF - Ez_Pager_Tiper</title>
    <link href="/2022/06/28/Ez_Pager_Tiper/"/>
    <url>/2022/06/28/Ez_Pager_Tiper/</url>
    
    <content type="html"><![CDATA[<h1 id="Ez-Pager-Tiper"><a href="#Ez-Pager-Tiper" class="headerlink" title="Ez_Pager_Tiper"></a>Ez_Pager_Tiper</h1><p>分析<code>magic_box</code>中的代码，测试发现<code>malicious_magic</code>中的<code>now = (-magic &amp; magic)</code>的值取决于<code>magic</code>二进制末尾0的个数，即$now &#x3D; 2^{二进制末尾0的个数}$，进而每次执行该函数，<code>magic</code>的二进制中最后一个1改为0，故<code>confusion</code>函数中的循环次数为<code>magic</code>二进制中的1的个数。</p><p>再来看看<code>confusion</code>循环中的<code>output</code>的值。由于每次<code>now</code>都等于<code>magic</code>二进制中最后一个1及后面部分，于是乎在循环结束后<br>$$<br>\begin{align}<br>output &amp;&#x3D; output \oplus now_1\oplus now_2\oplus …\oplus now_n<br>\\&amp;&#x3D; output \oplus magic(最初始)<br>\\&amp;&#x3D;magic(最初始) \oplus c1 \oplus c2 \oplus magic(最初始)<br>\\&amp;&#x3D;c1 \oplus c2<br>\end{align}<br>$$<br>而每次循环中<code>cnt ^= 1</code>，故循环次数为偶数时（<code>magic</code>二进制中1的个数为偶数个）<code>cnt = 0</code>，反之则<code>cnt = 1</code>。</p><p>循环完后<code>output ^= cnt * c1</code>，故循环次数为偶数时<code>output = c1^c2</code>，反之则<code>output = c2</code>。</p><hr><p>根据上述分析可得<code>problem1</code>的加密简化为<code>ch ^ c2</code>，<code>problem2</code>的加密简化为<code>ch ^ c1 ^ c2</code>。</p><p>通过已知的部分文段可以分析文本格式以<code>Date: yyyy-mm-dd</code>作为开头，日期信息由文件名称b64decode得到。利用已知明文密文对，可以恢复lfsr的内部状态。</p><hr><h2 id="problem1"><a href="#problem1" class="headerlink" title="problem1"></a>problem1</h2><p>在<code>problem1</code>中由于<code>n2 = 12</code>，可以对<code>mask2</code>进行爆破，求出<code>mask2</code>后可以反推出（或爆破）<code>seed2</code>，于是就可以解密出对应的文本。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> magic_box <span class="hljs-keyword">import</span> *<br><br>n1, n2 = <span class="hljs-number">64</span>, <span class="hljs-number">12</span><br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;MTk4NC0wNC0wMQ==_6d30.enc&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    cipher1 = f.read()<br><br>date1 = <span class="hljs-string">&#x27;Date: 1984-04-01&#x27;</span><span class="hljs-comment">#少了个空格，淦！一个晚上就这么没了</span><br>known_output = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(date1)):<br>    bit8 = <span class="hljs-built_in">ord</span>(date1[i]) ^ cipher1[i]<br>    known_output += <span class="hljs-built_in">bin</span>(bit8)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)<br><br><span class="hljs-comment">#爆破mask2(12位bit)</span><br>mask2 = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> mask <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4096</span>):<br>    output = <span class="hljs-number">0</span><br>    lfsr2 = lfsr(<span class="hljs-built_in">int</span>(known_output[:n2],<span class="hljs-number">2</span>), mask, n2)<span class="hljs-comment">#known_output[:n2],否则就拿低位去&amp;了</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(known_output) - n2):<br>        output = (output &lt;&lt; <span class="hljs-number">1</span>) ^ lfsr2.<span class="hljs-built_in">next</span>()<br>    <span class="hljs-keyword">if</span> output == <span class="hljs-built_in">int</span>(known_output[n2:],<span class="hljs-number">2</span>):<br>        mask2 = mask<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;mask2 = <span class="hljs-subst">&#123;mask2&#125;</span>&#x27;</span>)<br><span class="hljs-comment">#爆破seed(12位bit)</span><br>seed2 = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> seed <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">4096</span>):<br>    output = <span class="hljs-number">0</span><br>    lfsr2 = lfsr(seed, mask2, n2)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(known_output)):<br>        output = (output &lt;&lt; <span class="hljs-number">1</span>) ^ lfsr2.<span class="hljs-built_in">next</span>()<br>    <span class="hljs-keyword">if</span> output == <span class="hljs-built_in">int</span>(known_output,<span class="hljs-number">2</span>):<br>        seed2 = seed<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;seed2 = <span class="hljs-subst">&#123;seed2&#125;</span>&#x27;</span>)<br><br>lfsr2 = lfsr(seed2,mask2,n2)<br><br>txt1 = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(cipher1)):<br>    txt1 += <span class="hljs-built_in">chr</span>(lfsr2.getrandbit(<span class="hljs-number">8</span>) ^ cipher1[i])<br><br><span class="hljs-built_in">print</span>(txt1)<br></code></pre></td></tr></table></figure><p>结果如下</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">mask2 = <span class="hljs-number">2053</span><br>seed2 = <span class="hljs-number">2989</span><br><span class="hljs-symbol">Date:</span> <span class="hljs-number">1984</span><span class="hljs-number">-04</span><span class="hljs-number">-01</span><br>The pursuit was renewed, till the water was again muddied.  <span class="hljs-keyword">But </span>he could not <span class="hljs-keyword">wait. </span> He unstrapped the tin <span class="hljs-keyword">bucket </span><span class="hljs-keyword">and </span><span class="hljs-keyword">began </span>to <span class="hljs-keyword">bale </span>the pool.  He <span class="hljs-keyword">baled </span>wildly <span class="hljs-built_in">at</span> first, splashing himself <span class="hljs-keyword">and </span>flinging the water so <span class="hljs-keyword">short </span>a <span class="hljs-keyword">distance </span>that it ran <span class="hljs-keyword">back </span>into the pool.  He worked more carefully, striving to <span class="hljs-keyword">be </span>cool, though his heart was pounding against his chest <span class="hljs-keyword">and </span>his hands were trembling.  <span class="hljs-built_in">At</span> the end of half an hour the pool was nearly dry.  Not a cupful of water remained.  <span class="hljs-keyword">And </span>there was no fish.  He found a hidden crevice among the stones through which it had escaped to the adjoining <span class="hljs-keyword">and </span>larger poolâa pool which he could not empty in a night <span class="hljs-keyword">and </span>a day.  Had he known of the crevice, he could have <span class="hljs-keyword">closed </span>it with a rock <span class="hljs-built_in">at</span> the <span class="hljs-keyword">beginning </span><span class="hljs-keyword">and </span>the fish would have <span class="hljs-keyword">been </span>his.<br>Thus he thought, <span class="hljs-keyword">and </span>crumpled up <span class="hljs-keyword">and </span>sank down upon the wet earth.  <span class="hljs-built_in">At</span> first he cried softly to himself, then he cried loudly to the pitiless desolation that ringed him around<span class="hljs-comment">; and for a long time after he was shaken by great dry sobs.</span><br>He <span class="hljs-keyword">built </span>a fire <span class="hljs-keyword">and </span>warmed himself <span class="hljs-keyword">by </span>drinking quarts of hot water, <span class="hljs-keyword">and </span>made camp on a rocky ledge in the same fashion he had the night <span class="hljs-keyword">before. </span> The last thing he <span class="hljs-keyword">did </span>was to see that his matches were dry <span class="hljs-keyword">and </span>to wind his watch.  The <span class="hljs-keyword">blankets </span>were wet <span class="hljs-keyword">and </span>clammy.  His ankle pulsed with pain.  <span class="hljs-keyword">But </span>he knew only that he was hungry, <span class="hljs-keyword">and </span>through his restless sleep he dreamed of feasts <span class="hljs-keyword">and </span><span class="hljs-keyword">banquets </span><span class="hljs-keyword">and </span>of food served <span class="hljs-keyword">and </span>spread in all imaginable ways.<br>He awoke chilled <span class="hljs-keyword">and </span>sick.  There was no sun.  The gray of earth <span class="hljs-keyword">and </span>sky had <span class="hljs-keyword">become </span>deeper, more profound.  A raw wind was <span class="hljs-keyword">blowing, </span><span class="hljs-keyword">and </span>the first flurries of snow were whitening the hilltops.  The air about him thickened <span class="hljs-keyword">and </span>grew white while he made a fire <span class="hljs-keyword">and </span><span class="hljs-keyword">boiled </span>more water.  It was wet snow, half rain, <span class="hljs-keyword">and </span>the flakes were large <span class="hljs-keyword">and </span>soggy.  <span class="hljs-built_in">At</span> first they melted as soon as they came in contact with the earth, <span class="hljs-keyword">but </span>ever more fell, covering the ground, putting out the fire, spoiling his supply of moss-fuel.<br></code></pre></td></tr></table></figure><h2 id="problem2"><a href="#problem2" class="headerlink" title="problem2"></a>problem2</h2><p>由于<code>lfsr2</code>中的<code>n2 = 12</code>，故对<code>seed3</code>进行爆破，根据得出的<code>lfsr2流</code>推出<code>lfsr1流</code>。进而恢复<code>seed1</code>和<code>mask1</code>。从而对加密文本解密，筛选出flag。</p><p>（嗯！这个BM算法还没搞懂，贴一下别人的代码，from DengFeng）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> base64 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> libnum<br>n1, n2 = <span class="hljs-number">64</span>, <span class="hljs-number">12</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">lfsr</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, seed, mask, length</span>):<br>        self.length_mask = <span class="hljs-number">2</span> ** length - <span class="hljs-number">1</span><br>        self.mask = mask &amp; self.length_mask<br>        self.state = seed &amp; self.length_mask<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">next</span>(<span class="hljs-params">self</span>):<br>        next_state = (self.state &lt;&lt; <span class="hljs-number">1</span>) &amp; self.length_mask<br>        i = self.state &amp; self.mask &amp; self.length_mask<br>        output = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> i != <span class="hljs-number">0</span>:<br>            output ^^= (i &amp; <span class="hljs-number">1</span>)<br>            i = i &gt;&gt; <span class="hljs-number">1</span><br>        next_state ^^= output<br>        self.state = next_state<br>        <span class="hljs-keyword">return</span> output<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">getrandbit</span>(<span class="hljs-params">self, nbit</span>):<br>        output = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(nbit):<br>            output = (output &lt;&lt; <span class="hljs-number">1</span>) ^^ self.<span class="hljs-built_in">next</span>()<br>        <span class="hljs-keyword">return</span> output<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_key</span>(<span class="hljs-params">mask,key,degree</span>):<br>    R = <span class="hljs-string">&quot;&quot;</span><br>    index = <span class="hljs-number">0</span><br>    key = key[degree-<span class="hljs-number">1</span>] + key[:degree]<br>    <span class="hljs-keyword">while</span> index &lt; degree:<br>        tmp = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(degree):<br>            <span class="hljs-keyword">if</span> mask &gt;&gt; i &amp; <span class="hljs-number">1</span>:<br>                <span class="hljs-comment"># tmp ^= int(key[255 - i])</span><br>                tmp = (tmp+<span class="hljs-built_in">int</span>(key[degree-<span class="hljs-number">1</span>-i]))%<span class="hljs-number">2</span><br>        R = <span class="hljs-built_in">str</span>(tmp) + R<br>        index += <span class="hljs-number">1</span><br>        key = key[degree-<span class="hljs-number">1</span>] + <span class="hljs-built_in">str</span>(tmp) + key[<span class="hljs-number">1</span>:degree-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(R,<span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_int</span>(<span class="hljs-params">x,degree</span>):<br>    m=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(degree):<br>        m += <span class="hljs-built_in">str</span>(x[i])<br>    <span class="hljs-keyword">return</span> (<span class="hljs-built_in">int</span>(m,<span class="hljs-number">2</span>))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">BM</span>(<span class="hljs-params">r,degree</span>):<br>    a=[]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(r)):<br>        a.append(<span class="hljs-built_in">int</span>(r[i]))       <span class="hljs-comment">#将 r 转换成列表a = [0,0,1,...,]格式    </span><br>    res = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(degree):<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(degree):<br>            <span class="hljs-keyword">if</span> a[i+j]==<span class="hljs-number">1</span>:<br>                res.append(<span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">else</span>:<br>                res.append(<span class="hljs-number">0</span>)<br>    sn = []<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(degree):<br>        <span class="hljs-keyword">if</span> a[degree+i]==<span class="hljs-number">1</span>:<br>            sn.append(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">else</span>:<br>            sn.append(<span class="hljs-number">0</span>)<br>    MS = MatrixSpace(GF(<span class="hljs-number">2</span>),degree,degree)        <br>    MSS = MatrixSpace(GF(<span class="hljs-number">2</span>),<span class="hljs-number">1</span>,degree)         <br>    A = MS(res)<br>    s = MSS(sn)                       <span class="hljs-comment">#将 res 和 sn 的值导入矩阵空间中</span><br>    <span class="hljs-keyword">try</span>:<br>        inv = A.inverse()            <span class="hljs-comment"># 求A 的逆矩阵</span><br>    <span class="hljs-keyword">except</span> ZeroDivisionError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>,-<span class="hljs-number">1</span><br>    mask = s*inv <br>    <span class="hljs-keyword">return</span> get_key(get_int(mask[<span class="hljs-number">0</span>],degree),r[:degree],degree),get_int(mask[<span class="hljs-number">0</span>],degree)<br><br>seed2 = <span class="hljs-number">2989</span><br>mask2 = <span class="hljs-number">2053</span><br><br>date2 = <span class="hljs-string">b&#x27;Date: 1984-12-25&#x27;</span><br>cipher2 = <span class="hljs-string">b&#x27;\x18\xff\xa57\xa65&quot;\x00\xfd/\x8d\x06\xe7z\xa4\xe6\t$\xec\x94$`\xaalB\xb6\x90`\x9e\&#x27;7\x9f\xcca\xaa1\x96\x19\t\xa2\xb8U\xde\xc5\xa0\xc7\xd23\xcd\xa0\xafRHP\x90\x8a\xa9M\x17@\xef8:]\xe1\xdc\x10\xad\xdfI\x04=\x01\x82\x1a\xec\x1e\x19\xdaV\x95\xc1K\x86\xfdZ\x90O7r\xeeZCewY8\xf1\x80\x81\x16NC\x94\xb0\xa0&lt;\xd5\xc9\x1a\xeb.\xf6\xaa\xbb\xa6\x9a&lt;t\xce\xdcQ$\xfdK\x89v\xee\xe0\x9dc\x9b6\xe6\xf0\xc9\xb6[l\xd3\xdc\xf8\n\xb7\xc6\xf9^\x0eIr\&#x27;&gt;\x1dD!\x83\xfd\xc6Q\xf9\xce\xee%\xa7l\xb9\xfc\xcc\xf9;\x0b\x04\xce\x07\x97\xae\xf5C\xa5\x96\xfeU\xe8\xfb\x06\x96\xe3Dr\x8a\xc8\xb7\xa0\xe4s\xe3\xac\x9dT\t\x0eL*Vys\x03\xbb\xf2$\xa8pR\x8c\xa8h\xf6\x04&lt;I4@&#125;\xe5\x12\x8d\x14\xbe\xe4\xb1\x86V`\xcf\x9bE\x8e\xf0m\xbd\xedP\xe3\xafo7\xbd\xb1\xb9R\x9a2*\xaabz@\xb2\xf9\xf59c\xf9\x13\xf12\x8b\xc2z\xda\xf4\x87\x130\xc2\x93\xf3\xce\x84\xe8q.\x01\xeec\xb1\x10X\xcd\x00\x91%\xb7|yW\xf2\xc4\xb3\x997\xc1\xb45\xe5)K \xfc\x93\x04\xee-\xf9\xc3\x06Js\xe1\tZ\x86=k8:\x17\x9e&#125;\xb1$\xce\xaa\xbc\x05\x97d\x83c~\xf57\x02\x08\xa2\tHz\xecq\x07Y\xe6&#125;\xf8\xf0\xaa\x00\x1e\x12f\xf5\xab\xf62u\x12\xf5\xcfx\xc3)B\xd4\xd1\x9dxX\x0b#\x9f\xf1\xa0&quot;\xb9M\xe9\xcf\x17\xc9\\\xbf\xf3y\xb1E\xc0\xa1\x88\x83\x95\xa6\xc9\xde=Md\xaf\xb4\x14\x815;\x18X\x9bQ2\x86\xa0`x&#123;\x18\xde\xean\xcd\xc3*y\x82\x8c\xe4l\x88\x96\xb7\x0e\x03u\xe7\xe8.&quot;!\xfb\xb1Bg\xea\xa2`\x99\xab\xa4d\xedA\x0e\x86\xd5\xaf5D\&#x27;\xcd3\xbf\xcd5\xb4\xc3^\xfe\x14t\x90\xf9\x01\x98\xd5~s\xdc\xa7\xb1\x8d\xf6\xd9\x92\xb9\xe0\x996?\x8f\\\x1d\xb2\x12\x97\xf6\x07;\xfaTL\x92.\xaf\x16$\xfa\x94\xcb0\xbf\x8a\xad](\xc6&#125;K\xc87\xfc\xc9\xc6\xdb\x08\x99\x9f(&lt;\x1e\x97\xe1\x00^\x13]\x16\xe13\xee\xebS1h\xdd\xe11n\x1a\xe6\x12\x01\xb5\x0c|\xf5\x8a\xbd=5S\xe4\xf9$\xf1\xedp\xce\x1f\x96.\x97\xe4;\x02 \x17&amp;\xd7\xd9*\x1f\xa4u\xe6\xad\xfd\xbaIR\x1f\x1a=F\xbf\xf3\x07\x19!=\xf7\xd8/\xe4i\xc6+\x9c5^t\x7f\xb2\x06\xe8\xf2\xac=\x16\x00r\xdd\x7f\xe34w\xde)\x86\x82\xb6gj\xf4\xfa\x18Pd\xd9\x82\xcd\xda\xee\x8bv\xd1NKu\\\x04\xe2\xbbt\x94\x82\x11\xc9\x1d\xdd\xb1\xb5\x8c\x86\xbfg\xa8L\x1eI\xb4\xddF\x8b\xa7\xd1\x16\x9c\x80\x94UXS\x13\x91\xf8\xe6=\x15\x16\x9a,\x0b8\xd2\xfeE\xa04&quot;\xaa1&#125;\xc7\x93\x9f\xb2%p\xb4\x01\x17r*\xd5\xc6\xfd\xfb\xb0&lt;\x18j\x86\xab\xe0\x17\xf2R\xdfZ\xc3Ty\xe9\xd2j\x8b\x15\t\xabrHwi~1K\x89\xebVZ\xec&#125;\x1av\xc5\x90\xb7\xa5$k\xd3&quot;\x05\xfa\xc6\x1d\xfe\xb5\x9e;#ig\xdd\xa3\x9b.[\x96\xf1r\x01D\xe7\xdeqkj%\x9cvU\xec\x04\xb0\xab\x9e4\x13\xd7\x07\xa8\xcarK&lt;-\xd1x\xb7|\xdf\xc5c\x13R\xd9\x1b\xd8\xa0=F\xbc9\xf2\x8c\xfc\xe8KO\xb6bfv\xaf\xb3\x9c\xa4\x1f(\xc4O\xa9\x0f]x\x832\x89\xd9\xc77\x1fa0\xe4\xac\xa7AA\xc4\x14\x9cm\xd5\xf0\x02\xb4\x9c(ej\xdb\x88U\xa7!+\x83]N\xee\x8c\x87*\x84W\x12$\xfc\x0eEC\xcb\x14\x88\x1eEr\x12N\x8fY\xd6\x18\x8b^\x98z\xbf\x84\xc1\xc8!\x8a\x1a\xaaQ\x89aP\xadL\xa4w\xda\xb9WN\x90\xe1\x9e\xcf\x1fx\xc7\x84\xf4\x0f\x9a8Q\xcc-\xbasuc0\x988\xf8&quot;\xecmFeI?\x13m1\x11D\xe3l\x0b\x16\xf7\xa4\x05[\xd0\xeac\x16\xc6\n`\xcf\xbcf\xda\xc6\xf8n\xbc\xea*\x857n\xb2\x91\x12#\xe0\xf9\x12\xc3\x83\x8f\xfb\x1b\xb2\xd8\xf6\x1fmwC\xaa\x8b\xaeV\xabQ\xd3\xe2\xd6\x1e\xf1u\xc5\xfd\x8a\xf7rw\&#x27;\x12\x95\x9dl:o\r\r\x13\xf9\x02\xab\&#x27;.&#123;\xc0b\x9f\xc1.\xde\xeb\xce\xf1Cd\xbf\xdfOAMi\xc3\x96bhC\xc7\xa6\x1ch\x06X\xed\xafR\xda\x80\xee \x1c=\x92\xf9&amp;\x8b\xbf\x7f\xf1^k[\x94\xd26C\xfe\x1fY16\xc8Q\x9f7`\xc1\xf8D_\xef\xbb$L&gt;R)\xef\xd7\xf5\r\x91\x17@\x8dZ\xa0\x81\x8a&lt;F+\x8d\xd5\n5/\x10\x0ed\xb4\xc1\xc0\xb8a\xe5\x81\x85&#125;\x0f2\x90\xa4\xaeg\xb7\xe8#\xe85h&quot;?\x90\x99\x7f\xe46\xf7y\xe1o\x1e5\xe6o\xda?!\xeb\xc2\x98\xcf\x98\xb0\x15\x01]E\xa5V\x032\xaa\x16\x83K*\xe3$\xcb\xfc\xe6\xb4\x8f\xa2\xa7\x900\x04G\xd8\x95\x98$\x9fN~\xb1\xa7\x0c\x8bGd\xa6\xa7\xe0F\xdd\xa2\xfbU\x9bE\xdc\x025\x1e\xfe\xc5v#\xb1Ft\xc1\x9c\x909\xd9\xb8\xe1h\xc1G*\x02c\xe5\xc7\x91q\x86/\xab\xfaS\xb9Tk\x90\xcc\x07\xb1\xa3E\x11e\x95fw\x02\xbfF\xb7j\x82\r\x92hD\x92\&#x27;FD\xb9\x9b\x0c\xc4%\xb6&gt;:\x1cZ \xc7\x1b\xa9\x15h[\xff?\x88\xcd\xbb\xe5\xf6\xb3\xb6B\xac\xda\xcd\xa7h\x81 \xcd\xeeu@\xef\x92!\xe2Vr+\x1d\xa6\x83Z\xdb\xb7\x1a\xd7#$)\xf1\x1f\x82\xdd\x80A\x94W\xf4\xa1\xe7J$\xda\x02\xd4\xb6\xe5\x84\xbegH\xb9\xc2\xe3\x82\xc5\xfd\xb1\xe7!\xeb\xe0\xd1J\x94\x04\x7f\x81\xee\xafn\xe3\x0e;\x17\xb6\x18\x9e;\xca\xb6`\x89\xd0\&#x27;\x87\xff\xcc \xf4yW#*j\x00ad\x9f.5/\xfc\tx1\xa6\xf7V.]\xfa\xec\xc9\x93\x87\x9a;\xb4\xe0\x0eC\x98&lt;5\x14a\xb1c\xaa\x91\x08O\xbaIz*Y\xf0\t\x8e\x96\x92\xa8\x0b\xeb\xa7\xdep\xa2zl\xd6_\x05%\x96\xda\x9e&quot;\x80\xeb\xf2bc\xfb\t\x1a\xe2h\xd1\x00tb|M\xf6\xd7\xc4.\xb5\xb1\xe3a\xa1\x96\x08\x9f\xa6:\xa8\xccouN^#fq\x03\xcan\x8cRJD6&amp;\n\xda\xe0T\xf5\x18\xfcp\xcd\x8f`\xdcS\x10\x00;\xd2\xb2\x14\xbd\xe4xa\x88v\x03p\x83\xdeL\xb0\xa0\xe8D\x04\xdd~\xa0\xacR\xc6 \xe0\x83t\xbf\xbf\x1d#\xc4`\xbe\xc6\xd7\xf9Z\x08\x88Tm\x81\xd6f*\xdc\x13\x0e\xc7\xae-\xadSmQ\x02y\xa4.\xbe\x8b\xf4\xe7\x9c\xbd\xdc5\xc3\x98&#123;Qw\xba\xeb\xf5\xc6jMy\xcaj\xd5\x01L8&lt;c\xf0k\xd6p\xe7\x1cz\xffW72\xd3&gt;Q\xe1\xab\xc3\x87tTW\xfdb\x88\x07Xu\xf8V\x92\x8e-\xffG\x80j\xd0/\x0e\xe1?W\x8f\xe7\xd2A\x80L\x19d\xce\xd0\xd4]\x00\x92\xde\xb9\xb3|\xda\x13mLQ_4\xbb1\xd3w\xa3f&amp;\xd4=\xd6~/=\x83U\xb6W\xc7\x95\x95\x05\xcb\xe3\xde\xc1\x15\xc9\x9bB\xce\tH\\z\xc1\xf3c\xc1v\xca\xbd\x06,\xea\n\x03\x1b\x12!C\xefj\x97\x96K\x07O\xa9\x98\xca\t\x1e\xd9\xc5\x98=\x9cq\x80\xd0\xba?`\x14\x91\x8c\xa9\xab\x83\\\xa6\xb5&gt;zq\xed\xc68\x0b\xba\xed\xda\xb2N\xfbI\xde\x8d\xb7\x1fu\xce\xf0[D\x9a\x8cW\xea\xd4\xebGz&#125;\x81\xd4\xf4\&#x27;N\\\xceW\x96:E\x06\xed\xd3\x06\xf8\x18d\x9e\x0edW\xdcb\xe1\xea\x1c+I\xf8\xdc\xd4\xda\\r~\x96\xb9?yd\xd9\xb7&#125;\xfb\x9ek\x85\xa84h\xf9\x8b\&#x27;(\xa9\xb4S\x87\xc7\x87\xa7\xf1\xdaIy\x95D\xfe\xe3\x90\xf0\x08\xf3\xfc\x00\x8e\x81\xc2k\xb8a3\xc1&#125;@\x8d\\\xf9T\xfc\xb0J\xeb\x8f\x99\xc9~\x95_\x14\xdde\x1c\xaf\xbeG\xd8\xdc\x99))\xb5\x8f\xdd\xdc\x06O~(\x0c\xa1\x1d\xa5c4\xf9=~Z\xc2\xea5G\xed\x10\x85S\x00~\x0c*\x14$\xcb\x0b\x08$0\x89\x1e\xd6Qq\x81\x18_\xb0\xc9o\x81,_\x9c\xcfi\xb7\x86\xf1\xbd\xa8\xa2N\x84@~\xaf.\x9f\x89\xbd/\xc3n\xcd\xf1\xc0\x83\xbaQ\xe1,\x9c6&quot;p]\xb5\xae\x835\xd1\xb6m\xe7M0&amp;q\xb3\x91S\xd0o\xdbF\xbc&lt;\x17&#123;eP6\xc3c\x7fR\x9a\xacWd3?\xb6joQ\x1d\xb2_\xc1\x9d`\xb8\x08!\x97\xc3z3Y_\xb8@\x88\xecc\r\xc1\xb7y\x80&#x27;</span><br>bits =<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(date2)):<br>    tmp = <span class="hljs-built_in">bin</span>(cipher2[:<span class="hljs-built_in">len</span>(date2)][i]^^date2[i])[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)<br>    bits += tmp<br><br><span class="hljs-keyword">for</span> seed3 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>&lt;&lt;n2,<span class="hljs-number">0</span>,-<span class="hljs-number">1</span>):<br>    lfsr2 = lfsr(seed3,mask2,n2)<br>    output2 = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(date2)):<br>        tmp = lfsr2.getrandbit(<span class="hljs-number">8</span>)<br>        output2 += <span class="hljs-built_in">bin</span>(tmp)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">8</span>)<br>    output1 = <span class="hljs-built_in">int</span>(bits,<span class="hljs-number">2</span>)^^<span class="hljs-built_in">int</span>(output2,<span class="hljs-number">2</span>)<br>    output1 = <span class="hljs-built_in">bin</span>(output1)[<span class="hljs-number">2</span>:].zfill(<span class="hljs-number">128</span>)<br>    seed1, mask1 = BM(output1,<span class="hljs-number">64</span>)<br>    <span class="hljs-keyword">if</span> seed1 == -<span class="hljs-number">1</span> <span class="hljs-keyword">and</span> mask1 == -<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">continue</span><br>    lfsr1 = lfsr(seed1,mask1,n1)<br>    lfsr2 = lfsr(seed3,mask2,n2)<br>    flag = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cipher2:<br>        temp = i^^lfsr1.getrandbit(<span class="hljs-number">8</span>)^^lfsr2.getrandbit(<span class="hljs-number">8</span>)<br>        <span class="hljs-comment">#flag += libnum.n2s(int(temp))</span><br>        flag += <span class="hljs-built_in">chr</span>(temp)<br>    <span class="hljs-built_in">print</span>(seed3)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;SUSCTF&#x27;</span> <span class="hljs-keyword">in</span> flag <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;CTF&#x27;</span> <span class="hljs-keyword">in</span> flag <span class="hljs-keyword">or</span> <span class="hljs-string">&#x27;ctf&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>        <span class="hljs-built_in">print</span>(flag)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">seed3 = 3054</span><br><span class="hljs-string">Date: 1984-12-25</span><br><span class="hljs-string">Though the hunger pangs were no longer so exquisite, he realized that he was weak.  He was compelled to pause for frequent rests, when he attacked the muskeg berries and rush-grass patches.  His tongue felt dry and large, as though covered with a fine hairy growth, and it tasted bitter in his mouth.  His heart gave him a great deal of trouble.  When he had travelled a few minutes it would begin a remorseless thump, thump, thump, and then leap up and away in a painful flutter of beats that choked him and made him go faint and dizzy.</span><br><span class="hljs-string">In the middle of the day he found two minnows in a large pool.  It was impossible to bale it, but he was calmer now and managed to catch them in his tin bucket.  They were no longer than his little finger, but he was not particularly hungry.  The dull ache in his stomach had been growing duller and fainter.  It seemed almost that his stomach was dozing.  He ate the fish raw, masticating with painstaking care, for the eating was an act of pure reason.  While he had no desire to eat, he knew that he must eat to live.</span><br><span class="hljs-string">In the evening he caught three more minnows, eating two and saving the third for breakfast.  The sun had dried stray shreds of moss, and he was able to warm himself with hot water.  He had not covered more than ten miles that day; and the next day, travelling whenever his heart permitted him, he covered no more than five miles.  But his stomach did not give him the slightest uneasiness.  It had gone to sleep.  He was in a strange country, too, and the caribou were growing more plentiful, also the wolves.  Often their yelps drifted across the desolation, and once he saw three of them slinking away before his path.</span><br><span class="hljs-string">The content is an excerpt from Love of Life, by Jack London. The problem is mainly about LFSR and I&#x27;ve tried not to make it hard (with the cost of some running time, actually). Your flag is SUSCTF&#123;Thx_f0r_y0uR_P4ti3nce_:)_GoodLuck!_1bc9b80142c24fef610b8d770b500009&#125; and I hope you will enjoy our game. You&#x27;ll find this problem so ez while solving other problems, which is created by --.</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><hr><p>参考：</p><p>[SUSCTF2022_official_wp&#x2F;Ez_Pager_Tiper wp.md at main · susers&#x2F;SUSCTF2022_official_wp (github.com)](<a href="https://github.com/susers/SUSCTF2022_official_wp/blob/main/crypto/Ez_Pager_Tiper/Ez_Pager_Tiper">https://github.com/susers/SUSCTF2022_official_wp/blob/main/crypto/Ez_Pager_Tiper/Ez_Pager_Tiper</a> wp.md)</p><p>[SUSCTF-Crypto方向所有赛题 - Love_DengFeng’s Blog](<a href="https://love-deng-feng.top/2022/03/02/Writeup">https://love-deng-feng.top/2022/03/02/Writeup</a> of SUSCTF&#x2F;)</p>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Crypto</tag>
      
      <tag>流密码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ACTF2022</title>
    <link href="/2022/06/26/ACTF2022/"/>
    <url>/2022/06/26/ACTF2022/</url>
    
    <content type="html"><![CDATA[<h1 id="impossible-RSA"><a href="#impossible-RSA" class="headerlink" title="impossible RSA"></a>impossible RSA</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.PublicKey <span class="hljs-keyword">import</span> RSA<br><br>e = <span class="hljs-number">65537</span><br>flag = <span class="hljs-string">b&#x27;ACTF&#123;...&#125;&#x27;</span><br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    p = getPrime(<span class="hljs-number">1024</span>)<br>    q = inverse(e, p)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> isPrime(q):<br>        <span class="hljs-keyword">continue</span><br>    n = p * q;<br>    public = RSA.construct((n, e))<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;public.pem&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> file:<br>        file.write(public.exportKey(<span class="hljs-string">&#x27;PEM&#x27;</span>))<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-string">&quot;wb&quot;</span>) <span class="hljs-keyword">as</span> file:<br>        file.write(long_to_bytes(<span class="hljs-built_in">pow</span>(bytes_to_long(flag), e, n)))<br>    <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure><p>$$<br>e*q &#x3D; 1 \ mod\ p\\<br>&#x3D;&#x3D;&gt;e*q &#x3D; 1 + k*p(可以知道k的值近似e)\\<br>&#x3D;&#x3D;&gt;e*q^2-q-k*n&#x3D;0\\<br>解方程就行了<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> rsa<br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;public.pem&quot;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    keydata = f.read()<br>    pubckey = rsa.PublicKey.load_pkcs1_openssl_pem(keydata)<br>    pubckey.n<br>    pubckey.e<br><br>n = pubckey.n<br>e = pubckey.e<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e = <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    c = bytes_to_long(f.read())<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,e):<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;k = <span class="hljs-subst">&#123;k&#125;</span>&quot;</span>)<br>    deta = <span class="hljs-number">1</span> + <span class="hljs-number">4</span> * k * e * n<br>    <span class="hljs-keyword">if</span> gmpy2.iroot(deta,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>] &gt;= <span class="hljs-number">0</span>:<br>        <span class="hljs-comment">#p = int((gmpy2.iroot(deta,2)[0]+1)/(2*e))</span><br>        p = <span class="hljs-built_in">int</span>(gmpy2.iroot(deta,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]+<span class="hljs-number">1</span>)//(<span class="hljs-number">2</span>*e)<span class="hljs-comment">#前面需要int化，淦！</span><br>        q = n//p<br>        <span class="hljs-keyword">if</span> p*q == n:<br>            phi = (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>            d = gmpy2.invert(e, phi)<br>            m = <span class="hljs-built_in">pow</span>(c, d, n)<br>            flag = long_to_bytes(m)<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;ACTF&#x27;</span> <span class="hljs-keyword">in</span> flag:<br>                <span class="hljs-built_in">print</span>(flag)<br>                <span class="hljs-keyword">break</span><br><br></code></pre></td></tr></table></figure><h1 id="RSA-LEAK"><a href="#RSA-LEAK" class="headerlink" title="RSA LEAK"></a>RSA LEAK</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">leak</span>(<span class="hljs-params">a, b</span>):<br>    p = random_prime(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">64</span>))<br>    q = random_prime(<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">64</span>))<br>    n = p*q<br>    e = <span class="hljs-number">65537</span><br>    <span class="hljs-built_in">print</span>(n)<br>    <span class="hljs-built_in">print</span>((<span class="hljs-built_in">pow</span>(a, e) + <span class="hljs-built_in">pow</span>(b, e) + <span class="hljs-number">0xdeadbeef</span>) % n)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen_key</span>():<br>    a = randrange(<span class="hljs-number">0</span>, <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">256</span>))<br>    b = randrange(<span class="hljs-number">0</span>, <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">256</span>))<br>    p = <span class="hljs-built_in">pow</span>(a, <span class="hljs-number">4</span>)<br>    q = <span class="hljs-built_in">pow</span>(b, <span class="hljs-number">4</span>)<br>    rp = randrange(<span class="hljs-number">0</span>, <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">24</span>))<br>    rq = randrange(<span class="hljs-number">0</span>, <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,<span class="hljs-number">24</span>))<br>    pp = next_prime(p+rp)<br>    qq = next_prime(q+rq)<br>    <span class="hljs-keyword">if</span> pp % <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>) == (pp-p) % <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>) <span class="hljs-keyword">and</span> qq % <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>) == (qq-q) % <span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>):<br>        n = pp*qq<br>        rp = pp-p<br>        rq = qq-q<br>        <span class="hljs-keyword">return</span> n, rp, rq<br>    <br>n, rp, rq = gen_key()<br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-built_in">pow</span>(bytes_to_long(flag), e, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n =&quot;</span>, n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e =&quot;</span>, e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c =&quot;</span>, c)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;=======leak=======&quot;</span>)<br>leak(rp, rq)<br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">n = 3183573836769699313763043722513486503160533089470716348487649113450828830224151824106050562868640291712433283679799855890306945562430572137128269318944453041825476154913676849658599642113896525291798525533722805116041675462675732995881671359593602584751304602244415149859346875340361740775463623467503186824385780851920136368593725535779854726168687179051303851797111239451264183276544616736820298054063232641359775128753071340474714720534858295660426278356630743758247422916519687362426114443660989774519751234591819547129288719863041972824405872212208118093577184659446552017086531002340663509215501866212294702743</span><br><span class="hljs-string">e = 65537</span><br><span class="hljs-string">c = 48433948078708266558408900822131846839473472350405274958254566291017137879542806238459456400958349315245447486509633749276746053786868315163583443030289607980449076267295483248068122553237802668045588106193692102901936355277693449867608379899254200590252441986645643511838233803828204450622023993363140246583650322952060860867801081687288233255776380790653361695125971596448862744165007007840033270102756536056501059098523990991260352123691349393725158028931174218091973919457078350257978338294099849690514328273829474324145569140386584429042884336459789499705672633475010234403132893629856284982320249119974872840</span><br><span class="hljs-string">=======leak=======</span><br><span class="hljs-string">122146249659110799196678177080657779971</span><br><span class="hljs-string">90846368443479079691227824315092288065</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br></code></pre></td></tr></table></figure><h2 id="法一"><a href="#法一" class="headerlink" title="法一"></a>法一</h2><p>论文：<a href="https://einspem.upm.edu.my/journal/fullpaper/vol13saugust/8.pdf">8.pdf (upm.edu.my)</a></p><p>通过上述论文可知，我们要先求出<code>rp(pp-p),rq(qq-q)</code>。</p><p>令</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">leak_out = <span class="hljs-number">90846368443479079691227824315092288065</span><br>leak_n = <span class="hljs-number">122146249659110799196678177080657779971</span><br>tmp = <span class="hljs-number">0xdeadbeef</span><br></code></pre></td></tr></table></figure><p>该题中<code>leak_n</code>很小易分解出<code>leak_p,leak_q</code>，且<code>rp,rq</code>的范围在[0,1&lt;&lt;24]左右，故可以对<code>rp</code>进行枚举（枚举范围可以减半，即<code>rp,rq</code>的值对调），有等式$rq^e &#x3D; leak\_out - tmp - rq^e\quad (mod\quad leak\_n)$，然后解密得到<code>rq</code>，通过以下条件筛选出<code>rp,rq</code></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-number">1</span>)rq in [<span class="hljs-number">0</span>,<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">24</span>)<br><span class="hljs-number">2</span>)rp*rq ≡ <span class="hljs-built_in">n</span> (<span class="hljs-built_in">mod</span> <span class="hljs-number">16</span>)<br></code></pre></td></tr></table></figure><p>然后再根据论文中的步骤写出算法：</p><p><a href="https://imgtu.com/i/vCJKgI"><img src="https://s1.ax1x.com/2022/07/28/vCJKgI.png" alt="vCJKgI.png" border="0" /></a></p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> iroot,invert<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">from</span> math <span class="hljs-keyword">import</span> ceil,floor<br><br>n = <span class="hljs-number">3183573836769699313763043722513486503160533089470716348487649113450828830224151824106050562868640291712433283679799855890306945562430572137128269318944453041825476154913676849658599642113896525291798525533722805116041675462675732995881671359593602584751304602244415149859346875340361740775463623467503186824385780851920136368593725535779854726168687179051303851797111239451264183276544616736820298054063232641359775128753071340474714720534858295660426278356630743758247422916519687362426114443660989774519751234591819547129288719863041972824405872212208118093577184659446552017086531002340663509215501866212294702743</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">48433948078708266558408900822131846839473472350405274958254566291017137879542806238459456400958349315245447486509633749276746053786868315163583443030289607980449076267295483248068122553237802668045588106193692102901936355277693449867608379899254200590252441986645643511838233803828204450622023993363140246583650322952060860867801081687288233255776380790653361695125971596448862744165007007840033270102756536056501059098523990991260352123691349393725158028931174218091973919457078350257978338294099849690514328273829474324145569140386584429042884336459789499705672633475010234403132893629856284982320249119974872840</span><br><br>leak_n = <span class="hljs-number">122146249659110799196678177080657779971</span><br>leak_p = <span class="hljs-number">8949458376079230661</span><br>leak_q = <span class="hljs-number">13648451618657980711</span><br>leak_phi = (leak_p - <span class="hljs-number">1</span>)*(leak_q - <span class="hljs-number">1</span>)<br>leak_d = invert(e,leak_phi)<br>leak_out = <span class="hljs-number">90846368443479079691227824315092288065</span><br>leak_out -= <span class="hljs-number">0xdeadbeef</span><br>m = <span class="hljs-number">4</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">for rp in tqdm(range(1,16777216)):</span><br><span class="hljs-string">    rpe = pow(rp,e,leak_n)</span><br><span class="hljs-string">    rq = pow(leak_out-rpe,leak_d,leak_n)</span><br><span class="hljs-string">    #if rq.bit_length() in range(23,25):</span><br><span class="hljs-string">    if rq.bit_length() &lt;= 24 and n%16 == (rp*rq)%16:</span><br><span class="hljs-string">        print(rp,rq)</span><br><span class="hljs-string">        break</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-comment">#rp, rq = 405771, 11974933</span><br>rq, rp = <span class="hljs-number">405771</span>, <span class="hljs-number">11974933</span><br>start = ceil(iroot(rp*rq,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>])<br>edge = floor(rq/<span class="hljs-number">2</span>+<span class="hljs-number">2</span>**(m/<span class="hljs-number">2</span>-<span class="hljs-number">1</span>)*rp+<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;start = <span class="hljs-subst">&#123;start&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;edge = <span class="hljs-subst">&#123;edge&#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm(<span class="hljs-built_in">range</span>(start,edge)):<br>    sigma = (<span class="hljs-built_in">int</span>(iroot(n,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]) - i)**<span class="hljs-number">2</span><span class="hljs-comment">#整数化</span><br>    z = (n - rp*rq)%sigma<br>    delta = z**<span class="hljs-number">2</span> - <span class="hljs-number">4</span>*sigma*rp*rq<br>    <span class="hljs-keyword">if</span> delta &lt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> iroot(delta,<span class="hljs-number">2</span>)[<span class="hljs-number">1</span>]:<br>        x1, x2 = (z+<span class="hljs-built_in">int</span>(iroot(delta,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]))//<span class="hljs-number">2</span>, (z-<span class="hljs-built_in">int</span>(iroot(delta,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>]))//<span class="hljs-number">2</span><span class="hljs-comment">#整数化</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;x1 = <span class="hljs-subst">&#123;x1&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">assert</span> x1**<span class="hljs-number">2</span> - z*x1 + sigma*rp*rq == <span class="hljs-number">0</span><br>        maybe_p = <span class="hljs-built_in">int</span>(n//(x1//rp+rq))<br>        <span class="hljs-keyword">if</span> n%maybe_p == <span class="hljs-number">0</span>:<br>            p = maybe_p<br>            q = n//p<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p = <span class="hljs-subst">&#123;p&#125;</span>\nq = <span class="hljs-subst">&#123;q&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;x2 = <span class="hljs-subst">&#123;x2&#125;</span>&#x27;</span>)<br>        <span class="hljs-keyword">assert</span> x2**<span class="hljs-number">2</span> - z*x2 + sigma*rp*rq == <span class="hljs-number">0</span><br>        maybe_q = <span class="hljs-built_in">int</span>(n//(x2//rq+rp))<br>        <span class="hljs-keyword">if</span> n%maybe_q == <span class="hljs-number">0</span>:<br>            q = maybe_q<br>            p = n//q<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p = <span class="hljs-subst">&#123;p&#125;</span>\nq = <span class="hljs-subst">&#123;q&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">break</span><br><br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d = invert(e,phi)<br>flag = long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,n))<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="法二"><a href="#法二" class="headerlink" title="法二"></a>法二</h2><p><code>rp,rq</code>的求法同上。（rp &#x3D; pp - p，rq &#x3D; qq-q）<br>$$<br>\begin{cases}<br>pp &#x3D; a^4+rp<br>\\qq &#x3D; b^4+rq<br>\end{cases}<br>$$<br>比较各数值大小</p><figure class="highlight parser3"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs parser3"><span class="language-xml">a,b在</span><span class="hljs-number">256</span><span class="language-xml">bit左右，a</span><span class="hljs-keyword">^4</span><span class="language-xml">,b</span><span class="hljs-keyword">^4</span><span class="language-xml">在</span><span class="hljs-number">1024</span><span class="language-xml">bit左右</span><br><span class="language-xml">而rp,rq在</span><span class="hljs-number">24</span><span class="language-xml">bit左右</span><br><span class="language-xml">故n=pp*qq=(a</span><span class="hljs-keyword">^4</span><span class="language-xml">+rp)*(b</span><span class="hljs-keyword">^4</span><span class="language-xml">+rq)≈a</span><span class="hljs-keyword">^4</span><span class="language-xml">*b</span><span class="hljs-keyword">^4</span><br></code></pre></td></tr></table></figure><p>于是可以联立方程<br>$$<br>\begin{cases}<br>n &#x3D; (a^4+rp)*(b^4+rq)<br>\\n^{1&#x2F;4} &#x3D; a*b<br>\end{cases}<br>$$<br>解此方程可得到<code>a,b</code>，继而求出<code>p,q</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> iroot,invert<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>n = <span class="hljs-number">3183573836769699313763043722513486503160533089470716348487649113450828830224151824106050562868640291712433283679799855890306945562430572137128269318944453041825476154913676849658599642113896525291798525533722805116041675462675732995881671359593602584751304602244415149859346875340361740775463623467503186824385780851920136368593725535779854726168687179051303851797111239451264183276544616736820298054063232641359775128753071340474714720534858295660426278356630743758247422916519687362426114443660989774519751234591819547129288719863041972824405872212208118093577184659446552017086531002340663509215501866212294702743</span><br>e = <span class="hljs-number">65537</span><br>c = <span class="hljs-number">48433948078708266558408900822131846839473472350405274958254566291017137879542806238459456400958349315245447486509633749276746053786868315163583443030289607980449076267295483248068122553237802668045588106193692102901936355277693449867608379899254200590252441986645643511838233803828204450622023993363140246583650322952060860867801081687288233255776380790653361695125971596448862744165007007840033270102756536056501059098523990991260352123691349393725158028931174218091973919457078350257978338294099849690514328273829474324145569140386584429042884336459789499705672633475010234403132893629856284982320249119974872840</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">for i in tqdm(range(1,16777216)):</span><br><span class="hljs-string">    rpe = pow(rp,e,leak_n)</span><br><span class="hljs-string">    rq = pow(leak_out-rpe,leak_d,leak_n)</span><br><span class="hljs-string">    if rq.bit_length() &lt;= 24 and n%16 == (rp*rq)%16:</span><br><span class="hljs-string">        print(rp,rq)</span><br><span class="hljs-string">        break</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>rp, rq = <span class="hljs-number">405771</span>, <span class="hljs-number">11974933</span><br><br>a,b = Ints(<span class="hljs-string">&#x27;a b&#x27;</span>)<br>solver = Solver()<br><span class="hljs-comment">#solver.add(n == (a**4+rp)*(b**4+rq))</span><br><span class="hljs-comment">#solver.add(int(iroot(n,4)[0]) == a*b)#int化</span><br>solver.add( n == (a**<span class="hljs-number">4</span>+rp)*(b**<span class="hljs-number">4</span>+rq), <span class="hljs-built_in">int</span>(iroot(n,<span class="hljs-number">4</span>)[<span class="hljs-number">0</span>]) == a*b )<br><span class="hljs-keyword">if</span> solver.check() == sat:<br>    result = solver.model()<br><br>a_, b_ = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(result[a])), <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(result[b]))<span class="hljs-comment">#必须先整数化，否则后面的p,q是式子</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;a = <span class="hljs-subst">&#123;a_&#125;</span>,b = <span class="hljs-subst">&#123;b_&#125;</span>&#x27;</span>)<br>p = a_**<span class="hljs-number">4</span>+rp<br>q = b_**<span class="hljs-number">4</span>+rq<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;p = <span class="hljs-subst">&#123;p&#125;</span>\nq = <span class="hljs-subst">&#123;q&#125;</span>&#x27;</span>)<br><br><span class="hljs-keyword">assert</span> p*q == n<br>d = invert(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>m = <span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure><hr><p>参考：</p><p><a href="https://files.zsxq.com/Fs-DbVF1HxSse2xhcc_dzxypH0RM?attname=ACTF%20WriteUp%20By%20Nu1L.pdf&e=1656393210&token=kIxbL07-8jAj8w1n4s9zv64FuZZNEATmlU_Vm6zD:lR1WUNhjBvWtVI20OtfYRO26-lY=">ACTF WriteUp By Nu1L</a></p><p><a href="https://einspem.upm.edu.my/journal/fullpaper/vol13saugust/8.pdf">8.pdf (upm.edu.my)</a></p><p><a href="https://furutsuki.hatenablog.com/entry/2022/06/28/001931">ACTF 2022 writeup - ふるつき (hatenablog.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RSA</tag>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>宁波市网络安全大赛2022-Crypto-WP</title>
    <link href="/2022/05/16/%E5%AE%81%E6%B3%A2%E5%B8%82%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B2022/"/>
    <url>/2022/05/16/%E5%AE%81%E6%B3%A2%E5%B8%82%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B2022/</url>
    
    <content type="html"><![CDATA[<h1 id="n-n"><a href="#n-n" class="headerlink" title="n_n"></a>n_n</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python">ucnd fclsmn.rmjy.irdapc jdsncm zpmscjdp, almph_mn_yniz<br>ucnd hpfcpm jdsncm uyvz<br>jdsncm zdsl2<br><br>s = zpmscjdp(<span class="hljs-number">1024</span>)<br>x = zpmscjdp(<span class="hljs-number">1024</span>)<br>i = s * x<br>p = 0g130u7u3<br>k = zdsl2.jiwpcm(p, (s-<span class="hljs-number">1</span>)*(x-<span class="hljs-number">1</span>))<br>jiws_x = zdsl2.jiwpcm(s, x)<br>jiwx_s = zdsl2.jiwpcm(x, s)<br><br>d = almph_mn_yniz(uyvz)<br>f = zdsl2.snbdnk(d, p, i)<br><br>scjim(p)<br>scjim(k)<br>scjim(jiws_x)<br>scjim(jiwx_s)<br>scjim(f)<br></code></pre></td></tr></table></figure><p>一看就是字母替换了，拿到<a href="https://quipqiup.com/">quipqiup - cryptoquip and cryptogram solver</a>上分析一下就有了大致意思了，再稍微加点限制就行了。</p><p>出来是这样的：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> crypto.util.number <span class="hljs-keyword">import</span> getprime, bytes_to_long<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> gmpy2<br><br>p = getprime(<span class="hljs-number">1024</span>)<br>q = getprime(<span class="hljs-number">1024</span>)<br>n = p * q<br>e = <span class="hljs-number">0x130f7f3</span><br>d = gmpy2.invert(e, (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>))<br>invp_q = gmpy2.invert(p, q)<br>invq_p = gmpy2.invert(q, p)<br>m = bytes_to_long(flag)<br>c = gmpy2.powmod(m, e, n)<br><span class="hljs-built_in">print</span>(e)<br><span class="hljs-built_in">print</span>(d)<br><span class="hljs-built_in">print</span>(invp_q)<br><span class="hljs-built_in">print</span>(invq_p)<br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><p>一道与长安“战疫”相同的题目（没写，还不会）。</p><p>为了方面书写，这里令$s &#x3D; invp\_q,t &#x3D; invq\_p$<br>$$<br>\begin{cases} s*p &#x3D; 1\ mod\ q\\ t*q &#x3D; 1\ mod\ p \end{cases}<br>$$<br>改写成<br>$$<br>\begin{cases} s*p &#x3D; 1+k_1*q\\ t*q &#x3D; 1+k_2*p \end{cases}<br>$$<br>两式相减<br>$$<br>(s+k_2)*p &#x3D; (k_1+t)*q<br>$$<br>容易知道p≠q，所以<br>$$<br>\begin{cases} p &#x3D; k_1 + t\\ q &#x3D; k_2 + s \end{cases}<br>$$<br>将 p,q 代入$s*p &#x3D; 1+k_1*q$，得<br>$$<br>s*t &#x3D; 1 + k_1*k_2<br>$$<br>得出<br>$$<br>k_1 &#x3D; \dfrac{s*t-1}{k_2}<br>$$<br>根据<br>$$<br>φ(n) &#x3D; (p-1)*(q-1)<br>$$<br>有方程<br>$$<br>(t-1)*k_2^2+(2*s*t-t-s-φ(n))*k_2+(s*t-1)*(s-1)&#x3D;0<br>$$<br>而$k &#x3D; \dfrac{e*d-1}{φ(n)}$，$d&lt;φ(n)$，所以$k&lt;e$，于是将$k_2$的取值约束到$(0,e)$上？（这k能一样吗？）</p><p>通过枚举k，解方程求出$k_2$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> z3 <span class="hljs-keyword">import</span> *<br><br>e = <span class="hljs-number">19986419</span><br>d = <span class="hljs-number">3246030980112569716252525489178402976566547966168594693884910274513154299462041341004375201921016318938426026345098668299377474330375073434720935772407207944175167323817898036516011079576927822972280584550642421759163857196487310343842151887753901290056007928776238985151298531470667875043069631236869106891057021962478109360022955201129953336276429238305672598460147562806963064866859947227329083491706302615233310732434276569920504055705370558759864687603230396302816302264528911561986103345422868194300484993924394687653074699941027740263298870609889050004072341364150017277319759241334188164360195703910784166355</span><br>s = <span class="hljs-number">23389236347134283235213306702183810016424721867486963556461081084876520502820941836694411695676757754191365637169094291954507615676165999068189562213594619012687252636744435260033076208286475321060918985189871377901228212667433573382718485160649112811594950994116619369682212010587535385364596418447338709974</span><br>t = <span class="hljs-number">102920556609507191536438498232122774923059359709189772008951429751731499708926283579532737890030392620334257693429608011647339365489651578950937878926965514185822024062626226427621775843089345409431424163821245825850075741313035783453477904427927137045546100973267423868918950101645341426259141920145517101346</span><br>c = <span class="hljs-number">1553892238198363827492950017785469649883078335860404183601470514633985702148771439291915519584864956768837128975747502834867950051639396112333353729920983641277214334076161962538797900388907160490701194265684200572530520821773449401826082542234651817152190240489004982304794568360099499384170323027423530546020874791949260720440971235829841009999271630682762487975448340845503303511707467319967171026472363519627299488034799105120005884793797012235913877429590605758066993126024240880065915024533204819606519268788794771634158963247834960191894770256479582799808670787421459015846778168822826961225790849202125973374</span><br>kphi = e*d-<span class="hljs-number">1</span><br><br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>,e):<br>    <span class="hljs-keyword">if</span> kphi%k == <span class="hljs-number">0</span>:<br>        phi = kphi//k<br>        x = Int(<span class="hljs-string">&#x27;x&#x27;</span>)<br>        solve = Solver()<br>        solve.add(x*phi == (s*t-<span class="hljs-number">1</span>+(t-<span class="hljs-number">1</span>)*x)*(x+s-<span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">if</span> solve.check() == sat:<br>            result = solve.model()<br>            k2 = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(result[x]))<br>            k1 = (s*t-<span class="hljs-number">1</span>)//k2<br>            p = k1 + t<br>            q = k2 + s<br>            <span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c,d,p*q)))<br>            <span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c, d, p)))<br>            <span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-built_in">pow</span>(c, d, q)))<br><br><span class="hljs-comment">#flag&#123;e171892fdcccfc5b0c390806b975a72c&#125;</span><br></code></pre></td></tr></table></figure><h1 id="PRNG"><a href="#PRNG" class="headerlink" title="PRNG"></a>PRNG</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br>p0 = <span class="hljs-number">115792089210356248762697446949407573530086143415290314195533631308867097853951</span><br>a = <span class="hljs-number">115792089210356248762697446949407573530086143415290314195533631308867097853948</span><br>b = <span class="hljs-number">41058363725152142129326129780047268409114441015993725554835256314039467401291</span><br>E=EllipticCurve(GF(p0),[a,b])<br>P0=E(<span class="hljs-number">0x6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296</span>,<span class="hljs-number">0x4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5</span>)<br>n=<span class="hljs-number">0xffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551</span><br>rlist1=[]<br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">624</span>):<br>    rlist1.append(random.getrandbits(<span class="hljs-number">32</span>))<br><span class="hljs-built_in">print</span>(rlist1)<br>s0=random.getrandbits(<span class="hljs-number">256</span>)<br>RMT=random.getrandbits(<span class="hljs-number">256</span>)<br>s0=s0%n<br>p=getPrime(<span class="hljs-number">256</span>)<br>q=getPrime(<span class="hljs-number">256</span>)<br><span class="hljs-keyword">assert</span> p!=q<br>x0=<span class="hljs-built_in">int</span>(inverse_mod(q,n))<br>e1=(p*x0)%n<br><span class="hljs-comment">#print(&quot;e1&quot;,hex(e1))</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">GenRNG</span>():<br>    si=s0<br>    p_point=p*P0<br>    q_point=q*P0<br>    Random_i=<span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>        si=<span class="hljs-built_in">int</span>((p_point*si)[<span class="hljs-number">0</span>])<br>        ri=<span class="hljs-built_in">int</span>((q_point*si)[<span class="hljs-number">0</span>])<br>        Random_i=ri&amp;(<span class="hljs-number">0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span>)<br>    r_point=si*p_point<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">hex</span>(Random_i),r_point<br>rand,point=GenRNG()<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">int</span>(rand,<span class="hljs-number">16</span>)^^RMT)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">genPrime</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        a = random.getrandbits(<span class="hljs-number">256</span>)<br>        b = random.getrandbits(<span class="hljs-number">256</span>)<br>        <span class="hljs-keyword">if</span> b % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        p = <span class="hljs-built_in">int</span>(a ** <span class="hljs-number">2</span> + <span class="hljs-number">3</span> * b ** <span class="hljs-number">2</span>)<br>        <span class="hljs-keyword">if</span> p.bit_length() == <span class="hljs-number">512</span> <span class="hljs-keyword">and</span> p % <span class="hljs-number">3</span> == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> isPrime(p):<br>            <span class="hljs-keyword">return</span> p<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">P, Q, mod</span>):<br>    m, n = P<br>    p, q = Q<br>    <span class="hljs-keyword">if</span> p <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> P<br>    <span class="hljs-keyword">if</span> m <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> Q<br>    <span class="hljs-keyword">if</span> n <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> q <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        x = m * p % mod<br>        y = (m + p) % mod<br>        <span class="hljs-keyword">return</span> (x, y)<br>    <span class="hljs-keyword">if</span> n <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">and</span> q <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        m, n, p, q = p, q, m, n<br>    <span class="hljs-keyword">if</span> q <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">if</span> (n + p) % mod != <span class="hljs-number">0</span>:<br>            x = (m * p + <span class="hljs-number">2</span>) * inverse(n + p, mod) % mod<br>            y = (m + n * p) * inverse(n + p, mod) % mod<br>            <span class="hljs-keyword">return</span> (x, y)<br>        <span class="hljs-keyword">elif</span> (m - n ** <span class="hljs-number">2</span>) % mod != <span class="hljs-number">0</span>:<br>            x = (m * p + <span class="hljs-number">2</span>) * inverse(m - n ** <span class="hljs-number">2</span>, mod) % mod<br>            <span class="hljs-keyword">return</span> (x, <span class="hljs-literal">None</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> (<span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> (m + p + n * q) % mod != <span class="hljs-number">0</span>:<br>            x = (m * p + (n + q) * <span class="hljs-number">2</span>) * inverse(m + p + n * q, mod) % mod<br>            y = (n * p + m * q + <span class="hljs-number">2</span>) * inverse(m + p + n * q, mod) % mod<br>            <span class="hljs-keyword">return</span> (x, y)<br>        <span class="hljs-keyword">elif</span> (n * p + m * q + <span class="hljs-number">2</span>) % mod != <span class="hljs-number">0</span>:<br>            x = (m * p + (n + q) * <span class="hljs-number">2</span>) * inverse(n * p + m * q + r, mod) % mod<br>            <span class="hljs-keyword">return</span> (x, <span class="hljs-literal">None</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> (<span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>)<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">power</span>(<span class="hljs-params">P, a, mod</span>):<br>    res = (<span class="hljs-literal">None</span>, <span class="hljs-literal">None</span>)<br>    t = P<br>    <span class="hljs-keyword">while</span> a &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> a % <span class="hljs-number">2</span>:<br>            res = add(res, t, mod)<br>        t = add(t, t, mod)<br>        a &gt;&gt;= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> res<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">random_pad</span>(<span class="hljs-params">msg, ln</span>):<br>    pad = <span class="hljs-built_in">bytes</span>([random.getrandbits(<span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ln - <span class="hljs-built_in">len</span>(msg))])<br>    <span class="hljs-keyword">return</span> msg + pad<br><br>p, q = genPrime(), genPrime()<br>N = p * q<br>phi = (p ** <span class="hljs-number">2</span> + p + <span class="hljs-number">1</span>) * (q ** <span class="hljs-number">2</span> + q + <span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;N: <span class="hljs-subst">&#123;N&#125;</span>&quot;</span>)<br>d = getPrime(<span class="hljs-number">400</span>)<br>e2 = inverse(d, phi)<br>k = (e * d - <span class="hljs-number">1</span>)/phi<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e2:&quot;</span>,e2)<br>to_enc=long_to_bytes(e1)<br>ln = <span class="hljs-built_in">len</span>(to_enc)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Length: <span class="hljs-subst">&#123;ln&#125;</span>&quot;</span>)<br>pt1, pt2 = random_pad(to_enc[: ln // <span class="hljs-number">2</span>], <span class="hljs-number">127</span>), random_pad(to_enc[ln // <span class="hljs-number">2</span> :], <span class="hljs-number">127</span>)<br>M = (bytes_to_long(pt1), bytes_to_long(pt2))<br>E = power(M, e2, N)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;E: <span class="hljs-subst">&#123;E&#125;</span>&quot;</span>)<br><br>flag=<span class="hljs-string">b&quot;flag&#123;**********&#125;&quot;</span><br>m=bytes_to_long(flag)<br>c=m^^<span class="hljs-built_in">int</span>(point[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c:&quot;</span>,c)<br></code></pre></td></tr></table></figure><p>没有头绪。应该可以通过给出的随机数分别预测$s_0,RMT$，每次预测32bit，共8次，但是后面不知道怎么下手了。</p><p>不过这道题貌似是一个原题，只是稍微改了一下。可以参考<a href="https://blog.y011d4.com/20211011-pbctf-writeup#yet-another-rsa">pbctf 2021 Writeup | y011d4.log</a>。</p>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2022DASCTF Apr X FATE 防疫挑战赛</title>
    <link href="/2022/04/29/2022DASCTF%20Apr%20X%20FATE%20%E9%98%B2%E7%96%AB%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <url>/2022/04/29/2022DASCTF%20Apr%20X%20FATE%20%E9%98%B2%E7%96%AB%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="easy-real"><a href="#easy-real" class="headerlink" title="easy_real"></a>easy_real</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> hashlib<br><br>flag = <span class="hljs-string">&#x27;xxxxxxxxxxxxxxxxxxxx&#x27;</span><br>key = random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">10</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(flag)):<br>crypto += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(flag[i])^key)<br>m = crypto的<span class="hljs-built_in">ascii</span>十六进制<br>e = random.randint(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>)<br><span class="hljs-built_in">print</span>(hashlib.md5(e))<br>p = <span class="hljs-number">64310413306776406422334034047152581900365687374336418863191177338901198608319</span><br>q = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx<br>n = p*q<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(n)<br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><p>签到题。由于key和e的范围都比较小，无脑爆破就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>e_hash = <span class="hljs-string">&#x27;37693cfc748049e45d87b8c7d8b9aacd&#x27;</span><br>n = <span class="hljs-number">4197356622576696564490569060686240088884187113566430134461945130770906825187894394672841467350797015940721560434743086405821584185286177962353341322088523</span><br>c = <span class="hljs-number">3298176862697175389935722420143867000970906723110625484802850810634814647827572034913391972640399446415991848730984820839735665233943600223288991148186397</span><br>p = <span class="hljs-number">64310413306776406422334034047152581900365687374336418863191177338901198608319</span><br>q = n//p<br><span class="hljs-keyword">assert</span> p*q == n<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">101</span>):<br><span class="hljs-keyword">if</span> hashlib.md5(<span class="hljs-built_in">str</span>(i).encode()).hexdigest() == e_hash:<br>e = i<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e = <span class="hljs-subst">&#123;e&#125;</span>&#x27;</span>)<br><span class="hljs-keyword">break</span><br><br>d = gmpy2.invert(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>m = <span class="hljs-built_in">pow</span>(c,d,n)<br>crypto = long_to_bytes(m)<br><span class="hljs-keyword">for</span> cnt <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">11</span>):<br>txt = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(crypto)):<br>txt += <span class="hljs-built_in">chr</span>(crypto[i]^cnt)<br><span class="hljs-built_in">print</span>(txt)<br></code></pre></td></tr></table></figure><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031016052.png"/><h1 id="special-rsa"><a href="#special-rsa" class="headerlink" title="special_rsa"></a>special_rsa</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getPrime1</span>(<span class="hljs-params">bitLength, e</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        i = getPrime(bitLength)<br>        <span class="hljs-keyword">if</span> (i - <span class="hljs-number">1</span>) % e ** <span class="hljs-number">2</span> == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> i<br>flag=<span class="hljs-string">b&#x27;DASCTF&#123;????????????????????&#125;&#x27;</span><br>m = bytes_to_long(flag)<br>lenth = ((<span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(m)) - <span class="hljs-number">2</span>) // <span class="hljs-number">2</span>) + <span class="hljs-number">9</span><br>e=<span class="hljs-number">113</span><br>p = getPrime1(lenth, e)<br>q = getPrime1(lenth, e)<br>n=p*q<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br>c1 = <span class="hljs-built_in">pow</span>(m, e, n)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">26</span>):<br>    lenth = ((<span class="hljs-built_in">len</span>(<span class="hljs-built_in">bin</span>(c)) - <span class="hljs-number">2</span>) // <span class="hljs-number">2</span>) + <span class="hljs-number">9</span><br>    p = getPrime1(lenth, e)<br>    q = getPrime1(lenth, e)<br>    n=p*q<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;n = <span class="hljs-subst">&#123;n&#125;</span>&quot;</span>)<br>    c=<span class="hljs-built_in">pow</span>(c,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;e = <span class="hljs-subst">&#123;e&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;c = <span class="hljs-subst">&#123;c&#125;</span>&quot;</span>)<br></code></pre></td></tr></table></figure><p>尝试将n进行分解，发现所有n都可以分解。但是主要问题来了，发现$gcd(e,p_i-1)&#x3D;e,gcd(e,q_i-1)&#x3D;1$，这让我想到了BUU上的一道题<code>[NCTF2019]easy rsa</code>。利用AMM算法进行开根。由于每次开根会得到113*113种情况，需要进行筛选（利用$ c_i &lt; p_{i-1}q_{i-1}$）。</p><p>真没想到可以直接用small_root代替AMM算法（再次看了之前的参考文章，发现里面有说这个的）。</p><p>当然应该还有另一种方法（比赛时想到的方向，但是不会写代码，淦！）。</p><p><a href="https://eprint.iacr.org/2013/117.pdf">117.pdf (iacr.org)</a></p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031017847.png"/><p>进行了测试，发现，$p,q$都符合该情况（即 $(q-1)%r&#x3D;0$ ）。不过我并没有成功实现。(如有不对的地方，烦请斧正)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">from</span> libnum <span class="hljs-keyword">import</span> n2s<br><br>e = <span class="hljs-number">113</span><br>c = <span class="hljs-number">1028324919038104683475485759234995158466543298184637219012354053883391759172761125802189697762778242175407876548832454351014064525118465877297277847501477586955680645311999174005606833294172830817159</span><br>ps = [<span class="hljs-number">953730950786751671162019537171974567</span>, <span class="hljs-number">232079231415308325450092906880606082069</span>, <span class="hljs-number">88067722275537586769787599991567203589751</span>, <span class="hljs-number">24335212484189159197840692460327461505035059</span>, <span class="hljs-number">7832299017937880395583715032476962329929226581</span>, <span class="hljs-number">1656848589754467667368312855929759764100120657831</span>, <span class="hljs-number">385788223643735590500185001710758495904528462058461</span>, <span class="hljs-number">135813272566456906193934636644217527100917542578856697</span>, <span class="hljs-number">37185691759470013533730603170661686570987787098353146897</span>, <span class="hljs-number">6623023178993627032758350846838617937710601663528839184727</span>, <span class="hljs-number">954412804126450754097808991490470782833291028309980575506163</span>, <span class="hljs-number">350121371461894793578110243222665782247737840410076591434903787</span>, <span class="hljs-number">66882708962198932251728043152245270662769508317424500666902658099</span>, <span class="hljs-number">43449898447639409732732812916430042263570178747794530133229640125923</span>, <span class="hljs-number">11136261905010083405430254612464029672882837025885682392810368001188527</span>, <span class="hljs-number">2623629589005115152329094552749299711026240699896424120660145647226563547</span>, <span class="hljs-number">262775599542220820608778738911414710660835549772895468394761119434220071003</span>, <span class="hljs-number">102366458668689911004027849640392002821642295855327735994412634235696717329671</span>, <span class="hljs-number">15874438801602936764330936047390981280096007684699625987478211613419079727910193</span>, <span class="hljs-number">4479430800690915874719403516331677127806963529247809966024777708496270901092401687</span>, <span class="hljs-number">1328165608715012145707239303399129070657427496129541416861187541092152796676371237057</span>, <span class="hljs-number">368461902207817023013078031477042541053987571003677386333567043030477451518424731838173</span>, <span class="hljs-number">206721456778089912780641186795393376537372828449722520397829606593267585681448641482345737</span>, <span class="hljs-number">43870497594014737833600078975099212558645315030912084285417550950854483979406797450479252891</span>, <span class="hljs-number">14702310219802004876082313481498680940324963613770096574742182597840558294030859405666549879531</span>, <span class="hljs-number">5952590790902091635268726673538951527433355660839816621733964706901441977862333411532558667717227</span>, <span class="hljs-number">978009050697262759337388871320370165458800566798280419667959552859180906066907114053826258140106617</span>]<br>qs = [<span class="hljs-number">1189933229053113361422958527792232151</span>, <span class="hljs-number">295185057334340451492588650872876746227</span>, <span class="hljs-number">88380889077762105057154017276462714444697</span>, <span class="hljs-number">43974782968656404951924524450501283426052127</span>, <span class="hljs-number">10726403821316775206273675267109184566904426261</span>, <span class="hljs-number">2714357008989072105081411295741540337141142641741</span>, <span class="hljs-number">576581905150085393327734090419529952232186498060949</span>, <span class="hljs-number">140758317578347635848563045232314610161039815135897421</span>, <span class="hljs-number">41680117092754807988080699273322244961911189757589699867</span>, <span class="hljs-number">9419832152875820180139633405089278278408407453522978357309</span>, <span class="hljs-number">1567597041534155679238655992215022394597376421096298363211067</span>, <span class="hljs-number">367712839396521757736384350030802803477965822058616833553305103</span>, <span class="hljs-number">103424977238409568447978495499643051307907366367259219393937014631</span>, <span class="hljs-number">46014074200352892806829193743016415423205917845271691428043440245531</span>, <span class="hljs-number">12445294229358634680867170058509842935273054334385354032543323581223253</span>, <span class="hljs-number">3200631836176555526009533059891690177091538103904679780020639896015937897</span>, <span class="hljs-number">317277895959173163347650321012213555955385929418622006880521870012130207557</span>, <span class="hljs-number">104379442774418262390337411577160146519860415840398189010112686742489182665577</span>, <span class="hljs-number">26984206512970181742033712455904984758134288864531714209886622060356697128804201</span>, <span class="hljs-number">5467527956822382309398095704409409074818664888285375307055715842283183939297839923</span>, <span class="hljs-number">1692196606246085729483398884059069884182535824953762329164855466589577530953493347747</span>, <span class="hljs-number">428750921047556327595864876619292414694543668237320723518704707914310601565770504401619</span>, <span class="hljs-number">212549643149353357950643557614966235999942509894271006476145929120541407503538644651435909</span>, <span class="hljs-number">59471978701477648587546053450213894562580907285714122639903144859545186463681183925646967041</span>, <span class="hljs-number">15115713372931874518523751684548940147062395364112500028355694776530968944848166318295947674571</span>, <span class="hljs-number">7541333580839789645678699855290145212677767915429008863004397257213367753100058966625356835737037</span>, <span class="hljs-number">1086686910531802445146659484012613083647370307628438760118376029969836222533970554565751069314622539</span>]<br>ns = [<span class="hljs-number">1134876149917575363176366704410565158549594427794901202977560677131703617</span>, <span class="hljs-number">68506321231437453734007374706367120760326482177047006099953454136095248103663</span>, <span class="hljs-number">7783503593765446343363083302704731608384677185199537317445372251030064778965500447</span>, <span class="hljs-number">1070135687488356161164202697449500843725645617129661751744246979913699130211505096520493</span>, <span class="hljs-number">84012402115704505952834528733063574032699054524475028392540927197962976150657887637275643641</span>, <span class="hljs-number">4497278582433699034700211877087309784829036823057043402314297478185216205338241432310114079123771</span>, <span class="hljs-number">222438508972972285373674471797570608108219830357859030918870564627162064662598790037437036093579139489</span>, <span class="hljs-number">19116847751264029874551971240684579996570601026679560309305369168779130317938356692609176166515369250878437</span>, <span class="hljs-number">1549903986709797721131070830901667744892392382636347158789834851868638863292232718716074359148785900673192362699</span>, <span class="hljs-number">62387766690725996279968636478698222263235233511074646032501495855928095611796694112573478405813305623307157261619643</span>, <span class="hljs-number">1496134688150941811618178638810353297864345150241986530472328508974364124440160181353848429438725939837967063441528305921</span>, <span class="hljs-number">128744123633657656499069966444992201456797762973822340505291131642660343436783413140023509983315177426811890315424928661125061</span>, <span class="hljs-number">6917342652058596217869122177298094984415751234677039849514181349685079073411591975537016273056773954075238307918266361998553646469</span>, <span class="hljs-number">1999306851167477770905800721615579416365273707414308684419794311809177595829473632853128686208533753019224536487399393397120864878000113</span>, <span class="hljs-number">138594056023048386926766329537127538558164718841925506735112367176642328352257472034381662493666299220910783237918231719166519833124529218331</span>, <span class="hljs-number">8397272388904583425531462714999219642572091279898695377838194583995214737828538895164195817973441184775814069396690436662985593377966417476040659</span>, <span class="hljs-number">83372889332166088651413254885376085265561130214754686361784964744744711092668473281132249352040520639092871294276293287744276919265091479681667169671</span>, <span class="hljs-number">10684953914628370830889219903654707140968094024767031366624595731918523435466123514094659595357231410471738736952266383928737163485550013190959149252435167</span>, <span class="hljs-number">428359134899960532964729749713513106760306719712194950954567619156985067322564731294653991204666853689688900339268764469280769569535109069729404621290809120793</span>, <span class="hljs-number">24491413133428851306933688733518898516890217803647806829002775935975741568422047344206442746983871735723486865901743352102305801200224958166496937663406627341150101</span>, <span class="hljs-number">2247517335600310176909964109060502815240207684510918447209767597511414934626668616704865548059751008841620288545344598917362752622130186820039265603312354963258673860579</span>, <span class="hljs-number">157978379942536176944325875241196121764116712487226808271002140500926678942090491383544034591205964958130852055691446362753906164711087278555153881606839791499207025307202087</span>, <span class="hljs-number">43938571869497484913682975192955012614794498816057204091016374302341854100775132924321569876797699342959191646206571444845883942305710956894334106963321644724361549027630634869933</span>, <span class="hljs-number">2609065298534470914730686454716224905333131812890643378630636043224255484662185236061585264231004975072801053316107165770342161619265243081616632312934742288262985830181883449780965531</span>, <span class="hljs-number">222235907202454132555071455958700740228567465616560859711214102245461514428187391909176054661864893645713338391509536653547350134615807194339839952004333949540567943568810413945779642106201</span>, <span class="hljs-number">44890472824427626252451120059527486677662371033945481542195354255473403815853320591468917295474578271680865394304946847791535710766947049195816261224382109115684638995528332538466194474846836399</span>, <span class="hljs-number">1062789633774349417938788353001516763303743389381120380522262327123099728631034935663418832664265833959487018276693680850987382421521055508477988016246558095545925414048663082368488342633334571240563</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">solve</span>(<span class="hljs-params">ii, ci</span>):<br>    pi, qi = ps[ii], qs[ii]<br>    R.&lt;x&gt; = Zmod(pi)[]<br>    f = x ^ e - ci<br>    f = f.monic()<br>    mp = f.roots()<br><br>    R.&lt;x&gt; = Zmod(qi)[]<br>    f = x ^ e - ci<br>    f = f.monic()<br>    mq = f.roots()<br><br>    solution = []<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> mp:<br>        <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> mq:<br>            mi = crt([<span class="hljs-built_in">int</span>(x[<span class="hljs-number">0</span>]), <span class="hljs-built_in">int</span>(y[<span class="hljs-number">0</span>])], [pi, qi])<br>            <span class="hljs-keyword">if</span> ii != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> mi &lt; ns[ii - <span class="hljs-number">1</span>]:<br>                solution.append(mi)<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;No.<span class="hljs-subst">&#123;ii&#125;</span> x = <span class="hljs-subst">&#123;x&#125;</span>, y = <span class="hljs-subst">&#123;y&#125;</span>&#x27;</span>)<br>            <span class="hljs-keyword">elif</span> n2s(<span class="hljs-built_in">int</span>(mi)).startswith(<span class="hljs-string">b&#x27;DASCTF&#x27;</span>):<br>                <span class="hljs-built_in">print</span>(n2s(<span class="hljs-built_in">int</span>(mi)))<br>                <span class="hljs-keyword">return</span><br>                <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> solution:<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">for</span> cc <span class="hljs-keyword">in</span> solution:<br>        solve(ii - <span class="hljs-number">1</span>, cc)<br><br>solve(<span class="hljs-built_in">len</span>(ns)-<span class="hljs-number">1</span>, c)<br></code></pre></td></tr></table></figure><p>(为了做这道题，花了一晚上搞清楚如何使用sagemath以及调用python库，不过下了Crypto库但还是调用不了😣，不过挺值得的😁)</p><hr><p>一些开根算法：</p><ul><li><p>Tonelli-Shanks algorithm（开平方根）</p><p><a href="https://rosettacode.org/wiki/Tonelli-Shanks_algorithm#Python">Tonelli-Shanks algorithm - Rosetta Code</a>(代码)</p><p><a href="https://handwiki.org/wiki/Tonelli%E2%80%93Shanks_algorithm#cite_note-dickson-3">Tonelli–Shanks algorithm - HandWiki</a>（理论）</p><p><a href="https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm%EF%BC%88%E7%90%86%E8%AE%BA%EF%BC%89">https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm（理论）</a></p></li><li><p>Rabin</p><p><a href="https://blog.csdn.net/qq_43698421/article/details/107452334">Rabin加密算法_Dragon Liu的博客-CSDN博客_rabin算法</a></p></li><li><p>AMM</p><p><a href="https://arxiv.org/pdf/1111.4877.pdf">1111.4877.pdf (arxiv.org)</a>(理论)</p><p>[RSA&#x2F;rth-root extraction at master · mad-jcbx&#x2F;RSA (github.com)](<a href="https://github.com/mad-jcbx/RSA/blob/master/rth-root">https://github.com/mad-jcbx/RSA/blob/master/rth-root</a> extraction)(代码)</p></li><li><p>以及上面介绍的那个本人未实现开根算法。</p></li></ul><h1 id="CVE-OF-RSA"><a href="#CVE-OF-RSA" class="headerlink" title="CVE OF RSA"></a>CVE OF RSA</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> socketserver<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Task</span>(socketserver.BaseRequestHandler):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">_recvall</span>(<span class="hljs-params">self</span>):<br>        BUFF_SIZE = <span class="hljs-number">2048</span><br>        data = <span class="hljs-string">b&#x27;&#x27;</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            part = self.request.recv(BUFF_SIZE)<br>            data += part<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(part) &lt; BUFF_SIZE:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> data.strip()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send</span>(<span class="hljs-params">self, msg, newline=<span class="hljs-literal">True</span></span>):<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> newline:<br>                msg += <span class="hljs-string">b&#x27;\n&#x27;</span><br>            self.request.sendall(msg)<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">recv</span>(<span class="hljs-params">self, prompt=<span class="hljs-string">b&#x27;[-] &#x27;</span></span>):<br>        self.send(prompt, newline=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">return</span> self._recvall()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">special_rsa</span>(<span class="hljs-params">self</span>):<br>        kbits = <span class="hljs-number">37</span><br>        abit = <span class="hljs-number">62</span><br>        M = <span class="hljs-number">962947420735983927056946215901134429196419130606213075415963491270</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            k = getRandomNBitInteger(kbits)<br>            a = getRandomNBitInteger(abit)<br>            p = k * M + <span class="hljs-built_in">pow</span>(<span class="hljs-number">0x10001</span>, a, M)<br>            <span class="hljs-keyword">if</span> isPrime(p):<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            l = getRandomNBitInteger(kbits)<br>            b = getRandomNBitInteger(abit)<br>            q = l * M + <span class="hljs-built_in">pow</span>(<span class="hljs-number">0x10001</span>, b, M)<br>            <span class="hljs-keyword">if</span> isPrime(q):<br>                <span class="hljs-keyword">break</span><br>        n = p * q<br>        self.send(<span class="hljs-string">b&#x27;n = &#x27;</span> + <span class="hljs-built_in">str</span>(n).encode())<br>        flag = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>).read()<br>        m = bytes_to_long(flag)<br>        c = <span class="hljs-built_in">pow</span>(m, <span class="hljs-number">0x10001</span>, n)<br>        self.send(<span class="hljs-string">b&#x27;c = &#x27;</span> + <span class="hljs-built_in">str</span>(c).encode())<br>        self.request.close()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">handle</span>(<span class="hljs-params">self</span>):<br>        self.special_rsa()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadedServer</span>(socketserver.ThreadingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ForkedServer</span>(socketserver.ForkingMixIn, socketserver.TCPServer):<br>    <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    HOST, PORT = <span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, <span class="hljs-number">9999</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;HOST:POST &quot;</span> + HOST + <span class="hljs-string">&quot;:&quot;</span> + <span class="hljs-built_in">str</span>(PORT))<br>    server = ForkedServer((HOST, PORT), Task)<br>    server.allow_reuse_address = <span class="hljs-literal">True</span><br>    server.serve_forever()<br></code></pre></td></tr></table></figure><p>$p,q$生成方式如下<br>$$<br>p &#x3D; k * M + 65537^a\ %M\<br>q &#x3D; l * M + 65537^b\ %M<br>$$<br>找到了相应的论文，嗯……写不出代码来😅。</p><p><a href="https://acmccs.github.io/papers/p1631-nemecA.pdf">The Return of Coppersmith’s Attack:Practical Factorization of Widely Used RSA Moduli (acmccs.github.io)</a></p><p>复现后才知道这是ROCA(Return of Coppersmith’s Attack)漏洞。<u>简单转述一下就是，一些硬件采用以上方法快速产生RSA的私钥，这样产生的公钥$n$会带有一个指纹，但由于$M$是光滑数，这个指纹可以很快被攻击者确定，从而分解$n$。</u>（from 4xwi11）</p><p>同样也找到了一个密码攻击脚本的仓库<a href="https://github.com/jvdsn/crypto-attacks">jvdsn&#x2F;crypto-attacks</a>（挺不错的，有时间得好好拜读）</p><p>运行过程就参考4xwi11师傅的吧，我并没有搞定在python中使用sage库。</p><hr><p>总结：</p><ul><li>能确定攻击方式，但却写不出好的脚本，有待提高。</li><li>发现一些大佬的博客我都有收藏，但却几乎不怎么阅读过。</li><li>找到了有关密码攻击脚本的仓库，太棒了。</li><li>python上使用sage库还是没有解决😑</li></ul><hr><p>参考：</p><p><a href="https://4xwi11.github.io/posts/9171e9d7/#special-rsa">20220423-DAS-FATE-CryptoSec | 4XWi11的博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RSA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>starctf2022</title>
    <link href="/2022/04/20/starctf2022/"/>
    <url>/2022/04/20/starctf2022/</url>
    
    <content type="html"><![CDATA[<h1 id="ezRSA"><a href="#ezRSA" class="headerlink" title="ezRSA"></a>ezRSA</h1><p>附件： <a href="ezRSA.zip">ezRSA.zip</a> </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> getStrongPrime<br><span class="hljs-keyword">from</span> gmpy <span class="hljs-keyword">import</span> next_prime<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> getrandbits<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><br>p=getStrongPrime(<span class="hljs-number">1024</span>)<br>q=next_prime(p^((<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">900</span>)-<span class="hljs-number">1</span>)^getrandbits(<span class="hljs-number">300</span>))<br>n=p*q<br>e=<span class="hljs-number">65537</span><br><br>m=<span class="hljs-built_in">int</span>(flag.encode(<span class="hljs-string">&#x27;hex&#x27;</span>),<span class="hljs-number">16</span>)<br><span class="hljs-keyword">assert</span> m&lt;n<br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(n))<br><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(c))<br></code></pre></td></tr></table></figure><p>一道相似的题目，虽有所改动，但可以参考一下：</p><p><a href="https://www.nevi.dev/2022/03/20/writeup-zer0pts-ctf-2022/#anti-fermat-crypto-warmup">Writeup: zer0pts CTF 2022 - nevi.dev</a></p><p>分析一下题目，有用的关键信息是<code>q=next_prime(p^((1&lt;&lt;900)-1)^getrandbits(300))</code>。</p><p>从中我们可以知道解题的方向是从bit出发并且目的是分解$n$。通过上式将$p,q$分为三部分，高124bits相同，中间600bits相反，低300bits是无法预测的。</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031027154.png"/><p>所以我们将求解$p,q$的步骤分为3步：</p><ol><li><p>求$p,q$的高124bits。</p><p>由$p$生成$q$的步骤只是改变了低900bits，由于$p,q$是大数，而且开平方根的误差大概率会出现在低位，因此我们可以对$n$开平方根取其高124bits即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">ph = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">bin</span>(gmpy2.iroot(n,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>])[<span class="hljs-number">2</span>:<span class="hljs-number">126</span>],<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure></li><li><p>求$p,q$的中间600bits。</p><p>我们令$p$的低900bits最大化，即每个bit位全为1，令$q$的低900bits最小化，即每个bit位全为0。这样也的话中间600bits正好是相反的。</p><p>之后我们对$p,q$的中间600bits的从高到低同时与1进行异或，这样可以保证中间600bits仍是相反的。期间对得到的$p,q$之积与$n$进行比较，小的话就更新$p,q$的值，最终得到中间600bits。</p><p>那为什么这样做呢？</p><p>我们知道两个数在和不变的情况下，只有当这两个数相等时乘积才能最大化。</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031027657.png"/><p>现在$p$是最大的，$q$是最小的，$p+q$是固定的，$p*q&lt;n$说明$p$太大了，$q$太小了，于是更改$p,q$的对应bit位（做到了$p$增加了相应的量，$q$减少了相应的量）。大于的情况就不说明了。（感觉有点废话了，说的有点过于详细以至于有点……）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">ph = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">bin</span>(gmpy2.iroot(n,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>])[<span class="hljs-number">2</span>:<span class="hljs-number">126</span>],<span class="hljs-number">2</span>)<br>p = (ph&lt;&lt;<span class="hljs-number">900</span>)^((<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">900</span>)-<span class="hljs-number">1</span>)^((<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">300</span>)-<span class="hljs-number">1</span>)<br>q = ph&lt;&lt;<span class="hljs-number">900</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">899</span>, <span class="hljs-number">300</span>, -<span class="hljs-number">1</span>):<br>    cur = <span class="hljs-number">1</span>&lt;&lt;i<br>    <span class="hljs-keyword">if</span> (p ^ cur) * (q ^ cur) &lt; n:<br>        p ^= cur<br>        q ^= cur<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;highp = <span class="hljs-subst">&#123;p&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;highq = <span class="hljs-subst">&#123;q&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure></li><li><p>求$p$或$q$的低300bits。</p><p>知道了$p$或$q$高位，求其低位，于是可以用small_roots()求解了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">highp = <span class="hljs-number">170966211863977623201944075700366958395158791305775637137148430402719914596268969449870561801896130406088025694634815584789789278534177858182071449441084789053688828370314062664371344767976558822028720769455584351917211545467432347213218207146202261834961563977909337587431826932558897962855935319930935705600</span><br>n = <span class="hljs-number">29229445599118483001701466306458274418313207587536209963238059476868917454504410032112597117546615733598387274665904107870896556998881063494600049216084775281584147609749667294182462818941181246561319625259137178286553974862986352158857172427903588054746932151579636584132759169528954347728678147797597780996214188968831836400285920685337294608990778009074569367505456248478822993714411937836237079928768898433354626698856023139709607246825672149802133458391862603953992754636020632951723690379324712160511376119409228990756977864084382454893999090811914709514495628598844102290648843131526073812299407141152746828211</span><br>c = <span class="hljs-number">0xd7f6c90512bc9494370c3955ff3136bb245a6d1095e43d8636f66f11db525f2063b14b2a4363a96e6eb1bea1e9b2cc62b0cae7659f18f2b8e41fca557281a1e859e8e6b35bd114655b6bf5e454753653309a794fa52ff2e79433ca4bbeb1ab9a78ec49f49ebee2636abd9dd9b80306ae1b87a86c8012211bda88e6e14c58805feb6721a01481d1a7031eb3333375a81858ff3b58d8837c188ffcb982a631e1a7a603b947a6984bd78516c71cfc737aaba479688d56df2c0952deaf496a4eb3f603a46a90efbe9e82a6aef8cfb23e5fcb938c9049b227b7f15c878bd99b61b6c56db7dfff43cd457429d5dcdb5fe314f1cdf317d0c5202bad6a9770076e9b25b1</span><br>e = <span class="hljs-number">65537</span><br><br>R.&lt;x&gt; = PolynomialRing(Zmod(n))<br>f = highp+x<br>x0 = f.small_roots(X=<span class="hljs-number">2</span>**<span class="hljs-number">450</span>,beta = <span class="hljs-number">0.4</span>)[<span class="hljs-number">0</span>]<span class="hljs-comment">#适当提高点x的范围</span><br>p = f(x0)<br>q = n//<span class="hljs-built_in">int</span>(p)<br><span class="hljs-built_in">print</span>(p)<br><span class="hljs-built_in">print</span>(q)<br>d = inverse_mod(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>m = <span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(m)<br></code></pre></td></tr></table></figure><p>（哦，对了！因为我写成small_roots(x &#x3D; 2**450)导致报错了，但给出的报错信息是<code>list index out of range</code>，还以为是没有解呢。）</p></li></ol><p>分析完毕，整体代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#python</span><br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>e = <br>n = <br>c = <br><br>ph = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">bin</span>(gmpy2.iroot(n,<span class="hljs-number">2</span>)[<span class="hljs-number">0</span>])[<span class="hljs-number">2</span>:<span class="hljs-number">126</span>],<span class="hljs-number">2</span>)<span class="hljs-comment">#高124bits相同</span><br>p = (ph&lt;&lt;<span class="hljs-number">900</span>)^((<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">900</span>)-<span class="hljs-number">1</span>)^((<span class="hljs-number">1</span>&lt;&lt;<span class="hljs-number">300</span>)-<span class="hljs-number">1</span>)<br>q = ph&lt;&lt;<span class="hljs-number">900</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">899</span>, <span class="hljs-number">300</span>, -<span class="hljs-number">1</span>):<br>    cur = <span class="hljs-number">1</span>&lt;&lt;i<br>    <span class="hljs-keyword">if</span> (p ^ cur) * (q ^ cur) &lt; n:<br>        p ^= cur<br>        q ^= cur<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;highp = <span class="hljs-subst">&#123;p&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;highq = <span class="hljs-subst">&#123;q&#125;</span>&#x27;</span>)<br><span class="hljs-comment">#sage</span><br>highp = <br>n = <br>e = <br><br>R.&lt;x&gt; = PolynomialRing(Zmod(n))<br>f = highp+x<br>x0 = f.small_roots(X=<span class="hljs-number">2</span>**<span class="hljs-number">450</span>,beta = <span class="hljs-number">0.4</span>)[<span class="hljs-number">0</span>]<span class="hljs-comment">#适当提高点x的范围</span><br>p = f(x0)<br>q = n//<span class="hljs-built_in">int</span>(p)<br><span class="hljs-built_in">print</span>(p)<br><span class="hljs-built_in">print</span>(q)<br>d = inverse_mod(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>m = <span class="hljs-built_in">pow</span>(c,d,n)<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-comment">#python</span><br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br><span class="hljs-comment">#*CTF&#123;St.Diana_pls_take_me_with_you!&#125;</span><br></code></pre></td></tr></table></figure><hr><p>参考：</p><p><a href="https://github.com/sixstars/starctf2022">https://github.com/sixstars/starctf2022</a></p>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>格密码学习（二）</title>
    <link href="/2022/04/19/%E6%A0%BC%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <url>/2022/04/19/%E6%A0%BC%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>本文主要通过分析一些例题来学习格。</p><hr><h1 id="NTRU"><a href="#NTRU" class="headerlink" title="NTRU"></a>NTRU</h1><p>摘自Lazzaro</p><p>三个整数参数$(N,p,q)$和四个次数为$N-1$得整数多项式集合 $L_f,L_g,L_φ,L_m$。$N$为素数，$p,q$可以是合数，但要求$gcd(p,q) &#x3D; 1$，且$q$远大于$p$。</p><p>NTRU工作于多项式整数环$R &#x3D; Z[x]&#x2F;(x^N-1)$，当$F∈R$时，可以把$F$表示为多项式或向量形式：<br>$$<br>F&#x3D;\sum_{i&#x3D;0}^{N-1}{F_ix^i}&#x3D;[F_0,F_1,…,F_{N-1}]<br>$$<br>选取三个确定的整数$d_f,d_g,d_φ$，多项式集合$L_f&#x3D;L(d_f,d_{f-1}),L_g&#x3D;L(d_g,d_g),L_φ&#x3D;L(d_φ,d_φ)$，而$L_m&#x3D;{m∈R|m的系数位于区间[-\dfrac{p-1}{2},\dfrac{p-1}{2}],其中p为素数}$。</p><ul><li><p>密钥生成</p><p>选择多项式$f$和$g$，$f∈L_f$，$g∈L_g$。要求$f$关于模$p$和模$q$的逆元$F_p$，$F_q$都存在，否则重新选取$f$。</p></li><li><p>加密</p><p>A发送的消息$m∈L_m$，根据参数$d_φ$随机选取一个$φ∈L_φ$，利用公钥$h$计算<br>$$<br>c ≡ φ*h+m\quad(mod\ q)<br>$$<br>A把密文c发给了B。</p></li><li><p>解密</p><p>B收到密文c后，利用私钥$f$计算<br>$$<br>a≡f*c\quad(mod\ q)<br>$$<br>选择a的系数位于$[-\dfrac{p-1}{2},\dfrac{p-1}{2}]$之间，计算<br>$$<br>b≡a\quad(mod\ p)\<br>m≡F_p*b\quad(mod\ p)<br>$$<br>多项式m即是明文。</p></li></ul><p>例题：</p><p>巅峰极客线上赛的一道密码题NTURE。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate</span>():<br>    p = getStrongPrime(<span class="hljs-number">2048</span>)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        f = getRandomNBitInteger(<span class="hljs-number">1024</span>)<br>        g = getStrongPrime(<span class="hljs-number">768</span>)<br>        h = gmpy2.invert(f, p) * g % p<br>        <span class="hljs-keyword">return</span> (p, f, g, h)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt</span>(<span class="hljs-params">plaintext, p, h</span>):<br>    m = bytes_to_long(plaintext)<br>    r = getRandomNBitInteger(<span class="hljs-number">1024</span>)<br>    c = (r * h + m) % p<br>    <span class="hljs-keyword">return</span> c<br><br><br>p, f, g, h = generate()<br>c = encrypt(flag, p, h)<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;cipher.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    f.write(<span class="hljs-string">&quot;h = &quot;</span> + <span class="hljs-built_in">str</span>(h) + <span class="hljs-string">&quot;\n&quot;</span>)<br>    f.write(<span class="hljs-string">&quot;p = &quot;</span> + <span class="hljs-built_in">str</span>(p) + <span class="hljs-string">&quot;\n&quot;</span>)<br>    f.write(<span class="hljs-string">&quot;c = &quot;</span> + <span class="hljs-built_in">str</span>(c) + <span class="hljs-string">&quot;\n&quot;</span>)<br></code></pre></td></tr></table></figure><p><a href="https://xz.aliyun.com/t/7163">从一道CTF题初探NTRU格密码 - 先知社区 (aliyun.com)</a>中有非常详细的解析。（大可不必继续往下翻）</p><p>根据题目有<br>$$<br>\begin{align}<br>h &#x3D; f_p*g\quad (mod\ p) \tag{1}\\<br>c &#x3D; r*h+m\quad (mod\ p) \tag{2}<br>\end{align}<br>$$<br>(2)式等式两边同$×f$，得<br>$$<br>c*f &#x3D; r*g + m*f\quad (mod\ p)\tag{3}<br>$$<br>分析各个数的bit：</p><p>(贴过来)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">r</span>：<span class="hljs-number">1024</span>bit<br><span class="hljs-attribute">g</span>：<span class="hljs-number">768</span>bit<br><span class="hljs-attribute">m</span>：flag字符串转成数字，一个字符<span class="hljs-number">8</span>bit，一般来说flag不会太长，所以基本上是小<span class="hljs-number">1000</span>bit的。<br><span class="hljs-attribute">f</span>：<span class="hljs-number">1024</span>bit<br><span class="hljs-attribute">p</span>：<span class="hljs-number">2048</span>bit<br></code></pre></td></tr></table></figure><p>发现$r*g + m*f$小于$p$，故令$a &#x3D; c*f%p$，则有等式<br>$$<br>a &#x3D; r*g+m*f\tag{4}<br>$$<br>(4)式对g取模得<br>$$<br>a &#x3D; m*f\quad(mod\ g)\tag{5}<br>$$<br>很可惜，我们并不知道$f,g$。</p><p>这里就需要用到格了。</p><p>我们已知$h,p,c$，要求$f,g$。</p><p>如何构造呢？以下是我的初步理解（可能有误）：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">利用关系等式、已知量以及常量构造格（矩阵），通过矩阵变化求出含f,g的矩阵。<br>求解未知数的个数一般是矩阵的行和列。<br></code></pre></td></tr></table></figure><p>那么就有：</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm">构造<span class="hljs-number">2</span>×<span class="hljs-number">2</span>的矩阵M<br>矩阵<span class="hljs-keyword">B</span> = [f,g]为我们的最终结果<br></code></pre></td></tr></table></figure><p>根据关系等式(1)，改写得$f*h &#x3D; g\quad(mod\ p)$，进一步有$f*h &#x3D; g + k*p$，将$k*p$移至等式左边得$g &#x3D; f*h-k*p$。</p><p>很显然，$f,g,p$之间存在关系，将矩阵$B &#x3D; [f,g]$化成$[f,f*h-k*p]$，讨论它是由怎样一个2×2的矩阵$M$得来的以及如何得到的。</p><p>易知$[f,g]$是由一个1×2的矩阵$A$乘一个2×2的矩阵$M$得来的。反推一下，就有$A &#x3D; [f,-k]$，$M&#x3D;\left[\matrix{1&amp;h\\0&amp;p}\right]$。</p><ol><li>因为与$f$有关的关系等式已经用来代换$g$了，所以推出$A&#x3D;[f，？]$</li><li>然后可以推出$M&#x3D;\left[\matrix{1&amp;?\\0&amp;?}\right]$</li><li>根据$B&#x3D;[f,f*h-k*p]$第二个数，可知$A &#x3D; [f,-k]$，$M&#x3D;\left[\matrix{1&amp;h\\0&amp;p}\right]$。</li></ol><p>（可能向量维度一高，逆向分析就很难了）</p><p>但好在接这类题目有通用矩阵</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031040179.png"/><p>继续分析，求出的矩阵$B &#x3D; [f,g]$为什么就是最短向量呢？</p><p><code>Gaussian heurstic</code>：</p><p>以及<img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031040878.png"/></p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031041704.png"/><p>可知，在这个M中最短向量的长度大概在$sqrt(det(M))&#x3D; sqrt(p)&#x3D;sqrt(2^{2048})&#x3D;2^{1024}$左右。</p><p>而$sqrt(det(B)) &#x3D; sqrt(\sqrt{f^2+g^2}) ≈ 2^{1024}$。</p><p>因此，很大概率上，这个$[f, g]$就是这个lattice的最短向量。</p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br>h = <span class="hljs-number">7257231567493321493497732423756001924698993879741072696808433246581786362611889417289029671240997843541696187487722285762633068287623369923457879458577466240950224087015909821079480431797917376609839097610864517760515986973340148901898582075413756737310797402537478388864632901178463429574227279668004092519322204990617969134092793157225082977967228366838748193084097651575835471869030934527383379794480007872562067799484905159381690179011192017159985260435844246766711550315143517066359521598424992244464723490166447105679062078049379153154659732304112563255058750656946353654402824529058734270363154894216317570784</span><br>p = <span class="hljs-number">23969137365202547728693945383611572667294904799854243194734466236017441545927679469239814785947383727854265554138290421827510545078908517696536495567625593439996528098119344504866817224169113920532528233185011693829122447604993468817512696036673804626830507903206709121383065701222707251053362179946170981868061834734684494881504724254812067180384269711822738708203454131838741703416329765575995359232573740932069147491776326045743679105041246906081872936901848272288949389026129761726749334006319072981386763830897454245553866145620689939497868469730297795063648030738668273210516497399954626983672357236110363894081</span><br>c = <span class="hljs-number">6388077150013017095358415295704360631706672647932184267739118115740221804173068089559645506533240372483689997499821300861865955720630884024099415936433339512125910973936154713306915269365877588850574948033131161679256849814325373882706559635563285860782658950169507940368219930971600522754831612134153314448445006958300840618894359885321144158064446236744722180819829183828290798747455324761671198097712539900569386477647697973195787663298318786718012522378981137877863153067057280649127202971806609339007027052518049995341356359016898069863799529357397514218249272201695539181908803360181347114492616706419618151757</span><br><br>m = matrix([[<span class="hljs-number">1</span>,h],[<span class="hljs-number">0</span>,p]])<br>shortest_vector = m.LLL()[<span class="hljs-number">0</span>]<br>f,g = shortest_vector<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;f = <span class="hljs-subst">&#123;f&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;g = <span class="hljs-subst">&#123;g&#125;</span>&#x27;</span>)<br><br>a = c*f%p%g<br>m = a*inverse_mod(f,g)%g<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;m = <span class="hljs-subst">&#123;m&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>最后long_to_bytes(m)就行了。</p><hr><p>参考：</p><p><a href="https://xz.aliyun.com/t/7163">从一道CTF题初探NTRU格密码 - 先知社区 (aliyun.com)</a></p><p><a href="https://lazzzaro.github.io/2020/11/07/crypto-%E6%A0%BC%E5%AF%86%E7%A0%81/">格密码 Lazzaro (lazzzaro.github.io)</a></p><p><a href="https://blog.csdn.net/qq_33458986/article/details/104366177">Lattices and Cryptography（格理论与密码学）</a></p>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NTRU</tag>
      
      <tag>格密码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>格密码学习（一）</title>
    <link href="/2022/04/10/%E6%A0%BC%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <url>/2022/04/10/%E6%A0%BC%E5%AF%86%E7%A0%81%E5%AD%A6%E4%B9%A0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>最近几天学习了格密码，于是写篇博客记录一下，当然其中不乏一些本人的错误理解，还望多多指正，感谢！</p><hr><p>在讲格之前，先了解一下基向量和矩阵。</p><h1 id="基"><a href="#基" class="headerlink" title="基"></a>基</h1><p>学过线性代数应该知道，一组基是由各个线性无关向量组成。</p><p>例如在直角坐标系中，任何一个向量都可以由(1，0)和（0，1）这两个向量任意组合而成，那么称这两个向量为基底向量。</p><p>三维空间中，基底向量为（1，0，0）和（0，1，0）和（0，0，1）。</p><p>扩展到n维空间，就有基底向量（1，0，0，……，0），（0，1，0，……，0），……（0，0，0，……，1）。</p><p>当然基底向量并不是唯一的，只要是一组线性无关向量，并且满足空间中任一项量能由该组向量表示，就可以称为基向量。</p><h1 id="矩阵"><a href="#矩阵" class="headerlink" title="矩阵"></a>矩阵</h1><p>矩阵可以理解为一组向量的集合，即矩阵$$A &#x3D; \{\vec{i_1}，\vec{i_2}，……,\vec{i_n}\}，$$$\vec{i_j}$为m维向量，$j∈[1,n]$。<br>$$<br>A &#x3D;\left[\matrix{\vec{i_1}\\vec{i_2}\\…\\vec{i_n} }\right]<br>&#x3D;\left[<br>\matrix{<br>  a_{11}&amp;a_{12}&amp;…&amp;a_{1m}\\<br>  a_{21}&amp;a_{22}&amp;…&amp;a_{2m}\\<br> \\…&amp;…&amp;…&amp;…\\<br>  a_{n1}&amp;a_{n2}&amp;…&amp;a_{nm}\\<br>}\right]<br>$$</p><h1 id="格"><a href="#格" class="headerlink" title="格"></a>格</h1><p>格可以理解为n维空间上的基向量的线性组合，仍可认为是一个向量，表示形式为矩阵。</p><p>举个例子：</p><p>格$L&#x3D;\{a_1\vec{r_1}+a_2\vec{r_2}+…+a_n\vec{r_n}|a_i∈Z\}$，可表示为</p><p>$$<br>L &#x3D;\left[\matrix{a_{1}&amp;a_{2}&amp;…&amp;a_{n}\}\right]<br>\left[\matrix{\vec{i_1}\vec{i_2}\…\vec{i_n} }\right]<br>&#x3D;\left[<br>\matrix{a_1\vec{r_1}+a_2\vec{r_2}+…+a_n\vec{r_n}}\right]<br>$$<br><strong>但是</strong>，并不是所有的向量都是格。（这个有点不好表述）</p><p>例如，整数格如下所示：</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031041878.png"/><p>$\vec{AC}$是整数格，但$\vec{AB}$不是整数格。</p><p>可以把格理解为某空间中特定的点，例如只能是下图当中已标好的离散的点：</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031042842.png"/><h1 id="格的Determinant"><a href="#格的Determinant" class="headerlink" title="格的Determinant"></a>格的Determinant</h1><p>格可以写成矩阵的形式，于是它的Determinant（行列式）代表其行列式的值，但一般不叫作行列式，而是组成格的向量所围成图形的面积或者体积。</p><h1 id="最短距离"><a href="#最短距离" class="headerlink" title="最短距离"></a>最短距离</h1><p>最短距离$λ$表示格中点与点之间的最短距离。<br>$$<br>λ_1 &#x3D; min||\vec{x}-\vec{y}||,\vec{x},\vec{y}∈格L,\vec{x}≠\vec{y}\\<br>&#x3D;min||\vec{x}||,\vec{x}∈格L,\vec{x}≠\vec{0},\vec{y}为原点o<br>$$<br>记$λ_i$为第i短的距离，则有$λ_1≤λ_2≤…≤λ_n$。</p><h1 id="距离函数"><a href="#距离函数" class="headerlink" title="距离函数"></a>距离函数</h1><p>任意一个点t（可以不在格L上）到最近的格点的最短距离的函数，记作$μ(t，L)$。</p><h1 id="覆盖半径"><a href="#覆盖半径" class="headerlink" title="覆盖半径"></a>覆盖半径</h1><p>以格L中所有的格点为圆心，逐渐扩大其半径，使得能覆盖整个空间，此时的半径就是覆盖半径$μ$。</p><h1 id="格密码中的一些难题"><a href="#格密码中的一些难题" class="headerlink" title="格密码中的一些难题"></a>格密码中的一些难题</h1><h2 id="最短向量问题（SVP）"><a href="#最短向量问题（SVP）" class="headerlink" title="最短向量问题（SVP）"></a>最短向量问题（SVP）</h2><p>给定格$L$中的一组基$B$，找到这组基构成的一个格点$Bx:x$，使得该格点到0坐标点的距离最近，即<br>$$<br>||\vec{Bx}|| &#x3D; λ_1<br>$$<br><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031042211.png"/></p><p>可以理解为找到一组整数$[x,y]$，使得新构成的向量<br>$$<br>\vec{Bx} &#x3D;\left[\matrix{x&amp;y\}\right]<br>\left[\matrix{\vec{a}\\vec{b}\}\right]<br>&#x3D;x\vec{a}+y\vec{b}<br>$$<br>满足$||\vec{Bx}-\vec{0}|| &#x3D; ||\vec{Bx}||&#x3D;λ_1$。</p><h2 id="最近向量问题（CVP）"><a href="#最近向量问题（CVP）" class="headerlink" title="最近向量问题（CVP）"></a>最近向量问题（CVP）</h2><p>给定<u>连续空间</u>中的任意一个点$\vec{t}$，在格空间$L$中找到一个格点$\vec{Bx}$，两点距离最短，即$||\vec{Bx}-\vec{t}||$最小，由覆盖半径定义可知，$||\vec{Bx}-\vec{t}||≤μ$。</p><h1 id="利用格进行通信"><a href="#利用格进行通信" class="headerlink" title="利用格进行通信"></a>利用格进行通信</h1><p>根据CVP，假设我们信息加密后是格点$\vec{Bx}$，然后进行噪音干扰（可以理解为加了一个向量），变成了$\vec{t}$。这样别人就很难从$\vec{t}$破解出明文。</p><h1 id="尝试分析CVP问题"><a href="#尝试分析CVP问题" class="headerlink" title="尝试分析CVP问题"></a>尝试分析CVP问题</h1><p>由于CVP在笛卡尔坐标系整数格中很好求解，只需要向上或向下取整即可，因为该空间中的基向量都是互相垂直的。故在解决没有正交基的格中，我们将其基正交化，构造出正交基，并利用正交基划分格空间，使得每个格点都在长方形的正中心，</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031043691.png"/><p>那么对任意一个非格点$\vec{t}$，求其最近向量为格点$\vec{Bx}$，它们之间的距离一定不会超过长方形对角线的一半。</p><p>从图中可以看出，在内圈中的非格点，其最近向量都在圆心处，但对于外圈中的非格点，可能存在多解问题（例如黄线上的某些点）</p><hr><p>参考：</p><p><a href="https://zhuanlan.zhihu.com/p/161411204">Lattice学习笔记01：格的简介 - 知乎 (zhihu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/161622928">Lattice学习笔记02：格中难题 - 知乎 (zhihu.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>格密码</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Midnight Sun CTF2022</title>
    <link href="/2022/04/05/Midnight%20Sun%20CTF2022/"/>
    <url>/2022/04/05/Midnight%20Sun%20CTF2022/</url>
    
    <content type="html"><![CDATA[<h1 id="Pelle’s-Rotor-Supported-Arithmetic"><a href="#Pelle’s-Rotor-Supported-Arithmetic" class="headerlink" title="Pelle’s Rotor-Supported Arithmetic"></a>Pelle’s Rotor-Supported Arithmetic</h1><p>解析：</p><ul><li><p>求n</p><p>取c &#x3D; -1，rot &#x3D; 0。有如下公式（根据e * d &#x3D; 1+k * φ(n)可知d为奇数）<br>$$<br>r &#x3D; -1^d\ mod\ n<br>$$<br>因为d为奇数<br>$$<br>r &#x3D; -1\ mod\ n<br>$$<br>又有<br>$$<br>n-1 &#x3D; -1\ mod\ n<br>$$<br>所以<br>$$<br>n &#x3D; r+1<br>$$</p></li><li><p>求d</p><p>注意到<code>oracle()</code>主要是对d进行循环移位，故可以依次求出d的每一位。</p><p>举个例子（借鉴来的）：</p><ul><li>假设d &#x3D; 314159，向服务器询问两次，为(2,0)和(2,1)。</li><li>得到$r &#x3D; 2^{314159}$和$s &#x3D; 2^{141593}$。</li><li>然后为了构建等式，把上述式子转换成$2^{3141593}$，于是有$r^{10}*2^3 &#x3D; s*2^{3*10^{6}}$。</li><li>显然，我们要求的是3，设其为x，6为d的长度，也是未知的，设其为len。故有一般式$r^{10}*2^x &#x3D; s*2^{x*10^{len}}$。</li><li>根据测试发现len为307左右，可以进行枚举。</li></ul></li><li><p>分解n</p><p>利用Wienner Attack脚本。</p></li></ul><p>(没有环境复现，如有错误的地方请指出)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>e = <span class="hljs-number">65537</span><br>sh = remote(<span class="hljs-string">&#x27;pelle-01.hfsc.tf&#x27;</span>,<span class="hljs-number">4591</span>)<br>sh.recvuntil(<span class="hljs-string">b&#x27;flag &#x27;</span>)<br>Cipher = sh.recv()[:-<span class="hljs-number">1</span>].decode()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;Cipher = <span class="hljs-subst">&#123;Cipher&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(sh.recv())<br>c_list = []<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">c,i</span>):<br>    sh.sendline(<span class="hljs-string">b&#x27;1&#x27;</span>)<br>    sh.recv()<br>    sh.sendline(<span class="hljs-built_in">str</span>(c).encode())<br>    sh.recv()<br>    sh.sendline(<span class="hljs-built_in">str</span>(i).encode())<br>    <span class="hljs-keyword">return</span> sh.recv()[:-<span class="hljs-number">1</span>].decode()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_di</span>(<span class="hljs-params"><span class="hljs-built_in">len</span>,r,s</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(<span class="hljs-built_in">len</span>, <span class="hljs-built_in">int</span>)://方便复用<br>        <span class="hljs-built_in">len</span> = [<span class="hljs-built_in">len</span>]<br>    <span class="hljs-keyword">for</span> dlen <span class="hljs-keyword">in</span> <span class="hljs-built_in">len</span>:<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>            tmp1 = <span class="hljs-built_in">pow</span>(r,<span class="hljs-number">10</span>,n)*<span class="hljs-number">2</span>**x%n<br>            tmp2 = s*<span class="hljs-built_in">pow</span>(<span class="hljs-number">2</span>,x*<span class="hljs-number">10</span>**dlen,n)%n<br>            <span class="hljs-keyword">if</span> (tmp1-tmp2)%n == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">return</span> dlen,x<br><br>n = get(-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>)+<span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;n = <span class="hljs-subst">&#123;n&#125;</span>&#x27;</span>)<br><br>ps = [get(<span class="hljs-number">2</span>,i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">315</span>)]<br><span class="hljs-built_in">len</span>, d0 = get_di([<span class="hljs-number">306</span>,<span class="hljs-number">307</span>,<span class="hljs-number">308</span>,<span class="hljs-number">309</span>],ps[<span class="hljs-number">0</span>],ps[<span class="hljs-number">1</span>])<br>di_list = [get_di(<span class="hljs-built_in">len</span>,ps[i],ps[i+<span class="hljs-number">1</span>])[<span class="hljs-number">1</span>] <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">314</span>)]<br>d = <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [d0]+di_list)[:<span class="hljs-built_in">len</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;d = <span class="hljs-subst">&#123;d&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>（嫖个脚本）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> iroot,invert<br><br>n = <span class="hljs-number">43047796890477362990074961769201922093931501549521114743916627406636416622979445051218421149675256799232393301700370094540087679119082880899747691935251456178408503271262210863920917237676311115019888447360967178340255706657371448083420218420057544839628399548904356647638728064251771091862957676254700954117</span><br>e = <span class="hljs-number">27674287480195801722658014392785989313845949971533997686660899124104025285859437857972359428690936714607919108095274315625722478853856599143509311634893475488768721169431521077251366133165140420429800291880801747490176817398575093644983093206936398362605552523502972162034264567777255223024221794336695299713</span><br> <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">wienerAttack</span>(<span class="hljs-params">_e, _n</span>):<br>    con_frac = continued_fraction(_e / _n)<br>    conv = con_frac.convergents()<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> conv:<br>        k, dg = _.numerator(), _.denominator()<br>        <span class="hljs-keyword">if</span> k == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> dg == <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">continue</span><br>        _phi = _e * dg // k<br>        <span class="hljs-keyword">if</span> (_n - _phi + <span class="hljs-number">1</span>) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> iroot(<span class="hljs-built_in">abs</span>(<span class="hljs-built_in">pow</span>((_n - _phi + <span class="hljs-number">1</span>) // <span class="hljs-number">2</span>, <span class="hljs-number">2</span>) - _n), <span class="hljs-number">2</span>)[<span class="hljs-number">1</span>]:<br>            delta = (_phi - _n - <span class="hljs-number">1</span>) ** <span class="hljs-number">2</span> - <span class="hljs-number">4</span> * _n<br>            _p = (_n + <span class="hljs-number">1</span> - _phi - <span class="hljs-built_in">int</span>(iroot(delta, <span class="hljs-number">2</span>)[<span class="hljs-number">0</span>])) // <span class="hljs-number">2</span><br>            _q = _n // _p<br>            <span class="hljs-keyword">assert</span> _n % _q == <span class="hljs-number">0</span><br>            <span class="hljs-keyword">return</span> _p, _q<br><br>p, q = wienerAttack(e, n)<br><span class="hljs-built_in">print</span>(p)<br><span class="hljs-built_in">print</span>(q)<br></code></pre></td></tr></table></figure><hr><p>参考：</p><p><a href="https://github.com/Neobeo/Midnight-Sun">Neobeo&#x2F;Midnight-Sun (github.com)</a></p>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2022DASCTF X SU 三月春季挑战赛</title>
    <link href="/2022/03/28/2022DASCTF%20X%20SU%20%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/"/>
    <url>/2022/03/28/2022DASCTF%20X%20SU%20%E4%B8%89%E6%9C%88%E6%98%A5%E5%AD%A3%E6%8C%91%E6%88%98%E8%B5%9B/</url>
    
    <content type="html"><![CDATA[<h1 id="FlowerCipher"><a href="#FlowerCipher" class="headerlink" title="FlowerCipher"></a>FlowerCipher</h1><p>显然已知<br>$$<br>\begin{cases}<br>L_{n} &#x3D; R_{n-1}+L_{n-1}(k[i]^3+r_n)<br>\<br>R_n &#x3D; L_{n-1}<br>\end{cases}<br>$$<br>转换得<br>$$<br>L_{n} &#x3D; R_{n-1}+R_{n}(k[i]^3+r_n)<br>$$<br>已知$L_{n},R_{n}$，对上式进行模运算可得$R_{n-1}$，$L_{n-1}$为$R_{n}$，反复上述运算直到$L&#x3D;1\quad or\quad R &#x3D; 0  $，求得全部$k[i]^3+r_n$。</p><p>由于上式包含随机数，但随机数的范围很小。通过计算字符’0’~’f’的ASCII码的立方，它们之间的差大于4096，也就是说随机数的影响可以忽略不计，直接开立方根即可得到$k[i]$。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><br>L = <span class="hljs-number">15720197268945348388429429351303006925387388927292304717594511259390194100850889852747653387197205392431053069043632340374252629529419776874410817927770922310808632581666181899</span><br>R = <span class="hljs-number">139721425176294317602347104909475448503147767726747922243703132013053043430193232376860554749633894589164137720010858254771905261753520854314908256431590570426632742469003</span><br><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">while</span> L != <span class="hljs-number">1</span>:<br>    pre_R = L%R<br>    tmp = (L-pre_R)//R<br>    k = gmpy2.iroot(tmp,<span class="hljs-number">3</span>)[<span class="hljs-number">0</span>]<br>    flag += <span class="hljs-built_in">chr</span>(k)<br>    L = R<br>    R = pre_R<br><br><span class="hljs-built_in">print</span>(flag[::-<span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>红明谷杯2022</title>
    <link href="/2022/03/23/%E7%BA%A2%E6%98%8E%E8%B0%B7%E6%9D%AF2022/"/>
    <url>/2022/03/23/%E7%BA%A2%E6%98%8E%E8%B0%B7%E6%9D%AF2022/</url>
    
    <content type="html"><![CDATA[<h1 id="easy-ya"><a href="#easy-ya" class="headerlink" title="easy_ya"></a>easy_ya</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> flag <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">gen</span>():<br>    e = <span class="hljs-number">3</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-keyword">try</span>:<br>            p = getPrime(<span class="hljs-number">512</span>)<br>            q = getPrime(<span class="hljs-number">512</span>)<br>            n = p*q<br>            phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>            d = inverse(e,phi)<br>            <span class="hljs-keyword">return</span> p,q,d,n,e<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">return</span><br>p,q,d,n,e = gen()<br>r = getPrime(<span class="hljs-number">512</span>)<br>m = bytes_to_long(flag+os.urandom(<span class="hljs-number">32</span>))<br>M = m%r<br>c = <span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;r = %d&quot;</span>%r)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;M = %d&quot;</span>%M)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;n = %d&quot;</span>%n)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;e = %d&quot;</span>%e)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;c = %d&quot;</span>%c)<br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">r = 7996728164495259362822258548434922741290100998149465194487628664864256950051236186227986990712837371289585870678059397413537714250530572338774305952904473</span><br><span class="hljs-string">M = 4159518144549137412048572485195536187606187833861349516326031843059872501654790226936115271091120509781872925030241137272462161485445491493686121954785558</span><br><span class="hljs-string">n = 131552964273731742744001439326470035414270864348139594004117959631286500198956302913377947920677525319260242121507196043323292374736595943942956194902814842206268870941485429339132421676367167621812260482624743821671183297023718573293452354284932348802548838847981916748951828826237112194142035380559020560287</span><br><span class="hljs-string">e = 3</span><br><span class="hljs-string">c = 46794664006708417132147941918719938365671485176293172014575392203162005813544444720181151046818648417346292288656741056411780813044749520725718927535262618317679844671500204720286218754536643881483749892207516758305694529993542296670281548111692443639662220578293714396224325591697834572209746048616144307282</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>很容易看出这是已知m低位求高位的coppersmith。<br>$$<br>M&#x3D; m\ mod\ r \quad&#x3D;&#x3D;&gt;\quad m &#x3D; x*r + M \\<br>$$</p><p>转换成<br>$$<br>c &#x3D; (x*r + M)^e\ mod\ n<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br>r = <span class="hljs-number">7996728164495259362822258548434922741290100998149465194487628664864256950051236186227986990712837371289585870678059397413537714250530572338774305952904473</span><br>M = <span class="hljs-number">4159518144549137412048572485195536187606187833861349516326031843059872501654790226936115271091120509781872925030241137272462161485445491493686121954785558</span><br>n = <span class="hljs-number">131552964273731742744001439326470035414270864348139594004117959631286500198956302913377947920677525319260242121507196043323292374736595943942956194902814842206268870941485429339132421676367167621812260482624743821671183297023718573293452354284932348802548838847981916748951828826237112194142035380559020560287</span><br>e = <span class="hljs-number">3</span><br>c = <span class="hljs-number">46794664006708417132147941918719938365671485176293172014575392203162005813544444720181151046818648417346292288656741056411780813044749520725718927535262618317679844671500204720286218754536643881483749892207516758305694529993542296670281548111692443639662220578293714396224325591697834572209746048616144307282</span><br>R.&lt;x&gt; = PolynomialRing(Zmod(n), implementation=<span class="hljs-string">&#x27;NTL&#x27;</span>)<br>((x*r + M)^e - c).monic().small_roots()<br><span class="hljs-comment"># 810968823598060539864535</span><br><span class="hljs-comment">#python</span><br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> long_to_bytes<br><span class="hljs-built_in">print</span>(long_to_bytes(<span class="hljs-number">810968823598060539864535</span> * r + M))<br></code></pre></td></tr></table></figure><p>另一种思路，求不出来，暂时不知哪里出错了。<br>$$<br>M&#x3D;m\ mod\ r\quad &#x3D;&#x3D;&gt;\quad M^e&#x3D;m^e\ mod\ r<br>$$</p><p>转换成<br>$$<br>c&#x3D;M^e+k∗n \ mod\ r<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br>n = <span class="hljs-number">131552964273731742744001439326470035414270864348139594004117959631286500198956302913377947920677525319260242121507196043323292374736595943942956194902814842206268870941485429339132421676367167621812260482624743821671183297023718573293452354284932348802548838847981916748951828826237112194142035380559020560287</span> <br>e = <span class="hljs-number">3</span><br>c = <span class="hljs-number">46794664006708417132147941918719938365671485176293172014575392203162005813544444720181151046818648417346292288656741056411780813044749520725718927535262618317679844671500204720286218754536643881483749892207516758305694529993542296670281548111692443639662220578293714396224325591697834572209746048616144307282</span><br>M = <span class="hljs-number">4159518144549137412048572485195536187606187833861349516326031843059872501654790226936115271091120509781872925030241137272462161485445491493686121954785558</span><br>r = <span class="hljs-number">7996728164495259362822258548434922741290100998149465194487628664864256950051236186227986990712837371289585870678059397413537714250530572338774305952904473</span><br>R.&lt;x&gt; = PolynomialRing(Zmod(r), implementation=<span class="hljs-string">&#x27;NTL&#x27;</span>)<br>f = M^e+x*n-c<br>x0 = f.monic().small_roots(X = r)<br><span class="hljs-built_in">print</span>(x0)<br><span class="hljs-comment">#输出为空</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Copperstudy</title>
    <link href="/2022/03/22/Copperstudy/"/>
    <url>/2022/03/22/Copperstudy/</url>
    
    <content type="html"><![CDATA[<hr><p>最近遇到一个很不错的题【强网杯2019 Copperstudy】，里面包含大多数Coppersmith攻击，故以此题来分析其中出现的不同情况的攻击方式。</p><hr><p>Coppersmith 可以用于求多项式的小根，经常用于 RSA 攻击中“已知某些二进制位，求剩余位”这一类问题。</p><hr><h1 id="d0-hash爆破"><a href="#d0-hash爆破" class="headerlink" title="d0:hash爆破"></a>d0:hash爆破</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">d0</span>(<span class="hljs-params">hashstr,<span class="hljs-built_in">str</span></span>):<br>    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        <span class="hljs-keyword">for</span> b <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>            <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>                s = <span class="hljs-built_in">str</span>+a.to_bytes(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;big&#x27;</span>)+b.to_bytes(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;big&#x27;</span>)+c.to_bytes(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;big&#x27;</span>)<br>                <span class="hljs-keyword">if</span> hashlib.sha256(s).hexdigest() == hashstr:<br>                    <span class="hljs-keyword">return</span> binascii.hexlify(s)<br><br>sh = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-number">29418</span>)<br>sh.recvline()<br>sh.recvuntil(<span class="hljs-string">b&#x27;=&#x27;</span>)<br>hashstr = sh.recvline()[:-<span class="hljs-number">1</span>].decode()<br>sh.recvuntil(<span class="hljs-string">b&#x27;=&#x27;</span>)<br><span class="hljs-built_in">str</span> = binascii.unhexlify(sh.recvline()[:-<span class="hljs-number">1</span>])<br>sh.recvline()<br>sh.sendline(d0(hashstr,<span class="hljs-built_in">str</span>))<br><span class="hljs-built_in">print</span>(sh.recvline())<br></code></pre></td></tr></table></figure><h1 id="d1-已知p高位求低位"><a href="#d1-已知p高位求低位" class="headerlink" title="d1:已知p高位求低位"></a>d1:已知p高位求低位</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">e = <br>n = <br>phigh = <br>R.&lt;x&gt; = PolynomialRing(Zmod(n))<br>p = phigh + x<br>x0 = p.small_roots(X = <span class="hljs-number">2</span>^<span class="hljs-number">388</span>,beta = <span class="hljs-number">0.4</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(x0)<br></code></pre></td></tr></table></figure><h1 id="d2-已知m高位求低位"><a href="#d2-已知m高位求低位" class="headerlink" title="d2:已知m高位求低位"></a>d2:已知m高位求低位</h1><p>$$<br>highm &#x3D; 2^{72}*m_{h72}\quad 和\quad<br>c≡(highm+x)^e\ mod\ n<br>$$</p><p>转换成sage方程：<br>$$<br>f &#x3D; (highm+x)^e - c &#x3D; 0<br>$$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">n = <br>e = <br>c = <br>highm = <br><br>R.&lt;x&gt; = PolynomialRing(Zmod(n), implementation=<span class="hljs-string">&#x27;NTL&#x27;</span>)<br><br>f = (highm+x)^e - c<br>x0 = f.small_roots()[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(x0)<br><br>m = highm+x0<br><span class="hljs-built_in">print</span>(m)<br></code></pre></td></tr></table></figure><h1 id="d3-已知d低位求高位"><a href="#d3-已知d低位求高位" class="headerlink" title="d3:已知d低位求高位"></a>d3:已知d低位求高位</h1><p>d的低512bits<br>$$<br>e*d ≡ 1\ mod \ φ(n)\<br>&#x3D;&gt;e*d &#x3D; 1+k*(p-1)*(q-1)<br>$$<br>两边对$2^{512}$取模，得：<br>$$<br>e*d_{low} ≡ 1 + k*(n-p-q+1)\ mod\ 2^{512}<br>$$<br>为了让上式成为单变量等式（假定k已知），两边同乘p（或q），得：<br>$$<br>e*d_{low}*p ≡ 1 + k*(n*p-p^2-n-p)\ mod\ 2^{512}<br>$$<br>解此方程可得到p的低512bits，再通过类似d2的方法求其高位，从而得到p,q。</p><p>需要注意的是k是未知的，需要枚举其值。参考他人博客，应该枚举前几个就行了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getp</span>(<span class="hljs-params">n,p_list</span>):<br>    <br>    R.&lt;x&gt; = PolynomialRing(Zmod(n), implementation=<span class="hljs-string">&#x27;NTL&#x27;</span>)<br>    <span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> p_list:<br>        f = x*<span class="hljs-number">2</span>^<span class="hljs-number">512</span> + each<br>        x0 = f.monic().small_roots(X = <span class="hljs-number">2</span>^<span class="hljs-number">128</span>, beta = <span class="hljs-number">0.4</span>)<br>        <span class="hljs-keyword">if</span> x0:<br>            <span class="hljs-keyword">return</span> f(x0[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">d3</span>(<span class="hljs-params">d_low,n,c,e</span>):<br>    <br>    p_list = []<br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">4</span>):<br>        p = var(<span class="hljs-string">&#x27;p&#x27;</span>)<br>        f = solve_mod([<span class="hljs-number">3</span>*p*d_low == p+k*(n*p-p^<span class="hljs-number">2</span>-n+p)],<span class="hljs-number">2</span>^<span class="hljs-number">512</span>)<br>        p_list += [<span class="hljs-built_in">int</span>(x[<span class="hljs-number">0</span>]) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> f]<br>    <span class="hljs-comment">#print(p_list)    </span><br>    p = <span class="hljs-built_in">int</span>(getp(n,p_list))<br>    q = n//p<br>    d = inverse_mod(e,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>    m = <span class="hljs-built_in">pow</span>(c,d,n)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(m)[<span class="hljs-number">2</span>:])<br>    <br>n = <br>c = <br>d_low = <br>e = <span class="hljs-number">3</span><br><br>d3(d_low,n,c,e)<br></code></pre></td></tr></table></figure><h1 id="d4-广播攻击"><a href="#d4-广播攻击" class="headerlink" title="d4:广播攻击"></a>d4:广播攻击</h1><p>利用中国剩余定理求解。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br>e=<span class="hljs-number">3</span><br>n1=<span class="hljs-number">78642188663937191491235684351005990853149481644703243255021321296087539054265733392095095639539412823093600710316645130404423641473150336492175402885270861906530337207734106926328737198871118125840680572148601743121884788919989184318198417654263598170932154428514561079675550090698019678767738203477097731989</span><br>c1=<span class="hljs-number">23419685303892339080979695469481275906709035609088426118328601771163101123641599051556995351678670765521269546319724616458499631461037359417701720430452076029312714313804716888119910334476982840024696320503747736428099717113471541651211596481005191146454458591558743268791485623924245960696651150688621664860</span><br>n2=<span class="hljs-number">98174485544103863705821086588292917749386955237408645745685476234349659452606822650329076955303471252833860010724515777826660887118742978051231030080666542833950748806944312437614585352818344599399156268450521239843157288915059003487783576003027303399985723834248634230998110618288843582573006048070816520647</span><br>c2=<span class="hljs-number">72080679612442543693944655041130370753964497034378634203383617624269927191363529233872659451561571441107920350406295389613006330637565645758727103723546610079332161151567096389071050158035757745766399510575237344950873632114050632573903701015749830874081198250578516967517980592506626547273178363503100507676</span><br><br>M = CRT([c1,c2],[n1,n2])<br>m = gmpy2.iroot(M,<span class="hljs-number">3</span>)[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(m)[<span class="hljs-number">2</span>:])<br></code></pre></td></tr></table></figure><h1 id="d5-ranklin-Reiter-相关消息攻击"><a href="#d5-ranklin-Reiter-相关消息攻击" class="headerlink" title="d5:ranklin-Reiter 相关消息攻击"></a>d5:ranklin-Reiter 相关消息攻击</h1><p>$$<br>\begin{cases}<br>c_1 ≡ m^e\ mod\ n<br>\\<br>c_2 ≡ (m+1)^e\ mod\ n<br>\end{cases}<br>&#x3D;&#x3D;&gt;<br>\begin{cases}<br>m^e-c_1&#x3D;0<br>\\<br>(m+1)^e-c_2&#x3D;0<br>\end{cases}<br>$$</p><p>既然已知$m$是上述两方程的根，说明其公约式含$(x-m)$。</p><p>(因为方程可以化成$(x-x_1)*(x-x_2)*…*(x-x_e)$)</p><p>于是乎，对两个方程求公约式即可（sagemath是真的强大，这都能求，代码类似求两个数的公约数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">gcd</span>(<span class="hljs-params">a,b</span>):<br>    <span class="hljs-keyword">if</span> b == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> a.monic()<br>    <span class="hljs-keyword">else</span>: <br>        <span class="hljs-keyword">return</span> gcd(b,a%b)<br><br>n = <br>c1 = <br>c2 = <br>e = <br><br>R.&lt;x&gt; = PolynomialRing(Zmod(n))<br>f1 = x^e - c1<br>f2 = (x+<span class="hljs-number">1</span>)^e - c2<br><br>g = gcd(f1,f2)<br><span class="hljs-comment">#print(g)</span><br><span class="hljs-comment">#print(g.coefficients())#求各项的系数，按次数从低到高排列</span><br>m = n - g.coefficients()[<span class="hljs-number">0</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(m)[<span class="hljs-number">2</span>:])<br></code></pre></td></tr></table></figure><h1 id="d6-Boneh-Durfee-攻击"><a href="#d6-Boneh-Durfee-攻击" class="headerlink" title="d6:Boneh Durfee 攻击"></a>d6:Boneh Durfee 攻击</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">[+]n= <br>[+]d=random.getrandbits(<span class="hljs-number">1024</span>*<span class="hljs-number">0.270</span>)<br>[+]e=invmod(d,phin)<br>[+]<span class="hljs-built_in">hex</span>(e)=<br>[+]m=random.getrandbits(<span class="hljs-number">512</span>)<br>[+]c=<span class="hljs-built_in">pow</span>(m,e,n)=<br></code></pre></td></tr></table></figure><p>已知$e，d≤n^{0.27}$。使用</p><p><a href="https://github.com/mimoo/RSA-and-LLL-attacks/blob/master/boneh_durfee.sage">Boneh Durfee 攻击</a></p><hr><p>参考：</p><p><a href="https://www.ruanx.net/coppersmith/">Coppersmith 攻击 (ruanx.net)</a></p>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Coppersmith</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>D^3CTF2022</title>
    <link href="/2022/03/18/D%5E3CTF%202022/"/>
    <url>/2022/03/18/D%5E3CTF%202022/</url>
    
    <content type="html"><![CDATA[<h1 id="d3factor"><a href="#d3factor" class="headerlink" title="d3factor"></a>d3factor</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> bytes_to_long, getPrime<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> msg<br><span class="hljs-keyword">from</span> sympy <span class="hljs-keyword">import</span> nextprime<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> invert<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><br>flag = <span class="hljs-string">&#x27;d3ctf&#123;&#x27;</span>+md5(msg).hexdigest()+<span class="hljs-string">&#x27;&#125;&#x27;</span><br>p = getPrime(<span class="hljs-number">256</span>)<br>q = getPrime(<span class="hljs-number">256</span>)<br><span class="hljs-keyword">assert</span> p &gt; q<br>n = p * q<br>e = <span class="hljs-number">0x10001</span><br>m = bytes_to_long(msg)<br>c = <span class="hljs-built_in">pow</span>(m, e, n)<br><br>N = <span class="hljs-built_in">pow</span>(p, <span class="hljs-number">7</span>) * q<br>phi = <span class="hljs-built_in">pow</span>(p, <span class="hljs-number">6</span>) * (p - <span class="hljs-number">1</span>) * (q - <span class="hljs-number">1</span>)<br>d1 = getPrime(<span class="hljs-number">2000</span>)<br>d2 = nextprime(d1 + getPrime(<span class="hljs-number">1000</span>))<br>e1 = invert(d1, phi)<br>e2 = invert(d2, phi)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;c = <span class="hljs-subst">&#123;c&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;N = <span class="hljs-subst">&#123;N&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e1 = <span class="hljs-subst">&#123;e1&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;e2 = <span class="hljs-subst">&#123;e2&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><p>解析：</p><p><a href="https://eprint.iacr.org/2015/399.pdf">399.pdf (iacr.org)</a></p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031022272.png"/><p>即利用$e_1*e_2*(d1-d2)≡e_2-e_1\ mod\ φ(N)≈e_2-e1\ mod\ N$，求解方程$e_1*e_2*x - (e_2-e_1) &#x3D; 0$ 在模N下的解。</p><p>（貌似sage中未知数x前系数得为1）</p><p>另外这里的c长度远小于N的长度，故解密时$n&#x3D;p*q$。</p><p>sage</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><br>N = <span class="hljs-number">1476751427633071977599571983301151063258376731102955975364111147037204614220376883752032253407881568290520059515340434632858734689439268479399482315506043425541162646523388437842149125178447800616137044219916586942207838674001004007237861470176454543718752182312318068466051713087927370670177514666860822341380494154077020472814706123209865769048722380888175401791873273850281384147394075054950169002165357490796510950852631287689747360436384163758289159710264469722036320819123313773301072777844457895388797742631541101152819089150281489897683508400098693808473542212963868834485233858128220055727804326451310080791</span><br>e1 = <span class="hljs-number">425735006018518321920113858371691046233291394270779139216531379266829453665704656868245884309574741300746121946724344532456337490492263690989727904837374279175606623404025598533405400677329916633307585813849635071097268989906426771864410852556381279117588496262787146588414873723983855041415476840445850171457530977221981125006107741100779529209163446405585696682186452013669643507275620439492021019544922913941472624874102604249376990616323884331293660116156782891935217575308895791623826306100692059131945495084654854521834016181452508329430102813663713333608459898915361745215871305547069325129687311358338082029</span><br>e2 = <span class="hljs-number">1004512650658647383814190582513307789549094672255033373245432814519573537648997991452158231923692387604945039180687417026069655569594454408690445879849410118502279459189421806132654131287284719070037134752526923855821229397612868419416851456578505341237256609343187666849045678291935806441844686439591365338539029504178066823886051731466788474438373839803448380498800384597878814991008672054436093542513518012957106825842251155935855375353004898840663429274565622024673235081082222394015174831078190299524112112571718817712276118850981261489528540025810396786605197437842655180663611669918785635193552649262904644919</span><br>a = (e2-e1)*gmpy2.invert(e1*e2,N)<br>R.&lt;x&gt; = PolynomialRing(Zmod(N),implementation=<span class="hljs-string">&#x27;NTL&#x27;</span>)<br>f = x-a<br>x0 = f.small_roots(X = <span class="hljs-number">2</span>^<span class="hljs-number">1000</span>,beta = <span class="hljs-number">0.4</span>)<br><span class="hljs-built_in">print</span>(x0)<br></code></pre></td></tr></table></figure><p>python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> md5<br><br>c = <span class="hljs-number">2420624631315473673388732074340410215657378096737020976722603529598864338532404224879219059105950005655100728361198499550862405660043591919681568611707967</span><br>N = <span class="hljs-number">1476751427633071977599571983301151063258376731102955975364111147037204614220376883752032253407881568290520059515340434632858734689439268479399482315506043425541162646523388437842149125178447800616137044219916586942207838674001004007237861470176454543718752182312318068466051713087927370670177514666860822341380494154077020472814706123209865769048722380888175401791873273850281384147394075054950169002165357490796510950852631287689747360436384163758289159710264469722036320819123313773301072777844457895388797742631541101152819089150281489897683508400098693808473542212963868834485233858128220055727804326451310080791</span><br>e1 = <span class="hljs-number">425735006018518321920113858371691046233291394270779139216531379266829453665704656868245884309574741300746121946724344532456337490492263690989727904837374279175606623404025598533405400677329916633307585813849635071097268989906426771864410852556381279117588496262787146588414873723983855041415476840445850171457530977221981125006107741100779529209163446405585696682186452013669643507275620439492021019544922913941472624874102604249376990616323884331293660116156782891935217575308895791623826306100692059131945495084654854521834016181452508329430102813663713333608459898915361745215871305547069325129687311358338082029</span><br>e2 = <span class="hljs-number">1004512650658647383814190582513307789549094672255033373245432814519573537648997991452158231923692387604945039180687417026069655569594454408690445879849410118502279459189421806132654131287284719070037134752526923855821229397612868419416851456578505341237256609343187666849045678291935806441844686439591365338539029504178066823886051731466788474438373839803448380498800384597878814991008672054436093542513518012957106825842251155935855375353004898840663429274565622024673235081082222394015174831078190299524112112571718817712276118850981261489528540025810396786605197437842655180663611669918785635193552649262904644919</span><br>e = <span class="hljs-number">0x10001</span><br>x = <span class="hljs-number">1476751427633071977599571983301151063258376731102955975364111147037204614220376883752032253407881568290520059515340434632858734689439268479399482315506043425541162646523388437842149125178447800616137044219916586942207838674001004007237861470176454543718752182312318068466051713087927370670177514666860822341380494148050832401609562069841131611670608508889564903156115171543356434938854665775998209034026454583918190592316542096833683522232732078346945883792128428219017665904611238598515356080299964332522186719141840239751107772675611703424971072329706974374008179321418610378586680426547416872428073384036373775613</span><br><br>tmp = e1*e2*x-(e2-e1)<br>p6 = gmpy2.gcd(tmp,N)<br>//<span class="hljs-built_in">print</span>(p6)<br>p = gmpy2.iroot(p6,<span class="hljs-number">6</span>)[<span class="hljs-number">0</span>]<br>//<span class="hljs-built_in">print</span>(p)<br>q = N//(p**<span class="hljs-number">7</span>)<br>phi = (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d = gmpy2.invert(e,phi)<br>m = <span class="hljs-built_in">pow</span>(c,d,p*q)<br><br>flag = <span class="hljs-string">&#x27;d3ctf&#123;&#x27;</span>+md5(long_to_bytes(m)).hexdigest()+<span class="hljs-string">&#x27;&#125;&#x27;</span><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h1 id="d3qcg"><a href="#d3qcg" class="headerlink" title="d3qcg"></a>d3qcg</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> flag<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">assert</span> <span class="hljs-string">b&#x27;d3ctf&#x27;</span> <span class="hljs-keyword">in</span> flag<br>Bits = <span class="hljs-number">512</span><br>UnKnownBits = <span class="hljs-number">146</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">QCG</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,bit_length</span>):<br>        p = getPrime(bit_length)<br>        a = randint(<span class="hljs-number">0</span>,p)<br>        c = randint(<span class="hljs-number">0</span>,p)<br>        self._key = &#123;<span class="hljs-string">&#x27;a&#x27;</span>:a,<span class="hljs-string">&#x27;c&#x27;</span>:c,<span class="hljs-string">&#x27;p&#x27;</span>:p&#125;<br>        self.secret = randint(<span class="hljs-number">0</span>,p)<br>        self.high = []<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">Qnext</span>(<span class="hljs-params">self,num</span>):<br>        <span class="hljs-keyword">return</span> ((self._key[<span class="hljs-string">&#x27;a&#x27;</span>])*num**<span class="hljs-number">2</span>+self._key[<span class="hljs-string">&#x27;c&#x27;</span>])%self._key[<span class="hljs-string">&#x27;p&#x27;</span>]<br>    <br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">hint</span>(<span class="hljs-params">self</span>):<br>        num = self.secret<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>            num = self.Qnext(num)<br>            self.high.append(num&gt;&gt;UnKnownBits)<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_key</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._key<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_hint</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.high<br><br>Q1 = QCG(Bits)<br><span class="hljs-built_in">print</span>(Q1.get_key())<br><span class="hljs-comment">#&#123;&#x27;a&#x27;: 3591518680290719943596137190796366296374484536382380061852237064647969442581391967815457547858969187198898670115651116598727939742165753798804458359397101, &#x27;c&#x27;: 6996824752943994631802515921125382520044917095172009220000813718617441355767447428067985103926211738826304567400243131010272198095205381950589038817395833, &#x27;p&#x27;: 7386537185240346459857715381835501419533088465984777861268951891482072249822526223542514664598394978163933836402581547418821954407062640385756448408431347&#125;</span><br>Q1.hint()<br><span class="hljs-built_in">print</span>(Q1.get_hint())<br><span class="hljs-comment">#[67523583999102391286646648674827012089888650576715333147417362919706349137337570430286202361838682309142789833, 70007105679729967877791601360700732661124470473944792680253826569739619391572400148455527621676313801799318422]</span><br>enc = bytes_to_long(hashlib.sha512(<span class="hljs-string">b&#x27;%d&#x27;</span>%(secret)).digest())^bytes_to_long(flag)<br><span class="hljs-built_in">print</span>(enc)<br><span class="hljs-comment"># 6176615302812247165125832378994890837952704874849571780971393318502417187945089718911116370840334873574762045429920150244413817389304969294624001945527125</span><br></code></pre></td></tr></table></figure><p>解析：</p><p>翻译一下大概就是这样。</p><p>给出公式如下：<br>$$<br>num1 &#x3D; (a*secret^2+c)%p<br>$$<br>以及<br>$$<br>num2 &#x3D; (a*num1^2+c)%p<br>$$<br>现有<code>num1&gt;&gt;146</code>和<code>num2&gt;&gt;146</code>的结果<code>[h1,h2]</code>，求<code>secret</code></p><p>需要进行二元<code>Coppersmith</code>。（淦！一元的都不怎么熟悉，还是别人的脚本香😅）</p><p>由于最后求的secret需要开平方。（ 由于 $p &#x3D; 4k + 3$，所以$x&#x3D; a^{(p+1)&#x2F;&#x2F;4}\ mod\ p$ ）</p><p><a href="https://rosettacode.org/wiki/Tonelli-Shanks_algorithm#Python">Tonelli-Shanks algorithm - Rosetta Code</a>(代码)</p><p><a href="https://handwiki.org/wiki/Tonelli%E2%80%93Shanks_algorithm#cite_note-dickson-3">Tonelli–Shanks algorithm - HandWiki</a>（理论）</p><p><a href="https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm%EF%BC%88%E7%90%86%E8%AE%BA%EF%BC%89">https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm（理论）</a></p><p><a href="https://blog.csdn.net/qq_43698421/article/details/107452334"> Rabin加密算法_Dragon Liu的博客-CSDN博客_rabin算法</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#sage</span><br><span class="hljs-keyword">import</span> itertools<br>a = <span class="hljs-number">3591518680290719943596137190796366296374484536382380061852237064647969442581391967815457547858969187198898670115651116598727939742165753798804458359397101</span><br>c = <span class="hljs-number">6996824752943994631802515921125382520044917095172009220000813718617441355767447428067985103926211738826304567400243131010272198095205381950589038817395833</span><br>p = <span class="hljs-number">7386537185240346459857715381835501419533088465984777861268951891482072249822526223542514664598394978163933836402581547418821954407062640385756448408431347</span><br>ans = (<span class="hljs-number">50712831100361370819145886978385347931029768</span>, <span class="hljs-number">9089234402520025586415667640120652372860183</span>)<br>high = [<span class="hljs-number">67523583999102391286646648674827012089888650576715333147417362919706349137337570430286202361838682309142789833</span>, <span class="hljs-number">70007105679729967877791601360700732661124470473944792680253826569739619391572400148455527621676313801799318422</span>]<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">small_roots</span>(<span class="hljs-params">f, bounds, m=<span class="hljs-number">1</span>, d=<span class="hljs-literal">None</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> d:<br>        d = f.degree()<br>    R = f.base_ring()<br>    N = R.cardinality()<br>    f /= f.coefficients().pop(<span class="hljs-number">0</span>)<br>    f = f.change_ring(ZZ)<br>    G = <span class="hljs-type">Sequence</span>([], f.parent())<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m+<span class="hljs-number">1</span>):<br>        base = N^(m-i) * f^i<br>        <span class="hljs-keyword">for</span> shifts <span class="hljs-keyword">in</span> itertools.product(<span class="hljs-built_in">range</span>(d), repeat=f.nvariables()):<br>            g = base * prod(<span class="hljs-built_in">map</span>(power, f.variables(), shifts))<br>            G.append(g)<br>    B, monomials = G.coefficient_matrix()<br>    monomials = vector(monomials)<br>    factors = [monomial(*bounds) <span class="hljs-keyword">for</span> monomial <span class="hljs-keyword">in</span> monomials]<br>    <span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>        B.rescale_col(i, factor)<br>    B = B.dense_matrix().LLL()<br>    B = B.change_ring(QQ)<br>    <span class="hljs-keyword">for</span> i, factor <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(factors):<br>        B.rescale_col(i, <span class="hljs-number">1</span>/factor)<br>    H = <span class="hljs-type">Sequence</span>([], f.parent().change_ring(QQ))<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> <span class="hljs-built_in">filter</span>(<span class="hljs-literal">None</span>, B*monomials):<br>        H.append(h)<br>        I = H.ideal()<br>        <span class="hljs-keyword">if</span> I.dimension() == -<span class="hljs-number">1</span>:<br>            H.pop()<br>        <span class="hljs-keyword">elif</span> I.dimension() == <span class="hljs-number">0</span>:<br>            roots = []<br>            <span class="hljs-keyword">for</span> root <span class="hljs-keyword">in</span> I.variety(ring=ZZ):<br>                root = <span class="hljs-built_in">tuple</span>(R(root[var]) <span class="hljs-keyword">for</span> var <span class="hljs-keyword">in</span> f.variables())<br>                roots.append(root)<br>            <span class="hljs-keyword">return</span> roots<br>    <span class="hljs-keyword">return</span> []<br><br>R.&lt;x1,x2&gt; = PolynomialRing(Zmod(p))<br>f = a*(high[<span class="hljs-number">0</span>]*(<span class="hljs-number">2</span>^<span class="hljs-number">146</span>)+x1)^<span class="hljs-number">2</span> + c - (high[<span class="hljs-number">1</span>]*<span class="hljs-number">2</span>^<span class="hljs-number">146</span>+x2)<br><span class="hljs-built_in">print</span>(small_roots(f,[<span class="hljs-number">2</span>^<span class="hljs-number">146</span>, <span class="hljs-number">2</span>^<span class="hljs-number">146</span>],m =<span class="hljs-number">4</span>,d = <span class="hljs-number">4</span>))<br><br><span class="hljs-comment">#python</span><br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Legendre</span>(<span class="hljs-params">a, p</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(a, (p-<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>, p)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Tonelli_Shanks</span>(<span class="hljs-params">a, p</span>):<br>    <span class="hljs-keyword">assert</span> Legendre(a, p) == <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span>(p % <span class="hljs-number">4</span> == <span class="hljs-number">3</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">pow</span>(a, (p+<span class="hljs-number">1</span>)//<span class="hljs-number">4</span>, p)<br>    s, q = <span class="hljs-number">0</span>, p-<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span> q &amp; <span class="hljs-number">1</span> == <span class="hljs-number">0</span>:<br>        q &gt;&gt;= <span class="hljs-number">1</span><br>        s += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">for</span> z <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, p):<br>        <span class="hljs-keyword">if</span> Legendre(z, p) == p-<span class="hljs-number">1</span>:<br>            c = <span class="hljs-built_in">pow</span>(z, q, p)<br>            <span class="hljs-keyword">break</span><br>    r, t, m = <span class="hljs-built_in">pow</span>(a, (q+<span class="hljs-number">1</span>)//<span class="hljs-number">2</span>, p), <span class="hljs-built_in">pow</span>(a, q, p), s<br>    temp, i = <span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> t % p != <span class="hljs-number">1</span>:<br>        i += <span class="hljs-number">1</span><br>        temp = <span class="hljs-built_in">pow</span>(t, <span class="hljs-number">2</span>**i, p)<br>        <span class="hljs-keyword">if</span> temp % p == <span class="hljs-number">1</span>:<br>            b = <span class="hljs-built_in">pow</span>(c, <span class="hljs-number">2</span>**(m-<span class="hljs-number">1</span>-i), p)<br>            r = r * b % p<br>            c = b * b % p<br>            t = t * c % p<br>            m = i<br>            i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">return</span> r<br><br>a = <span class="hljs-number">3591518680290719943596137190796366296374484536382380061852237064647969442581391967815457547858969187198898670115651116598727939742165753798804458359397101</span><br>c = <span class="hljs-number">6996824752943994631802515921125382520044917095172009220000813718617441355767447428067985103926211738826304567400243131010272198095205381950589038817395833</span><br>p = <span class="hljs-number">7386537185240346459857715381835501419533088465984777861268951891482072249822526223542514664598394978163933836402581547418821954407062640385756448408431347</span><br>ans = (<span class="hljs-number">50712831100361370819145886978385347931029768</span>, <span class="hljs-number">9089234402520025586415667640120652372860183</span>)<br>high = [<span class="hljs-number">67523583999102391286646648674827012089888650576715333147417362919706349137337570430286202361838682309142789833</span>, <span class="hljs-number">70007105679729967877791601360700732661124470473944792680253826569739619391572400148455527621676313801799318422</span>]<br>enc = <span class="hljs-number">6176615302812247165125832378994890837952704874849571780971393318502417187945089718911116370840334873574762045429920150244413817389304969294624001945527125</span><br>data = (high[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-number">146</span>) + ans[<span class="hljs-number">0</span>]<br>secret = (data - c) * gmpy2.invert(a, p) % p<br>secret = Tonelli_Shanks(secret, p)<br><span class="hljs-built_in">print</span>(secret)<br>flag = bytes_to_long(hashlib.sha512(<span class="hljs-string">b&#x27;%d&#x27;</span>%(secret)).digest())^enc<br><span class="hljs-built_in">print</span>(long_to_bytes(flag))<br></code></pre></td></tr></table></figure><h1 id="d3bug"><a href="#d3bug" class="headerlink" title="d3bug"></a>d3bug</h1><p>xor模式下可以从输出推出message的前34位。</p><p>假设 <code>mask = &#39;10100100&#39;</code>, $R&#x3D;m_0m_1…m_7$</p><p>第一轮xor,得<br>$$<br>lastbit_0&#x3D;\overline m_0⊕m_1⊕\overline m_2⊕m_3⊕m_4⊕\overline m_5⊕m_6⊕m_7<br>$$<br>第二轮xor，得<br>$$<br>lastbit_1&#x3D;\overline m_1⊕m_2⊕\overline m_3⊕m_4⊕m_5⊕\overline m_6⊕m_7⊕lastbit_0<br>$$<br>化简 $lastbit_1$,得<br>$$<br>lastbit_1&#x3D;\overline m_0⊕1&#x3D;m_0\<br>(其中⊕1得个数等于mask中1的个数和位置而定)<br>$$<br>剩下的30位可以利用&amp;模式下的输出构造矩阵方程求解。</p><hr><p>参考:</p><p><a href="https://blog.wm-team.cn/index.php/archives/13/">AntCTF &amp; Dˆ3CTF 2022 By W&amp;M - W&amp;M Team (wm-team.cn)</a></p>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RSA</tag>
      
      <tag>Coppersmith</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SUSCTF2022</title>
    <link href="/2022/03/18/SUSCTF2022/"/>
    <url>/2022/03/18/SUSCTF2022/</url>
    
    <content type="html"><![CDATA[<h2 id="large-case"><a href="#large-case" class="headerlink" title="large case"></a>large case</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> secret <span class="hljs-keyword">import</span> e,message<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pad</span>(<span class="hljs-params">s</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(s)&lt;<span class="hljs-number">3</span>*L:<br>        s+=<span class="hljs-built_in">bytes</span>(<span class="hljs-number">3</span>*L-<span class="hljs-built_in">len</span>(s))<br>    <span class="hljs-keyword">return</span> s<br><br>L=<span class="hljs-number">128</span><br>p=<br>q=<br>r=<br>n=p*q*r<br><br><span class="hljs-keyword">assert</span> isPrime(GCD(e,p-<span class="hljs-number">1</span>)) <span class="hljs-keyword">and</span> isPrime(GCD(e,q-<span class="hljs-number">1</span>)) <span class="hljs-keyword">and</span> isPrime(GCD(e,r-<span class="hljs-number">1</span>)) <span class="hljs-keyword">and</span> e==GCD(e,p-<span class="hljs-number">1</span>)*GCD(e,q-<span class="hljs-number">1</span>)*GCD(e,r-<span class="hljs-number">1</span>)<br><span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(message)&gt;L <span class="hljs-keyword">and</span> <span class="hljs-built_in">len</span>(message)&lt;<span class="hljs-number">2</span>*L<br><span class="hljs-keyword">assert</span> <span class="hljs-string">b&#x27;SUSCTF&#x27;</span> <span class="hljs-keyword">in</span> message<br>m=bytes_to_long(pad(message))<br><br>c=<span class="hljs-built_in">pow</span>(m,e,n)<br><span class="hljs-built_in">print</span>(c)<br></code></pre></td></tr></table></figure><p>根据$e&#x3D;&#x3D;GCD(e,p-1)*GCD(e,q-1)*GCD(e,r-1)$，设$e &#x3D; e_pe_qe_r$。<br>$$<br>c≡m^{e_pe_qe_r}≡(m^{e_pe_q})^{e_r}\ mod\ n<br>$$<br>继而<br>$$<br>c≡(m^{e_pe_q})^{e_r}\ mod\ (r-1)<br>$$<br>根据费马小定理有：<br>$$<br>c^{(r-1)&#x2F;e_r}≡(m^{e_pe_q})^{r-1}≡1\ mod\ (r-1)<br>$$<br>于是求得$e_r$，同理$e_p,e_q$也如此。</p><p>现在，我们求得了e，但gcd(e,(p-1)<em>(q-1)</em>(r-1)) &#x3D; e，并不能直接解密，可以用AMM算法求解。</p><p>但这里根据官方题解用一个更快的方法。（算法来源：<a href="https://eprint.iacr.org/2020/1059.pdf">1059.pdf (iacr.org)</a>）（稀里糊涂，英语水平有限，看不懂）</p><p>但满足如下条件：</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031028950.png"/><p>由于该算法的时间复杂度为O(e)，即与e成线性关系，因此我们可以通过缩短e来缩短时间。</p><p>根据题目中$len(message)&gt;L\ and\ len(message)&lt;2*L$，而通过$pad$函数可以发现，message的填充部分&gt;1024bit。因此可以将n缩小为pq，e缩小为$e_pe_q$。<br>$$<br>c ≡ m^{e} ≡ (m*2^{1024})^e\ mod\ n<br>$$<br>于是<br>$$<br>c_1 &#x3D; c*2^{-1024e}≡m^e\ mod\ n<br>$$<br>简化模数<br>$$<br>c_1 ≡ m^e\ mod\ (p*q)<br>$$<br>这时候再将 $e_r$ 消除<br>$$<br>e_rd_r ≡ 1\ mod\ (p-1)*(q-1)\<br>c_0 &#x3D; c_1^{d_r} ≡ m^{ed_r} ≡ m^{e_pe_q}\ mod\ (p*q)<br>$$<br>根据算法描述写出脚本：</p><p>第一步：寻找$g_E$。</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031029653.png"/><p>第二步：找符合的明文</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031029505.png"/><p>其中的$l$为$l&#x3D;g_E^i$。</p><img src="https://raw.githubusercontent.com/gal2xy/blog_img/main//img/202210031029045.png"/><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">import</span> primefac<br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> tqdm<br><br>p=<span class="hljs-number">127846753573603084140032502367311687577517286192893830888210505400863747960458410091624928485398237221748639465569360357083610343901195273740653100259873512668015324620239720302434418836556626441491996755736644886234427063508445212117628827393696641594389475794455769831224080974098671804484986257952189021223</span><br>q=<span class="hljs-number">145855456487495382044171198958191111759614682359121667762539436558951453420409098978730659224765186993202647878416602503196995715156477020462357271957894750950465766809623184979464111968346235929375202282811814079958258215558862385475337911665725569669510022344713444067774094112542265293776098223712339100693</span><br>r=<span class="hljs-number">165967627827619421909025667485886197280531070386062799707570138462960892786375448755168117226002965841166040777799690060003514218907279202146293715568618421507166624010447447835500614000601643150187327886055136468260391127675012777934049855029499330117864969171026445847229725440665179150874362143944727374907</span><br>c=<span class="hljs-number">2832775557487418816663494645849097066925967799754895979829784499040437385450603537732862576495758207240632734290947928291961063611897822688909447511260639429367768479378599532712621774918733304857247099714044615691877995534173849302353620399896455615474093581673774297730056975663792651743809514320379189748228186812362112753688073161375690508818356712739795492736743994105438575736577194329751372142329306630950863097761601196849158280502041616545429586870751042908365507050717385205371671658706357669408813112610215766159761927196639404951251535622349916877296956767883165696947955379829079278948514755758174884809479690995427980775293393456403529481055942899970158049070109142310832516606657100119207595631431023336544432679282722485978175459551109374822024850128128796213791820270973849303929674648894135672365776376696816104314090776423931007123128977218361110636927878232444348690591774581974226318856099862175526133892</span><br><br><span class="hljs-keyword">for</span> ep <span class="hljs-keyword">in</span> primefac.primefac(p-<span class="hljs-number">1</span>):<span class="hljs-comment">#分解出p-1的所有因数</span><br>    <span class="hljs-keyword">if</span> ep&gt;<span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">pow</span>(c%p,(p-<span class="hljs-number">1</span>)//ep,p)==<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">for</span> eq <span class="hljs-keyword">in</span> primefac.primefac(q-<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> eq&gt;<span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">pow</span>(c%q,(q-<span class="hljs-number">1</span>)//eq,q)==<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">break</span><br><span class="hljs-keyword">for</span> er <span class="hljs-keyword">in</span> primefac.primefac(r-<span class="hljs-number">1</span>):<br>    <span class="hljs-keyword">if</span> er&gt;<span class="hljs-number">2</span> <span class="hljs-keyword">and</span> <span class="hljs-built_in">pow</span>(c%r,(r-<span class="hljs-number">1</span>)//er,r)==<span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">break</span><br><br>e=ep*eq*er<br>n=p*q*r<br>e0=ep*eq<br>n0=p*q<br>phi0=(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)<br>d1=gmpy2.invert(er,phi0)<br>c1=c*gmpy2.invert(<span class="hljs-built_in">pow</span>(<span class="hljs-number">256</span>,<span class="hljs-number">128</span>*e,n),n)%n<br>c0=<span class="hljs-built_in">pow</span>(c1,d1,n0)<br><br>g = <span class="hljs-number">1</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    g+=<span class="hljs-number">1</span><br>    gE = <span class="hljs-built_in">pow</span>(g,(p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>)//e0,n0)<br>    <span class="hljs-keyword">if</span> gE != <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">break</span><br><br><span class="hljs-comment">#gE=pow(2,phi0//e0,n0)</span><br>d0=gmpy2.invert(e0,phi0//e0)<br>a0=<span class="hljs-built_in">pow</span>(c0,d0,n0)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> tqdm.tqdm(<span class="hljs-built_in">range</span>(e0)):<br>    m=long_to_bytes(a0)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;SUSCTF&#x27;</span> <span class="hljs-keyword">in</span> m:<br>        flag=m.decode()<br>        <span class="hljs-built_in">print</span>(flag)<br>        <span class="hljs-keyword">break</span><br>    a0=a0*gE%n0<br></code></pre></td></tr></table></figure><hr><p>参考：</p><p><a href="https://github.com/susers/SUSCTF2022_official_wp/tree/main/crypto">SUSCTF2022_official_wp&#x2F;crypto at main · susers&#x2F;SUSCTF2022_official_wp (github.com)</a></p><p><a href="https://eprint.iacr.org/2020/1059.pdf">1059.pdf (iacr.org)</a></p><p><a href="https://team-su.github.io/passages/2022-2-28-SUSCTF/">2022 SUSCTF SU Writeup | TEAM-SU</a></p><p><a href="https://blog.wm-team.cn/index.php/archives/8/#large+case">SUSCTF 2022 By W&amp;M - W&amp;M Team (wm-team.cn)</a></p><p><a href="https://blog.csdn.net/qq_51999772/article/details/123273510">SUSCTF_Crypto_large case_复现_M3ng@L的博客-CSDN博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>RSA</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
